[
  {
    "author-name": "Larry O'Brien",
    "author-email": "lobrien@email.com",
    "author-url": "http://www.knowing.net/",
    "date": "2005-09-08T12:26:21-07:00",
    "content": "Your point is a good one, but it's harmed by your choice of Java as an example. If you chose server-side development as your benchmark, Java would come out ahead of VB in adoption. Meanwhile, your point on the relationship between productivity, performance, and abstraction is strengthened when memory management is taken as the subject: is the abstraction of managed memory a productivity boost? Absolutely. Is it lower in performance? Yes, when compared to a skilled developer. \n\nSaying that Java is/was primarily competitive with VB is too revisionist. Java came out at the beginning of the massive wave of server-side / Web development and crushed C++ and Perl as the preferred environment for that type of programming. Java's original APIs included network and threading libraries that were both easier than any others and standardized, creating a perfect little ecosystem of programmers, educators, and business people, all eager to move into this new realm. \n\nAt that point, server-side portability _was_ important because business people _did not know_ if Microsoft would deliver a stable and scalable server OS. In the mid-to-late 90s, hedging your bets over server-side OS choice was a good decision from both a business and technical perspective.\n\nNow, that's no longer an issue and part of the reason that .NET has more momentum than Java is precisely because the /. crowd is the only one left that thinks that MS hasn't proved itself on the server. "
  },
  {
    "author-name": "Pawel",
    "author-email": "pawel@nospam.org",
    "author-url": "",
    "date": "2005-09-08T21:59:24-07:00",
    "content": "You have made a perfect point about productivity. In late '90, when first Java app servers came out, most of the server development was either on RS6000 or on Solaris. The only abstractions available were those provided by Rogue Wave toolkits and CORBA IDL. So Java introduced an enormous productivity boost for server applications. \n\nAt the same time, however, it was portability which made Java viable economically for IBM, BEA and others. It changed recurring cost of chasing OS/library versions into much smaller cost of upgrades to subsequent JVM levels. SUN has helped a lot in that area with relatively slow pace of innovation between JDK 1.2 and JDK 1.3.\n\nThere is no doubt that portability brings little benefit to developers of business applications. Maybe with exception of programming on Windows/ hosting on Unix scheme. But there would be no Linux and no Java without it.\n"
  },
  {
    "author-name": "DevHawk",
    "author-email": "devhawk@outlook.com",
    "author-url": "",
    "date": "2005-09-13T10:07:22-07:00",
    "content": "Larry, while I apprectiate your comments, I have to disagree with some of your points about Java. Java was originally pushed as a client side technology. Remember the failed WordPerfect for Java project? Sun started pushing Java on the server because of the rise of web servers and the failure of Java on the client. \n\nAs for the stable and scalable server OS point, that would be much easier to agree with if the Java server stack wasn't so obviously cloned from Windows. Also, if you include VBScript under the general heading of VB, I'm not sure that Java would come out ahead of VB in adoption. I don't have access to numbers right this second, but if memory serves, there were ASP than JSP sites out there in the late 90's."
  }
]