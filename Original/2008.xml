<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->


<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>DevHawk</title>
	<link>http://devhawk.net</link>
	<description>Passion * Technology * Ruthless Competence</description>
	<pubDate>Fri, 18 Oct 2013 06:06:31 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://devhawk.net</wp:base_site_url>
	<wp:base_blog_url>http://devhawk.net</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>devhawk</wp:author_login><wp:author_email>harry@devhawk.net</wp:author_email><wp:author_display_name><![CDATA[DevHawk]]></wp:author_display_name><wp:author_first_name><![CDATA[Harry]]></wp:author_first_name><wp:author_last_name><![CDATA[Pierson]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>dale</wp:author_login><wp:author_email>dale@microsoft.com</wp:author_email><wp:author_display_name><![CDATA[Dale Churchward]]></wp:author_display_name><wp:author_first_name><![CDATA[Dale]]></wp:author_first_name><wp:author_last_name><![CDATA[Churchward]]></wp:author_last_name></wp:author>


	

	<item>
		<title>Morning Coffee 133</title>
		<link>http://devhawk.net/2008/01/02/morning-coffee-133/</link>
		<pubDate>Wed, 02 Jan 2008 10:21:53 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://afbe0e2d-4d94-425b-b5c2-f5f418bca1a3</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>I've been off for two weeks, so getting back into "the swing" of things will probably take a day or two - both at work and on my blog. Hope everyone had a happy holiday season.</li><li>I ended <a href="http://devhawk.net/monthview.aspx?year=2007">the year</a> with 245 blog posts, which wasn't quite as many as either of my <a href="http://devhawk.net/monthview.aspx?year=2003">first</a><a href="http://devhawk.net/monthview.aspx?year=2004">two</a> years blogging, but was much more than I had been writing for the <a href="http://devhawk.net/monthview.aspx?year=2005">last</a><a href="http://devhawk.net/monthview.aspx?year=2006">two</a> years.</li><li>It was a <a href="http://www.zune.net">Zune</a> Xmas in the Pierson house. I got a pink Zune for my wife, and my mother and father got Zunes for each other. I got to load them all up with content for Xmas morning. Maybe I'm just used to WMP, but I'm not a huge fan of the Zune software. Yes, it's very pretty but it's missing some fairly basic features like automatic down-sampling lossless music. On the other hand, the on-device experience rocks and my wife is using her Zune regularly. I've got a trip to England coming up in April, and I'm thinking about getting one of the new 80GB ones for the trip.</li><li>They lost any chance of playing for the national championship, but USC sure <a href="http://scores.espn.go.com/ncf/recap?gameId=280010030">looked like a champion yesterday</a>. Seems appropriate for this crazy college football season that if Ohio State doesn't win big, pretty much all the other BCS bowl winners with a legitimate argument to be #1.</li><li>The Caps <a href="http://sports.espn.go.com/nhl/boxscore?gameId=280101023">beat the eastern-conference leading Senators yesterday</a> for the third time this season and the second time in four days. They have 13 points in the last ten games and 10-5-4 since Boudreau took over as coach. If they keep that pace up, they would likely make the playoffs - that would be quite a feat given their horrific start.</li><li>Speaking of hockey, I watched most of the <a href="http://sports.espn.go.com/nhl/recap?gameId=280101002">Winter Classic</a> yesterday, including the game-winning shootout goal by the <a href="http://sports.espn.go.com/nhl/players/profile?playerId=3114">Anointed One</a>. It was really strange but cool to watch a hockey game between snowflakes. I agree with <a href="http://sports.espn.go.com/nhl/columns/story?columnist=burnside_scott&amp;id=3176569">Scott Burnside's take</a> that these outdoor games are good for the league, but shouldn't be a regular part of the season.</li><li>I finished <a href="http://www.xbox.com/games/orangebox">Portal</a> yesterday - that's a <a href="http://www.penny-arcade.com/comic/2007/12/28">fantastic game</a>. I also got <a href="http://www.xbox.com/games/masseffect">Mass Effect</a>, so now I need to decide which to take on first: that or Half-Life 2. </li><li>A few months ago, I was <a href="http://devhawk.net/2007/06/23/Home+Networking+Question.aspx">thinking about</a> using HomePlug for home networking but decided to <a href="http://devhawk.net/2007/07/09/Upgrading+My+Home+Wireless+Network.aspx">upgrade my wireless network</a> instead. But recently I've started streaming movies from my loft computer to my Xbox, and the wireless network isn't always up to the task. I could run CAT5, but there's already an unused coax cable running up to the loft and I wondered if I could just use that? I discovered the <a href="http://www.mocalliance.org/">Multimedia over Coax Alliance</a>, but none of their <a href="http://www.mocalliance.org/en/industry/certified_products.asp">certified products</a> appear to be available. Those products have to share the home coax network with the cable company, but I can dedicate my coax cable. Anyone know a way to use coax to bridge CAT5 networks? Even something DIY?</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1084</wp:post_id>
		<wp:post_date>2008-01-02 10:21:53</wp:post_date>
		<wp:post_date_gmt>2008-01-02 10:21:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-133</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="post_tag" nicename="college-football"><![CDATA[College Football]]></category>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="post_tag" nicename="home-network"><![CDATA[Home Network]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<category domain="post_tag" nicename="xbox-360"><![CDATA[Xbox 360]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[afbe0e2d-4d94-425b-b5c2-f5f418bca1a3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+133]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/02/Morning+Coffee+133]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2008</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>matt.valerio@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>128.146.90.82</wp:comment_author_IP>
			<wp:comment_date>2008-01-02 11:35:53</wp:comment_date>
			<wp:comment_date_gmt>2008-01-02 19:35:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just googled "Ethernet over coax" and found this:
http://www.smarthome.com/30000.html
Looks cool!

]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 134</title>
		<link>http://devhawk.net/2008/01/03/morning-coffee-134/</link>
		<pubDate>Thu, 03 Jan 2008 18:00:42 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://057acc09-25d7-4892-817e-b3c65c3e4ffc</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Bill de Hora <a href="http://www.dehora.net/journal/2007/12/21/durable-and-restful/">responds</a> to a few of my <a href="http://devhawk.net/2007/12/05/Durable+And+RESTful.aspx">Durable and RESTful</a> ideas. He points out that relying on a client-generated ID can be troublesome, and recommends using multiple identifiers - one created by the sender, one by the receiver and one representing the message exchange itself. However, the sender ID is vulnerable to client bugs &amp; tampering as Bill points out, and neither the receiver ID nor the exchange ID can be used to determine if a given message is a duplicate. If you don't trust the sender, is it even possible to determine if a given message is a duplicate? </li><li>Pablo Castro <a href="http://blogs.msdn.com/pablo/archive/2007/12/22/idempotence-on-http-operations.aspx">confirms</a> that there are "practical limits" to what ADO.NET Data Services can do with respect to <a href="http://devhawk.net/2007/12/11/ADONET+Data+Services+And+Idempotence.aspx">idempotence</a>. Nothing in his post was surprising, though I hope it will be more explicitly called out in the final docs. Developers used to the comforting protection of a transaction may be in for a rude awakening. </li><li>Dare Obasanjo has a <a href="http://www.25hoursaday.com/weblog/2008/01/02/DoesC30BeatDynamicLanguagesAtTheirOwnGame.aspx">great post comparing</a> the new features in C# 3.0 to dynamic languages like IronPython. I believe many of the productivity aspects of dynamic languages have little to do with being dynamic.</li><li>Pat Helland <a href="http://blogs.msdn.com/pathelland/archive/2007/12/27/durability-is-in-the-eye-of-the-beholder.aspx">noodles</a> on durability and messaging, two topics near and dear to my heart (probably from working with him for a couple of years). I'm not sure where he's going with this - his conclusion that "Basically, big, complex, and distributed system are big, complex, and distributed" isn't exactly ground-breaking. But his point that "durable" isn't a binary concept is worth more consideration. Also, his description of IMS only looking at the effects of a committed transaction is very similar to how web sites work, though obviously HTTP isn't durable so you can't make event horizon optimizations like IMS did. </li><li>Tangentially related, Werner Vogels discusses the idea of <a href="http://www.allthingsdistributed.com/2007/12/eventually_consistent.html">eventually consistent</a> distributed databases. Today, that's a problem mostly only Internet-scale sites like Amazon deal with. In the near future of continued data explosion + manycore, we'll all have to deal with it. </li><li>Nick Malik <a href="http://blogs.msdn.com/nickmalik/archive/2007/12/26/measuring-risk-in-application-portfolio-management.aspx">argues</a> that categorizing enterprise applications by lifecycle is much less useful than categorization based on organizational impact. He might also need a new chair. </li><li>Jesus Rodriguez <a href="http://weblogs.asp.net/gsusx/archive/2007/12/21/sql-server-service-broker-2008-conversation-priorities.aspx">digs into</a> one of SSB's new features in SQL 2008: conversation priorities. </li><li>Arnon Rotem-Gal-Oz and Sam Gentile are mixing it up over the definition of SOA. Sam <a href="http://samgentile.com/blogs/samgentile/archive/2008/01/01/soa-it-s-an-and-not-an-or.aspx">thinks</a> SOA has to include business drivers and Arnon <a href="http://www.rgoarchitects.com/nblog/2007/12/29/SOAIsNotAboutBusiness.aspx">doesn't</a>. I'm with Sam on this, defining "SOA" independently from "Applying SOA" seems pointless. Then again, rigorously defining SOA - much less arguing about said definition - seems like a waste of time in the first place IMHO. </li><li>Wow, this guy Zed is <a href="http://www.zedshaw.com/rants/rails_is_a_ghetto.html">mad at the Ruby community</a>. </li><li>Andrew Baron has <a href="http://dembot.com/post/22117963">8 Reasons Why The TV Studios Will Die</a>. Personally, I think reason #2 - Expendable Middle-Person - is the most important. If content producers can reach consumers directly, what value-add will the networks provide? (via <a href="http://unitedhollywood.blogspot.com/2007/12/links-viacom-on-already.html">United Hollywood</a>) </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1085</wp:post_id>
		<wp:post_date>2008-01-03 10:00:42</wp:post_date>
		<wp:post_date_gmt>2008-01-03 18:00:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-134</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="durable-messaging"><![CDATA[Durable Messaging]]></category>
		<category domain="post_tag" nicename="dynamic-languages"><![CDATA[Dynamic Languages]]></category>
		<category domain="post_tag" nicename="idempotence"><![CDATA[Idempotence]]></category>
		<category domain="post_tag" nicename="media-2-0"><![CDATA[Media 2.0]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="post_tag" nicename="soa"><![CDATA[SOA]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[057acc09-25d7-4892-817e-b3c65c3e4ffc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+134]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/03/Morning+Coffee+134]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 135</title>
		<link>http://devhawk.net/2008/01/04/morning-coffee-135/</link>
		<pubDate>Fri, 04 Jan 2008 10:00:38 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://673dcfe5-63f3-477f-95a4-93f9e7facfa7</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Congrats to Barack Obama for <a href="http://www.cnn.com/2008/POLITICS/01/03/iowa.caucuses/">walking away</a> with the Iowa Democratic Caucus, which <a href="http://politicalticker.blogs.cnn.com/2008/01/03/democratic-caucus-turnout-shatters-record/">set turnout records</a>. Frankly, I'm pretty cool with any of the democratic front runners but I think Obama has the best chance of winning in November. I'm not sure Edwards second time around will be any more successful than the last and I believe Clinton would drive the GOP GOTV campaign better than any of the actual GOP candidates would. </li><li>Obviously, I like to play M-rated games like Bioshock and Mass Effect. But I also like games I can play with my kids like <a href="http://www.xbox.com/games/legostarwarssaga/">Lego Star Wars</a>. There are two new Lego games coming out this year: <a href="http://www.lucasarts.com/games/legoindianajones/">Lego Indiana Jones</a> and <a href="http://videogames.yahoo.com/feature/lego-batman-y-exclusive-trailer/1167883">Lego Batman</a>. I can't wait. </li><li>Speaking of gaming, Xbox LIVE had <a href="http://www.majornelson.com/archive/2007/12/29/xbox-live-status-12-29.aspx">some issues</a> over the holiday break, due to record setting sign-ups and concurrent users. Record setting numbers is a nice problem to have if you're on the business side, but a not-so-nice if you're a customer or work in operations. The XBL GM announced they're offering a "<a href="http://www.xbox.com/en-US/support/live/serviceissue.htm">token of appreciation</a>" for everyone's patience - a free XBLA game. Assuming it's not a crappy game, it's a classy move. </li><li>I watched Transformers on HD-DVD last night. Fun movie with lots of action, but man is it dumb. <a href="http://www.imdb.com/name/nm0001806/">John Turturro</a> is the only real stand-out. </li><li>Dustin Campbell <a href="http://diditwith.net/2008/01/01/BuildingDataOutOfThinAir.aspx">implements</a> cons, cdr and car from Scheme in C# and VB. While of limited production value (Dustin specifically warns readers not to use any of his code), it really demonstrates how different the functional world is from the object/imperative one, right down to the concept of type. Cons doesn't return a tuple, it returns function with two bound variables. (via <a href="http://www.dotnetkicks.com/csharp/Building_Data_Out_Of_Thin_Air">DNK</a>) </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1086</wp:post_id>
		<wp:post_date>2008-01-04 10:00:38</wp:post_date>
		<wp:post_date_gmt>2008-01-04 10:00:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-135</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="movies"><![CDATA[Movies]]></category>
		<category domain="category" nicename="politics"><![CDATA[Politics]]></category>
		<category domain="post_tag" nicename="xbox-360"><![CDATA[Xbox 360]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[673dcfe5-63f3-477f-95a4-93f9e7facfa7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+135]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/04/Morning+Coffee+135]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 135</title>
		<link>http://devhawk.net/2008/01/07/morning-coffee-135-2/</link>
		<pubDate>Mon, 07 Jan 2008 10:29:46 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://342c0182-e3a6-4f04-bea7-3ad759187dd4</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Bill Gates does his last <a href="http://www.microsoft.com/ces" target="_blank">CES</a> Keynote, and we announce a PC that <a href="http://www.microsoft.com/presspass/features/2008/jan08/01-07fashionpcs.mspx" target="_blank">looks like a purse</a>? </li><li>News that Warner Brothers is <a href="http://www.deadlinehollywooddaily.com/boost-for-blu-ray-warner-bros-will-release-high-def-titles-exclusively-in-that-format/" target="_blank">going exclusively Blu-Ray</a> is disappointing. However, I'm convinced that neither side will win this format war but that online downloads will trump both. Obviously, <a href="http://www.xbox.com/live/marketplace/moviestv" target="_blank">XBLM</a> is a significant player in this space, but the market is crowding up quickly. Netflix apparently will <a href="http://www.marketwatch.com/news/story/netflix-lg-team-up-bring/story.aspx?guid=%7B524C1C79-666C-49FD-AD1A-75E4D3B5878B%7D" target="_blank">unveil a new set-top box</a> @ CES to let you watch HD movies via the Internet. </li><li>Don Syme has a <a href="http://blogs.msdn.com/dsyme/archive/2008/01/05/learning-wpf-through-f-and-vice-versa-by-john-liao.aspx" target="_blank">roundup of posts</a> by <a href="http://jyliao.blogspot.com" target="_blank">John Liao</a> about F#. Mostly, WPF + F# with a couple of ASP.NET 2.0 posts and one on XML . </li><li>Speaking of F#, Stephan Tolksdorf has been working on an F# port of MS Research's <a href="http://research.microsoft.com/users/daan/parsec.html" target="_blank">Parsec library</a> called <a href="http://www.quanttec.com/fparsec/index.html" target="_blank">FParsec</a>. Parsec is a "monadic parser combinator library", something I have little experience with, so I've gone back to some <a href="http://www.cs.nott.ac.uk/~gmh//monparsing.pdf" target="_blank">source research</a> on the topic, which I hope to blog at length about soon. </li><li>Steve Vinoski talks about serendipitous reuse in his latest <a href="http://computer.org/portal/pages/dsonline/2008/02/w1tow.xml" target="_blank">Internet Computing article</a>. I'm not a believer in reuse in the enterprise, serendipitous or otherwise, but I liked the conclusion to Steve's article when he wrote "It's highly ironic that many enterprise architects seek to impose centralized control over their distributed organizations. In many cases, such centralization is a sure recipe for failure." Also, his point that "control without controlling" works sounds <a href="http://devhawk.net/2007/10/25/The+Worst+Of+Both+Worlds.aspx" target="_blank">vaguely familiar</a>.</li><li>Update - This is really Morning Coffee 136, but I don't want to change the title since it's part of the URL</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1087</wp:post_id>
		<wp:post_date>2008-01-07 10:29:46</wp:post_date>
		<wp:post_date_gmt>2008-01-07 10:29:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-135-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<category domain="post_tag" nicename="reuse"><![CDATA[Reuse]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[342c0182-e3a6-4f04-bea7-3ad759187dd4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+135]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/07/Morning+Coffee+135]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 137</title>
		<link>http://devhawk.net/2008/01/09/morning-coffee-137/</link>
		<pubDate>Wed, 09 Jan 2008 11:12:42 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://dd40aea8-2d56-4ac5-b105-b1c782eb4503</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Note, I somehow duplicated Morning Coffee 135. So I've skipped 136 to make up for it. </li><li>Congrats to Hillary Clinton for her <a href="http://www.msnbc.msn.com/id/22570407/">unexpected win</a> in the New Hampshire primary. As I <a href="http://devhawk.net/2008/01/04/Morning+Coffee+135.aspx">said last week</a>, I think Obama has a better chance of winning in November, but I've got nothing against Clinton or her politics. </li><li>Speaking of winning, congrats to LSU on <a href="http://scores.espn.go.com/ncf/recap?gameId=280070194">winning the BCS</a>. Are they the best team in college football? Personally, I don't think so - there are at least three other teams (Georgia, West VA and of course USC) who can make a persuasive argument that they should be #1. But losing to teams like <strike>Penn</strike> Pitt and Stanford, neither WVA and USC have an argument they should have been in the championship game. But that's what makes the BCS such BS. If nothing else, at least the "we need a playoff" meme is <a href="http://sports.espn.go.com/ncf/news/story?id=3186232">picking up steam</a>. </li><li>This is sort of cool: <a href="http://www.eye.fi/">Eye-fi</a> is a wireless enabled SD card so you can wirelessly upload pictures from your camera to your PC or favorite photo service. However, I think the price needs to come down a bit. I recently bought a 2GB SD card for my wife's new camera for $20. A 2GB Eye-fi card is <a href="http://www.amazon.com/dp/B000X27XDC">$99</a>. Not sure wireless upload is worth 5x per card. </li><li>With all the focus on LINQ providing type-safe queries, it's easy to forget that some apps do need to build their queries at run time. Scott Guthrie points at a <a href="http://msdn2.microsoft.com/en-us/vcsharp/bb894665.aspx">Dynamic LINQ C# sample</a> (also <a href="http://msdn2.microsoft.com/en-us/vbasic/bb964686.aspx">available for VB</a>) that builds LINQ expression trees from strings. It kinda takes you back to the bad-old-days of embedding SQL strings in your code, but there are scenarios - especially BI scenarios - where you need this capability. </li><li>Soma <a href="http://blogs.msdn.com/somasegar/archive/2008/01/08/visual-c-2008-feature-pack-beta.aspx">announces</a> the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=D466226B-8DAB-445F-A7B4-448B326C48E7&amp;displaylang=en">VC++ 2008 Feature Pack Beta</a>. This is the long-awaited (by who?) MFC update as well as support for the <a href="http://en.wikipedia.org/wiki/Technical_Report_1">C++ TR1</a>. TR1 provides some FP-esque support like <a href="http://en.wikipedia.org/wiki/Technical_Report_1#Function_Objects">function objects</a> and <a href="http://en.wikipedia.org/wiki/Technical_Report_1#Tuple_Types">tuples</a>, so maybe this is worth a look. On the other hand, given that much (all?) of TR1 is lifted from <a href="http://www.boost.org/">Boost</a>, maybe we should just use that. </li><li>Speaking of cool libraries, check out <a href="http://www.itu.dk/research/c5/">C5</a> (aka the Copenhagen Comprehensive Collection Classes for C#). It's basically a complete redesign of System.Collections.Generic (or SCG as they call it). I've read thru their <a href="http://www.itu.dk/research/c5/Release1.0/ITU-TR-2006-76.pdf">online book</a> and I'm very impressed. Of course, with me focused on F# of late, I'm primarily using immutable collections, so I'm not sure how much use I have for C5 right now. </li><li>There was a free CoDe magazine in my DevTeach bag back in November with a <a href="http://www.code-magazine.com/Article.aspx?quickid=990712182">fascinating article</a> on where LINQ goes from here - LINQ 2.0 if you will. One of things the article discusses is tier-splitting, which has seen the light of day in <a href="http://labs.live.com/volta/">Volta</a>. Will Volta also deliver External Relationships, Reshaping Combinators and Join Patterns or will those come from different projects? </li><li>I had to pave my workstation yesterday. I was running an interim build of Vista x64 SP1 and I couldn't make Virtual Server work with it. As part of the repave, I discovered I needed to update the firmware of my SCSI controller, but the update had to run under DOS. Freaking DOS? My workstation doesn't even have a floppy drive to boot DOS from! However, I was able to <a href="http://www.bay-wolf.com/usbmemstick.htm">boot from a USB thumb disk</a> instead. That's damn useful. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1088</wp:post_id>
		<wp:post_date>2008-01-09 11:12:42</wp:post_date>
		<wp:post_date_gmt>2008-01-09 11:12:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-137</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-plus-plus"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="college-football"><![CDATA[College Football]]></category>
		<category domain="post_tag" nicename="consumer-electronics"><![CDATA[Consumer Electronics]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="general-geekery"><![CDATA[General Geekery]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[LINQ]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="category" nicename="politics"><![CDATA[Politics]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[dd40aea8-2d56-4ac5-b105-b1c782eb4503]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+137]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/09/Morning+Coffee+137]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2009</wp:comment_id>
			<wp:comment_author><![CDATA[brad]]></wp:comment_author>
			<wp:comment_author_email>brad@blorq.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.252.244.142</wp:comment_author_IP>
			<wp:comment_date>2008-01-09 12:37:50</wp:comment_date>
			<wp:comment_date_gmt>2008-01-09 20:37:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[>> I somehow duplicated Morning Coffee 135. So I've skipped 136 to make up for it.

Thats the trouble w/ those pesky integer IDs.. but i guess 'Morning Coffee {7FF763AB-1553-4e95-BC6F-67028122172E}' just doesnt have the same ring to it...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2010</wp:comment_id>
			<wp:comment_author><![CDATA[Richard]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.128.157.33</wp:comment_author_IP>
			<wp:comment_date>2008-01-10 00:57:04</wp:comment_date>
			<wp:comment_date_gmt>2008-01-10 08:57:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[> given that much (all?) of TR1 is lifted from Boost

There are some largish (e.g. around unordered containers) changes and lots in the details between Boost and TR1, so "much" is right here.

> make Virtual Server work with it

As an aside, have you seen this http://blogs.msdn.com/virtual_pc_guy/archive/2008/01/04/running-virtual-pc-under-hyper-v-beta.aspx ... running VPC under a guest under Hyper-v? I can see everyone getting very lost very quickly :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2011</wp:comment_id>
			<wp:comment_author><![CDATA[Randy H.]]></wp:comment_author>
			<wp:comment_author_email>randy@clrsql.com</wp:comment_author_email>
			<wp:comment_author_url>http://randyh.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-01-10 14:01:31</wp:comment_date>
			<wp:comment_date_gmt>2008-01-10 22:01:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[West Virginia lost to Pitt- not Penn. If they lost to Penn, they would have a hard time making a case for being in the top 50 teams, much less number one.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Superman Signed</title>
		<link>http://devhawk.net/2008/01/11/superman-signed/</link>
		<pubDate>Fri, 11 Jan 2008 18:20:07 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://e86955e5-fd39-431a-b2fa-745ecaa303c6</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Big news yesterday for Washington Capitals fans. Alex "the Great" Ovechkin (aka <a href="http://devhawk.net/2007/07/13/Ovechkin+As+Superman.aspx">Superman</a>) signed the biggest contract in NHL history - $124 million over 13 years. <a href="http://sports.aol.com/fanhouse/2008/01/10/ovechkins-deal-wealthiest-in-nhl-history/">According to Eric McErlain</a>, that's an average of over $300k per hour of ice time and $5k per shift. Nice work if you can get it. </p><p>Actually, all kidding aside, this is a great move for the Caps. </p><p>The financial bar was set last summer when Sid "the Kid" Crosby signed a 5-year $43.5 million contract extension - about $8.7 million a season. Since then, Caps fans have had to suffer thru <a href="http://www.canada.com/montrealgazette/news/sports/story.html?id=e20c9251-4521-47f0-9f16-647c438360e6&amp;k=16946">rumor</a><a href="http://www.hockeybuzz.com/blog.php?post_id=12395">after</a><a href="http://www.nypost.com/seven/11252007/sports/opt_out__alex_249480.htm">rumor</a> that our man Alex wasn't going to be playing in DC much longer. However, the suggestion that Ovechkin would be leaving never made any sense to me. He was slated to become a <em>restricted</em> free agent this summer - meaning the Caps would have the opportunity to match any offer. Furthermore, the max any player can get under the <a href="http://devhawk.net/2005/07/13/Finally.aspx">new CBA</a> is 20% of the salary cap - currently about $50 million. So it was pretty obvious Ovechkin was going to stay a Cap and get paid somewhere between $8.7 and $10 a season.  </p><p>More impressive than the dollars is the length of the contract. Not only is it the wealthiest in the league, it's the second longest (Islanders goalie signed a $67.5 million 15 year contract before the start of last season). This contract means Ovechkin is slated to spend at least 16 years in a Caps uniform. In this era of free agency, more often than not you end up "rooting for the laundry" since the players come and go so quickly. It's nice to know the #8 Caps jersey I got for Christmas will be relevant until the 2020's.</p><p>Also, signing Ovechkin for that long makes massive financial sense, even if some "experts" <a href="http://www.thehockeynews.com/articles/12572-Analysis-Ovechkin-deal-proves-owners-can-spend.html">can't (won't) see the value</a>. The salary cap increased from $39 million for the 2005-06 season to $50 million this season. Can the league sustain 13% revenue growth for the foreseeable future? If so, the salary cap will be in the $100 million range by the time Crosby's deal expires. Even if revenues only grow at half that rate, we're still looking at a salary cap in the low $70 millions by 2013. So Crosby will be looking to make at least $14 million and maybe as much as $20 million per season when he resigns. Viewed that way, getting Ovechkin for "only" $9.5 mil a season makes good financial sense. </p><p>Of course, the last time the Caps committed this kind of money to a superstar, it <a href="http://www.washingtonpost.com/wp-dyn/content/article/2007/10/11/AR2007101102188.html">didn't work out so well</a>. But unlike Jagr, who got his new contract before skating shift one for the Caps, we know what #8 can do while wearing the <a href="http://nhllogos.blogspot.com/2008/01/result-canucks-vs-capitals.html">Eagle</a>. Owner Ted Leonsis isn't paying for potential on blind faith, he knows what Ovechkin can do and how much he means to this team. Based on the past two and 1/2 seasons, I think Leonsis is getting his money's worth.</p><p>Speaking of <a href="http://ted.aol.com/">Ted</a>, my father ran into him @ the seasons ticket holder's event they held last night. When he mentioned that he's "Devhawk's Dad", Ted recalled how I "<a href="http://devhawk.net/2004/02/19/Doing+The+Unthinkable.aspx">reamed him a new one</a>" as well as <a href="http://devhawk.net/2006/07/06/Meeting+Ted+Leonsis.aspx">meeting me</a>. For the record, I <em>still </em>think trading Bondra was a mistake, though time has demonstrated it was a fairly minor one. More importantly, it was an isolated mistake. Since then, I think Ted and the Caps have done almost everything right, both on and off the ice. If you're reading this Ted, keep up the good work and I take back that whole "abomination to the sport of hockey" thing.</p><p>And don't look now, but the Caps are 12-6-4 since the <a href="http://capitals.nhl.com/team/app?articleid=344172&amp;page=NewsPage&amp;service=page">changing coaches</a>. Had they been playing at that pace all season, they'd have around 55 points and the second best record in the Eastern Conference right now. Good to know, but not very relevant since they did, in fact, start the season 6-14-1. However, if they can stay on this pace for the second half of their season, they would end with around 93 points - probably enough to get them in the playoffs. (Last year's eighth seed ended with 92 points.) Furthermore, Carolina currently leads the Southeast Division, but they're only on pace to reach 86 points. So even with the horrific start, the Caps are still poised to make a playoff run.</p><p>In the <a href="http://capitals.nhl.com/team/app/?service=page&amp;page=NewsPage&amp;articleid=349546">press release</a> announcing the contract, Alex is quoted saying "I want to bring the Stanley Cup to Washington". Even if they do make the playoffs, I think the Caps are still a year or two away from honestly being competitive for the Cup - though I'd love to be wrong about that. Either way, it's nice to know Alex has 13 years to make the Caps' Stanley Cup dreams a reality. </p><p>To <a href="http://dumpnchase.wordpress.com/2008/01/11/not-to-worry-kids/">quote</a> Mike Vogel, "It feels like morning in Washington." I may be displaced in the "wrong" Washington, but I feel it just the same.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1089</wp:post_id>
		<wp:post_date>2008-01-11 10:20:07</wp:post_date>
		<wp:post_date_gmt>2008-01-11 18:20:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>superman-signed</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[e86955e5-fd39-431a-b2fa-745ecaa303c6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Superman+Signed]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/11/Superman+Signed]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 138</title>
		<link>http://devhawk.net/2008/01/16/morning-coffee-138/</link>
		<pubDate>Wed, 16 Jan 2008 19:14:57 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://78184293-7277-4094-8a46-cc2b19c222a5</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>In writers strike news, the WGA has made side deals with <a href="http://www.deadlinehollywooddaily.com/letterman-story-upcoming/">Worldwide Pants</a> (aka Dave Letterman's company), <a href="http://www.deadlinehollywooddaily.com/wga-ua-side-deal-officially-unveiled/">United Artists</a> (aka Tom Cruise's company) and <a href="http://www.deadlinehollywooddaily.com/heroic-harvey-hardly/">The Weinstein Company</a> (<strike>previously known as Miramax</strike>). The WGA strategy of divide and conquer seems to me making slow progress. Update: The Weinstein Company was founded by Miramax's founders Harvey and Bob Weinstein after they left Miramax. But Miramax is still around. Thanks to GrantC for the correction. </li><li>They're still two games under .500, but the Caps completed a season sweep of the Eastern Conference leading Ottawa Senators last night. They're only 3 games out of the top spot in the (admittedly very weak) Southeast division  </li><li>Big tech news today isn't coming from MSFT-land. <a href="http://blogs.sun.com/jonathan/entry/winds_of_change_are_blowing">Sun is buying MySQL</a> and <a href="http://online.wsj.com/article/SB120048691486294361.html">Oracle is (finally) buying BEA</a>. Both deals seem like pretty significant culture clashes, though Sun/MySQL seems like the better fit of the two.  </li><li>There's a <a href="http://www.w3.org/TR/2008/WD-sml-20080114/">new draft</a> of Service Modeling Language 1.1 available. If you'll recall, this used to be called the <a href="http://www.microsoft.com/business/dsi/sdmwp.mspx">System Definition Model</a>, part of the <a href="http://www.microsoft.com/business/dsi/default.mspx">Dynamic Systems Initiative</a>. Hadn't heard anything from those folks in a while, good to see they're making progress.  </li><li>Stephan Tolksdorf dropped me a line to tell me he was able to "vastly simplify" <a href="http://www.quanttec.com/fparsec/">FParsec</a>, and as a result it now runs on the current version of F#. Awesome!  </li><li>Speaking of F#, Scott Hanselman has a new <a href="http://www.hanselman.com/blog/HanselminutesPodcast96StartingSmallWithFWithDustinCampbell.aspx">F# podcast</a>, this time interviewing <a href="http://diditwith.net/">Dustin Campbell</a>. Check out all of Dustin's <a href="http://diditwith.net/CategoryView,category,F%23.aspx">F# posts</a>.  </li><li>I didn't know about the <a href="http://blog.spontaneouspublicity.com/2007/12/10/productivity-tip-copy-as-path/">"Copy as Path" feature</a> in Vista. Why is it hidden?  </li><li>I was a big fan of the <a href="http://www.microsoft.com/windows/products/winfamily/desktopsearch/choose/windowsdesktopsearch.mspx">WDS</a> deskbar shortcut feature - a feature that is missing in Vista. Enter <a href="http://brandontools.com/content/StartPlusPlus.aspx ">Start++</a> by <a href="http://brandonlive.com/">Brandon Paddock</a>, which adds shortcuts to Vista's search box. It also supports "<a href="http://brandonlive.com/2007/08/18/iphone-apps-in-your-start-menu/">iPhone apps</a>" and <a href="http://brandonlive.com/2007/05/19/start-upcoming-feature-scripting/">scripting</a>. But JScript? Where's the PowerShell love, Brandon?  </li><li>EA released the <a href="http://www.donhopkins.com/home/micropolis/">source code to the original SimCity</a> under the GPL. Bil Simser is <a href="http://weblogs.asp.net/bsimser/archive/2008/01/14/building-a-city-the-series.aspx">digging into the code</a> and it looks like he's going to port it to XNA. (via <a href="http://ozymandias.com/archive/2008/01/14/simcity-sourcecode-released-under-gnu-gpl.aspx">Ozymandias</a>)  </li><li>Wes Haggard has <a href="http://weblogs.asp.net/whaggard/archive/2008/01/14/added-codehtmler-project-at-codeplex.aspx">published the source code</a> to <a href="http://codeplex.com/CodeHtmer">CodeHTMLer on CodePlex</a>. He took two updates from me: the F# language definition as well as the ability to choose the font when not using PRE tags. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1090</wp:post_id>
		<wp:post_date>2008-01-16 11:14:57</wp:post_date>
		<wp:post_date_gmt>2008-01-16 19:14:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-138</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="games"><![CDATA[Games]]></category>
		<category domain="post_tag" nicename="modelling"><![CDATA[Modelling]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[78184293-7277-4094-8a46-cc2b19c222a5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+138]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/16/Morning+Coffee+138]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2012</wp:comment_id>
			<wp:comment_author><![CDATA[GrantC]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.120.13.121</wp:comment_author_IP>
			<wp:comment_date>2008-01-19 09:47:43</wp:comment_date>
			<wp:comment_date_gmt>2008-01-19 17:47:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dept. of Fact Checking: technically The Weinstein Company is not the company previously known as Miramax. The Weinstein Bros. left Miramax after sparring with its owner, Disney. TWC is the new company they founded, Miramax continues to operate today just w/o Bob and Harvey.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>365 and Counting</title>
		<link>http://devhawk.net/2008/01/20/365-and-counting/</link>
		<pubDate>Sun, 20 Jan 2008 09:03:26 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://e90d6f88-8cc8-4c5a-9456-dd5329877401</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Steve Benen <a href="http://www.thecarpetbaggerreport.com/archives/14299.html">points out</a>:</p><blockquote><p>You may have noticed, on bumpers or t-shirts, the “<a href="http://www.bushslastday.com/">1.20.09</a>” slogan. It denotes, of course, Inauguration Day for Bush’s successor.</p><p>I just thought I’d mention that after seven painful years, the Bush presidency will end exactly one year from today. It’s obviously something to look forward to.</p><p>It’s an awkward period in Democratic politics right now — a contentious presidential primary, a frustrated Democratic Congress — but looking at the light at the end of the tunnel, and knowing it’s probably not a train, might serve as a morale booster.</p></blockquote><p>From the morale perspective, it's worth noting the voter turnout in the primaries so far. Yesterdays' Democratic Nevada primary is the third in a row to <a href="http://www.nytimes.com/2008/01/19/us/politics/19cnd-dems.html">set turnout records</a>. On the Republican side, Benen <a href="http://www.thecarpetbaggerreport.com/archives/14296.html">points out</a> that McCain won South Carolina yesterday with a 135,000 votes but eight years ago, he got nearly 100,000 more votes in a losing effort. By my calculation, Republican South Carolina turnout was 30% less than it was in 2000. </p><p>Voter turnout in early primaries doesn't make this election a sure thing by any means, but it sure is an encouraging sign. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1091</wp:post_id>
		<wp:post_date>2008-01-20 09:03:26</wp:post_date>
		<wp:post_date_gmt>2008-01-20 09:03:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>365-and-counting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="politics"><![CDATA[Politics]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[e90d6f88-8cc8-4c5a-9456-dd5329877401]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[365+And+Counting]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/20/365+And+Counting]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2013</wp:comment_id>
			<wp:comment_author><![CDATA[Robert W. Anderson]]></wp:comment_author>
			<wp:comment_author_email>robert@cairene.net</wp:comment_author_email>
			<wp:comment_author_url>http://et.cairene.net</wp:comment_author_url>
			<wp:comment_author_IP>72.14.252.136</wp:comment_author_IP>
			<wp:comment_date>2008-01-20 16:36:39</wp:comment_date>
			<wp:comment_date_gmt>2008-01-21 00:36:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Encouraging, yes, but I think one thing could set Republican voter turnout records.  And that would be Hillary Clinton as the Democratic nominee. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2014</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.106</wp:comment_author_IP>
			<wp:comment_date>2008-01-21 08:57:01</wp:comment_date>
			<wp:comment_date_gmt>2008-01-21 16:57:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree 100%. http://devhawk.net/2008/01/04/Morning+Coffee+135.aspx ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2015</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email>chris@dscoduc.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.dscoduc.com</wp:comment_author_url>
			<wp:comment_author_IP>64.156.199.117</wp:comment_author_IP>
			<wp:comment_date>2008-01-21 11:00:53</wp:comment_date>
			<wp:comment_date_gmt>2008-01-21 19:00:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Go Hillary!  Republicans Unite!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 139</title>
		<link>http://devhawk.net/2008/01/21/morning-coffee-139/</link>
		<pubDate>Mon, 21 Jan 2008 09:34:53 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://2e67e840-754b-4e7c-9ddc-6c9658e61803</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Big news on the WGA strike front: the AMPTP <a href="http://www.ew.com/ew/article/0,,20172430,00.html">reached a deal</a> with the Directors Guild last weeks. Initial reaction from United Hollywood is <a href="http://unitedhollywood.blogspot.com/2008/01/first-glance-at-deal-summary.html">mixed</a>, but I'm hopeful this will at least get the AMPTP / WGA talks started again.  </li><li>Speaking of new media, Xbox 360 Fanboy has a <a href="http://www.xbox360fanboy.com/2008/01/16/sundance-short-films-coming-to-video-marketplace/">rundown</a> of 45 short films from Sundance that are getting released on Xbox Live Marketplace. That's pretty a-typical content for XBLM. Typically, new content on XBLM has been from "<a href="http://www.microsoft.com/presspass/press/2008/jan08/01-06ABCMGMXboxLivePR.mspx">Hollywood Heavyweights</a>". I'm pretty excited to see them branch out content wise.  </li><li>Speaking of Xbox 360, seems <a href="http://gamerscoreblog.com/team/archive/2008/01/17/556724.aspx">they had a good year</a>. Congrats!  </li><li>Still speaking of Xbox 360, everyone <a href="http://gamerscoreblog.com/team/archive/2008/01/18/UndertowFreeofCharge.aspx">gets a free copy of Undertow</a> this week.  </li><li>Scott Guthrie <a href="http://gamerscoreblog.com/team/archive/2008/01/18/UndertowFreeofCharge.aspx">announces</a> the availability of the .NET Framework Source Code. Shawn Burke has <a href="http://blogs.msdn.com/sburke/archive/2008/01/16/configuring-visual-studio-to-debug-net-framework-source-code.aspx">instructions</a> for how to use it with VS08. So far, they've made the core base class libraries, ASP.NET, Windows Forms, WPF, ADO.NET and XML available. LINQ, WCF and WF are expected to become available "in the weeks and months ahead".  </li><li>Ted Neward wonders if Java is <a href="http://blogs.tedneward.com/2008/01/15/Java+QuotDonequot+Like+The+Patriots+Or+QuotDonequot+Like+The+Dolphins.aspx">"Done" like the Patriots, or "Done" like the Dolphins?</a> If you want my opinion (I'm guessing yes, since you're reading my blog), definitely done like the Dolphins. <a href="http://en.wikipedia.org/wiki/OpenJDK">OpenJDK</a> was a desperation move to make Java "cool" again, but it won't work. People who want an open source stack are using LAMP and language wonks who saw Java as mainstream SmallTalk have moved on to Ruby. The question will be if <a href="http://www.mysql.com/news-and-events/sun-to-acquire-mysql.html">Sun buying MySQL</a> will make Sun cool or MySQL uncool by association. I'm guessing the latter. </li><li>Speaking of Ted, he's got a great post about the <a href="http://blogs.tedneward.com/2008/01/17/Youre+Without+A+Point+Mr+Zachmann.aspx">relevance of game programming</a> to the mainstream or enterprise developer.  </li><li>Speaking of game development, David Weller points to all the <a href="http://feeds.feedburner.com/~r/LetsKillDave/~3/218525110/tons-of-content-for-xna-game-studio-2-0.aspx">new XNA GS 2.0 content</a> up on <a href="http://creators.xna.com/">Creators Club Online</a>.  </li><li>There's a <a href="http://research.microsoft.com/research/downloads/Details/7ac148a7-149b-4056-aa06-1e6754efd36f/Details.aspx">new version (1.9.3.14) of F# out</a>, but no announcement from <a href="http://blogs.msdn.com/dsyme/default.aspx">Don</a> regarding what's new. I reviewed the release notes, seems like this is primarily a bug-fix release with only very minor feature additions. </li><li>Speaking of F#, Don points to <a href="http://sky.fit.qut.edu.au/~neverov/">Greg Neverov's</a> implementation of <a href="http://cs.hubfs.net/blogs/hell_is_other_languages/archive/2008/01/16/4565.aspx">Software Transactional Memory in F#</a>. This immediately reminded me of <a href="http://devhawk.net/2006/02/13/The+Next+Mainstream+Programming+Language.aspx">Tim Sweeney's Next Mainstream Programming Language talk</a>. Tim suggested said language would need to support a combination of side-effect free functional code and software transactional memory. F# is looking to be closer to that language all the time. </li><li>Still speaking of F#, Don Syme's <a href="http://blogs.msdn.com/dsyme/archive/2008/01/17/expert-f-now-available-really.aspx">Expert F#</a> book is out. I read the draft version - it rocks - but I'm still going to get my own real copy. You should too.  </li><li>With their <a href="http://www.nhl.com/scores/htmlreports/20072008/GS020711.HTM">win Saturday</a>, the Caps are back to .500 for the first time since late October. Since Thanksgiving, the <a href="http://peerlessprognosticator.blogspot.com/2008/01/caps-fansthe-only-power-ranking-youll.html">Caps are 15-7-4</a>. Only four teams in the league have a better record over that time span. We play one of them tonight - <a href="http://www2.nhl.com/nhl/app?service=page&amp;page=Preview&amp;gameNumber=725&amp;season=20072008&amp;gameType=2">the Penguins</a> - and it's on <a href="http://www.versus.com/nhl/">Versus</a>, so I'll even get to see it. In HD no less.</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1092</wp:post_id>
		<wp:post_date>2008-01-21 09:34:53</wp:post_date>
		<wp:post_date_gmt>2008-01-21 09:34:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-139</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net-framework"><![CDATA[.NET Framework]]></category>
		<category domain="post_tag" nicename="entertainment"><![CDATA[Entertainment]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="media-2-0"><![CDATA[Media 2.0]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<category domain="post_tag" nicename="xbox-360"><![CDATA[Xbox 360]]></category>
		<category domain="post_tag" nicename="xna"><![CDATA[XNA]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[2e67e840-754b-4e7c-9ddc-6c9658e61803]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+139]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/21/Morning+Coffee+139]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Caps 6, Penguins 5 (SO)</title>
		<link>http://devhawk.net/2008/01/21/caps-6-penguins-5-so/</link>
		<pubDate>Tue, 22 Jan 2008 06:42:27 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://9771b414-6953-4353-b1b6-7340c8458298</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://www.nhl.com/scores/htmlreports/20072008/GS020725.HTM">NHL.com Game Summary</a> <a href="http://www2.nhl.com/nhl/app?service=page&amp;page=Recap&amp;gameNumber=725&amp;season=20072008&amp;gameType=2">NHL.com Game Recap</a></p><p>It wasn't a pretty win, but I'll <a href="http://www.nhl.com/nhl/app?service=page&amp;page=Recap&amp;gameNumber=725&amp;season=20072008&amp;gameType=2">take the two points</a> just all the same. Especially given the long history Washington has of losing to the Penguins - they had lost the past six meetings before tonight. Japers' <a href="http://japersrink.blogspot.com/2008/01/tuesday-roundupcaps-6-pens-5-so.html">roundup</a> mirrors my own thoughts, though <a href="http://www.onfrozenblog.com/2008/01/21/mission-possible-trim-the-dinged-up-mullets-move-above-500/">On Frozen Blog's roundup</a> was funnier - they made a drinking game out of the number of times the on-air announcers referenced Sid the Kid. Certainly, there's no <a href="http://japersrink.blogspot.com/2008/01/uh-oh.html">love lost</a> for Crosby among Caps fans, but the amount of on-air time spent discussing an injured player bordered on ridiculous - Sid the Kid was mentioned 27 times by OFB's count + five in the post game. Worst was probably Malkin's first goal - he hadn't even stopped celebrating and the announcer was already talking about Crosby. </p><p>Caps were pretty dreadful on special teams tonight. Pens had three goals on eight penalties while the Caps had only went one for six. However, the penalty kill came thru in overtime overtime with the Caps down 5-3 for 1:07. The Caps won both defensive zone face offs and blocked four shots - <a href="http://sports.espn.go.com/nhl/players/profile?playerId=1581">Quintin Laing</a> had three of those blocks - and kept the Pens from registering a shot on goal for the entire power play. That was money. If they gave out game stars to unsung heroes, Laing would have gotten one. </p><p>For all the great young talent on the Caps, there's got to be real concern about goaltending. I love Olie the Goalie, but he didn't get it done tonight. The Penguins had a grand total of 15 shots (14 if you don't count the one from beyond the blue line with one second left in overtime). 5 goals on 15 shots == a pretty crappy save percentage. <a href="http://sports.espn.go.com/nhl/players/profile?playerId=3124">Malkin's</a> first goal was very impressive skating, but he didn't so much shoot as throw the puck at the net. And letting Talbot's  open the scoring by stuffing the puck in at the post was weak sauce as it were. I'm not so much worried about it for this season, but with Kolzig <a href="http://www.washingtonpost.com/wp-dyn/content/story/2008/01/15/ST2008011504142.html">talking retirement</a> as his struggles, I'm not sure who the Caps have in the pipeline between the pipes.  </p><p>It sure was fun getting to watch an entire Caps game in its entirety with my family. Patrick and Riley watched most of it. Patrick wanted to know who the bad guys were - he figured it out after I pointed out the Penguins were wearing black...like Darth Vader. :) Julie wanted to know how I'd handle it if Patrick grew up to be a professional hockey player, but was drafted by Pittsburgh. My love for Paddy Boy far exceeds my hatred for the Penguins, though that's the only scenario I could imagine rooting for the Penguins. My boy Patrick, however, protested and said he wanted be a Capital and play with Alex the Great. Patrick will be 18 by the time Ovechkin's contract is over. It could happen. Guess I gotta teach him to skate!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1093</wp:post_id>
		<wp:post_date>2008-01-21 22:42:27</wp:post_date>
		<wp:post_date_gmt>2008-01-22 06:42:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>caps-6-penguins-5-so</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[9771b414-6953-4353-b1b6-7340c8458298]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Caps+6+Penguins+5+SO]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/22/Caps+6+Penguins+5+SO]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nick&#039;s Flawed Vision of a Shared Integration Model</title>
		<link>http://devhawk.net/2008/01/22/nicks-flawed-vision-of-a-shared-integration-model/</link>
		<pubDate>Tue, 22 Jan 2008 13:56:11 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://f6334bd5-e752-4633-a7e7-63872f1be525</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Of all the things you might say about <a href="http://blogs.msdn.com/nickmalik">Nick Malik</a>, "thinks small" is not one of them. He takes on a significant percentage of the .NET developer community over the <a href="http://blogs.msdn.com/nickmalik/archive/2007/06/15/tools-for-mort.aspx">definition of Mort</a>. He wants to <a href="http://blogs.msdn.com/nickmalik/archive/2007/07/30/free-code-getting-it-out-of-the-applications-business.aspx">get IT out of the applications business</a>. He invents his own architecture TLA: SDA (aka <a href="http://blogs.msdn.com/nickmalik/archive/2007/05/04/mining-for-services-with-solution-domain-architecture.aspx">Solution Domain Architecture</a>). He's a man on a mission, no doubt. And for the most part, I'm with him 110% on his ideas.</p><p>However, when he starts going on about a <a href="http://blogs.msdn.com/nickmalik/archive/2008/01/09/towards-a-shared-global-integration-model.aspx">shared global integration model</a>, I start to wonder if he has both hands on the steering wheel, as it were.</p><p>Nick's been <a href="http://blogs.msdn.com/nickmalik/archive/2006/12/19/the-roadblock-to-software-as-a-service.aspx">talking about this</a> for over a year. As he points out, SaaS integration layer is the new <a href="http://en.wikipedia.org/wiki/Vendor_lock-in">vendor lock-in</a>. One of the attractions of SaaS is that you could - theoretically, anyway - switch SaaS application providers easily which would drive said SaaS companies to constantly innovate. However, if the integration layers aren't compatible, the cost to switch goes up dramatically, leaving the customer locked-in to whatever SaaS company they initially bet on - even if that bet turns out to be bad.</p><p>OK, I'm with him so far. Not exactly breaking news here - we've seen the same integration issues inside the enterprise for decades. SaaS adds new wrinkles - if your ERP vendor goes belly-up, they can't take your data with them or worse sell it to your competition - but otherwise it sounds like the same old story to me. </p><p>However, where Nick loses me is when he <a href="http://blogs.msdn.com/nickmalik/archive/2006/12/20/internet-wide-services-integration-architecture-needed-now.aspx">recommends this solution</a>:</p><blockquote><p>"To overcome this conflict, it is imperative that we begin, now, to embark on a new approach. We need a single canonical mechanism for all enterprise app modules to integrate with each other. If done correctly, each enterprise will be able to pick and choose modules from different vendors and the integration will be smooth and relatively painless."</p></blockquote><p>Yeah, and if a frog had wings, it wouldn't bump its ass when it hopped.[1] There are so many things wrong with this approach, I'm not sure I can get them all into a single web post.</p><p>First off, it won't, in fact, be done correctly - at least, not the first time. I realize everyone knocks MSFT for never getting an application right before version 3.0, but I believe it's actually systemic to the industry. Whatever you think you know about the problem to be solved, it's at best woefully incomplete and at worst wrong on all counts. So getting it right the first time is simply not possible. Getting it right the second time is very unlikely. It isn't until the third time that you really start to get a handle on the problem you're really trying to solve. Getting an effort like this off the ground in the first place would be a Herculean task. Keeping it together thru a couple of bad spec revisions would be impossible. </p><p>Meanwhile, the vendors aren't going to be waiting around twiddling their thumbs waiting for the specs to be done. We've seen efforts to unify multiple completing vendors around a single interoperable specification. By and large, those efforts (UNIX, CORBA, Java) have been failures. The technologies themselves haven't been failures, but the idea that there was going to be "relatively painless" portability or interoperability among different vendors never really materialized. If it didn't work for UNIX, CORBA or Java, what makes Nick think it will work for the significantly more complex concept of a shared global integration model? Not only more complex in terms of spec density, but the mind-boggling number of vendors in this space. </p><p>Nick <a href="http://blogs.msdn.com/nickmalik/archive/2006/12/19/the-roadblock-to-software-as-a-service.aspx">is worried</a> that either "we do this as a community or one vendor will do it and force it on the rest of us." But if you look at how specifications evolve, retroactive realization of defacto standards is the way the best standards get created. For example, I could argue that TCP was forced on us by the US Military, but I don't hear anyone complaining. I realize there's a big difference between having a vendor force a spec down our throat vs. a single big customer, but either way it's not designed by committee. Besides, if we do see get an enterprise integration standard forced on us, I don't believe it will be the vendors doing the forcing. If I were a betting man, I'd bet on Wal-Mart. Business leverage trumps IT leverage and Wal-Mart has more business leverage than anyone in this space these days.</p><p>BTW, would design-by-committee be an extreme example of <a href="http://en.wikipedia.org/wiki/BDUF">BDUF</a>? Do we really want to develop a this critical integration model using the same process that produced the <a href="http://www.w3.org/XML/Schema">XSD</a> spec? </p><p>Finally, Nick thinks that this model will improve innovation, where I think it will have the exact opposite effect. Once you lay a standard in place, the way you innovate is to build proprietary extensions on top of that standard. However, by definition, these extensions aren't going to be interoperable. If someone has a good idea, others will copy it and eventually it will become a defacto standard. </p><p>A recent example of the process of defacto standardization is <a href="http://en.wikipedia.org/wiki/Xmlhttprequest">XMLHttpRequest</a>. Microsoft created it in 1999 for IE 5, Mozilla copied it for their browser a couple of years later, followed by the other major browser vendors. Google innovated with it, Jesse James Garrett coined the term AJAX, everyone else started doing it and then finally - nearly a decade later and still counting - a standards body is getting around to putting their <a href="http://www.w3.org/TR/XMLHttpRequest/">stamp of approval</a> on it. </p><p>However, if you're worried about painless integration and not having something forced on you by some vendor, then you're not going to embrace these innovations - which means, you won't embrace <em>any </em>innovation. Well, there may be some innovation in the systems themselves that doesn't affect the interface, but once that interface is cast in stone, the amount of innovation will go way down. How do vendors differentiate themselves? There's only two ways: price and innovation. Take away innovation with standardization, and you're left with a race to the rock bottom price with no incentive to actually improve the products.</p><p>I get where Nick is going with this. He looks around our enterprise and sees duplication of effort and massive resources being spent on <a href="http://devhawk.net/2004/02/10/Pat+On+SOA.aspx">hooking shit together</a>. It sure would be nice to spend those resources on something more useful to the bottom line. But standardizing - or worse <a href="http://blogs.msdn.com/nickmalik/archive/2006/12/20/internet-wide-services-integration-architecture-needed-now.aspx">legislating</a> - the problem out of existence isn't going to work. What will? IMO, applying Nick's ideas of <a href="http://blogs.msdn.com/nickmalik/archive/2007/07/30/free-code-getting-it-out-of-the-applications-business.aspx">Free Code</a> to interop code. If we're going to get IT out of the app business, can't we get out of the integration business at the same time? </p><p></p><hr /><p></p><p>[1] It's exceedingly rare that you get to quote <a href="http://www.imdb.com/title/tt0105793/quotes">Wayne's World</a> or <a href="http://www.imdb.com/title/tt0093822/quotes">Raising Arizona</a> in a discussion about Enterprise Architecture, much less both at the same time. Savor it. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1094</wp:post_id>
		<wp:post_date>2008-01-22 13:56:11</wp:post_date>
		<wp:post_date_gmt>2008-01-22 13:56:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nicks-flawed-vision-of-a-shared-integration-model</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<category domain="post_tag" nicename="soa"><![CDATA[SOA]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[f6334bd5-e752-4633-a7e7-63872f1be525]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Nicks+Flawed+Vision+Of+A+Shared+Integration+Model]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/22/Nicks+Flawed+Vision+Of+A+Shared+Integration+Model]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 140</title>
		<link>http://devhawk.net/2008/01/28/morning-coffee-140/</link>
		<pubDate>Mon, 28 Jan 2008 09:10:08 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://3e301c9c-27ab-41da-bda7-48428ac83196</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>I only posted one Morning Coffee post last week. It wasn't a lack of content, it was a lack of drive on my part. I had 20-30 items flagged in my news reader, but for some reason I couldn't work up the interest in posting them. So some of these are a bit old.  </li><li>I'm at the Language.NET Symposium this week, so look for lots of language blogging. I've already chatted with <a href="http://tomasp.net/">Tomáš Petříček</a> and <a href="http://www.iunknown.com/">John Lam</a>. If someone <a href="http://blogs.tedneward.com/2008/01/25/By+The+Way+If+Anybody+Wants+To+Argue+About+Languages+Next+Week.aspx">kicks Ted Neward's ass</a> because he <a href="http://blogs.tedneward.com/2008/01/25/So+I+Dont+Like+Perl+Sue+Me.aspx">hates Perl</a>, I'll try and liveblog it.  </li><li>Speaking of Ted Neward, he <a href="http://blogs.tedneward.com/2008/01/24/Can+Dynamic+Languages+Scale.aspx">discusses</a> the question "Can Dynamic Languages Scale?" without devolving into a flame-fest. I agree 100% with his point about the difference between performance scaling and complexity scaling. Personally, I tend to err on the side of better complexity scaling, since buying hardware is easier than hiring developers.  </li><li>Nick Malik <a href="http://blogs.msdn.com/nickmalik/archive/2008/01/23/the-future-can-be-seen-if-we-decide-to-look.aspx">responds</a> to me calling his shared global integration vision <a href="http://devhawk.net/2008/01/22/Nicks+Flawed+Vision+Of+A+Shared+Integration+Model.aspx">flawed</a>. He points to NGOSS/eTOM as an example of a shared iterative model that works. I know squat about that shared model, so I'll refrain from commenting until I do a little homework on the telco industry.  </li><li>Speaking of shared interop models, Microsoft is <a href="http://dev.live.com/blogs/devlive/archive/2008/01/24/203.aspx">joining DataPortability.org</a>. <a href="http://www.25hoursaday.com/weblog/2008/01/24/MicrosoftJoinsDataportabilityorg.aspx">Dare Obasanjo</a> and <a href="http://blog.broadbandmechanics.com/2008/01/dataportabilityorg-gradually-eeking-its-way-out-of-the-reality-distortion-echo-chamber#comments">Marc Canter</a> are skeptical that so far this effort is all hype and no substance. Reminds me a bit of AttentionTrust.org. But if DataPortability.org can get off the ground, maybe there's hope for Nick's vision (or vis-versa). </li><li>Don Syme <a href="http://blogs.msdn.com/dsyme/archive/2008/01/25/update-to-the-f-1-9-3-release.aspx">lists what's new</a> in the latest F# release. As I said, this release is pretty light on features. Hopefully, I'll get some details  </li><li>Tomas Restrepo <a href="http://www.winterdom.com/weblog/2008/01/24/ModifyingTheHomeInPowerShell.aspx">shows</a> how to change your home folder in PowerShell. I need to do this.</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1095</wp:post_id>
		<wp:post_date>2008-01-28 09:10:08</wp:post_date>
		<wp:post_date_gmt>2008-01-28 09:10:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-140</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="dynamic-languages"><![CDATA[Dynamic Languages]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="post_tag" nicename="web-2-0"><![CDATA[Web 2.0]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[3e301c9c-27ab-41da-bda7-48428ac83196]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+140]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/28/Morning+Coffee+140]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practical F# Parsing: Recursion and Predicate Functions</title>
		<link>http://devhawk.net/2008/01/29/practical-f-parsing-recursion-and-predicate-functions/</link>
		<pubDate>Tue, 29 Jan 2008 09:40:31 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://127fab83-19f7-42a5-933a-5dd273fc3040</guid>
		<description></description>
		<content:encoded><![CDATA[To prep for my <a href="http://www.langnetsymposium.com/">Lang.NET</a> talk, I went back and reviewed <a href="http://devhawk.net/2007/12/10/Practical+Parsing+In+F.aspx">my PEG parser</a>. One thing I was not happy with was that all the recursion was handled in a one-off manner. When I needed to match multiple characters in the comment rule, I wrote a special one-off function to recursively process the comment until it reached an EOL. When I needed to parse a series of ranges, characters or definitions, I wrote special one-off functions to handle that recursion. Obviously, that's not the best approach. So, I wrote the following active pattern functions to handle recursion.
<pre class="brush: fsharp">//ZOM == Zero Or More
let rec (|ZOM|) f input =
    match f input with
    | Some(i,input) -&gt;
        let j,input = (|ZOM|) f input
        (i :: j, input)
    | None -&gt; [], input 

//OOM == One Or More
let (|OOM|_|) f input =
    match (|ZOM|) f input with
    | [], input -&gt; None
    | v, input -&gt; Some(v,input)

//ZOO == Zero Or One
let (|ZOO|) f input =
    match f input with
    | Some(i,input) -&gt; Some(i), input
    | None -&gt; None,input</pre>
With these functions at the ready, I can stop writing one-off recursion functions. Instead, I write a function that matches a single item, which I pass as an argument to one of the three functions above. For example, here is the original and new version of the top level Grammar function.
<pre class="brush: fsharp">//Original version
let (|Grammar|_|) input =
    let rec ParseDefinitions dl input =
        match input with
        | Definition (d, input) -&gt; ParseDefinitions (dl @ [d]) input
        | _ -> Some(dl, input)
    let (|OneOrMoreDefintions|_|) input =
        match input with
        | Definition (d, input) -&gt; ParseDefinitions [d] input
        | _ -&gt; None
    match input with
    | Spacing (OneOrMoreDefintions (dl, EndOfFile)) -&gt;
          Some(List.to_array dl)
    | _ -&gt; None 

//New Version
let (|Grammar|_|) = function
    | Spacing (OOM (|Definition|_|) (dl, EndOfFile)) -&gt; 
          Some(List.to_array dl)
    | _ -&gt; None</pre>

The new version is much shorter, because there's already a function to match a single definition, which we can pass into OneOrMore (aka OOM). Note, when I pass an active pattern function as a parameter, I have to use it's real name (with the pipes and parameters). Having to use the real name is pretty ugly, but F# need to be able to differentiate between using a function as an active pattern vs using it as a function parameter. If you could just call "OOM Definition (dl, EndOfFile)", would F# realize Definition is a parameter?

I also defined syntactic predicate functions. If you'll recall, these syntactic predicates will try to match but automatically backtrack, returning success or failure depending on which function you called.
<pre class="brush: fsharp">//FP == Failure Predicate
let (|FP|_|) f input =
    match f input with
    | Some(_) -&gt; None
    | None -&gt; Some(input)

//SP == Success Predicate
let (|SP|_|) f input =
    match f input with
    | Some(_) -&gt; Some(input)
    | None -&gt; None</pre>
To see this in action, here's the original and updated Primary function. Only the first rule is relevant, so I've omitted the others.
<pre class="brush: fsharp">//Original version
let (|Primary|_|) input =
    let (|NotLEFTARROW|_|) input =
        match input with
        | LEFTARROW (_) -&gt; None
        | _ -&gt; Some(input)
    match input with
    | Identifier (id, NotLEFTARROW (input)) -&gt;
        Some(Primary.Identifier(id), input)
    //rest of function omitted for clarity

//new version
let (|Primary|_|) = function
    | Identifier (id, FP (|LEFTARROW|_|) (input)) -&gt; 
          Some(Primary.Identifier(id), input)
    //rest of function omitted for clarity</pre>
Instead of writing a special function to match "not left arrow", I just pass the left arrow function as a parameter to Failure Predicate (aka FP). With these recursion and syntactic predicate functions, I was able to remove all the one-off recursion functions from my parser. (Note, I posted an <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Projects/Practical%20Parsing%20in%20F|3/F|3%20PegParser%20|52008-01-29|6.zip">updated version of PegParser</a> on my SkyDrive so you can see this in action.)

These five functions significantly reduced the complexity of the code. Unfortunately, I'm not sure it's much easier to read. The conciseness is offset IMO by the ugliness of using the active pattern's true names. Also, I would have liked to use custom operators for these five functions, but operators aren't allowed to be active pattern functions. Hopefully, that will change at some point in the future, though if we're going to dream of better syntax, can we do something about all the parens? Personally, I'd love to be able to write the following:
<pre class="brush: fsharp">//This doesn't work, but I can dream, can't I?
let (|Primary|_|) = function
    | Identifier (id) !!LEFTARROW (input) -&gt;
        Some(Primary.Identifier(id), input)
    //rest of function omitted for clarity 

let (|Grammar|_|) = function
    | Spacing ++Definition (dl) EndOfFile -&gt;
        Some(List.to_array dl)
    | _ -&gt; None</pre>
Note to self, talk to F# team members who come to LangNET about this...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1096</wp:post_id>
		<wp:post_date>2008-01-29 09:40:31</wp:post_date>
		<wp:post_date_gmt>2008-01-29 09:40:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>practical-f-parsing-recursion-and-predicate-functions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="parsing-expression-grammar"><![CDATA[Parsing Expression Grammar]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[127fab83-19f7-42a5-933a-5dd273fc3040]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Practical+F+Parsing+Recursion+And+Predicate+Functions]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/29/Practical+F+Parsing+Recursion+And+Predicate+Functions]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2016</wp:comment_id>
			<wp:comment_author><![CDATA[ToolmakerSteve]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2008-03-11 21:02:02</wp:comment_date>
			<wp:comment_date_gmt>2008-03-12 04:02:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am very interested in what you are saying here, but I don't know enough yet about either F# or PEG parsers to be clear WHAT you've done. I want to write a parser for [some grammar]. How do I build on what you have done? Is the grammar you've written a parser for just a specific sample grammar from that whitepaper, or are you saying that it parses grammars written in the notation used in that whitepaper? Or are you building up a combinator library of functions that I would use in writing my own parser directly in F#?

To take a concrete example, suppose I wanted to write a parser for F# itself, and I'm staring at the F# language spec .. how would I proceed to write such a parser, beginning with your work?

Also, what would be the likely speed of such a parser, versus using the lex/yacc available with F#?

And since I'm barraging you with questions, I will also ask if there is source available for an F# parser written in F#, using any parsing approach?

(What I'm really interested in is translating a subset of ECMAScript 4 to F#, relying on F#'s type inference to get a high performance CodeDOM based implementation running, but I can't claim to know enough about either ES4 or F# to know whether that makes any sense at all...) ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2017</wp:comment_id>
			<wp:comment_author><![CDATA[ToolmakerSteve]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2008-03-11 22:18:58</wp:comment_date>
			<wp:comment_date_gmt>2008-03-12 05:18:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Found your post 'F# PEG Parser Next Steps' which answers my question above about what your code does ('it simply builds a PEG AST from a PEG grammar.').

Re 'figure out where to take it next', I'd love to see a technique for mixing domain-specific-language source with generic F# source. As an anti-example of what I mean, consider how scripting languages are currently embedded into HTML pages. Horrible syntactic kludges. Even worse is stuff often done in Javascript or PHP to output page fragments that are composed into a page. Often totally ad hoc and unstructured. Suppose one's goal was to create web pages or a browser-based web application, and we re-thought this from scratch. What might an approach be? One interesting approach to structured mixing of logic and presentation in an XML document can be seen at whitebeam.org). Given F#, and parser technology, what would be a clean way to express what we are trying to say? In some situations, a good answer would be a DOM-based one. That is, I'd like a less verbose way to type the equivalent to the XML document one would create if using Whitebeam. F# logic snippets would be embedded in the presentation document hierarchy in a clean way. In other cases, it would make more sense to INVERT this: Write an application in F#, but with a preprocessor that allows presentation nodes to be expressed readably.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2018</wp:comment_id>
			<wp:comment_author><![CDATA[ToolmakerSteve]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2008-03-14 13:07:27</wp:comment_date>
			<wp:comment_date_gmt>2008-03-14 20:07:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Minor comment re name choices on page
http://devhawk.net/2007/12/11/Practical+F+Parsing+The+Parse+Buffer.aspx
you present two different versions, one reusing the name "token", the other using an unambiguous name "ttail", which you find less readable.
I agree, but the reuse of "token" in the first one caused me to mis-read its functioning the first time.
A better solution than EITHER of these is to use variations on token; e.g. call the second use "token1" or some such. That way, the semantics is clear ("this is a case where the tail is being used as another token"), AND there is no confusing the two uses.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2019</wp:comment_id>
			<wp:comment_author><![CDATA[ToolmakerSteve]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2008-03-14 13:11:05</wp:comment_date>
			<wp:comment_date_gmt>2008-03-14 20:11:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Here is my version of your code from Jan 2008:

let (|TK|_|) token  input =
    let rec ParseToken token input =
        match token,(|NC|_|) input with
        | t :: [], Some(i, input1) when i = t -> Some(input1)
        | t :: token1, Some(i, input1) when i = t-> ParseToken token1 input1
        | _ -> None
    ParseToken (List.of_seq token) input
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2020</wp:comment_id>
			<wp:comment_author><![CDATA[ToolmakerSteve]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2008-03-14 13:11:55</wp:comment_date>
			<wp:comment_date_gmt>2008-03-14 20:11:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Gaaah -- add whitespace back in to indent the above as needed!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2021</wp:comment_id>
			<wp:comment_author><![CDATA[ToolmakerSteve]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2008-03-14 15:07:24</wp:comment_date>
			<wp:comment_date_gmt>2008-03-14 22:07:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Another comment on naming:
Being new to F#, and active pattern matching,
it took me a long time to understand exactly how (|TK|_|) works, even after reading The Whitepaper you linked to [Thanks for that link -- I would not have grokked active patterns without it].

It would have been somewhat easier if something like "remainder" or "unconsumed" had been used instead of "input", for the RESULT of each rule. That would have clued me in that the active pattern syntax is not referring to a left hand side (input param) term here, but a right hand side (result).

Here is my version of EndOfLine [replace my "indent-dots" with spacing]:

let (|EndOfLine|_|) = function
. | TK "rn" (unconsumed) -> Some(unconsumed)
. | TK "n" (unconsumed) -> Some(unconsumed)
. | TK "r" (unconsumed) -> Some(unconsumed)
. | _ -> None
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2022</wp:comment_id>
			<wp:comment_author><![CDATA[ToolmakerSteve]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2008-03-14 15:48:27</wp:comment_date>
			<wp:comment_date_gmt>2008-03-14 22:48:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://devhawk.net/2007/12/19/Practical+F+Parsing+The+Abstract+Syntax+Tree.aspx
Would benefit from an example, showing a simple Abstract Syntax Tree being built up using these functions. In general, these talks would benefit from more examples of how all this looks to someone using what you are building up. This would give clear context to the reader. "black box" explain from the outside, THEN open the box to explain the insides.

At this point, perhaps showing the nested rule calls recognizing a single low level construct, wrapped in successively higher constructs:

(|Char|_|) !!"5"
--> Some ('5', [])

(|Range|_|) !!"5-9"
--> Some (Dual ('5', '9'), [])

(|Class|_|) !!"[5-9]"
--> Some ([Dual ('5', '9')], [])

(|Primary|_|) !!"[5-9]"
--> Some (Class [Dual ('5', '9')], [])

A talk or two later, once you have enough of the functions, describe a small PEG grammar, and show the AST for some sample inputs.

]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2023</wp:comment_id>
			<wp:comment_author><![CDATA[ToolmakerSteve]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2008-03-14 16:05:28</wp:comment_date>
			<wp:comment_date_gmt>2008-03-14 23:05:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["These five functions significantly reduced the complexity of the code. Unfortunately, I'm not sure it's much easier to read. The conciseness is offset IMO by the ugliness of using the active pattern's true names."

I consider the new version MUCH easier to read. To be precise, as I get used to the split-banana syntax by experimenting with active patterns, it is becoming a familiar visual entity with a known meaning, that I can rapidly scan and associate with that meaning. Contrast that with the original, which requires examining several lines of code to recognize a usage pattern.

As far as how to make this less ugly, I am concerned that removing that visual cue would take away meaning; remove that immediate knowledge "its a split-banana active pattern". I suggest simply having the code editor recognize bananas and splits, and color them blue. Its not like full names of banana entities are going to be heavily used in ordinary code. Keeping them distinctive is a good thing!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 141 - Lang.NET &#039;08 Edition</title>
		<link>http://devhawk.net/2008/01/31/morning-coffee-141-lang-net-08-edition/</link>
		<pubDate>Thu, 31 Jan 2008 10:25:02 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://6eb9d3e7-a5bf-4565-b309-6ce4588316f0</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/MorningCoffee141Lang.NET08Edition_9277/header_2.jpg"><img style="border-right: 0px; border-top: 0px; margin: 0px 0px 0px 5px; border-left: 0px; border-bottom: 0px" height="81" alt="header" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/MorningCoffee141Lang.NET08Edition_9277/header_thumb.jpg" width="244" align="right" border="0" /></a> I was hoping to blog my thoughts on Lang.NET as the event went along. Obviously, that didn't happen, though I was pretty good about dumping links into <a href="http://del.icio.us/harrypierson">my del.icio.us feed</a>. The talks were all recorded, and should be up on the <a href="http://langnetsymposium.com">website</a> in a week or two. Rather than provide a detailed summary of everything that happened, here are my highlights:</p><ul><li>The coolest thing about conferences like this is what John Rose called "N3" aka "Nerd-to-Nerd Networking". It was great to meet in person, drink with and geek out with folks who's blogs I read like <a href="http://tomasp.net/">Tomas Petricek</a>, <a href="http://wesnerm.blogs.com/net_undocumented/">Wesner Moise</a> and <a href="http://knowing.net/">Larry O'Brien</a>. Plus, I got to meet a bunch of other cool folks like <a href="http://gbracha.blogspot.com/">Gilad Bracha</a>, <a href="http://www.re-motion.org/blogs/">Stefan Wenig</a> and <a href="http://netevil.org/">Wez Furlong</a>. That's worth the price of admission (which was admittedly nothing) right there.</li><li>Coolest MSFT talk: <a href="http://blogs.msdn.com/mmaly/default.aspx">Martin Maly</a> "Targeting DLR". I was wholly unaware that the DLR includes an entire compiler back end. Martin <a href="http://blogs.msdn.com/mmaly/archive/2008/01/14/building-a-dlr-language-trees.aspx">summarized the idea of DLR trees</a> on his blog, but the short version is "you parse the language, DLR generates the code". That's pretty cool, and should dramatically lower the bar for language development. Of course, I want to write my parser in F#, so I'm going to port the <a href="http://blogs.msdn.com/mmaly/archive/2008/01/08/building-a-dlr-language-toyscript.aspx">DLR ToyScript sample</a> to F#.</li><li>Runner-up, Coolest MSFT talk: <a href="http://research.microsoft.com/~emeijer/">Erik Meijer</a> "Democratizing the Cloud with Volta". Erik is a great speaker and he really set the tone of his session with the comment "Division by zero is the goal, not an error". He was referring to an idea from <a href="http://www.amazon.com/Change-Function-Technologies-Others-Crash/dp/1591841321">The Change Function</a> that user's measure of success is a function of perceived crisis divided by perceived pain of adoption. Erik wants to drive that adoption pain to zero. It's a laudable goal, but I remain unconvinced on Volta.</li><li>Coolest Non-MSFT talk: <a href="http://www.bracha.org/">Gilad Bracha</a> "Newspeak". Newspeak is a new language from one of the co-authors of Java. It's heavily smalltalk influenced, and runs on Squeak. He showed developing <a href="http://pdos.csail.mit.edu/~baford/packrat/">PEGs</a> in Newspeak, and they were very compact and easy to read, easier even than F#. He calls them Executable grammar, and you can read his <a href="http://bracha.org/executableGrammars.pdf">research paper</a> or <a href="http://bracha.org/newspeak-parsers.pdf">review his slides</a> on the topic. Unfortunately, Newspeak isn't generally available at this time. </li><li>Runner-up, Coolest Non-MSFT talk: <a href="http://www.tirania.org/blog/">Miguel de Icaza</a> "Moonlight and Mono". The talk was kinda all-over-the-place, but It's great to see how far Mono has come. Second Life <a href="http://tirania.org/blog/archive/2008/Jan-29.html">just started</a> beta testing a Mono-based script runner for their <a href="http://en.wikipedia.org/wiki/Linden_Scripting_Language">LSL language</a> (apparently, Mono breaks many LSL scripts because it runs them so fast). He also showed off <a href="http://unity3d.com/">Unity</a>, a 3D game development tool, also running on Mono.</li><li><a href="http://www.resolversystems.com/products/resolver-one.php">Resolver One</a> is a product that bridges the gap between spreadsheets and applications, entirely written in <a href="http://www.codeplex.com/IronPython">IronPython</a> (around 30,000 lines of app code and 110,000 lines of test code, all in IPy). Creating a spread-sheet based app development environment is one of those ideas that seems obvious in retrospect, at least to me. If you do any kind of complicated spreadsheet based analysis, you should check out <a href="http://www.resolversystems.com/get-it/">their product</a>.</li><li>If you're a <a href="http://www.microsoft.com/powershell">PowerShell</a> user, you should check out <a href="http://powershellplus.com/">PowerShell+</a>. It's a free console environment designed for PowerShell and a damn sight better than CMD.exe. If you're not a PowerShell user, what the heck is wrong with you?</li><li>Other projects to take a deeper look at: <a href="http://www.re-motion.org/">C# Mixins</a> and <a href="http://cobra-language.com">Cobra Language</a>.</li><li>I thought my talk went pretty well. It's was a 15 minute version of my <a href="http://devhawk.net/2007/12/10/Practical+Parsing+In+F.aspx">Practical Parsing in F# series</a>. Several folks were surprised I've been coding F# for less than a year. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1097</wp:post_id>
		<wp:post_date>2008-01-31 10:25:02</wp:post_date>
		<wp:post_date_gmt>2008-01-31 10:25:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-141-lang-net-08-edition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="parsing-expression-grammar"><![CDATA[Parsing Expression Grammar]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="post_tag" nicename="volta"><![CDATA[Volta]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[6eb9d3e7-a5bf-4565-b309-6ce4588316f0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+141+LangNET+08+Edition]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/01/31/Morning+Coffee+141+LangNET+08+Edition]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2024</wp:comment_id>
			<wp:comment_author><![CDATA[Tomas Restrepo]]></wp:comment_author>
			<wp:comment_author_email>tomas@winterdom.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.winterdom.com/weblog/</wp:comment_author_url>
			<wp:comment_author_IP>200.116.131.115</wp:comment_author_IP>
			<wp:comment_date>2008-01-31 14:18:14</wp:comment_date>
			<wp:comment_date_gmt>2008-01-31 22:18:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The DLR is pretty cool; I've been playing a bit with it using a very simplistic language (not toyscript) and certainly the DLR makes it a lot easier. 

The cool thing about the DLR (for me) is that it allows you to simply with with expressions, and let the DLR itself deal with building call sites and ensuring that method calls are resolved to the right overload and such, easing things a *lot*.

The problem with the DLR, however, is that it has pretty much zero documentation (except a few comments here and there on the code), and there are several places where it expects you to create tree nodes (such as actions) in very specific ways which are totally not-intuitive, and finding out why it isn't working or why you're triggering an exception or assert is anything but clear (Example: an InvokeMember action can require on certain ocassions an extra argument that must not be on the callsignature)
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 142 - Wishful Catchup Edition</title>
		<link>http://devhawk.net/2008/02/01/morning-coffee-142-wishful-catchup-edition/</link>
		<pubDate>Fri, 01 Feb 2008 18:05:14 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://959253bb-bc6e-4d7b-ab97-5c96217b56d0</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>After spending most of the last four days away from my desk, I was planning on a quiet day to catch up on a variety of things. Then I heard the oh-so-minor news that <a href="http://www.microsoft.com/presspass/press/2008/feb08/02-01CorpNewsPR.mspx">Microsoft is offering to buy Yahoo</a> for almost $45 billion. Hasn't been much reaction on the dev, architecture, politics and hockey-oriented blogs I read, but you can get a <a href="http://www.techmeme.com/080201/p26#a080201p26">ton of reactions</a> on TechMeme.  </li><li><a href="http://abc.go.com/primetime/lost">Lost</a> is back. Finally. I stayed up late last night reading <a href="http://www.lostpedia.com/">Lostpedia</a>, catching up on <a href="http://lostmobisodes.blogspot.com/">Lost Missing Pieces</a> and the <a href="http://www.find815.com/">Find 815 ARG</a>.  </li><li>Alex The Great had four goals and an assist in <a href="http://www.nhl.com/nhl/app?service=page&amp;page=Recap&amp;gameNumber=773&amp;season=20072008&amp;gameType=2">last night's victory</a>. Coughing up three goal lead and letting the Canadiens tie the game in the last 30 seconds isn't encouraging, but a win is a win. The Caps are currently one game behind the SE leading Hurricanes and two games behind the current eight seed Rangers. Alex was named <a href="http://www.nhl.com/nhl/app/?service=page&amp;page=NewsPage&amp;articleid=352005">first star for January</a>. </li><li>Ted Neward has a nice summary of Lang.NET by day: <a href="http://blogs.tedneward.com/2008/01/29/Highlights+Of+The+LangNET+Symposium+Day+One.aspx">one</a>, <a href="http://blogs.tedneward.com/2008/01/30/Highlights+Of+The+LangNET+Symposium+Day+Two.aspx">two</a> and <a href="http://blogs.tedneward.com/2008/01/31/Highlights+Of+The+LangNET+Symposium+Day+Three+From+Memory.aspx">three</a>. I wonder if my talk qualifies for the exception to Ted's rule that "A blog is not a part of your presentation, and your presentation is not part of your blog". I had 15 minutes to discuss something I've written about over <a href="http://devhawk.net/2007/12/10/Practical+Parsing+In+F.aspx">ten posts</a>  (so far). </li><li>John Lam <a href="http://www.iunknown.com/2008/01/latest-dlr-host.html">points</a> to the latest <a href="http://compilerlab.members.winisp.net/dlr-spec-hosting.pdf">DLR hosting spec</a>. I'm much more interested in the DLR code generator, but at least the hosting interface is documented.  </li><li>Scott Hanselman has a <a href="http://feeds.feedburner.com/~r/ScottHanselman/~3/226341924/TheWeeklySourceCode14FluentInterfaceEdition.aspx">nice post</a> on fluent interfaces. Note to self, find out if <a href="http://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a> works with <a href="http://www.codeplex.com/IronPython">IronPython</a>. </li><li>I wonder if the <a href="http://www.codeplex.com/SourceCodeOutliner">VS Source Code Outliner PowerToy</a> works with F#? (via <a href="http://samgentile.com/blogs/samgentile/archive/2008/01/27/new-and-notable-219.aspx">Sam Gentile</a>) </li><li>Chris Tavares has an extensive post <a href="http://www.tavaresstudios.com/Blog/post/Deconstructing-ObjectBuilder---What-Is-ObjectBuilder.aspx">Deconstructing ObjectBuilder?</a> I've poked around inside OB before, but I'm really looking forward to <a href="http://blogs.msdn.com/agile/archive/2008/01/14/diab-is-now-unity.aspx">Unity</a> (also via <a href="http://samgentile.com/blogs/samgentile/archive/2008/01/27/new-and-notable-219.aspx">Sam Gentile</a>) </li><li>NVIDIA <em>finally</em> updated the drivers for the video card in my Tecra M4. That only took a year.</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1098</wp:post_id>
		<wp:post_date>2008-02-01 10:05:14</wp:post_date>
		<wp:post_date_gmt>2008-02-01 18:05:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-142-wishful-catchup-edition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="television"><![CDATA[Television]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[959253bb-bc6e-4d7b-ab97-5c96217b56d0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+142+Wishful+Catchup+Edition]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/01/Morning+Coffee+142+Wishful+Catchup+Edition]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2025</wp:comment_id>
			<wp:comment_author><![CDATA[Scott Hanselman]]></wp:comment_author>
			<wp:comment_author_email>scott@hanselman.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.hanselman.com/blog</wp:comment_author_url>
			<wp:comment_author_IP>71.117.141.50</wp:comment_author_IP>
			<wp:comment_date>2008-02-01 16:43:16</wp:comment_date>
			<wp:comment_date_gmt>2008-02-02 00:43:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Beautiful Soup on IronPython (accessible from C#) has been on my list for weeks. Sigh.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 143</title>
		<link>http://devhawk.net/2008/02/06/morning-coffee-143/</link>
		<pubDate>Wed, 06 Feb 2008 11:41:41 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://e9931753-bba3-4441-8076-80545e84ba0b</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>I've been sick for three days, hence the lack of posting around here.  </li><li>As a Redskins fan, it's hard to root for any other NFC East team. On the other hand, it sure was easy to root against the Patriots. Congrats to the Giants on their Super Bowl victory. Favorite headline: 18 and uh-oh!  </li><li>Sounds like there's <a href="http://www.deadlinehollywooddaily.com/strike-status-report-everything-i-know-about-where-things-stand/">cause for optimism</a> regarding the writer's strike. But is it already too late? Will the <a href="http://www.msnbc.msn.com/id/23018362/">9% drop in viewers</a> ever come back? Personally, I think the studios have hastened their own irrelevance.  </li><li>With <a href="http://www.nhl.com/nhl/app?service=page&amp;page=Recap&amp;gameNumber=805&amp;season=20072008&amp;gameType=2">last night's win</a>, the Caps are one game above .500. In and of itself, that's nothing to be proud of - Coach Boudreau remarked when we reached .500 that the Caps had "officially reached mediocrity". However, the Caps are the <em>only</em> team in the SE conference that's above .500. If hockey used baseball standings, Carolina, Atlanta and Florida would each be 1/2 game back of the Caps. It's going to be a fight to the finish.  </li><li>In fairly big managed Ruby news, <a href="http://sky.fit.qut.edu.au/~kellyw/">Wayne Kelly</a> has <a href="http://groups.google.com/group/RubyDOTNET/msg/f34570019c391974">decided</a> to contribute to the <a href="http://www.ironruby.net/">IronRuby</a> effort, effectively walking away from the <a href="http://rubydotnet.googlegroups.com/web/Home.htm">Ruby.NET</a> which helped get off the ground. One the one hand, obviously this is great for IronRuby. On the other hand, I liked the idea of multiple managed implementations of Ruby, so here's hoping Ruby.NET doesn't fade away.  </li><li>Speaking of the DLR, I know I mentioned <a href="http://blogs.msdn.com/mmaly/default.aspx">Martin Maly's blog</a> in my <a href="http://feeds.feedburner.com/~r/Devhawk/~3/226700178/Morning+Coffee+141+LangNET+08+Edition.aspx">Lang.NET Morning Coffee Post</a>, but I didn't actually get to read his posts on targeting the DLR until I unexpectedly had several days off sick. If you are at all interested in writing your own language for the .NET platform: <a href="http://blogs.msdn.com/mmaly/default.aspx">Go. Read. Now.</a> You should also check out Tomas Restrepo's blog, he has also started <a href="http://www.winterdom.com/weblog/2008/02/04/BuildingOnTheDLR.aspx">writing about targeting the DLR</a>.  </li><li>Larry O'Brien's blog is currently offline, but he <a href="http://www.knowing.net/PermaLink,guid,c6364ebf-4345-4475-8882-31646e49b519.aspx">commented</a> that he doubted my <a href="http://blogs.msdn.com/mmaly/archive/2008/01/08/building-a-dlr-language-toyscript.aspx">ToyScript</a> F# parser would be more than 600 lines of code. Currently, the parser is clocking in at 287 lines of code plus about 50 more for the AST. It's not done yet - see earlier statement about being sick - but I'm fixing bugs not writing additional code at this point. To be completely accurate, that's 287 lines of <a href="http://www.quanttec.com/fparsec/">FParsec code</a>. It's taken me a little bit to learn FParsec, but so far I'm pretty happy with it.  </li><li>Scott Hanselman <a href="http://feeds.feedburner.com/~r/ScottHanselman/~3/227718172/MSDeployNewIISWebDeploymentTool.aspx">points to</a> the new <a href="http://blogs.iis.net/msdeploy/archive/2008/01/22/welcome-to-the-web-deployment-team-blog.aspx">MS Deploy</a> project, a tool for managing content and configuration on web servers. I've never understood why this wasn't a standard part of IIS. It seems every hosting company I've used has rolled their own web-based management tool like <a href="http://www.dotnetpanel.com/">DotNetPanel</a>.  </li><li>Oh yeah, Vista SP1 and Windows Server 2008 <a href="http://blogs.technet.com/windowsserver/archive/2008/02/04/windows-server-2008-rtm.aspx">shipped Monday</a>. Congrats!  </li><li>I fired up <a href="http://www.xbox.com/en-US/community/insidexbox/">Inside Xbox</a> the other day, and there was a page about the new Disney Channel show "<a href="http://tv.disney.go.com/disneychannel/phineasandferb/">Phineas and Ferb</a>". Of course, with two kids under five, anything new on the Disney Channel is notable in my house. What made this blog-worthy is the fact that it's directed and written by <a href="http://imdb.com/name/nm0693933/">Dan Povenmire</a>, who I knew from my USC days. I used to go see his band Keep Left and groan loudly at the bad puns in their song "PSA". Dan, if you found this searching for yourself online: Awesome work, my kids love the show!</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1099</wp:post_id>
		<wp:post_date>2008-02-06 11:41:41</wp:post_date>
		<wp:post_date_gmt>2008-02-06 11:41:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-143</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="entertainment"><![CDATA[Entertainment]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="parsing-expression-grammar"><![CDATA[Parsing Expression Grammar]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<category domain="post_tag" nicename="xbox-360"><![CDATA[Xbox 360]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[e9931753-bba3-4441-8076-80545e84ba0b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+143]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/06/Morning+Coffee+143]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2026</wp:comment_id>
			<wp:comment_author><![CDATA[Erik Johnson]]></wp:comment_author>
			<wp:comment_author_email>ejohnson@epicor.com</wp:comment_author_email>
			<wp:comment_author_url>http://appside.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>206.114.176.75</wp:comment_author_IP>
			<wp:comment_date>2008-02-06 16:59:03</wp:comment_date>
			<wp:comment_date_gmt>2008-02-07 00:59:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[+1 on Phineas and Ferb.  Also, the theme song nicely throws together most of my favorite rock clichés.  So, knowing the creator was in a band makes total sense.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 144</title>
		<link>http://devhawk.net/2008/02/07/morning-coffee-144/</link>
		<pubDate>Thu, 07 Feb 2008 18:05:13 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://134c840d-db07-419e-a13f-2c06e67467ee</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>I finished <a href="http://www.xbox.com/games/masseffect">Mass Effect</a> last night. I definitely need to play thru that one again, though I'll probably wait until the new <a href="http://www.xbox.com/en-US/live/marketplace/m/masseffect/bringdownthesky.htm">Bring Down the Sky</a> DLC ships next month.</li><li>Caps <a href="http://www.nhl.com/nhl/app?service=page&amp;page=Recap&amp;gameNumber=814&amp;season=20072008&amp;gameType=2">won again</a> last night, improving to 20-10-4 since changing coaches at Thanksgiving. They're now at 57 points, taking the lead in the SE division with a full game on Carolina, Atlanta and Florida. Still a ways to go - 27 games left in the regular season - and things are far from "sewn up" but we're a damn sight better off than we were in November. </li><li>Speaking of a horserace, looks like Clinton and Obama are in one after Super Tuesday. Their <a href="http://tpmelectioncentral.talkingpointsmemo.com/2008/02/your_election_central_delegate.php">estimated delegate counts</a> are basically tied. On the other side of the aisle, McCain <a href="http://www.msnbc.msn.com/id/23019759/">opened up</a> what is probably insurmountable lead - even though he has the <a href="http://www.reuters.com/article/politicsNews/idUSN0628190220080207">right-wing media stars</a> and <a href="http://www.wnd.com/news/article.asp?ARTICLE_ID=53743">Christian leaders</a> against him. Money quote of the day:</li></ul><blockquote><p>“The real story of the night, when you look at their rallies and their turn-out numbers, is that the Dems have two strong candidates either of whom could lead a united party to victory. Forget the gaseous platitudes: in Dem terms, their choice on Super Duper Tuesday was deciding which candidate was Super Duper and which was merely Super. Over on the GOP side, it was a choice between Weak &amp; Divisive or Weaker &amp; Unacceptable. Doesn’t bode well for November.” <br />- <a href="http://corner.nationalreview.com/post/?q=NGUyNjRmZGQ2NzBiZjY5OTIwYTExMGVjMWYzZjc2YTY=">Mark Steyn, National Review</a> <br />(via <a href="http://feeds.feedburner.com/~r/TheCarpetbaggerReport/~3/230563498/14495.html">Carpetbagger Report</a>, lest you think I regularly read National Review)</p></blockquote><ul><li>Charlie Calvert is starting a new series on the future of C#. First up: <a href="http://blogs.msdn.com/charlie/archive/2008/01/25/future-focus.aspx">Dynamic Lookup</a>. Probably most interesting is the news that the DLR "will be the infrastructure on which the C# team implements dynamic lookup". Does this mean C# will target the DLR? Sure sounds like it. I think it's a good addition, but I'm not a fan of the proposed syntax. (via <a href="http://blog.bittercoder.com/PermaLink,guid,6525b1f4-42a1-4961-a96c-09aa523bd8c0.aspx">Bitter Coder</a>)</li><li>Brian McNamara saw me present @ LangNET and sent me a link to <a href="http://lorgonblog.spaces.live.com/">his blog</a>. He's building up a monadic parser combinator library in C# 3.0. This is basically the same concept that <a href="http://www.quanttec.com/fparsec/">FParsec</a> implements, though C#'s syntax is much less attractive than F#'s for this kind of code. However, Brian does a very good job explaining why monadic parser combinators are useful and making the idea accessible to the C# programmer (i.e. you don't have to learn F# or Haskell to understand what he's talking about). He also points to Luke Hoban's <a href="http://blogs.msdn.com/lukeh/archive/2007/08/19/monadic-parser-combinators-using-c-3-0.aspx">C# 3.0 monadic parser implementation</a>.</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1100</wp:post_id>
		<wp:post_date>2008-02-07 10:05:13</wp:post_date>
		<wp:post_date_gmt>2008-02-07 18:05:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-144</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="parsing-expression-grammar"><![CDATA[Parsing Expression Grammar]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<category domain="post_tag" nicename="xbox-360"><![CDATA[Xbox 360]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[134c840d-db07-419e-a13f-2c06e67467ee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+144]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/07/Morning+Coffee+144]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 145</title>
		<link>http://devhawk.net/2008/02/11/morning-coffee-145/</link>
		<pubDate>Mon, 11 Feb 2008 18:41:53 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d88e8506-d669-41c3-a246-6da1865f9a2e</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Saturday, I participated in the Washington Democratic caucus, which was <a href="http://seattlepi.nwsource.com/local/350752_caucuses09.html">handily won by Obama</a>. Much has been made of the record Democratic turnout in this race for the nomination, my local caucus location was no exception. It appeared that attendance outstripped expectation about 2-to-1. My precinct alone had 56 attendees, which went overwhelmingly for Obama.  </li><li>I had never participated in a presidential caucus or primary before - the race has always been decided by the time it got to my state. I really enjoyed being a part of the process. So I'm going to play amateur pundit today, and we'll be back to our regularly scheduled geek blogging tomorrow. If I insult your favorite party or candidate, please feel free to leave a scathing comment explaining that I'm an idiot and how you're never going to read my blog again.  </li><li>Obama not only won the WA caucus, he also won Louisiana, Nebraska and Maine over the weekend. And he didn't just win, he won big. He won by 37% in WA, 36% in Nebraska, 21% in Louisiana and is leading by 15% in Maine with 70% of the vote counted. Momentum hasn't meant much in this campaign, but five double-digit Obama wins in a row (with three more likely Obama wins tomorrow) can't be good for the Clinton campain. Polling that shows <a href="http://www.time.com/time/nation/article/0,8599,1711123,00.html?xid=rss-nation">Obama matches up against McCain better than Clinton</a> doesn't help.  </li><li>Speaking of McCain, he sure had a shitty day Saturday. He lost <a href="http://www.msnbc.msn.com/id/21229207">Kansas</a> by a whopping 36%. <a href="http://www.msnbc.msn.com/id/21229209">Louisiana</a> was close, but McCain still lost. And in Washington, it looks like the state Republican Party <a href="http://seattlepi.nwsource.com/local/350829_trail11.html">simply stopped counting</a> with 1500 votes still left to be counted. I'm guessing the local GOP party leads were trying to keep McCain from going 0-3 on the day. Had they simply counted the votes and McCain lost, everyone would have forgotten by the time he got the nomination. However, this little helping hand makes McCain look weak and keeps Saturday's butt-kicking in the news for several more days.  </li><li>Of course, McCain is the presumed Republican nominee because Romney <strike>dropped out</strike><a href="http://www.msnbc.msn.com/id/23050678/">suspended his presidential campaign</a> last week. The Daily Show's <a href="http://www.thedailyshow.com/video/index.jhtml?videoId=156317&amp;title=mitt-drops-out">coverage Thursday night</a> was hilarious. Jason Jones is right, Romney's a real <a href="http://www.thedailyshow.com/video/index.jhtml?videoId=156319&amp;title=the-douche-vote">douche bag</a>.  </li><li>Apparently, McCain is <a href="http://www.nytimes.com/2008/02/10/us/politics/10bush.html?ei=5088&amp;en=b4ace59c7d62fbe9&amp;ex=1360299600&amp;partner=rssnyt&amp;emc=rss&amp;pagewanted=print">"eager"</a> for <a href="http://ap.google.com/article/ALeqM5jR80ylRipRFz_BSPltSUJ06-lMegD8UM1TRO0">President 30% Approval Rating</a> to "embrace" him. Furthermore, the President <a href="http://thinkprogress.org/2008/02/08/bush-mccain-will-best-carry-out-my-agenda/">apparently thinks</a> McCain would be the best to carry forth his agenda. I gotta agree with Steve Benen on this - "<a href="http://www.thecarpetbaggerreport.com/archives/14537.html">Could Dems really be this lucky?</a>"  </li><li>In the wake of McCain's Super Tuesday victory, Rush Limbaugh <a href="http://www.reuters.com/article/idUSN0628190220080206">said</a> he and other right-wing talk show hosts are "trying to stop the wanton destruction of the [GOP] party". Limbaugh and his cohorts aren't going away, but certainly they've been reduced to irrelevant status, standing on the sidelines and stamping their feet while the Republican rank-and-file hand the nomination to McCain. Sure is hilarious to watch. Has anyone considered that Republicans are rooting for the wonton destruction of what their party has become?</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1101</wp:post_id>
		<wp:post_date>2008-02-11 10:41:53</wp:post_date>
		<wp:post_date_gmt>2008-02-11 18:41:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-145</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d88e8506-d669-41c3-a246-6da1865f9a2e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+145]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/11/Morning+Coffee+145]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2027</wp:comment_id>
			<wp:comment_author><![CDATA[Dave]]></wp:comment_author>
			<wp:comment_author_email>anderdb@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>157.254.98.204</wp:comment_author_IP>
			<wp:comment_date>2008-02-11 16:12:27</wp:comment_date>
			<wp:comment_date_gmt>2008-02-12 00:12:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[As far as I'm concerned, posting about topics such as politics or religions on a blog that's supposedly about technology is just looking for trouble.  I was willing to overlook this one post until the "douche bag" comment.  You've been dropped from my Google Reader subscriptions.  I'm sure I won't be the only one dropping you.  ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2028</wp:comment_id>
			<wp:comment_author><![CDATA[Nick Malik]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/nickmalik</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-02-11 19:07:17</wp:comment_date>
			<wp:comment_date_gmt>2008-02-12 03:07:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I was at the Obama political rally on Friday.  Here's the thing:
His campaign announces that there will be a rally at the Key Arena (where the Seattle Supersonics Pro Basketball team plays) on Wednesday.  Not a big announcement.  No advertising.  No radio and TV spots.  Free press only.

By Friday morning, at 11am, there was a line around the block to get into Key Arena.  After filling the place to capacity (17,000 people), they had to close the doors.  Fire code.

5,000 more people stood outside, in the cold, and waited for three hours.  When Barak came, we heard him on loud speakers.  

Harry: I canvassed for Bill Clinton (twice) and John Kerry as well.  I knocked on doors and attended rallys and stood on street corners reminding voters to Get Out and Vote.  I placed signs and hung banners and, yes, attended rallys.

Most rallys have about 100 people.  Really Big Rallys can draw 1,000 people.

22,000 people is not a rally.  22,000 people, with no advertising, and two day's notice, in a far-away corner of the country, not used to getting any political attention at all... that's historic.

Hillary drew 5,000 on the same day, a few hours earlier.

The fact that she lost by ONLY 2-to-1 in the polls shows that her voters get to the polls far more than they get to the rallys.  

But she lost.  Big.

I like them both.  Either would make a fine president.  But I'm rooting for Barak.  ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2029</wp:comment_id>
			<wp:comment_author><![CDATA[Rick]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>63.74.232.26</wp:comment_author_IP>
			<wp:comment_date>2008-02-13 09:03:16</wp:comment_date>
			<wp:comment_date_gmt>2008-02-13 17:03:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, you are an idiot and a bigot.
Bye bye.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2030</wp:comment_id>
			<wp:comment_author><![CDATA[Jeff Brown]]></wp:comment_author>
			<wp:comment_author_email>jeff.brn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.38.242.114</wp:comment_author_IP>
			<wp:comment_date>2008-02-14 13:59:29</wp:comment_date>
			<wp:comment_date_gmt>2008-02-14 21:59:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You are another example of the truth:
'If democrats had any brains they'd be republicans'

idiot]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2031</wp:comment_id>
			<wp:comment_author><![CDATA[Dale Churchward]]></wp:comment_author>
			<wp:comment_author_email>dale.churchward@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url>http://halfmybrain.spaces.live.com/</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-02-19 11:27:07</wp:comment_date>
			<wp:comment_date_gmt>2008-02-19 19:27:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Harry and I come from opposite sides of the political spectrum, but one thing I can say for sure, he is not an idiot. I find it interesting to discuss politics with Harry as he makes me think about why I support certain politicans and issues. While we often disagree I always respect the thought process that led him to the views he takes.

Also, it is hard for me to accept calling him a bigot. No matter the reason, Harry will likely support either Hillary Clinton or Barak Obama. That in itself should point out that he is not a bigot. As far as him comments about Mitt Romney, they might of been a bit strong, although it was pretty well known that the other candidates for the Republican nomination couldn't stand Mitt. I am LDS, just like Mitt, and I have never felt Harry has treated me any differently then any of his other co-workers. He has even asked me questions about the church, and has not treated me any different because of my religious beliefs.

In any case, this is Harry's blog. He writes about technology much of the time because he is passionate about it, but he also writes about other areas that interest him such as hockey, movies, and politics. We make the choice to read his thoughts or now, but I will say Harry does a good job tagging his blog entires so you can decide if you wish to read them or not.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 146</title>
		<link>http://devhawk.net/2008/02/13/morning-coffee-146/</link>
		<pubDate>Wed, 13 Feb 2008 18:04:29 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://a3b80c29-e3bb-4a25-8ce2-01484cbc5ddc</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>The writers strike is <a href="http://unitedhollywood.blogspot.com/2008/02/letter-from-presidents-to-membership.html">officially over</a>. Everyone goes back to work today. Thomas Cleaver has what I thought was <a href="http://www.thecarpetbaggerreport.com/archives/14553.html">the best post</a> summarizing how the writers won. TV Guide has <a href="http://community.tvguide.com/blog-entry/TVGuide-Editors-Blog/Ausiello-Report/Wga-Strike-Favorite/800032698">a rundown</a> of how and when various shows will resume. I can't wait to see <a href="http://www.thedailyshow.com">Daily Show</a> and <a href="http://www.comedycentral.com/shows/the_colbert_report">Colbert Report</a> tonight. Lost - aka the best show on TV - <a href="http://community.tvguide.com/blog-entry/TVGuide-Editors-Blog/Ausiello-Report/Exclusive-Ilosti-Boss/800033076">looks like</a> it will be getting five more episodes (in addition to the eight shot before the strike).  </li><li>Speaking of TV, Battlestar Galactica Fans: <a href="http://community.tvguide.com/blog-entry/TVGuide-News-Blog/Todays-News/Battlestar-Galactica-Returns/800032799">circle April 4th</a> on your calendar.  </li><li>Obama <a href="http://www.msnbc.msn.com/id/23123924/">won all three</a> "Potomac Primaries" yesterday, and is now the <a href="http://firstread.msnbc.msn.com/archive/2008/02/13/661146.aspx">Democratic front-runner</a>, though there's a long way to go before the convention. Scott Adams of Dilbert fame has <a href="http://dilbertblog.typepad.com/the_dilbert_blog/2008/02/experience.html">a great take</a> on presidential experience - I'm guessing he's an Obama fan.  </li><li>In minor acquisition news, Microsoft is <a href="http://virtualearth.spaces.live.com/Blog/cns!2BBC66E99FDCDB98!11432.entry">acquiring</a><a href="http://www.caligari.com/">Caligari</a>, makers of 3D modeling tool <a href="http://www.caligari.com/Products/trueSpace/tS75/brochure/intro.asp?Cate=BIntro">trueSpace</a>. The Caligari folks are joining the Virtual Earth team, though I wonder what the XNA folks think of the acquisition. This isn't the first 3D modeling product Microsoft ever acquired - we owned <a href="http://en.wikipedia.org/wiki/Softimage">Softimage</a> for four years in the '90s.  </li><li><a href="http://www.hanselman.com/blog/UsingAnIDEToWritePowerShellScripts.aspx">Scott Hanselman</a> and <a href="http://www.hanselman.com/blog/UsingAnIDEToWritePowerShellScripts.aspx">Tomas Resprepo</a> both write about <a href="http://www.powershell.com/plus/">PowerShellPlus</a>, which I saw week before last @ Lang.NET. Scott really likes it, for both PS novices and gurus, but Tomas thinks the UI is busy, based on the screenshots. Personally, I'm not doing much PS work lately - occasional one off stuff, but that's it - so it doesn't seem worth the effort.  </li><li>Speaking of Scott &amp; Tomas, Scott also has a <a href="http://feeds.feedburner.com/~r/ScottHanselman/~3/231269818/VisualStudioProgrammerThemesGallery.aspx">nice gallery of VS themes</a>. I'm partial to Tomas' <a href="http://www.winterdom.com/weblog/2007/10/13/RagnarokAVS2005ColorScheme.aspx">Ragnarok Grey</a>. Is there a VSThemesGallery.com site somewhere?  </li><li>Still speaking of Scott, he <a href="http://www.hanselman.com/blog/ASPNETWikiBeta.aspx">points to</a> the new <a href="http://wiki.asp.net/">ASP.NET Developer Wiki (beta)</a>. I poked around, but didn't find anything shiny. I was very surprised that searching for "MVC" returned no results.  </li><li>Speaking of MVC, Scott Guthrie <a href="http://weblogs.asp.net/scottgu/archive/2008/02/12/asp-net-mvc-framework-road-map-update.aspx">has a rundown</a> on what's coming in the MIX preview release of ASP.NET MVC. Biggest news IMO is that it's /bin deployable - i.e. you don't need your hoster to do anything special to support MVC (assuming they already support ASP.NET 3.5). Also big news, they're releasing the source so you can build and patch (and enhance?) it yourself.  </li><li>Chris Taveres <a href="http://www.tavaresstudios.com/Blog/post.aspx?id=3008ff6d-8f02-4dbc-a769-d27273d93e95">continues</a> is ObjectBuilder series and Tomas continues is <a href="http://www.winterdom.com/weblog/2008/02/13/DLRNotes4.aspx">DLR Notes</a> series. BTW, my F# based DLR experimentation continues, albeit slowly (frakking day job). Hope to be able to post on this soon.  </li><li>One of the things driving my interest in F# is <a href="http://en.wikipedia.org/wiki/Manycore_processing_unit">manycore</a>. An interesting tangent to manycore is general purpose programming on graphics processing units (aka <a href="http://en.wikipedia.org/wiki/GPGPU">GPGPU</a>). MS Research just released a <a href="http://research.microsoft.com/research/downloads/Details/648909e1-cb85-46c4-9a94-3cca55971b1d/Details.aspx">new version</a> of <a href="http://research.microsoft.com/research/pubs/view.aspx?tr_id=1040&amp;0sr=a">Accelerator</a>, just such a GPGPU system. I personally haven't played with it - I've been focused on writing parsers, not parallel code. </li><li>Is <a href="http://en.wikipedia.org/wiki/XQuery">XQuery</a> really "a promising technology of the future" as <a href="http://pluralsight.com/blogs/dbox/archive/2008/02/07/50180.aspx">Don Box suggests</a>? I see exactly zero demand or use for it in my day-to-day work. Of course, Don's paid to build future platform goo, so maybe it is promising and Don's afore-mentioned goo will leverage it, though I remain skeptical. As for XML being "Done like a well-cooked steak", I'd say XML is like a great steak cooked perfectly, except it's done exactly how you <em>don't</em> like it. You can appreciate its quality, but you don't really enjoy it as much as you could have. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1102</wp:post_id>
		<wp:post_date>2008-02-13 10:04:29</wp:post_date>
		<wp:post_date_gmt>2008-02-13 18:04:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-146</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="battlestar-galactica"><![CDATA[Battlestar Galactica]]></category>
		<category domain="post_tag" nicename="concurrency"><![CDATA[Concurrency]]></category>
		<category domain="post_tag" nicename="entertainment"><![CDATA[Entertainment]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="lost"><![CDATA[Lost]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[XML]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[a3b80c29-e3bb-4a25-8ce2-01484cbc5ddc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+146]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/13/Morning+Coffee+146]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>You Call This Archaeology?</title>
		<link>http://devhawk.net/2008/02/14/you-call-this-archaeology/</link>
		<pubDate>Thu, 14 Feb 2008 14:46:15 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://74dc3ba3-145a-4008-90f5-1d4871eab572</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I know how I'm celebrating my birthday this year. Well, technically the day after my birthday.</p><p><embed id="uvp_fop" src="http://l.yimg.com/cosmos.bcst.yahoo.com/up/fop/embedflv/swf/fop.swf" width="690" height="390" type="application/x-shockwave-flash" allowscriptaccess="always" flashvars="id=6441610&amp;rd=eyc-off&amp;ympsc=&amp;prepanelEnable=1&amp;infopanelEnable=1"></embed></p><p>I've always been a movie buff and, other than Star Wars, I can't think of a movie series that shaped the way I think about movies and movie making as much as Indiana Jones. I remember well going to see the first three Indiana Jones movies with my father. Of course, now I'm a father, but Patrick and Riley aren't really ready for Indy yet. So they'll have to be content with <a href="http://www.lucasarts.com/games/legoindianajones/">Lego Indy</a> for a few more years. </p><p>Otherwise, here's hoping Indiana Jones and the Kingdom of the Crystal Skull doesn't suffer from Star Wars prequel-itis. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1103</wp:post_id>
		<wp:post_date>2008-02-14 14:46:15</wp:post_date>
		<wp:post_date_gmt>2008-02-14 14:46:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>you-call-this-archaeology</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="movies"><![CDATA[Movies]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[74dc3ba3-145a-4008-90f5-1d4871eab572]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[You+Call+This+Archaeology]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/14/You+Call+This+Archaeology]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 147</title>
		<link>http://devhawk.net/2008/02/19/morning-coffee-147/</link>
		<pubDate>Tue, 19 Feb 2008 19:29:21 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://43e36e54-1ce0-4ecc-b64a-884752e29648</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li><a href="http://techiewife.spaces.live.com/blog/cns!3DAECC033B88329C!2040.entry" border="0"><img style="margin: 0px 0px 0px 5px" src="http://by1.storage.msn.com/y1pMojGt8Z55XYH8wm1SslOfDyfgzPo3GCieyeuqZwr_FSPb75pGoNOFj7KY_4JYXrsS40rxjsYEI54M_OH-ZuTdYzawyF3GAi4?PARTNER=WRITER" align="right" border="0" /></a> My son Patrick turns five today. The big treat was his cousin Jack coming up for a visit. Here's a picture of the two of them at Patrick's party on Saturday. My wife has <a href="http://techiewife.spaces.live.com/blog/cns!3DAECC033B88329C!2040.entry">all the details</a> on her blog. Update: My wife just <a href="http://techiewife.spaces.live.com/Blog/cns!3DAECC033B88329C!2065.entry">posted a whole slew</a> of Early Patrick Pictures.  </li><li>If my son is five, it means this blog is also five - I <a href="http://devhawk.net/2003/01/15/New+And+Improved+DevHawk.aspx">started this blog</a> about a month before <a href="http://devhawk.net/2003/02/23/Welcome+Patrick.aspx">Patrick was born</a>. I never remember to mark the occasion until Paddy boy's big day comes around.  </li><li>Major props to the House of Representatives for growing a backbone and <a href="http://rawstory.com/news/2008/Bush_I_will_not_accept_any_0213.html">not caving</a> to President 30% Approval on telecom immunity...yet. Personally, I'd like to see the House bury the measure completely, though I'm not holding my breath. But given that even the right-wing Washington Times reports "<a href="http://www.washingtontimes.com/apps/pbcs.dll/article?AID=/20080216/NATION/847451166/1002">Analysts say FISA will suffice</a>", maybe the House Dems will do the right thing.  </li><li>After tearing it up since Thanksgiving, the Caps have gone a little cold. 5-4-1 in their last ten and 2-2-1 in their last five. In the month of February, they're 1-3-1 against SE division opponents. Good news is that they're still even with Carolina (two points behind with two games in hand), half a game up on Atlanta, a game and a half up on Florida and two and a half games up on Tampa Bay.  </li><li>Bill Gates <a href="http://channel8.msdn.com/Posts/2047/">announced</a> a new program called <a href="https://downloads.channel8.msdn.com/">DreamSpark</a> to provide college students access to all of Microsoft's developer and designer tools, including Visual Studio, Expression, SQL Server, Windows Server and XNA Creators Club membership. This looks like an outgrowth of the <a href="http://msdn2.microsoft.com/en-us/academic/default.aspx">MSDN Academic Alliance</a> program. I think it's a great idea. Update: Looks like <a href="http://www.mercurynews.com/ci_8302312">high-school students</a> will be able to access the DreamSpark program too. However, since they're minors, they have to get the software via their teachers. (via <a href="http://feeds.feedburner.com/~r/liveside/~3/237535721/microsoft-dreamspark-free-software-development-tools-for-students.aspx">LiveSide</a>)  </li><li>The winners of the <a href="http://dreambuildplay.com/main/winners.aspx">XNA Silicon Minds contest</a> have been announced. Of the five winners, <a href="http://www.strandyfamily.com/Specimen/">Specimen</a> looks the coolest to me. I wish I had more time to get into game development. (Via <a href="http://letskilldave.com/archive/2008/02/18/congratulations-to-the-dream-build-play-2008-warm-up-challenge-winners.aspx">LetsKillDave</a>)  </li><li>Speaking of game development, this week is the <a href="http://www.gdconf.com/">Game Development Conference</a>, so be on the lookout for lots of game-related news. Xbox Live VP John Schappert is giving a <a href="http://www.gdconf.com/conference/keynotes.htm">keynote</a> on "Unleashing the Creative Community". XNA GM Chris Satchell <a href="http://www.gamasutra.com/php-bin/news_index.php?story=16618">said last year</a> they would "announce full details on, and ... vision for, opening XNA creations to the community" sometime this year. I'm guessing this is said announcement.  </li><li>Speaking of Xbox, there's a <a href="http://www.msnbc.msn.com/id/23214808/">rumor</a> that Microsoft and Netflix will announce this week that Netflix is bringing their Watch Instantly service to Xbox 360. If true, sign me up!  </li><li><a href="http://blogs.msdn.com/agile/default.aspx">Grigori Melnik</a> announces the <a href="http://blogs.msdn.com/agile/archive/2008/02/15/gax-gat-february-2008-final-release.aspx">GAX/GAT February 2008 final release</a>. Key feature is VS08 support. Is it just me, or does calling it the "final release" make it sound like they won't be upgrading GAX/GAT further?  </li><li>Speaking of p&amp;p, Grigori also announces the <a href="http://blogs.msdn.com/agile/archive/2008/02/12/unity-february-2008-community-technology-preview.aspx">Feb 2008 CTP of Unity</a>, p&amp;p's new <a href="http://en.wikipedia.org/wiki/Inversion_of_Control">IoC</a> container. I've seem lots of folks echoing the announcement, but not much in the way of specifics on Unity itself. For example, Chris Brandsma <a href="http://elegantcode.com/2008/02/17/microsoft-releases-unity-an-ioc-library/">describes IoC and mentions Unity</a>, but he doesn't cover any Unity specifics. :(  </li><li>MSIT EA Nilesh Bhide has <a href="http://blogs.msdn.com/nileshb">started blogging</a>. His first post is on <a href="http://blogs.msdn.com/nileshb/archive/2008/01/29/customer-perception-of-service-quality-in-s-s-saas.aspx">Customer perception of Service Quality in S+S/SaaS</a>. I've worked closely with Nilesh in the past two years, so I'm excited to see him take to the blogosphere. (via <a href="http://blogs.msdn.com/nickmalik/archive/2008/02/13/want-the-software-quality-attributes-of-a-service-ask-the-customer.aspx">Nick Malik</a>)  </li><li>I don't know how I missed it, but the <a href="http://code.msdn.com/">MSDN Code Gallery</a> launched last month. As Charlie Calvert <a href="http://blogs.msdn.com/charlie/archive/2008/01/28/code-gallery-goes-live-new-site-for-samples.aspx">explained</a>, this is logical successor to GotDotNet's user samples area. Between Code Gallery and <a href="http://codeplex.com/">CodePlex</a>, GotDotNet has finally been shuttered for good.  </li><li>Telligent, makers of the very popular <a href="http://communityserver.org/">Community Server</a>, have released <a href="http://graffiticms.com/">Graffiti CMS</a>, which looks like a more flexible content platform than Community Server. (via <a href="http://www.dotnetkicks.com/products/Graffiti_1_0_Released">DNK</a>)  </li><li>In somewhat unexpected news (at least, unexpected by me) Microsoft has released specs for the <a href="http://www.microsoft.com/interop/docs/OfficeBinaryFormats.mspx">Office <em>binary </em>file formats</a>. I'm not sure why this is happening now, rather than say when we released the specs for the <a href="http://www.ecma-international.org/news/TC45_current_work/TC45_available_docs.htm">Open Office XML file formats</a>. (via <a href="http://www.dotnetkicks.com/products/Microsoft_releases_Office_binary_file_formats_doc_xls_ppt">DNK</a>) </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1104</wp:post_id>
		<wp:post_date>2008-02-19 11:29:21</wp:post_date>
		<wp:post_date_gmt>2008-02-19 19:29:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-147</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="post_tag" nicename="education"><![CDATA[Education]]></category>
		<category domain="post_tag" nicename="family"><![CDATA[Family]]></category>
		<category domain="post_tag" nicename="guidance-automation"><![CDATA[Guidance Automation]]></category>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<category domain="post_tag" nicename="xbox-360"><![CDATA[Xbox 360]]></category>
		<category domain="post_tag" nicename="xna"><![CDATA[XNA]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[43e36e54-1ce0-4ecc-b64a-884752e29648]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+147]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/19/Morning+Coffee+147]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2032</wp:comment_id>
			<wp:comment_author><![CDATA[Brad]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://scripsit.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>66.93.38.147</wp:comment_author_IP>
			<wp:comment_date>2008-02-20 11:21:48</wp:comment_date>
			<wp:comment_date_gmt>2008-02-20 19:21:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello, I enjoy your blog.  What do mean here?  "Between Code Gallery and CodePlex, has finally been shuttered for good."  I want to make sure I put my code in the right place. :-)

Thanks,
Brad Williams
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Delivering the XNA Vision</title>
		<link>http://devhawk.net/2008/02/20/delivering-the-xna-vision/</link>
		<pubDate>Wed, 20 Feb 2008 13:02:19 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://800b7a15-d373-4eb6-af75-7ba43a97aded</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Shortly after posting <a href="http://devhawk.net/2008/02/20/Morning+Coffee+148.aspx">today's morning coffee</a>, I notice two "blogging advisories" in my inbox from the XNA team. They're announcing two things: <a href="http://forums.xna.com/ShowThread.aspx?PostID=46553">XNA Game Studio 3.0</a> and <a href="http://forums.xna.com/ShowThread.aspx?PostID=46554">Xbox LIVE Community Games</a>. </p><p>Given that there was an XNA Game Studio 1.0 and 2.0, news that there will be a 3.0 version releasing this holiday season isn't what veteran bloggers like myself call "a surprise". However, the news that XNA GS 3.0 is going to support development of Zune based games was quite a surprise. Rumors of a Microsoft hand held gaming device crop up every few months, but there's never been any substance to them. The Zune isn't really a handheld gaming device like the DS or PSP - the <a href="http://forums.xna.com/ShowThread.aspx?PostID=46553">FAQ</a> points out that it will take "creative thinking" to build a game for a device with a 240x320 display that's designed for one hand use. Furthermore, Cesar "Zune Insider" Menendez points out that "Zune is a wireless music and video player first and foremost".</p><p>Still, it's pretty cool to think about what a Zune based game experience would be like. So far we know it'll be 2D only and it have full access to any non-DRM music on the device. Also, it will be social - Zune XNA games will support wireless multiplayer with up to 8 players, though it doesn't support cross-platform networking with Xbox and Windows. I can't wait to see what the community does with this capability. I'll definitely be getting a Zune now.</p><p>As for the Xbox LIVE Community Games, it's something the XNA folks have been <a href="http://www.gamasutra.com/php-bin/news_index.php?story=16618">hinting at since last year</a>. This is the announcement the XNA folks have been building towards since day one when they called XNA the "<a href="http://www.engadget.com/2006/08/14/microsoft-planning-youtube-for-games/">YouTube for videogames</a>". Very much unlike the retail or arcade Xbox channels, Community Games will be peer-reviewed by XNA Creators Club community members instead of Microsoft (though unsurprisingly, MS "reserves the right to reactively take down a game without prior notification"). You'll even be able to sell your games, though details on that won't be available until later in the year.</p><p>Like XNA GS 3.0, Community Games will be available "during the holiday 2008 season." However, for the next month, Microsoft is offering a preview of Community Games, offering seven community developed games for free, including <a href="http://www.xbox.com/en-US/community/news/2007/0813-dreambuildplaywinners.htm">last year's DreamBuildPlay co-winner</a> "<a href="http://skasoftware.wordpress.com/category/the-dishwasher/">The Dishwasher: Dead Samurai</a>". I can't wait to get home and try them out. </p><p>IMO, this is a <em>huge</em> announcement. But what's most impressive to me is how much they've accomplished in a fairly short time. XNA was only announced two and a half years ago. That's amazing progress for a pretty small team. I can't wait to see what they do next.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1105</wp:post_id>
		<wp:post_date>2008-02-20 13:02:19</wp:post_date>
		<wp:post_date_gmt>2008-02-20 13:02:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>delivering-the-xna-vision</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="xbox-360"><![CDATA[Xbox 360]]></category>
		<category domain="post_tag" nicename="xna"><![CDATA[XNA]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[800b7a15-d373-4eb6-af75-7ba43a97aded]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Delivering+The+XNA+Vision]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/20/Delivering+The+XNA+Vision]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2033</wp:comment_id>
			<wp:comment_author><![CDATA[Bruceongames]]></wp:comment_author>
			<wp:comment_author_email>bruce@everiss.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.bruceongames.com/</wp:comment_author_url>
			<wp:comment_author_IP>86.157.156.58</wp:comment_author_IP>
			<wp:comment_date>2008-02-21 03:23:06</wp:comment_date>
			<wp:comment_date_gmt>2008-02-21 11:23:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[At one stroke Microsoft have removed all the barriers to game development and more importantly to game publishing. We will have a flowering of innovation and creativity beyond anything the game industry has ever seen before. Probably beyond what any creative industry has ever seen before. The last explosion in gaming creativity was the bedroom Sinclair Spectrum coders in the 1980s (we have been going downhill creatively ever since), this will be thousands of times bigger. The possibilities are infinite.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 148</title>
		<link>http://devhawk.net/2008/02/20/morning-coffee-148/</link>
		<pubDate>Wed, 20 Feb 2008 19:30:01 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://7effabef-8bb9-45f8-8480-442bdbdbf4f1</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>As I predicted yesterday, Microsoft <a href="http://www.joystiq.com/2008/02/20/joystiq-live-from-the-microsoft-gdc-keynote/">announced</a> that "For the first time, community games will be distributed through Xbox Live." I haven't seen a press release yet, but it looks like this will allow any XNA developer to publish on XBL. Joystiq has a <a href="http://www.joystiq.com/2008/02/20/gdc08-microsoft-announces-community-arcade/">few details</a>. According to <a href="http://twitter.com/majornelson/statuses/736089232">Major Nelson</a>, six community games will be available on XBL later today. Also, it looks like you'll be able to make XNA games for <a href="http://twitter.com/majornelson/statuses/736095762">your Zune as well</a>. Details to follow. </li><li>Speaking of yesterday, I <a href="http://devhawk.net/2008/02/19/Morning+Coffee+147.aspx">referred</a> to President Bush as "President 30% Approval". This was incorrect. From now on, I'll refer to him as "<a href="http://americanresearchgroup.com/economy/">President 19% Approval</a>".  </li><li>Speaking of politics, two more <a href="http://www.msnbc.msn.com/id/23232655/">big wins for Obama</a> yesterday. The Clinton camp, looking more desperate every day, unveiled a <a href="http://www.delegatehub.com/">new website</a> purporting to provide the "facts and myths about the race for delegates". Memo to HRC: "Florida and Michigan should count" isn't a fact, it's an opinion. I can't see how this site helps her cause.  </li><li>Joel on Software, who used to work on the Excel team, provides a <a href="http://www.joelonsoftware.com/items/2008/02/19.html">facinating look</a> into why the Office File Formats are so complicated. Nothing more to add, I just thought it was an interesting discussion of "real-world" complications to something that seems like it should be simpler.  </li><li>Scott Guthrie provides a <a href="http://weblogs.asp.net/scottgu/archive/2008/02/19/net-3-5-client-product-roadmap.aspx">client product post .NET 3.5 roadmap</a>, much like he did for <a href="http://weblogs.asp.net/scottgu/archive/2007/11/29/net-web-product-roadmap-asp-net-silverlight-iis7.aspx">web products</a> a few months ago. Unlike the web roadmap, which includes exciting stuff like Silverlight 2.0, IIS 7.0 and ASP.NET Extensions (including MVC), the client roadmap includes: better setup, better perf for WPF, better memory utilization and startup time, WPF designer improvements, and some new WPF control. Color me under whelmed. </li><li>My old team recently launched the <a href="http://msdn2.microsoft.com/en-us/architecture/aa699384.aspx">Software + Services Architecture Center</a>. S+S guru Gianpaolo Carraro <a href="http://blogs.msdn.com/gianpaolo/archive/2008/02/15/s-s-architecture-site-on-msdn.aspx">recently wrote</a> about the different perspectives this new site is trying cater to. S+S hasn't been on my personal radar, but it's something I really would like to dig more into. </li><li>In a <a href="http://www.cbc.ca/sports/hockey/story/2008/02/18/longest-game.html?ref=rss">recent charity hockey game</a>, Team Cure beat Team Hope 2,250 to 2,223. No, that's not a typo. The two teams of twenty faced off for <u><em>240 straight hours</em></u> of hockey in sub-zero weather to raise $300,000 for cancer research. That's frakking dedication to a cause.</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1106</wp:post_id>
		<wp:post_date>2008-02-20 11:30:01</wp:post_date>
		<wp:post_date_gmt>2008-02-20 19:30:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-148</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net-framework"><![CDATA[.NET Framework]]></category>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="office"><![CDATA[Office]]></category>
		<category domain="post_tag" nicename="software-plus-services"><![CDATA[Software + Services]]></category>
		<category domain="post_tag" nicename="xna"><![CDATA[XNA]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[7effabef-8bb9-45f8-8480-442bdbdbf4f1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+148]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/20/Morning+Coffee+148]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 149</title>
		<link>http://devhawk.net/2008/02/22/morning-coffee-149/</link>
		<pubDate>Fri, 22 Feb 2008 18:34:30 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://3696bb29-8d2c-468a-a313-801e35d19a17</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Big news yesterday was Microsoft announcing "<a href="http://www.microsoft.com/presspass/press/2008/feb08/02-21ExpandInteroperabilityPR.mspx">Strategic Changes in Technology and Business Practices to Expand Interoperability</a>". More details available at the new <a href="http://www.microsoft.com/interop/">Interoperability website</a> and <a href="http://www.microsoft.com/presspass/features/2008/feb08/02-21Muglia.mspx">this interview</a> with Bob Muglia.  </li><li>The videos from Lang.NET 2008 are <a href="http://langnetsymposium.com/talks.asp">now available</a>, including <a href="http://langnetsymposium.com/talks/3-03%20-%20Parsing%20Expression%20Grammars%20in%20FSharp%20-%20Harry%20Pierson.html">mine</a>.  </li><li>Mix08 is just under two weeks away, and the news is ramping up. Scott Guthrie provides a "<a href="http://weblogs.asp.net/scottgu/archive/2008/02/22/first-look-at-silverlight-2.aspx">first look</a>" at the Silverlight 2.0 beta (aka the one with .NET) that will release @ Mix. He also provides a set of eight tutorials where he demonstrates building a Digg client for Silverlight 2.0. I've been doing a little Silverlight 1.0 experimentation recently, but I think I'm going to scrap it in favor of waiting for 2.0.  </li><li>Shorter Nick Malik: IoC is cool, but isn't a silver bullet. Go read the <a href="http://blogs.msdn.com/nickmalik/archive/2008/02/15/what-is-the-tradeoff-with-inversion-of-control-ioc.aspx">whole</a> thing.  </li><li>Brad Wilson has a <a href="http://bradwilson.typepad.com/blog/2008/02/dell-xps-m1330.html">new laptop with a solid-state hard drive</a>. VS08 installs in under 10 minutes? I gotta get me one of those... </li><li>In addition to the XNA news, Microsoft also <a href="http://gamerscoreblog.com/team/archive/2008/02/20/GDC08Portfolio.aspx">announced</a><a href="http://www.xbox.com/games/gearsofwar2">Gears of War 2</a>, <a href="http://www.xbox.com/games/fable2/">Fable 2</a> and <a href="http://www.xbox.com/games/ninjagaiden2/">Ninja Gaiden II</a> and <a href="http://www.xbox.com/games/toohuman">Too Human</a> will all be available this year exclusively on Xbox 360. Of those, I'm most interested in Fable 2, though Too Human is looking interesting. But what about <a href="http://www.xbox.com/games/halowars/">Halo Wars</a>? When is that shipping?</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1107</wp:post_id>
		<wp:post_date>2008-02-22 10:34:30</wp:post_date>
		<wp:post_date_gmt>2008-02-22 18:34:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-149</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="hardware"><![CDATA[Hardware]]></category>
		<category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="parsing-expression-grammar"><![CDATA[Parsing Expression Grammar]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="post_tag" nicename="xbox-360"><![CDATA[Xbox 360]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[3696bb29-8d2c-468a-a313-801e35d19a17]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+149]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/22/Morning+Coffee+149]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My First Point in Ten Years</title>
		<link>http://devhawk.net/2008/02/22/my-first-point-in-ten-years/</link>
		<pubDate>Fri, 22 Feb 2008 18:20:20 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://75c52011-3dae-4d88-8235-3f2eec5cecbb</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Not only does this month mark <a href="http://techiewife.spaces.live.com/Blog/cns!3DAECC033B88329C!2065.entry">my son's fifth birthday</a>, it also marks the ten anniversary of my first date with my <a href="http://techiewife.spaces.live.com/default.aspx">awesome wife Julianne</a>. I met her online while I was laid up at home for six weeks after breaking my ankle at hockey practice. You see, I'm not just a hockey fan, but I also played several years of amateur league hockey in the mid-90's. I'm not very good, but I really love playing, though it all came to a halt when I broke my ankle.  </p><p>Last night, for the first time literally in a decade (shit, I'm getting old), I hit the ice for a <a href="http://groups.msn.com/TechRecHockeyLeague/home.msnw">local TechRec league game</a> ("Home of the Thundering Nerd Herd"). And when I say "hit the ice", I mean that fairly literally. Man, it's been a long time and I am WAY out of shape. I hurt pretty much all over, but especially my right shoulder.</p><p>We only had ten skaters, which means only two lines total. I probably skated around 20 minutes total - I spent three minutes in the penalty box (grabbed an opposing player as I fell down) and skipped the single power play we had. I still felt like I was gonna die by the end of the game. Hopefully, after I get a few more games under my belt, I'll be able to skate more than once up and down the ice without looking to the bench for a change. On the plus side, we won 6-2, I had an assist and was +1 on the night. </p><p>The TechRec league is very different from the league I played in down in SoCal. In SoCal, I played on the same team with the same players against the same players on the same other teams season after season. Naturally, animosity developed. In TechRec, they re-pick the teams every season, so it seems much more friendly and less competitive. I mean, we still want to win, but it takes on a different feel when you know some other player you don't like may be your teammate next season. </p><p>Major thanks to my neighbor Stephen Bury for getting me back on the ice. I'm looking forward to <strike>smashing him into the boards</strike><strike>grabbing him when I fall down</strike> facing off against his team a couple of weeks.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1108</wp:post_id>
		<wp:post_date>2008-02-22 10:20:20</wp:post_date>
		<wp:post_date_gmt>2008-02-22 18:20:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-first-point-in-ten-years</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="personal"><![CDATA[Personal]]></category>
		<category domain="post_tag" nicename="techrec-league"><![CDATA[TechRec League]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[75c52011-3dae-4d88-8235-3f2eec5cecbb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[My+First+Point+In+Ten+Years]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/22/My+First+Point+In+Ten+Years]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 150</title>
		<link>http://devhawk.net/2008/02/27/morning-coffee-150/</link>
		<pubDate>Wed, 27 Feb 2008 18:17:22 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://5f0a893b-18d0-4e4c-9383-d53fb532b8f3</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Yesterday was the NHL trading deadline, and the Capitals were very busy. They obtained <a href="http://capitals.nhl.com/team/app/?service=page&amp;page=NewsPage&amp;articleid=354907">Huet from Montreal</a>, <a href="http://capitals.nhl.com/team/app/?service=page&amp;page=NewsPage&amp;articleid=354946">Federov from Columbus</a> and <a href="http://capitals.nhl.com/team/app/?service=page&amp;page=NewsPage&amp;articleid=354952">Cooke from Vancouver</a>. Given they are fighting just to make the playoffs, going for three soon-to-be unrestricted free agents seems like an odd choice. However, the consensus (among my parents anyway) was that it's critical to get this very young Caps team some playoff experience. Even if all three walk at season's end, it'll be worth if the Caps make a playoff run. Besides it's not like we gave up much: an extra second round pick in '09, a <a href="http://und.cstv.com/sports/m-hockey/mtt/ruth_teddy00.html">19 year old defensive prospect</a> (who was apparently <em>14th </em>on the depth chart) and an <a href="http://sports.espn.go.com/nhl/players/profile?playerId=724">underachieving winger</a>.  </li><li>Speaking of the Caps playoff chances, they are currently one and a half games back of the division leading Hurricanes and two games behind the current eighth seed Flyers. Yes, I rank hockey teams using baseball's standings system. Otherwise, you have to talk about games in hand (i.e. the Caps are five points behind Carolina with two games in hand).  </li><li>The writer's guild <a href="http://unitedhollywood.blogspot.com/2008/02/strike-officially-over-contract.html">ratified the new contract</a>, so Hollywood labor strife is now officially behind us. At least until July when the the actors may go on strike.  </li><li>It seems like a slow week for Microsoft geek news, which is odd since WS08, VS08 and SQL08 all <a href="http://www.microsoft.com/heroeshappenhere/default.mspx">launch today</a>. I'm guessing it's the calm before the <a href="http://www.visitmix.com/">Mix</a> storm next week.  </li><li>After <a href="http://blogs.msdn.com/xmlteam/archive/2007/06/05/linq-to-xsd-preview-alpha-0-2-to-go-with-orcas-beta-1.aspx">going dark</a> for six months, <a href="http://blogs.msdn.com/xmlteam/archive/2008/02/21/linq-to-xsd-alpha-0-2.aspx">Linq to XSD</a> has been re-released to work with the RTM version of VS08. Scott Hanselman <a href="http://www.hanselman.com/blog/LINQToEverythingLINQToXSDAddsMoreLINQiness.aspx">demonstrates</a> Linq to XSD by applying it to <a href="http://www.ofx.org/">OFX</a>, an XML Schema he calls "goofy" but apparently helped develop. OFX uses <a href="http://www.w3.org/TR/xmlschema-2/#derivation-by-restriction">derivation by restriction</a>, which has no direct corollary in C#, but Linq to XSD's  is able to translate between XML and objects without loosing any of that type fidelity. Nice to know Linq to XSD can tolerate OFX's level of goofiness, though I'm guessing most people use much more straightforward schemas.  </li><li>Speaking of Linq, I discovered <a href="http://www.linqpad.net/">LINQPad</a> via a comment on <a href="http://blog.wekeroad.com/2008/02/27/creating-in-queries-with-linq-to-sql/">Rob Conery's blog</a> (which I found <a href="http://www.dotnetkicks.com/linq/Creating_IN_queries_with_Linq">via DNK</a>). It's basically a code snippet IDE for C# 3.0 and VB9, with it also has built in database connection support, so it can fulfil much the same role as SQL Management Studio. I only played with it for a few minutes, but I was really impressed.  This is definitely going in my utilities folder. I wonder if they're interested in supporting F#? </li><li>Not sure how I missed this, but you can get <a href="http://windowsclient.net/apps/MsdnReaderSetup.exe">MSDN Magazine</a> via same Syndicated Client Experience as <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=dd466bbb-1b7d-438e-9f9a-954ce2058f15&amp;displaylang=en">Architecture Journal</a>. Unlike AJ which is divided into issues, the MSDN magazine client is divided into topics which is harder to square with the physical magazine. On the other hand, since MSDN Mag has been around longer, perhaps topics + search is a better discovery mechanism.  </li><li>Soma <a href="http://blogs.msdn.com/somasegar/archive/2008/02/27/visual-studio-gallery.aspx">announces</a> the <a href="http://visualstudiogallery.com/">Visual Studio Gallery</a>, a repository of VS Extensions. It's kinda cool, but the whole discovery mechanism is clunky. I might like to experiment with some free or even free trial products, but there's no way to filter on cost so finding them is a hassle. Also, there's no way for community members to vote, rate or comment on the products in any way. </li><li>Nick Malik <a href="http://blogs.msdn.com/nickmalik/archive/2008/02/23/enterprise-architecture-earning-our-keep.aspx">can't answer the question</a> "how does Enterprise Architecture demonstrate value?" I could be snarky and say "it doesn't", but that's only half the answer. It doesn't, but it should. My opinion, since you asked Nick, is that EA fails to deliver value because it tries to control the uncontrollable. Trying to gain efficiency thru establishing standards and eliminating overlap via reuse are pipe dreams, though literally millions of $$$ have been poured into those sink-holes. There are a few areas where centrally funded infrastructure projects can solve big problems that individual projects can't effectively tackle on their own. EA should focus their time there, they can actually make a difference. Otherwise, they should stay out of project's way.</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1109</wp:post_id>
		<wp:post_date>2008-02-27 10:17:22</wp:post_date>
		<wp:post_date_gmt>2008-02-27 18:17:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-150</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="entertainment"><![CDATA[Entertainment]]></category>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[LINQ]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[XML]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[5f0a893b-18d0-4e4c-9383-d53fb532b8f3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+150]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/27/Morning+Coffee+150]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2034</wp:comment_id>
			<wp:comment_author><![CDATA[ilanchelian]]></wp:comment_author>
			<wp:comment_author_email>ilanchelian@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.11.134.217</wp:comment_author_IP>
			<wp:comment_date>2008-02-27 20:33:08</wp:comment_date>
			<wp:comment_date_gmt>2008-02-28 04:33:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[could you share with us some of .net related utilities that you use oftentimes.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2035</wp:comment_id>
			<wp:comment_author><![CDATA[Nick Malik]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/nickmalik</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-02-29 12:58:52</wp:comment_date>
			<wp:comment_date_gmt>2008-02-29 20:58:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Harry,

You implied that I could not answer the question, "How does EA demonstrate value."  That is not true.  I can readily answer the question, from my viewpoint, but I chose instead to *ask* the question to see if my answer matches the various answers that I may hear back.  I got a lot of valuable input, both on the blog and on the forum on Shared Insights where I asked the same question.

You are the ONLY person to reply and say that EA provides no value.  

Perhaps you should read about the role and value of Enterprise Architecture from established sources before you bash the entire profession.

EA is real, my friend.  It is as real as city planning.  The only major city in the US without city planning is Houston.  I have visited a few times, and I can honestly say that without city planning, they are a mess.  

http://www.architectureandgovernance.com/articles/12-evolving_role.asp

--- Nick]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>DevHawk&#039;s Inessential List of Tools</title>
		<link>http://devhawk.net/2008/02/28/devhawks-inessential-list-of-tools/</link>
		<pubDate>Thu, 28 Feb 2008 14:41:07 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://c3b6c013-1d6c-4f80-bdcf-761228bbe488</guid>
		<description></description>
		<content:encoded><![CDATA[<p>ilanchelian left a <a href="http://devhawk.net/2008/02/27/Morning+Coffee+150.aspx#commentstart">comment</a> yesterday asking for me to share some of the utilities that I use sometimes. Of course, Scott Hanselman keeps *THE* <a href="http://www.hanselman.com/tools">ultimate list of tools</a>, hence my titling this list as "inessential" (note, it's the list that's inessential, not the tools themselves.)</p><p>But since you asked, here are some of the things kicking around my utilities folder (in no particular order):</p><ul><li>cdburn and dvdburn from the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=9d467a69-57ff-4ae7-96ee-b18c4790cffd&amp;DisplayLang=en">WS03 Resource Kit</a></li><li><a href="http://www.codeplex.com/CodePlexClient">CodePlex Client</a> (aka cpc and tfc)</li><li><a href="http://www.ncftp.com/ncftp/">NcFTP Client</a> (aka ncftp, ncftpput and ncftpget)</li><li><a href="http://www.codeplex.com/reflectoraddins">Reflector</a></li><li><a href="https://www.grc.com/wizmo/wizmo.htm">Wizmo</a></li><li><a href="http://www.ampsoft.net/utilities/FontViewer.php">AMP FontViewer</a></li><li><a href="http://www.sourcegear.com/diffmerge/">DiffMerge</a></li><li><a href="http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx">Process Explorer</a></li><li>HP USB Disk Storage Format Tool (used for building bootable flash drives)</li><li><a href="http://subversion.tigris.org/">Subversion</a> command line utilities</li><li><a href="http://www.7-zip.org">7-Zip </a></li><li><a href="http://www.flos-freeware.ch/notepad2.html">Notepad2</a></li><li><a href="http://www.jam-software.com/freeware/index.shtml">TreeSize Free</a></li><li><a href="http://www.foxitsoftware.com/pdf/rd_intro.php">Foxit Reader</a></li><li><a href="http://www.microsoft.com/technet/technetmag/issues/2007/06/UtilitySpotlight/default.aspx">Script Elevation PowerToys</a> (PowerShell Here and Elevate)</li><li><a href="http://www.microsoft.com/prophoto/downloads/synctoybeta.aspx">SyncToy 2.0</a></li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1110</wp:post_id>
		<wp:post_date>2008-02-28 14:41:07</wp:post_date>
		<wp:post_date_gmt>2008-02-28 14:41:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devhawks-inessential-list-of-tools</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-geekery"><![CDATA[General Geekery]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[c3b6c013-1d6c-4f80-bdcf-761228bbe488]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[DevHawks+Inessential+List+Of+Tools]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/28/DevHawks+Inessential+List+Of+Tools]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2036</wp:comment_id>
			<wp:comment_author><![CDATA[ilanchelian]]></wp:comment_author>
			<wp:comment_author_email>ilanchelian@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.11.134.217</wp:comment_author_IP>
			<wp:comment_date>2008-02-28 18:53:56</wp:comment_date>
			<wp:comment_date_gmt>2008-02-29 02:53:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you very much.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 151</title>
		<link>http://devhawk.net/2008/02/28/morning-coffee-151/</link>
		<pubDate>Thu, 28 Feb 2008 11:38:23 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://c0822e63-8c6e-4138-9b28-05995a43e519</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li><a href="http://www.codeplex.com/unity">Unity's</a> first CTP was just over two weeks ago, but <a href="http://blogs.msdn.com/agile/archive/2008/02/27/entlib-unity-roadmap.aspx">according to Grigori Melnik</a>, it's shipping just over two weeks from now. That seems pretty speedy to me. By the time I get a change to take a closer look at Unity, it'll probably have shipped.  </li><li>I discovered <a href="http://weblogs.asp.net/podwysocki/default.aspx">Matthew Podwysocki</a> blog <a href="http://www.dotnetkicks.com/patterns/IoC_and_the_Unity_Application_Block_Once_Again">via DNK</a>. I don't typically subscribe to blogs that I discover via DNK, but Matthew has written about <a href="http://weblogs.asp.net/podwysocki/archive/2008/02/26/ioc-and-the-unity-application-block-once-again.aspx">IoC/Unity</a>, <a href="http://weblogs.asp.net/podwysocki/archive/2008/02/21/adventures-in-f-f-101-part-2.aspx">F#</a> and <a href="http://weblogs.asp.net/podwysocki/archive/2008/02/08/adventures-in-compilers-building-on-the-dlr.aspx">DLR</a> lately so I'm thinking I should be a regular reader.  </li><li>Corporate VP David Treadwell has an <a href="http://dev.live.com/blogs/devlive/archive/2008/02/27/213.aspx">extensive post</a> on updates to the Windows Live Platform Services that are being unveiled at MIX next week. The updates include the new <a href="http://msdn2.microsoft.com/en-us/library/cc298458.aspx">WL Messenger Library</a>, a <a href="http://msdn2.microsoft.com/en-us/library/cc287637.aspx">new SDK</a> for <a href="http://winliveid.spaces.live.com/blog/cns!AEE1BB0D86E23AAC!1460.entry">WL ID Delegated Authentication</a>, a <a href="http://msdn2.microsoft.com/en-us/library/bb932323.aspx">new WL Photo API</a>, a new CTP of <a href="http://dev.live.com/tools/">WL Tools</a>, <a href="http://blogs.msdn.com/astoriateam/archive/2008/02/13/atompub-support-in-the-ado-net-data-services-framework.aspx">standardized support for AtomPub</a>, updates to <a href="http://msdn2.microsoft.com/en-us/library/bb463989.aspx">WL Contacts API</a> and <a href="http://silverlight.live.com/">Sivlerlight Streaming</a> and a new "experimental" service called Application Based Storage that "allows application developers to store a small amount of state/configuration data in the WL data centers on behalf of a user". I'm sure there'll be more WL news at the MIX conference proper, but that's quite a good chunk of features to start digging into. Personally, I'm particularly interested in WL Delegated Auth, esp. how it deals with phishing, something <a href="http://devhawk.net/2007/11/19/Morning+Coffee+124.aspx">I don't think OAuth handles very well</a>.  </li><li>Windows Live isn't the only group making announcements in advance of MIX. Adobe <a href="http://www.infoworld.com/article/08/02/26/adobe-player_1.html">announced a research project</a> that allows "cross-compiling existing code from C, C++, Java, Python, and Ruby to ActionScript." This seems pretty obviously a response to Silverlight 2.0's embedded CLR, announced last year @ MIX. Support for C++ is very interesting - Adobe evangelist Ted Patrick <a href="http://www.onflex.org/ted/2008/02/extending-adobe-flash-player-and-adobe.php">claims</a> they were even able to cross-compile Quake 1 to Flash. Interesting, but this is an internal research project @ Adobe with no projected release date while Silverlight 2.0 goes <a href="http://weblogs.asp.net/scottgu/archive/2008/02/22/first-look-at-silverlight-2.aspx">into beta next week</a>.</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1111</wp:post_id>
		<wp:post_date>2008-02-28 11:38:23</wp:post_date>
		<wp:post_date_gmt>2008-02-28 11:38:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-151</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dependency-injection"><![CDATA[Dependency Injection]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="patterns-and-practices"><![CDATA[patterns &amp; practices]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="post_tag" nicename="web-2-0"><![CDATA[Web 2.0]]></category>
		<category domain="post_tag" nicename="windows-live"><![CDATA[Windows Live]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[c0822e63-8c6e-4138-9b28-05995a43e519]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+151]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/02/28/Morning+Coffee+151]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 152</title>
		<link>http://devhawk.net/2008/03/03/morning-coffee-152/</link>
		<pubDate>Mon, 03 Mar 2008 10:58:00 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://2a391220-3950-43ef-bf17-773e2a6a364a</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>I was slammed Friday, so I didn't get a chance to post the results of last Thursday night's hockey game. I'm sure you've all been eager to hear. We lost, bad, 8-2. Personally, I was -3 and had no points, but I played much better than last week. We had three full lines of forwards, which was a big help, but I have started to find my ice-legs so to speak. </li><li>Charlie Calvert has the now-definitive <a href="http://blogs.msdn.com/charlie/archive/2008/02/28/link-to-everything-a-list-of-linq-providers.aspx">list of LINQ to Everything</a>. Of all of them, I found <a href="http://www.codeplex.com/LinqOverCSharp">LINQ over C#</a> fascinating, especially given my recent efforts in parsing.</li><li>Chris Tavares <a href="http://www.tavaresstudios.com/Blog/post.aspx?id=4e75f849-9091-431c-b41b-f7343cb767a7">blogs</a> about a distributed source control system called <a href="http://bazaar-vcs.org/">Bazaar</a>. Unlike most version control systems, Bazaar is distributed which means you can use it without a server. According to Chris, you can share branches as easily as mailing a file. I wonder if you could make Bazaar work over a <a href="http://msdn2.microsoft.com/en-us/library/system.net.peertopeer.aspx">P2P network</a>.</li><li>While looking up the MSDN link for the previous coffee item, I noticed an entire new section in the MSDN Library for <a href="http://msdn2.microsoft.com/en-us/library/cc203350.aspx">Open Protocol Specifications</a>. Not much to add, just wanted to highlight their existence.</li><li>Admitted non-designer Scott Guthrie <a href="http://weblogs.asp.net/scottgu/archive/2008/02/28/first-look-at-using-expression-blend-with-silverlight-2.aspx">shows off</a> using the new version Expression Blend to build a Silverlight 2.0 app. Personally, I was most interested in seeing <a href="http://silverlight2blogpost.s3.amazonaws.com/step6.png">some of the new of built-in controls</a>. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1112</wp:post_id>
		<wp:post_date>2008-03-03 10:58:00</wp:post_date>
		<wp:post_date_gmt>2008-03-03 10:58:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-152</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[LINQ]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[2a391220-3950-43ef-bf17-773e2a6a364a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+152]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/03/Morning+Coffee+152]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2037</wp:comment_id>
			<wp:comment_author><![CDATA[Tomas Restrepo]]></wp:comment_author>
			<wp:comment_author_email>tomas@winterdom.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.winterdom.com/weblog/</wp:comment_author_url>
			<wp:comment_author_IP>200.116.204.205</wp:comment_author_IP>
			<wp:comment_date>2008-03-03 12:58:04</wp:comment_date>
			<wp:comment_date_gmt>2008-03-03 20:58:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've been pretty interested lately on distributed control version systems; and I'm looking at both Git and Mercurial. Git seems technically the better one, but the Windows support seems to be still a bit lacking (and not sure why neither of them have a simple binary distribution on a zip file; why mess with installers?).

Anyway, I think the concept is a great idea; and the one thing I really like about it is that it combines the offline support (even better, since pretty much all operations are available offline, not just a few) of SVN, with actual support for branches/merges, and, even better, easy way to provide for personal temporary branches, which is really the only TFS feature I miss every now and then (I'm of course talking about shelvesets).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>What is the ROI on EA?</title>
		<link>http://devhawk.net/2008/03/02/what-is-the-roi-on-ea/</link>
		<pubDate>Sun, 02 Mar 2008 23:52:41 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d348f9d9-dcba-4c2a-b1b0-c55ccee35472</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Nick Malik <a href="http://devhawk.net/2008/02/27/Morning+Coffee+150.aspx#2fa81c1e-6989-4f3d-a056-997a11964dbe">took me to task</a> for my <a href="http://devhawk.net/2008/02/27/Morning+Coffee+150.aspx">suggestion</a> that Enterprise Architecture provides no value.</p><blockquote><p>You implied that I could not answer the question, "How does EA demonstrate value." That is not true. I can readily answer the question, from my viewpoint, but I chose instead to *ask* the question to see if my answer matches the various answers that I may hear back. I got a lot of valuable input, both on the blog and on the forum on Shared Insights where I asked the same question.</p><p>You are the ONLY person to reply and say that EA provides no value. </p><p>Perhaps you should read about the role and value of Enterprise Architecture from established sources before you bash the entire profession.</p><p>EA is real, my friend. It is as real as city planning. The only major city in the US without city planning is Houston. I have visited a few times, and I can honestly say that without city planning, they are a mess. </p></blockquote><p>Nick also provided a link to an <a href="http://www.architectureandgovernance.com/articles/12-evolving_role.asp">article</a> in Architecture and Governance magazine. I was going to read it, however their web site is down as I write this. I feel comfortable interpreting that as a sign that I'm right... :)</p><p>Actually, Nick's got a point. It was wholly unfair of me to say that EA provides no value. However, I do believe the return on investment of enterprise architecture is fairly low, perhaps even negative. In other words, I shouldn't have argued that EA doesn't deliver <em>any </em>value, but instead that I don't think it delivers <em>enough </em>value, given what we spend on it.</p><p>Architecture ROI is hard enough to calculate on a project by project basis. I would argue that measuring it at the EA level is probably impossible, but I think that's both a blessing and a curse. It's a curse because EA can't justify their existence in terms the business can understand. It's a blessing because if EA is running as deep in the red as I suspect they might be, the company would cut EA entirely in a heartbeat. </p><p>Since Nick started my asking a question about value, let me turn it around and ask some questions of my own:</p><ol><li>How much do you think your organization spends on EA per year? </li><li>What do you think your organization's EA ROI is? </li><li>What can you do to improve your organization's EA ROI?</li></ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1113</wp:post_id>
		<wp:post_date>2008-03-02 23:52:41</wp:post_date>
		<wp:post_date_gmt>2008-03-02 23:52:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-is-the-roi-on-ea</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d348f9d9-dcba-4c2a-b1b0-c55ccee35472]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[What+Is+The+ROI+On+EA]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/03/What+Is+The+ROI+On+EA]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2038</wp:comment_id>
			<wp:comment_author><![CDATA[Daniel Markham]]></wp:comment_author>
			<wp:comment_author_email>DanielBMarkham@Hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.WhatToFix.com</wp:comment_author_url>
			<wp:comment_author_IP>72.171.0.144</wp:comment_author_IP>
			<wp:comment_date>2008-03-03 13:02:16</wp:comment_date>
			<wp:comment_date_gmt>2008-03-03 21:02:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It would be good if you demonstrated you understood EA before you criticized it. It would also be good if you differentiated the way EA is practiced from what EA is -- two different things. I certainly hope you're not just another blogger mouthing off about stuff they know nothing about. So many times we see something like DBAs mucking up most development efforts and jump to the conlusion that data modeling is bogus, or something just as stupid. 

I tried to discuss modeling in general just today -- you might find my post interesting. Maybe not. I only teach this stuff. What do I know?

http://www.whattofix.com/blog/archives/2008/03/explaining_mode.php

]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Lunchtime Coffee 153</title>
		<link>http://devhawk.net/2008/03/04/lunchtime-coffee-153/</link>
		<pubDate>Tue, 04 Mar 2008 20:28:36 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://386b040e-1705-44b6-ad0b-0be2d648b722</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>p&amp;p have published new versions of both the <a href="http://www.codeplex.com/servicefactory">Web Service</a> and <a href="http://www.codeplex.com/websf">Web Client</a> Software Factories. Beyond support for VS08, I'm not sure what's new but that's worth the price of download (admittedly close to zero) right there. I assume these need the most <a href="http://blogs.msdn.com/agile/archive/2008/02/15/gax-gat-february-2008-final-release.aspx">recent release of the Guidance Automation Toolkit</a> as well.  </li><li>W3C has published a <a href="http://www.w3.org/TR/2008/WD-sml-20080303/">new working draft</a> of the <a href="http://www.w3.org/XML/SML/">Service Modeling Language</a>. I'm really interested to see where this technology goes.  </li><li>Yesterday, Microsoft announced the <a href="http://msdn2.microsoft.com/en-us/sharepoint/cc303301.aspx">Silverlight Blueprint for Sharepoint</a>, part of a larger <a href="http://channel9.msdn.com/blueprints">Software + Services Blueprints</a> initiative that I wasn't aware of. <a href="http://blogs.msdn.com/mglehman/archive/2008/02/11/software-plus-services-blueprints-for-vs2008-now-live.aspx">According to Michael Lehman</a> (who's blog I've been been remiss to read of late), S+S Blueprints has a bunch of other interesting projects including <a href="http://www.codeplex.com/videoshow">Video.Show</a> and <a href="http://www.codeplex.com/ssblueprints/Release/ProjectReleases.aspx?ReleaseId=10627">Outlook+Services</a>.  </li><li>Martian Maly <a href="http://blogs.msdn.com/mmaly/archive/2008/02/29/building-a-dlr-language-answering-some-questions.aspx">demonstrates</a> how you can use DLR trees to build a statically typed add function. Literally, my very first thought after Martin <a href="http://devhawk.net/2008/01/31/Morning+Coffee+141+LangNET+08+Edition.aspx">presented DLR Trees @ Lang.NET</a> was "I wonder if you could use that for static languages too?" I guess the answer is yes.  </li><li>It's been six months, and <a href="http://www.hanselman.com/blog/SixMonthsInTheInsideAmIEvilYet.aspx">Scott Hanselman still isn't evil</a>. Perhaps he could start turn his <a href="http://wiki.asp.net/">ASP.NET wiki</a> into an <u>evil</u> ASP.NET wiki? Actually, I'm only linking to his post because I liked the way he described blogging as "I'm writing a book that will never end".</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1114</wp:post_id>
		<wp:post_date>2008-03-04 12:28:36</wp:post_date>
		<wp:post_date_gmt>2008-03-04 20:28:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lunchtime-coffee-153</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="guidance"><![CDATA[Guidance]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="post_tag" nicename="software-plus-services"><![CDATA[Software + Services]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[386b040e-1705-44b6-ad0b-0be2d648b722]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Lunchtime+Coffee+153]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/04/Lunchtime+Coffee+153]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Play Ball Script in F#</title>
		<link>http://devhawk.net/2008/03/04/play-ball-script-in-f/</link>
		<pubDate>Tue, 04 Mar 2008 12:58:02 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://a16f6c80-3bca-44bc-b679-7c0f8e29ca33</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Scott Hanselman <a href="http://www.hanselman.com/blog/2008WindowScriptingGamesAdvancedPowerShellEvent7.aspx">wanted</a> an F# version of this <a href="http://www.microsoft.com/technet/scriptcenter/funzone/games/games08/aevent7.mspx">Play Ball!</a> round-robin scheduling PowerShell script. Here's what I came up with:</p><pre class="brush: fsharp">
let randomize list = 
    let random = new System.Random()
    let list'=  
        list  
        |&gt; List.map (fun i -&gt; (random.Next(), i))
        |&gt; List.sort (fun (i1,_) (i2,_) -&gt; Int32.compare i1 i2)  
    let (_,list'') = List.unzip list' 
    list'' 

let rec makeGames teams = 
    match teams with
    | first :: rest -&gt;
        [for team in rest -&gt; (first, team)] @ (makeGames rest)
    | [] -&gt;  []

let teams = ['a'..'f']
let games = teams |&gt; makeGames |&gt; randomize
</pre><p>MakeGames uses pattern matching to see if the list of teams is empty or not. If the list is empty, we simply return an empty list of games. If not, we use F#'s list comprehension syntax to generate a list of games between the first team in the list and each of the remaining teams. This list is combined (via the '@' operator) with the results of calling makeGames recursively. This generates the un-randomized list of games. </p><p>Once we have the list of games, we need to randomize it. I ported the randomize function above over from a <a href="http://wiki.trapexit.erlang-consulting.com/RandomShuffle">version I found in Erlang</a>. Basically, it attaches a random number to each element in the list to be randomized, sorts by those randomly generated numbers, then throws the numbers away and returns the just the randomized list. Note, the Erlang version I referenced runs randomize log(length of list) times to ensure a fair shuffle, but I thought once would be enough for this simple script.</p><p>(Note to F# team: perhaps List.randomize should be a part of the standard F# library?)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1115</wp:post_id>
		<wp:post_date>2008-03-04 12:58:02</wp:post_date>
		<wp:post_date_gmt>2008-03-04 12:58:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>play-ball-script-in-f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[a16f6c80-3bca-44bc-b679-7c0f8e29ca33]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Play+Ball+Script+In+F]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/04/Play+Ball+Script+In+F]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Experience vs. Change</title>
		<link>http://devhawk.net/2008/03/05/experience-vs-change/</link>
		<pubDate>Wed, 05 Mar 2008 09:24:41 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://bea219e7-31dc-45dd-a13b-c5faed5b04cf</guid>
		<description></description>
		<content:encoded><![CDATA[<p>My wife and I usually watch <a href="http://www.thedailyshow.com">The Daily Show</a> a day late and yesterday was no exception. Hillary Clinton was the guest Monday night in advance of yesterday's big primaries in Ohio and Texas which Jon Stewart called the "Ultimate Last Final Showdown (Unless Hillary Wins One or Both of the Larger States)". If you missed it, you can watch the interview online (<a href="http://www.thedailyshow.com/video/index.jhtml?videoId=163165&amp;title=sen.-hillary-clinton-pt.-1">part 1</a>, <a href="http://www.thedailyshow.com/video/index.jhtml?videoId=163166&amp;title=sen.-hillary-clinton-pt.-2">part 2</a>). </p><p>I haven't seen much 'raw footage' from either Democratic candidate in quite some time, and through most of the interview all I could think was "I may have an Obama flair on my website, but I'd be happy with Hillary". However, there was a section of the interview where she was trying to draw a distinction between her and Obama that didn't sit well with me. She's been on this whole "action not words" kick of late, trying to take the wind out of Obama's sails. For example, in her <a href="http://www.hillaryclinton.com/news/speech/view/?id=6353">speech last night</a> in Ohio, she said this:</p><blockquote><p>Americans don't need more promises. They’ve heard plenty of speeches. They deserve solutions and they deserve them now.  </p><p>America needs a president who’s ready to lead, ready to stand up for what's right even when it's hard. And after seven long years of George W. Bush, we sure are ready for a president who will be a fighter, a doer and a champion for the American people again. </p></blockquote><p>To be clear, this kind of talk doesn't bother me on it merits. <a href="http://www.balloon-juice.com/?p=9834">Some folks</a> aren't happy with Clinton because she's "dumpster diving" or they think that she's ripping the party apart. I think she's fighting for her political career and I would hope any Democratic candidate would go down swinging as it were. Besides, as Howard Dean said, the negative campaigning we've seen so far is a "<a href="http://www.boston.com/news/politics/politicalintelligence/2008/03/dean_says_no_wo.html">tea party</a>" compared to what the Republicans will throw at the eventual nominee. I'd also make the argument that it's better to get as much of this stuff "out there" now so that it's old news by November. That that doesn't kill you makes you stronger, right?</p><p>However, I do think Clinton is painting herself into a general election corner with this experience vs. change strategy. </p><p>I get why Clinton played the experience card - she had to do something to take the wind out of Obama's sails after 11 straight victories. If the <a href="http://www.msnbc.msn.com/id/23463159/">popular primary vote results from Tuesday</a> are any indication, the experience message is working for her. So I would expect we'll hear a lot more about how we "don't need more promises" but that we need a president "who's ready to lead" in the next seven weeks ahead before the Pennsylvania primary.</p><p>However, if she does win the nomination, she'll have to to argue the exact opposite position in the general election. I'm certainly no fan of McCain, but there's no question his 25 years in Washington will cast him as the "experience" candidate (even though <a href="http://www.thecarpetbaggerreport.com/archives/14582.html">he hasn't accomplished much</a> in that quarter century). Plus, with the Howard Dean already <a href="http://www.democrats.org/a/2008/03/dean_mccain_has.php">framing McCain</a> as "four more years of George Bush", it's pretty obvious either Democratic candidate will be cast as the "change" candidate. </p><p>Will Clinton have credibility running as the candidate for change when she's spent the spring arguing that experience matters most? I don't know. Combined with the rabid anti-Clinton (both her and her husband) emotions her candidacy is assuredly going invoke among conservatives, I'm much more concerned about her ability to win in November than Obama's.</p><p>In the end, I doubt it will matter. Obama's roughly 160 pledged delegate lead seems pretty insurmountable. Even with Clinton's impressive victories yesterday, <a href="http://tpmelectioncentral.talkingpointsmemo.com/2008/03/so_how_many_delegates_did.php">estimates</a> are that she's going to only net around ten delegates total, meaning the delegate math is largely unchanged. With only 561 delegates left in the remaining twelve contests, she would need to win almost 65% of the remaining delegates just to draw even. Frankly, that's not possible given proportional delegate allocation method that Democrats use. At this point, her only hope is to cut the margin as much as possible and hope the undeclared superdelegates break her way. Hope isn't a strategy, but I don't see how she has any other option.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1116</wp:post_id>
		<wp:post_date>2008-03-05 09:24:41</wp:post_date>
		<wp:post_date_gmt>2008-03-05 09:24:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>experience-vs-change</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="politics"><![CDATA[Politics]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[bea219e7-31dc-45dd-a13b-c5faed5b04cf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Experience+Vs+Change]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/05/Experience+Vs+Change]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kitchen Sink Variability</title>
		<link>http://devhawk.net/2008/03/04/kitchen-sink-variability/</link>
		<pubDate>Tue, 04 Mar 2008 17:08:37 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://08a8504d-71dd-4a36-a79c-4bfbf3dc4f95</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Nick Malik forwarded the <a href="http://www.zapthink.com/report.html?id=ZAPFLASH-2008228">last ZapFlash newsletter</a> to me. I gave up on analyst newsletters like this long ago, but Nick shared it with me because it "hit directly on what [Nick] thinks an ESB is and does, and why an ESB is not a hub." I'm <a href="http://devhawk.net/2007/04/25/Enterprise+Service+Bus+Give+Me+An+Extra+Special+Bitter+Instead.aspx">not a fan of the whole ESB concept</a> and frankly this article didn't do much to change my opinion. However, this passage did sorta jump out at me.</p><blockquote><p>[T]he main concept of SOA is that we want to deal with frequent and unpredictable change by constructing an architectural model, discipline, and abstraction that loosely-couples the providers of capability from the consumers of capability in an environment of continuous heterogeneity. This means that we have to somehow develop capabilities without the knowledge of how they might be used...[T]his means that we need to have significant variability at a variety of aspects including the implementation, infrastructure, contract, process, policy, data schema, and semantic aspects. Having this variability allows companies to have stability in their business and IT even though the IT and business continue to change. Agility, predictability, reliability, visibility, and cost-effectiveness all become that much more realistic when we can achieve that sort of abstraction. </p></blockquote><p>My reading of this is that the author, <a href="http://www.zapthink.com/management.html">Ronald Schmelzer</a>, is advising organizations to introduce "significant variability at a variety of aspects" in their services in order to deal with what he openly admits is "unpredictable change". </p><p>This sounds like a mind-boggling awful idea to me.</p><p>At it's heart, any practical design - including a service-oriented one - needs to be an exercise in tradeoff analysis. You can't add "significant variability" without also adding significant complexity, effort, time and cost. So the real question is: Is the significant variability Ronald describes worth the inevitable tradeoff in significant time, effort, cost and complexity?</p><p>I seriously doubt it.</p><p>Since unpredictable change is - by definition - unpredictable, you have no way of knowing if you will actually need any specific aspect of variability down the road. Ronald's strategy - if you can call it that - seems to be let everything he can think of vary except the kitchen sink. That way, when said unpredictable change happens, you might get lucky and have already enabled the variability you need to handle the change with a minimum of effort.</p><p>Getting lucky is not a strategy.</p><p>Chances are, a specific aspect of variability won't ever be needed. In other words, most of the the time, effort and money you spent building these aspects of variability will be wasted. And remember, this isn't just a one time cost - the increased complexity from including this significant variability means you'll pay the price in additional time, effort and money every time you have to change the system.</p><p>I wonder if Ronald is familiar with the term "<a href="http://xp.c2.com/YouArentGonnaNeedIt.html">You Aren't Gonna Need It</a>". He talks about increasing business agility, but he eschews many of the principles of <a href="http://en.wikipedia.org/wiki/Agile_software_development">agile development</a>. I realize they aren't the same thing, but I have a hard time believing that they are so diametrically opposed that a <a href="http://www.extremeprogramming.org/rules/early.html">core principle</a> of agile development should be readily violated in order to enable business agility.</p><p>Maybe it's cliche, but I try to always come back to "<a href="http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html">What's the simplest thing that could possibly work?</a>". I would think that building a ton of currently-unnecessary variability into your system on the off chance that someday you'll need it fails the "simplest thing that could possibly work" test spectacularly. </p><p>Personally, given the choice of taking advice from <a href="http://c2.com/cgi/wiki?WardCunningham">Ward Cunningham</a> or pretty much any enterprise analyst on the planet, I'll pick Ward every time.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1117</wp:post_id>
		<wp:post_date>2008-03-04 17:08:37</wp:post_date>
		<wp:post_date_gmt>2008-03-04 17:08:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kitchen-sink-variability</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[08a8504d-71dd-4a36-a79c-4bfbf3dc4f95]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Kitchen+Sink+Variability]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/05/Kitchen+Sink+Variability]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 154</title>
		<link>http://devhawk.net/2008/03/05/morning-coffee-154/</link>
		<pubDate>Wed, 05 Mar 2008 11:27:33 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://6fd10677-7133-42e1-8baa-d18a089b457b</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Did you see <a href="http://www.dilbert.com/comics/dilbert/archive/dilbert-20080304.html">yesterday's Dilbert cartoon</a>? Classic.  </li><li>MIX isn't the only Microsoft conference this week. It's also time for the annual MS Research <a href="http://research.microsoft.com/techfest/">TechFest conference</a>. It actually started yesterday, with a keynote from Rick Rashid and Craig Mundy (<a href="http://wm.microsoft.com/ms/research/events/TechFest2008/TF08Keynote.wmv">available on demand</a>). I'll be heading up there later today and will blog everything I saw that is public, <a href="http://devhawk.net/2007/03/08/Morning+Coffee+41+TechFest+Edition.aspx">like I did last year</a>. In the meantime, you can check out some cool MS Research projects on the <a href="http://research.microsoft.com/techfest/videos/default.aspx">TechFest video page</a>.  </li><li>Speaking of MS Research, they've published the <a href="http://www.codeplex.com/singularity">Singularity source code</a> (for academic and non-commercial purposes) on <a href="http://www.codeplex.com">CodePlex</a>. <a href="http://research.microsoft.com/os/singularity/">Singularity</a> is research OS "focused on the construction of dependable systems". I've wanted to play with this, but I've never had the time. Frankly, that hasn't changed, but now that it's available to the community, I'm hoping I can live vicariously thru other people hacking around with it.  </li><li>Some announcements coming out of MIX won't be a surprise to anyone:  <ul><li>The <a href="http://blogs.msdn.com/ie/">IE Team</a> blog has been discussing IE8 quite a bit of late, and the folks of LiveSide <a href="http://www.liveside.net/blogs/main/archive/2008/03/05/ie-8-beta-coming-soon-download-pages-up-now-links-not-working.aspx">are reporting</a> the <a href="http://www.microsoft.com/windows/products/winfamily/ie/ie8/readiness/">IE8 Readiness Toolkit</a> is already up <strike>(download links aren't live yet)</strike>. There are also a bunch of <a href="http://code.msdn.microsoft.com/ie8whitepapers">developer whitepapers</a> on Code Gallery. Update: the <a href="http://www.microsoft.com/windows/products/winfamily/ie/ie8/readiness/Install.htm">install links</a> are live. </li><li>Scott Guthrie <a href="http://weblogs.asp.net/scottgu/archive/2008/02/22/first-look-at-silverlight-2.aspx">already announced</a> that Silverlight 2.0 would go beta at MIX, and Neo @ SilverlightExamples has <a href="http://www.silverlightexamples.net/post/Silverlight-20-Beta-1-Is-Available-For-Download.aspx">all the links</a> for the runtime, docs and the SDK. </li><li>Scott also <a href="http://weblogs.asp.net/scottgu/archive/2008/02/12/asp-net-mvc-framework-road-map-update.aspx">already announced</a> a new preview drop of ASP.NET MVC, which you can get from the <a href="http://www.asp.net/downloads/3.5-extensions/">ASP.NET 3.5 Extensions download page</a>.</li></ul></li><li>Here some primarily "new" news from MIX:. </li><ul><li>I'm not sure which team owns it, but I'd say the biggest previously-unannounced news was <a href="http://www.microsoft.com/sql/dataservices">SQL Server Data Services</a> (aka SSDS), a "highly scalable, on-demand data storage and query processing utility services." In other words, SQL in the sky. There's a free beta sometime this month <a href="http://go.microsoft.com/fwlink/?LinkId=110055">you can sign up for</a>. Very cool, though no word on what it's going to cost. If you're interested in this, I'd keep an I on the <a href="http://blogs.technet.com/dataplatforminsider/">Data Platform Insider</a> blog.  </li><li>John Lam <a href="http://www.iunknown.com/2008/03/dynamic-silverl.html">announces</a> the Dynamic Silverlight extension that lets you run DLR languages on Silverlight. Given that they talked about this last year, I'm not sure it's really "news", but John provides lots of gory details so it made the cute. But are they really using "DSL" as the acronym for this? Guys, that acronym's <a href="http://en.wikipedia.org/wiki/Domain-specific_programming_language">already taken</a>.  </li><li>Mary Jo Foley <a href="http://blogs.zdnet.com/microsoft/?p=1236">has a scoop</a> on Silverlight for <a href="http://www.nokia.com/A4136001?newsid=1197788">Nokia Symbian mobile phones</a>.  </li><li>There's a new beta of <a href="http://www.microsoft.com/expression/products/download.aspx?key=studio2beta">Expression Studio 2</a> as well as a separate <a href="http://www.microsoft.com/expression/products/download.aspx?key=blend2dot5">Expression Blend 2.5 preview</a> for Silverlight 2. Soma <a href="http://blogs.msdn.com/somasegar/archive/2008/03/05/a-new-era-of-expression.aspx">has the details</a>. This isn't really a surprise, but I hadn't seen any news on new versions of all the Expression Studio products. </li></ul></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1118</wp:post_id>
		<wp:post_date>2008-03-05 11:27:33</wp:post_date>
		<wp:post_date_gmt>2008-03-05 11:27:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-154</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="dynamic-languages"><![CDATA[Dynamic Languages]]></category>
		<category domain="post_tag" nicename="humor"><![CDATA[Humor]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[Open Source]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="post_tag" nicename="sql-server"><![CDATA[SQL Server]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[6fd10677-7133-42e1-8baa-d18a089b457b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+154]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/05/Morning+Coffee+154]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 155 - Dueling Conference Edition</title>
		<link>http://devhawk.net/2008/03/06/morning-coffee-155-dueling-conference-edition/</link>
		<pubDate>Thu, 06 Mar 2008 09:51:17 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://cec54f31-0f3a-4bf5-9e42-633b60b0a874</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>If you don't want to watch the <a href="http://www.visitmix.com/blogs/Joshua/Day-1-Keynote/">video of yesterday's MIX keynote</a> but still want a sense of what happened, check out Tim Sneath's <a href="http://blogs.msdn.com/tims/archive/2008/03/05/mix08-keynote-live-blog.aspx">keynote liveblog</a>. (via <a href="http://blogs.msdn.com/tims/archive/2008/03/05/mix08-keynote-live-blog.aspx">Sam Gentile</a>)  </li><li>Other announcements from Mix day one keynote that I missed (all via <a href="http://blogs.msdn.com/tims/archive/2008/03/05/mix08-keynote-live-blog.aspx">Tim Sneath</a>)  <ul><li><a href="http://www.microsoft.com/windows/windowsmedia/forpros/serve/prodinfo2008.aspx">Windows Media Services for WS08</a> released last week. Additionally, the <a href="http://www.iis.net/default.aspx?tabid=22">IIS 7 Media Pack</a> adds web playlists (CTP) and bandwidth throttling (GoLive beta) to the baseline media streaming platform.  </li><li>The <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=ea93dd89-3af2-4acb-9cf4-bfe01b3f02d4&amp;displaylang=en">source code (and unit tests)</a> for all the built-in Silverlight 2 controls is available for download. I'm not a lawyer, but it doesn't look like a "reference-only" licence like the <a href="http://weblogs.asp.net/scottgu/archive/2008/01/16/net-framework-library-source-code-now-available.aspx">.NET Framework source code is released under</a>. Very cool.  </li><li>The <a href="http://labs.live.com/Seadragon.aspx">Seadragon technology</a> for smooth navigation of mutli-gigabyte sized images over the network will be emnedded in Silverlight as a feature called DeepZoom. You can see a cool demo of DeepZoom on the <a href="http://memorabilia.hardrock.com/">Hard Rock Memorabilia site</a> and Scott Hanselman <a href="http://www.hanselman.com/blog/DeepZoomSeadragonSilverlight2MultiScaleImagesAtMix.aspx">posted a walkthru</a> of using the <a href="http://blogs.msdn.com/expression/archive/2008/03/05/download-the-preview-of-the-deep-zoom-composer.aspx">DeepZoom Composer preview</a> tool build your own DeepZoom experience.  </li><li>Apparently the <a href="http://weblogs.asp.net/scottgu/archive/2008/02/19/net-3-5-client-product-roadmap.aspx">.NET client roadmap</a> isn't all perf and working set improvements. WPF is getting shader support. I couldn't find <em>anything</em> on this besides the announcement itself, but I'll be interested how much overlap there is with the <a href="http://msdn2.microsoft.com/en-us/library/bb509561(VS.85).aspx">DirectX / XNA shader language</a>. </li></ul></li><li>Quick side note - Installing Silverlight 2 in order to check out the DeepZoom Hard Rock demo was smooth, fast and easy. It's hard to believe there's a whole CLR in there.  </li><li>Now on to public stuff I saw @ TechFest:  <ul><li>One of the problems with touch screens is that your fingers obscure what you're trying to touch. <a href="http://research.microsoft.com/users/baudisch/projects/lucidtouch/">Lucid Touch</a> solves this by having you touch the back of the device, while rendering a virtual shadow of your hand - a technique they call "pseudo transparency". You really need to watch <a href="http://www.youtube.com/watch?v=RsNFZAEssPQ">the video</a> to "get" this. It's not currently feasible - the prototype uses a webcam on a foot long boom to track hand and finger position. However, they expect a future version will have some type of imaging sensors embedded in the body of the device.  </li><li>The Berkeley Emulation Engine version 3 (aka <a href="http://research.microsoft.com/projects/BEE3/">BEE3</a>) (<a href="http://research.microsoft.com/aboutmsr/techfest/videos/video_d.aspx">video</a>) is a high powered hardware simulator. Apparently several orders of magnitudes faster than conventional simulation. Frankly, most of this demo was over my head and I'm not really a HW guy. But it sounds really fast.  </li><li><a href="http://research.microsoft.com/projects/blews/blews.aspx">BLEWS</a> or "what the blogosphere tells you about news". Given my interest in political blogging, it's not a surprise I was interested in this project. This tool categorizes news stories according to their reception in the political blogosphere. It provides a visualization showing not only how many links from a given ideological sphere there are, but how strong the emotions are running. Kinda like <a href="http://www.memeorandum.com/">Memorandum</a> on major steroids.  </li><li>Music Steering (<a href="http://research.microsoft.com/techfest/videos/video_f.aspx">video</a>) is an "interactive music-playlist generation through music-content analysis, music recommendation, and music filtering". Sort of like LastFM + Pandora on your Zune.  </li><li>In-Depth Image Editing (<a href="http://research.microsoft.com/vision/cambridge/i3l/default.htm">team site</a>) showed some cool photo editing software that reminding me of <a href="http://www.microsoft.com/max/">Microsoft Max</a>.  </li><li>MashupOS (<a href="http://research.microsoft.com/users/helenw/papers/mashupos-hotos">paper</a>) is a set of abstractions to improve the browser security model, allowing for isolation between blocks of code from different sources while still allowing safe forms of communication.  </li><li><a href="http://research.microsoft.com/users/dan/mysong/ ">MySong</a> (<a href="http://research.microsoft.com/users/dan/mysong/MySongCHI2008.pdf">paper</a>, <a href="http://research.microsoft.com/users/dan/mysong/MySongCHI2008.wmv">video</a>) "automatically chooses chords to accompany a vocal melody, allowing a user with no musical training to rapidly create accompanied music". Karaoke singers rejoice! Actually, it's pretty cool. You can adjust sliders to adjust characteristics of the generated music like "Jazz factor" and "Happy factor". Actually, I just want a happy factor slider in all my software.  </li><li>I saw some cool projects from the <a href="http://research.microsoft.com/sds/">Socio-Digital Systems</a> group and MS Research. My wife is a sociologist and always says there's no way she could ever get a job in the big house. Maybe after she checks out this team, she'll stop thinking that.  </li><li>The <a href="http://worldwidetelescope.org/">Worldwide Telescope</a> booth was so crowded that I couldn't get anywhere near it. From what I could see from standing in the back, it looked fantastic. It's not live yet, but you can check out the <a href="http://www.ted.com/talks/view/id/224">video from the TED conference</a> to get a sense of it. </li></ul></li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1119</wp:post_id>
		<wp:post_date>2008-03-06 09:51:17</wp:post_date>
		<wp:post_date_gmt>2008-03-06 09:51:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-155-dueling-conference-edition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="post_tag" nicename="hardware"><![CDATA[Hardware]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="music"><![CDATA[Music]]></category>
		<category domain="post_tag" nicename="research"><![CDATA[Research]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="post_tag" nicename="web-2-0"><![CDATA[Web 2.0]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[cec54f31-0f3a-4bf5-9e42-633b60b0a874]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+155+Dueling+Conference+Edition]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/06/Morning+Coffee+155+Dueling+Conference+Edition]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2039</wp:comment_id>
			<wp:comment_author><![CDATA[Tommi]]></wp:comment_author>
			<wp:comment_author_email>Tommihjort@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://Denmark</wp:comment_author_url>
			<wp:comment_author_IP>83.93.2.81</wp:comment_author_IP>
			<wp:comment_date>2008-04-04 12:07:14</wp:comment_date>
			<wp:comment_date_gmt>2008-04-04 19:07:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[heej]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 156</title>
		<link>http://devhawk.net/2008/03/07/morning-coffee-156/</link>
		<pubDate>Fri, 07 Mar 2008 18:34:35 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://0be6050f-4ac1-4d32-a5e6-46cb9e175221</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>My hockey team won last night 4-2. No points for me, but I was even on the night. I did spend some time in the penalty box, but I was serving a two many men on the ice bench minor. We only had nine skaters, not enough for two full lines, so I'm pretty tired today. However, I'm not as tired as I was two weeks ago - that's a good sign.  </li><li>Politics 2.0 watch: The Obama campain <a href="http://my.barackobama.com/page/community/post/samgrahamfelsen/gGB3YB">announced yesterday</a> that they raised $55 million in donations in the month of February. That's significantly more than Clinton (<a href="http://www.politico.com/blogs/bensmith/0208/Clinton_raises_35_million_in_February.html">$35 million</a>) and McCain (<a href="http://politicalticker.blogs.cnn.com/2008/02/29/mccain-raises-12-million-in-january/">$12 million</a>) combined. Even more impressive is that $45 million of that was raised online, of which $40 million were from donations of $100 or less and $22.5 million were from donations of $25 or less. I guess in Politics 2.0, individuals contribute more than <a href="http://devhawk.net/CategoryView,category,Politics.aspx">online punditry</a> and <a href="http://www.youtube.com/watch?v=yjbknhX383A">video parodies</a> of <a href="http://www.youtube.com/watch?v=h7bzdj9RlG4">political commercials</a>.  </li><li><a href="http://www.textglow.net/">TextGlow</a> is a Sivlerlight 2 based Word docx file viewer, <a href="http://james.newtonking.com/archive/2008/03/06/silverlight-2-0-ooxml-textglow.aspx">created by</a> James Newton-King. Nice, but what I really want is "SlideGlow", a SL2 based PPTX file viewer. (via <a href="http://www.dotnetkicks.com/silverlight/Silverlight_2_0_OOXML_TextGlow">DNK</a>)  </li><li>Speaking of Silverlight, Windows Live launched an experimental site called <a href="http://photozoom.mslivelabs.com/">PhotoZoom</a> which will let you create DeepZoom photo albums. (via <a href="http://www.liveside.net/blogs/main/archive/2008/03/07/microsoft-launches-photozoom-powered-by-silverlight-2-and-deepzoom.aspx">LiveSide</a>) </li><li>Charlie Calvert <a href="http://blogs.msdn.com/charlie/archive/2008/03/05/future-focus-ii-call-hierarchy.aspx">has created</a> a home for <a href="http://code.msdn.microsoft.com/vslangfutures/">Language Futures discussion</a> on MSDN Code Gallery. If you'll recall, back in January he asked for input on <a href="http://blogs.msdn.com/charlie/archive/2008/01/25/future-focus.aspx">Dynamic Lookup</a>. Now he's looking for feedback on <a href="http://code.msdn.microsoft.com/vslangfutures/Wiki/View.aspx?title=Call%20Hierarchy&amp;referringTitle=Home">Call Hierarchy</a>, a proposed VS IDE feature to help you visualize how your code flows. Great idea, but the <a href="http://code.msdn.microsoft.com/vslangfutures/Wiki/View.aspx?title=Call%20Hierarchy&amp;referringTitle=Home">Call Hierarchy dialog mockup</a> isn't very intuitive. Couldn't we put these visualizations into the code editor window directly, like <a href="http://www.devexpress.com/Products/NET/IDETools/CodeRush/">CodeRush</a> does?  </li><li>John Lam continues his Dynamic Silverlight series, first building a <a href="http://www.iunknown.com/2008/03/dynamic-silve-1.html">Flickr image browser in Managed JScript</a> then showing how to integrate an <a href="http://www.iunknown.com/2008/03/dynamic-silve-2.html">IronRuby version of the Flickr image browser with an ASP.NET MVC app</a>.  </li><li><a href="http://edjez.instedd.org/">EdJez</a> is <a href="http://edjez.instedd.org/2008/03/hello-world.html">inspiring</a>. <a href="http://feeds.instedd.org/edjez">Subscribed</a>. (via <a href="http://bradwilson.typepad.com/blog/2008/03/edjez-resurface.html">Brad Wilson</a>) </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1120</wp:post_id>
		<wp:post_date>2008-03-07 10:34:35</wp:post_date>
		<wp:post_date_gmt>2008-03-07 18:34:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-156</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dynamic-languages"><![CDATA[Dynamic Languages]]></category>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[0be6050f-4ac1-4d32-a5e6-46cb9e175221]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+156]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/07/Morning+Coffee+156]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 157</title>
		<link>http://devhawk.net/2008/03/10/morning-coffee-157/</link>
		<pubDate>Mon, 10 Mar 2008 09:59:10 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://0fe95201-dce1-47c8-88d0-a9a65808c262</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>My Xbox 360 started flashing the dreaded <a href="http://support.microsoft.com/kb/907534">Red Ring of Death</a> on Friday. &lt;sigh&gt; I'm not going to have much time to play in the next week, so it's not the end of the universe, but I did have to dig an old DVD player out of the garage for interim duty. </li><li>My Caps really stepped in it over the weekend dropping two games they had to have and by most reports (aka according to my dad) that they dominated most of the way. Caps Playoff Math isn't as dire as say Clinton's Nomination Math, but they are three games back of the Hurricanes with twelve to play.  </li><li>Ted Neward has a pretty good <a href="http://msdn2.microsoft.com/en-us/magazine/cc164244.aspx">F# overview article</a> in the most recent MSDN Magazine. I say pretty good because I wonder if someone with no functional programming experience will "get it". As much as I like F# and functional programming, I think some of the basic concepts don't pass Don Box's <a href="http://www.crunchgear.com/2008/02/05/microsoft-readying-model-driven-programming-tools/">two beer test</a>.  </li><li>Speaking of Ted, somehow his feed fell off my radar (bad DevHawk!) and I missed several great posts like <a href="http://blogs.tedneward.com/2008/02/18/Modular+Toolchains.aspx">Modular Toolchains</a> (note to Ted, check out <a href="http://research.microsoft.com/research/pubs/view.aspx?msr_tr_id=MSR-TR-2003-32">A Research C# Compiler</a>), <a href="http://blogs.tedneward.com/2008/02/18/Why+We+Need+Both+Static+And+Dynamic+In+The+Same+Language.aspx">Why we need both static and dynamic in the same language</a> (note to self, check out <a href="http://cobra-language.com/">Cobra</a>) and <a href="http://blogs.tedneward.com/2008/02/20/The+Fallacies+Remain.aspx">The Fallacies Remain....</a> (recently, I'm the guy shouting about risks).  </li><li>Speaking of MSDN Magazine, have you seen their <a href="http://msdn2.microsoft.com/en-us/magazine/default.aspx">new site redesign</a>? I can't find any announcement of it, but man the site looks great.  </li><li>If you missed MIX, the <a href="http://sessions.visitmix.com/">sessions</a> are all online already. That was fast. </li><li>John Lam <a href="http://www.iunknown.com/2008/03/dynamic-silve-3.html">blogs</a> about the availability of the <a href="http://dynamicsilverlight.net/">Dynamic Silverlight bits</a>. Apparently, Dynamic Silverlight includes more recent bits than the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=4E03409A-77F3-413F-B108-1243C243C4FE&amp;displaylang=en">Silverlight 2 SDK</a>, which does includes binaries and tools for IronPython, IronRuby and Managed JScript (<a href="http://silverlight.net/Quickstarts/ProgramDlr.aspx">quickstart</a>). So you can get started with dynamic languages on Silverlight using the SL SDK alone, but I expect that the Dynamic Silverlight bits will be updated more regularly than the SDK. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1121</wp:post_id>
		<wp:post_date>2008-03-10 09:59:10</wp:post_date>
		<wp:post_date_gmt>2008-03-10 09:59:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-157</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<category domain="post_tag" nicename="xbox-360"><![CDATA[Xbox 360]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[0fe95201-dce1-47c8-88d0-a9a65808c262]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+157]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/10/Morning+Coffee+157]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Joining the Dynamic Languages Team</title>
		<link>http://devhawk.net/2008/03/11/joining-the-dynamic-languages-team/</link>
		<pubDate>Tue, 11 Mar 2008 10:49:27 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://103d3698-8416-4820-96e6-b6d92e9aaaf0</guid>
		<description></description>
		<content:encoded><![CDATA[<p>After nearly two years in MSIT and six years focused on architecture across three different roles, I'm moving on to a new job in the Developer Division. In a couple of weeks, I'll be joining the Dynamic Languages team as a program manager. This is the team who ships <a href="http://www.codeplex.com/IronPython">IronPython</a>, <a href="http://www.ironruby.com/">IronRuby</a>, the <a href="http://blogs.msdn.com/hugunin/archive/2007/04/30/a-dynamic-language-runtime-dlr.aspx">Dynamic Language Runtime</a> and <a href="http://dynamicsilverlight.net/">Dynamic Silverlight</a>. After seeing all the their cool work <a href="http://devhawk.net/2008/01/31/Morning+Coffee+141+LangNET+08+Edition.aspx">at Lang.NET this year</a>, I just had to be a part of it. </p><p>As you might imagine, I'm pretty excited about this opportunity.</p><p>In the short term, I'll be primarily focused on IronPython, which is marching towards their 2.0 release. Towards that end, I'm attending <a href="http://us.pycon.org/2008/about/">PyCon 2008</a> in Chicago this weekend, though I don't officially change jobs for a couple more weeks. Longer term...well let's just say I'm going to be really focused on doing my part to get IPy 2.0 out the door and after that we'll see where things lie. This is a pretty big shift for me, so I'm explicitly trying to focus on short term work for the first six months in order to absorb as much knowledge as possible from the folks I'll be working with like <a href="http://blogs.msdn.com/hugunin/default.aspx">Jim Hugunin</a>, <a href="http://www.iunknown.com/">John Lam</a>, <a href="http://blogs.msdn.com/mmaly/">Martin Maly</a>, <a href="http://jimmy.schementi.com/blog/">Jimmy Schementi</a> and a bunch of others who I haven't met yet.</p><p>While this is a pretty big role shift, I haven't given up my passion for services and/or architecture. In other words, this isn't the last you'll hear about <a href="http://devhawk.net/2008/03/05/Kitchen+Sink+Variability.aspx">Kitchen Sink Variability</a>, <a href="http://devhawk.net/2008/03/03/What+Is+The+ROI+On+EA.aspx">the ROI of EA</a> or my perspective on Nick's <a href="http://devhawk.net/2008/01/22/Nicks+Flawed+Vision+Of+A+Shared+Integration+Model.aspx">Shared Integration Model</a>. Obviously, with the job focus change, I expect focus on my blog to change as well. I'm not exactly sure how blogging fits into this new role, though the Dynamic Languages team is pretty open and many other members blog (as linked above) so I doubt I'm going anywhere. I'm going to try and keep blogging Morning Coffee, but I'm guessing it won't be quite as regular as it has been in the past. Unfortunately, I am going to stop coding <a href="http://devhawk.net/CategoryView,category,F%23.aspx">F#</a> for a while (sorry, <a href="http://blogs.msdn.com/dsyme/">Don</a>!) I can't focus on learning two languages at once and obviously Python is my new top priority. </p><p>I wasn't in my MSIT architect role that long, but I feel that the "in the trenches" experience will serve me greatly for years to come. And of course, I will miss my teammates, especially <a href="http://halfmybrain.spaces.live.com/">Dale</a>  who regular readers might remember from <a href="http://devhawk.net/2007/02/22/Morning+Doughnuts+5.aspx">filling in around here</a> occasionally. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1122</wp:post_id>
		<wp:post_date>2008-03-11 10:49:27</wp:post_date>
		<wp:post_date_gmt>2008-03-11 10:49:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>joining-the-dynamic-languages-team</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="dynamic-languages"><![CDATA[Dynamic Languages]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="working-at-msft"><![CDATA[Working at MSFT]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[103d3698-8416-4820-96e6-b6d92e9aaaf0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Joining+The+Dynamic+Languages+Team]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/11/Joining+The+Dynamic+Languages+Team]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2040</wp:comment_id>
			<wp:comment_author><![CDATA[Tomas Restrepo]]></wp:comment_author>
			<wp:comment_author_email>tomas@winterdom.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.winterdom.com/weblog/</wp:comment_author_url>
			<wp:comment_author_IP>200.116.204.205</wp:comment_author_IP>
			<wp:comment_date>2008-03-11 14:58:43</wp:comment_date>
			<wp:comment_date_gmt>2008-03-11 21:58:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey, Congratulations Harry! Sounds like you're gonna have lots of fun on your new role!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2041</wp:comment_id>
			<wp:comment_author><![CDATA[Larry O'Brien]]></wp:comment_author>
			<wp:comment_author_email>lobrien@knowing.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.knowing.net</wp:comment_author_url>
			<wp:comment_author_IP>24.94.66.36</wp:comment_author_IP>
			<wp:comment_date>2008-03-11 17:40:41</wp:comment_date>
			<wp:comment_date_gmt>2008-03-12 00:40:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Perfect! Awesome fit! I feel the odds of a PEG example in the official documentation just went through the roof!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2042</wp:comment_id>
			<wp:comment_author><![CDATA[ToolmakerSteve]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2008-03-11 22:36:13</wp:comment_date>
			<wp:comment_date_gmt>2008-03-12 05:36:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Grats Harry on this exciting change!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2043</wp:comment_id>
			<wp:comment_author><![CDATA[John Lam]]></wp:comment_author>
			<wp:comment_author_email>jflam@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.iunknown.com</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-03-12 09:06:14</wp:comment_date>
			<wp:comment_date_gmt>2008-03-12 16:06:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congrats & welcome to the team, Harry!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2044</wp:comment_id>
			<wp:comment_author><![CDATA[Dale Churchward]]></wp:comment_author>
			<wp:comment_author_email>dale.churchward@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.22.46.203</wp:comment_author_IP>
			<wp:comment_date>2008-03-12 11:35:22</wp:comment_date>
			<wp:comment_date_gmt>2008-03-12 18:35:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm happy for you Harry, but this is a tough loss for our team. You brought a lot to this job and your technical knowledge and insight will be missed.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2045</wp:comment_id>
			<wp:comment_author><![CDATA[Mahesh Prakriya]]></wp:comment_author>
			<wp:comment_author_email>maheshp@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/ironpython</wp:comment_author_url>
			<wp:comment_author_IP>63.250.241.10</wp:comment_author_IP>
			<wp:comment_date>2008-03-13 14:09:30</wp:comment_date>
			<wp:comment_date_gmt>2008-03-13 21:09:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Glad that we're able to finally get you here ;-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2046</wp:comment_id>
			<wp:comment_author><![CDATA[Wes Haggard]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://weblogs.asp.net/whaggard</wp:comment_author_url>
			<wp:comment_author_IP>24.16.63.125</wp:comment_author_IP>
			<wp:comment_date>2008-03-16 14:27:52</wp:comment_date>
			<wp:comment_date_gmt>2008-03-16 21:27:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congrats and welcome to DevDiv! I'm new in DevDiv myself but I'm working on a part of the .Net Framework as opposed the language teams.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2047</wp:comment_id>
			<wp:comment_author><![CDATA[Matthew Podwysocki]]></wp:comment_author>
			<wp:comment_author_email>matthew.podwysocki@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://weblogs.asp.net</wp:comment_author_url>
			<wp:comment_author_IP>65.220.5.99</wp:comment_author_IP>
			<wp:comment_date>2008-03-19 08:28:37</wp:comment_date>
			<wp:comment_date_gmt>2008-03-19 15:28:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congrats Harry!  Sorry to see we'll be missing you from the F# community, but I'm now more confident in the DLR community...  Thanks for the link love.

Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython 2.0 Beta 1 Released</title>
		<link>http://devhawk.net/2008/03/14/ironpython-2-0-beta-1-released/</link>
		<pubDate>Fri, 14 Mar 2008 07:42:14 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://43f6ec74-2b5b-4aa8-8ed9-1370a9bf2ec5</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I'm sitting in the <a href="http://us.pycon.org/2008/conference/keynotes/">PyCon keynote</a> right now, but I wanted to take a quick second to say congrats to my new teammates for getting the brand spanking new <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=10266">beta 1 drop</a> of IronPython 2.0. You can find out what's new via the <a href="http://www.codeplex.com/IronPython/Wiki/View.aspx?title=v2.0%20Beta%201%20Release%20Notes&amp;referringTitle=Home">release notes</a>. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1123</wp:post_id>
		<wp:post_date>2008-03-14 07:42:14</wp:post_date>
		<wp:post_date_gmt>2008-03-14 07:42:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-2-0-beta-1-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="dynamic-languages"><![CDATA[Dynamic Languages]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[43f6ec74-2b5b-4aa8-8ed9-1370a9bf2ec5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+20+Beta+1+Released]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/14/IronPython+20+Beta+1+Released]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Things I Didn&#039;t Miss About Traveling</title>
		<link>http://devhawk.net/2008/03/15/things-i-didnt-miss-about-traveling/</link>
		<pubDate>Sat, 15 Mar 2008 06:16:43 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://84afcd13-a7f3-4ebe-8ace-fa5f89844d91</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In my MSIT role, I only made two business trips, a training session with Thomas Erl and Tech Ed last year. I did travel for two presentations last fall, but both of those were on the conference's dime, not Microsoft's. </p><p>In other words, even though I haven't even <a href="http://devhawk.net/2008/03/11/Joining+The+Dynamic+Languages+Team.aspx">officially started on the Dynamic Languages team</a> yet, by going to <a href="http://us.pycon.org/2008/about/">PyCon</a> this weekend I've already halfway to matching my total Microsoft sponsored travel of the past eighteen months. I used to travel all the time - the architect evangelist role I was in when I <a href="http://devhawk.net/2003/01/15/New+And+Improved+DevHawk.aspx">started this blog</a> had about 35-40% travel. But boy I am rusty. Well, rusty maybe isn't the term, but I had forgotten how much of a pain it is to travel:</p><ul><li>When I got to SeaTac Thursday, the Alaska Air desk was mobbed but everyone was just standing around waiting. Their computers had crashed and they were waiting for them to come back up. I asked an Alaska Air employee what the back up plan was, you know in case the computers didn't come back up. "None" was the response. &lt;sigh&gt; I (and everyone else) ended up wasting a good half an hour before the system was operational.  </li><li>My flight was around 30 minutes late taking off and we had to circle Chicago O'Hare for a good 30 minutes before we could land. Plus it took 15 minutes for them to get the cabin door open.  </li><li>Internet service at the conference and my hotel has been pretty iffy. I'm not surprised by problematic wireless access at a conference (though it was greatly improved by the end of day one), but I wasn't expecting hardline access in my room to be so bad. Speed has been pitiful when it worked at all. I called tech support (after the hotel staff uselessly sent up an "engineer" with a network cable) and waited on hold 30 minutes before giving up and leaving me a message. They called me back literally 3 hours later, by then it was after midnight. I was still up since I'm on west coast time, but come on! </li></ul><p>Once I actually got here, the conference has been great (specifics on that in a future blog post). A lot more stuff than I'd like is going over my head so far, since I don't have a grounding in Python's language model yet. But getting to meet folks and chat face to face is the most important reason for going to these conferences in person - most of the presentation content will end up online anyway. I'm also getting to hang out with my new team - we all went for Chicago style deep dish Pizza last night. I think I'm going to fit in just great with them.</p><p>However, there's one other <em>huge </em>difference between traveling now compared to traveling "back then": I didn't have kids before. Leaving my wife behind was hard enough. Leaving behind my kids as well is even harder. Explaining to Patrick and Riley that "Daddy has a business trip" and so I won't be around for the weekend as usual was exactly no fun. I'm taking a few days off in the job transition to make up for it. Hopefully, I'll be able to bring the family along on a few trips in the future, <a href="http://devhawk.net/2007/09/04/The+DevHawk+2007+World+Tour.aspx">like I did for DevTeach</a>. <a href="http://conferences.oreillynet.com/oscon2008/">OSCON</a>, for example, has been in Portland five years - that's just a few hour drive from Redmond. </p><p>But maybe I should wait until I <em>officially</em> start the new job before planning my next trip.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1124</wp:post_id>
		<wp:post_date>2008-03-15 06:16:43</wp:post_date>
		<wp:post_date_gmt>2008-03-15 06:16:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>things-i-didnt-miss-about-traveling</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="travel"><![CDATA[Travel]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="working-at-msft"><![CDATA[Working at MSFT]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[84afcd13-a7f3-4ebe-8ace-fa5f89844d91]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Things+I+Didnt+Miss+About+Traveling]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/15/Things+I+Didnt+Miss+About+Traveling]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DLR Resources &amp; Jobs</title>
		<link>http://devhawk.net/2008/03/17/dlr-resources-jobs/</link>
		<pubDate>Mon, 17 Mar 2008 12:25:39 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://dd88b818-9f8a-463a-b7ee-c6593ae58dde</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I'm back home from PyCon, but between digging out my inbox, finishing transition reports and doing my mid-year career discussion I'm a little busy. But I did want to point at a couple of recent posts from the <a href="http://blogs.msdn.com/ironpython/">IPy team blog</a>:</p><ul><li><a href="http://blogs.msdn.com/ironpython/archive/2008/03/16/dlr-resources.aspx">DLR Resources</a> is a partial list of links to blogs (where's mine?), mailing lists, specs, whitepapers and websites related to DLR, IronRuby and IronPython. I especially want to call out <a href="http://dynamicsilverlight.net/">Dynamic Silverlight</a> which not only has lots of good information but also looks frakking sweet. Props to my so-to-be teammate <a href="http://jimmy.schementi.com/blog/">Jimmy Schementi</a>.</li><li><a href="http://blogs.msdn.com/ironpython/archive/2008/02/25/ironpython-ironruby-and-f-openings-in-dev-test-and-pm.aspx">Dev and Test Job Openings on IronPython, IronRuby &amp; F#</a>. We're hiring, so if you're interested in working on language development @ MSFT, <a href="mailto://harry@devhawk.net">drop me a line</a> and I'll make sure it gets to the right people. BTW, I hear the IronPython PM position <a href="http://devhawk.net/2008/03/11/Joining+The+Dynamic+Languages+Team.aspx">has been filled</a>. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1125</wp:post_id>
		<wp:post_date>2008-03-17 12:25:39</wp:post_date>
		<wp:post_date_gmt>2008-03-17 12:25:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dlr-resources-jobs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dynamic-languages"><![CDATA[Dynamic Languages]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<category domain="post_tag" nicename="working-at-msft"><![CDATA[Working at MSFT]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[dd88b818-9f8a-463a-b7ee-c6593ae58dde]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[DLR+Resources+Amp+Jobs]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/17/DLR+Resources+Amp+Jobs]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lunchtime Coffee 158</title>
		<link>http://devhawk.net/2008/03/18/lunchtime-coffee-158/</link>
		<pubDate>Tue, 18 Mar 2008 19:49:14 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://fb57d1ef-57b9-4c93-9169-98fbe5ffd8bc</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>My friend (and hopefully my next representative) <a href="http://www.darcyburner.com/">Darcy Burner</a> is leading a group of congressional challengers in publishing <a href="http://www.responsibleplan.com/plan">A Responsible Plan To End The War In Iraq</a>. I haven't read the plan itself in detail, but I sure like what I'm hearing about it. </li><li>Speaking of politics, Obama's speech today "<a href="http://my.barackobama.com/page/community/post/samgrahamfelsen/gGBbJv">A More Perfect Union</a>" was fantastic. </li><li><a href="http://www.xbox.com/games/bioshock/">Bioshock</a> is <a href="http://news.teamxbox.com/xbox/15924/BioShock-Sequel-Announced-Coming-Next-Year/">getting a sequel</a>. 'nuff said.  </li><li>There's a <a href="https://www.foldershare.com/clientdownload.aspx">new version</a> of <a href="http://foldershareteam.spaces.live.com/blog/cns!9D186A323DE6761!133.entry">FolderShare out</a> and I've got mixed feelings about it. On the one hand, I've been a regular user of FolderShare for a while so it's nice to see it get a face lift. On the other hand, it's been over two years since Microsoft bought FolderShare and we're only just now getting a new version, which is literally nothing more that a face lift - this version introduces no new functionality at all.  </li><li>I was hoping to geek out vicariously via someone else's hacking around with <a href="http://www.codeplex.com/singularity/">Singularity</a>. Luckily, Matthew Podwysocki <a href="http://weblogs.asp.net/podwysocki/archive/2008/03/11/singularity-c-os-released-on-codeplex.aspx">provides</a> just such an opportunity.  </li><li>Looks like "<a href="http://www.codeplex.com/prism">Prism</a>" is the new CAB. Glenn Block has two extensive posts covering a <a href="http://blogs.msdn.com/gblock/archive/2008/03/12/prism-launches-on-codeplex.aspx">project overview</a> and their <a href="http://blogs.msdn.com/gblock/archive/2008/03/12/prism-ri-first-drop.aspx">first drop</a>. I think it's interesting that the Prism team is focused on building a reference implementation, and letting the framework eventually fall out. Reading thru the description, it sounds awesome. However, based on the massive increase of inbox throughput I'm experiencing since I <em>accepted</em> the new job, I can't imagine I'll have time to play with it. Maybe Matthew will start playing with Prism too! (via <a href="http://samgentile.com/blogs/samgentile/archive/2008/03/12/new-and-notable-225.aspx">Sam Gentile</a> - btw, thanks for the kind words on the new job Sam!) </li><li>Speaking of Sam, he points to a series by Bob Beauchemin entitled <a href="http://www.sqlskills.com/blogs/bobb/2008/02/14/MHOLINQToSQLAndEntityFrameworkPanaceaOrEvilIncarnatePart1.aspx">LINQ to SQL and Entity Framework: Panacea or evil incarnate?</a> With a title like that, who can resist reading the whole series? Err, I can because LINQ 2 SQL &amp; EF performance just fell off my radar entirely. However I gotta agree with Sam's point that he "can't think of anyone more qualified than Bob" to tackle these questions.  </li><li>Tomas Restrepo blogs his <a href="http://www.winterdom.com/weblog/2008/03/13/DevEnvironmentForPowerShell.aspx">dev environment PS script</a> as well as a <a href="http://www.winterdom.com/weblog/2008/03/17/PowerShellFortune.aspx">PS fortune script</a>. Personally, I use Chris Tavares' <a href="http://www.tavaresstudios.com/Blog/post.aspx?id=0ccbfc67-fc1b-496b-b71e-a74301e583de">vsvars wrapper for PS</a>, though I'll gladly take an <a href="http://blogs.msdn.com/nandal/archive/2008/03/10/influence-the-future-of-windows-sdk-powershell-based-build-environment.aspx">"official" PS based dev environment</a>. </li><li>I wonder if Ted Neward will get jumped for <a href="http://blogs.tedneward.com/2008/03/15/Mort+Means+Productivity.aspx">admiring Mort</a> the way <a href="http://blogs.msdn.com/nickmalik/archive/2007/06/19/not-crazy-just-lateral-thinking.aspx">Nick Malik did</a>. Given that Ted called himself Mort while Nick compared Mort to agile developers, I'm guess Ted will have to go back to his <a href="http://blogs.tedneward.com/2006/06/26/The+Vietnam+Of+Computer+Science.aspx">Vietnam analogy</a> if he wants to create controversy.  </li><li>Speaking of Ted, I agree <a href="http://blogs.tedneward.com/2008/03/15/The+Reason+For+Conferences.aspx">with his point</a> that conferences are about people. As a python pre-newbie (I figure I'll reach full newbie status by the time I actually start my new job), I spent most of my PyCon time connecting with people rather than trying to learn technical stuff. Also, I love Ted's WHISCEY acronym.  </li><li>Speaking of PyCon, my soon-to-be new teammate Srivatsn Narayanan blogs <a href="http://blogs.msdn.com/srivatsn/archive/2008/03/18/pycon-2008.aspx">his thoughts on PyCon</a>. I'll try and get to my PyCon thoughts soon.</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1126</wp:post_id>
		<wp:post_date>2008-03-18 12:49:14</wp:post_date>
		<wp:post_date_gmt>2008-03-18 19:49:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lunchtime-coffee-158</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="games"><![CDATA[Games]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[LINQ]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="patterns-practices"><![CDATA[patterns &amp; practices]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="post_tag" nicename="research"><![CDATA[Research]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[fb57d1ef-57b9-4c93-9169-98fbe5ffd8bc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Lunchtime+Coffee+158]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/18/Lunchtime+Coffee+158]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2048</wp:comment_id>
			<wp:comment_author><![CDATA[Tomas Restrepo]]></wp:comment_author>
			<wp:comment_author_email>tomas@winterdom.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.winterdom.com/weblog/</wp:comment_author_url>
			<wp:comment_author_IP>200.116.204.205</wp:comment_author_IP>
			<wp:comment_date>2008-03-18 13:39:11</wp:comment_date>
			<wp:comment_date_gmt>2008-03-18 20:39:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the link to Chris tavares blog, Harry; I had honestly not seen it before. The trick he uses is cool, but not sure it would work for me (as I modify a bunch of other env variables on my profile and blindly replacing them with the output of vcvars32.bat might not work. 
In any case, my desire for creating a custom script was mostly so that I could keep a single script that worked on all my machines, regardless of the VS version installed, and since it's doing that very nicely, no need to switch for now.

On a different topic, Ted does have a good point. I haven't been to "real" conferences in a few years, but certainly the networking opportunities where by far the most productive part of the conferences. I wonder how many people totally miss that.

Looking forward to your thoughts on PyCon.... hope it wasn't all as bad as Bruce Eckel was complaining about :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 159</title>
		<link>http://devhawk.net/2008/03/20/morning-coffee-159/</link>
		<pubDate>Thu, 20 Mar 2008 18:08:20 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://fce4b1be-cc4c-4d02-9cff-ea23c2f36cd2</guid>
		<description></description>
		<content:encoded><![CDATA[<p>As you might expect, these morning coffee posts are going to get more dev focused as well as more IPy focused. </p><ul><li>One of the cool things we showed @ PyCon was <a href="http://www.djangoproject.com/">Django</a> running on the <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=10266">latest drop of IronPython</a>. IPy lead developer Dino Viehand <a href="http://blogs.msdn.com/dinoviehland/archive/2008/03/17/ironpython-ms-sql-and-pep-249.aspx">posted a blog entry</a> (for the first time in 28 months!) showing the basic Python DB provider for SQL Server he put together. Hopefully, we won't have to wait another two and a half years for Dino's next post.  </li><li>Speaking of IronPython, some of my new teammates pointed me to <a href="http://www.voidspace.org.uk/voidspace/index.shtml">Michael Foord's</a><a href="http://www.voidspace.org.uk/ironpython/planet/">Planet IronPython aggregate news site</a>. Michael is IPy developer for <a href="http://www.resolversystems.com/">Resolver Systems</a> (the cool spreadsheet app hybrid <a href="http://www.devhawk.net/2008/01/31/Morning+Coffee+141+LangNET+08+Edition.aspx">I wrote about @ Lang.NET</a>) and he's working on an <a href="http://www.manning.com/foord">IPy book</a>.  </li><li>Still speaking of IPy, Jeff Hardy <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2008-March/006649.html">dropped his first release</a> of <a href="http://www.codeplex.com/NWSGI">NWSGI</a>, an port of <a href="http://www.python.org/dev/peps/pep-0333/">Python's Web Service Gateway Interface</a> spec to ASP.NET and IPy. I can't wait to see NWSGI combined Django running on IPy like <a href="http://unbracketed.org/2008/mar/16/pycon-2008-django-now-plays-dark-side/">Dino demoed @ PyCon</a>. Congrats Jeff! </li><li>Scott Hanselman's <a href="http://www.hanselman.com/blog/TwitterTheUselessfulnessOfMicroblogging.aspx">post on Twitter</a> reminds me that I recently started <a href="http://twitter.com/devhawk">twittering myself</a>. I haven't worked it into my daily routine, so it gets updated only occasionally, but after reading Scott's post, I'm thinking it's cooler than it appears on the surface.  </li><li>In surprising news, Microsoft <a href="http://port25.technet.com/archive/2008/03/19/supernova.aspx">is going to start collaborating</a> with IBM's Eclipse Foundation, to make it easier to it easier to write apps for Windows in Java. I would think this is a very cool thing, but apparently Ted Neward - who's knowledge of JavaWorld far eclipses (ha ha) my own - <a href="http://blogs.tedneward.com/2008/03/20/Eclipse+Gets+Some+Help+Building+Windows+Apps+From+Microsoft.aspx">thinks</a> "the skin here is just too sensitive" and that this move might cause more controversy between MS and Java. However, he seems to imply the controversy would be between MS &amp; Sun (Eclipse is obviously named as a jab @ Sun) rather than between MS &amp; the Java community. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1127</wp:post_id>
		<wp:post_date>2008-03-20 11:08:20</wp:post_date>
		<wp:post_date_gmt>2008-03-20 18:08:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-159</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[Open Source]]></category>
		<category domain="post_tag" nicename="web-2-0"><![CDATA[Web 2.0]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/20/Morning+Coffee+159]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[fce4b1be-cc4c-4d02-9cff-ea23c2f36cd2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+159]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WebDev.WebServer PowerShell Function</title>
		<link>http://devhawk.net/2008/03/20/webdev-webserver-powershell-function/</link>
		<pubDate>Thu, 20 Mar 2008 15:39:00 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://631d2f09-cb8f-4e40-bad0-dfecce979257</guid>
		<description></description>
		<content:encoded><![CDATA[In experimenting with <a href="http://www.codeplex.com/NWSGI">NWSGI</a> yesterday, I found I wanted the ability to launch the development web server that ships with Visual Studio (WebDev.WebServer.exe) from the command line. I hacked up the following PowerShell function and dropped it into my $profile so I can easily launch the web server in any directory any time I need. Thought I'd share:
<pre class="brush: powershell">function webdev($path,$port=8080,$vpath='/')   
{   
    $spath = 'C:\Program Files\Common Files\microsoft shared\DevServer9.0\WebDev.WebServer.EXE'
    $rpath = resolve-path $path  
    $params = "/path:`"$rpath`" /port:$port /vpath:$vpath"  

    $ignore = [System.Diagnostics.Process]::Start($spath, $params)  
    "Started WebDev Server for '$path' directory on port $port"  
}</pre>
There's probably an easier way to launch an exe with parameters than Sys.Diags.Process.Start, but it works. Using resolve-path is the key, that lets me pass in a relative path on the command line, but the script converts it to an absolute path in order to pass it to the webdev server. Also, I'm not sure I should have hard coded the path to the exe, but again it works and it's not like it's tough to change.

Enjoy.

<strong><span style="text-decoration: underline;">Update</span></strong>: Tomas Restrepo pointed out an easier way to start the process:
<pre class="brush: powershell">&amp;'C:\Program Files\Common Files\microsoft shared\DevServer9.0\WebDev.WebServer.EXE' "/path:$rpath" "/port:$port" "/vpath:$vpath"</pre>
I couldn't figure out how to correctly launch the exe when the physical path to serve has a space in it. Thanks Tomas.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1128</wp:post_id>
		<wp:post_date>2008-03-20 15:39:00</wp:post_date>
		<wp:post_date_gmt>2008-03-20 15:39:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>webdev-webserver-powershell-function</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/20/WebDevWebServer+PowerShell+Function]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[WebDevWebServer+PowerShell+Function]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[631d2f09-cb8f-4e40-bad0-dfecce979257]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2049</wp:comment_id>
			<wp:comment_author><![CDATA[Tomas Restrepo]]></wp:comment_author>
			<wp:comment_author_email>tomas@winterdom.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.winterdom.com/weblog/</wp:comment_author_url>
			<wp:comment_author_IP>200.116.204.205</wp:comment_author_IP>
			<wp:comment_date>2008-03-20 18:01:40</wp:comment_date>
			<wp:comment_date_gmt>2008-03-21 01:01:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Pretty cool Harry. There's actually an easier way of running it, something like this would work just fine:

&'C:Program FilesCommon Filesmicrosoft sharedDevServer9.0WebDev.WebServer.EXE' "/path:$rpath" "/port:$port" "/vpath:$vpath"
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2050</wp:comment_id>
			<wp:comment_author><![CDATA[C-J Berg]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.227.2.165</wp:comment_author_IP>
			<wp:comment_date>2008-03-21 15:28:02</wp:comment_date>
			<wp:comment_date_gmt>2008-03-21 22:28:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I wrote a similar function some time ago. It's a bit longer, but it works on x64, and on machines with only .NET FW 2.0 installed:


# Start-WebDevServer
function TryLocateWebDevServer($EnvVar, $SubPath) {
	$e = 'env:' + $EnvVar
	if (Test-Path $e) {
		$wdpath = Join-Path (Get-Content $e) (Join-Path $SubPath 'WebDev.WebServer.EXE')
		if (Test-Path $wdpath) {
			return $wdpath
		}
	}
	return $FALSE
}
function Start-WebDevServer($Path, $Port=8080, $VPath='/')
{
	if (-not $Path -or -not (Test-Path $Path)) {
		Throw "Invalid Path specified!"
	}

	$locations =
		('CommonProgramFiles(x86)', 'Microsoft SharedDevServer9.0'),
		('CommonProgramFiles', 'Microsoft SharedDevServer9.0'),
		('SystemRoot', 'Microsoft.NETFrameworkv2.0.50727')

	foreach ($l in $locations) {
		$wdpath = TryLocateWebDevServer $l[0] $l[1]
		if ($wdpath) {
			break;
		}
	}
	if (-not $wdpath) {
		Throw 'Cannot locate WebDev.WebServer.EXE!'
	}
	
	$rpath = Resolve-Path $Path

	Write-Host "Starting WebDev.WebServer located at:"
	Write-Host " $wdpath"
	Write-Host " Parameters: ""/path:$rpath"" ""/port:$Port"" ""/vpath:$VPath"""

	& $wdpath "/path:$rpath" "/port:$Port" "/vpath:$VPath"
}
Set-Alias webdev Start-WebDevServer

Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2051</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.106</wp:comment_author_IP>
			<wp:comment_date>2008-03-24 11:19:05</wp:comment_date>
			<wp:comment_date_gmt>2008-03-24 18:19:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@C-J, I really like how you added the function to find the exe rather than hard coding it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2052</wp:comment_id>
			<wp:comment_author><![CDATA[Richard]]></wp:comment_author>
			<wp:comment_author_email>richard_cox@dell.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.128.157.33</wp:comment_author_IP>
			<wp:comment_date>2008-03-26 07:57:11</wp:comment_date>
			<wp:comment_date_gmt>2008-03-26 14:57:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[> $ignore = [System.Diagnostics.Process]::Start(...)

There are three canonical PSH ways to ignore the result of an expression:
- Assign to $null
- Redirect to $null (.... > $null)
- Cast to [void]
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Will The Real DevHawk Please Stand Up?</title>
		<link>http://devhawk.net/2008/03/21/will-the-real-devhawk-please-stand-up/</link>
		<pubDate>Fri, 21 Mar 2008 13:31:19 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://edd9bd6a-2d26-46ca-a89d-9f444e985982</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Sometimes when I blog about politics, I'll get a <a href="http://devhawk.net/CommentView,guid,d88e8506-d669-41c3-a246-6da1865f9a2e.aspx#commentstart">comment like this</a>:</p><blockquote><p>As far as I'm concerned, posting about topics such as politics or religions on a blog that's supposedly about technology is just looking for trouble.</p></blockquote><p>As I've <a href="http://devhawk.net/2007/04/03/This+Is+Not+A+Technical+Blog.aspx">pointed out before</a>, DevHawk is not "a blog that's supposedly about technology". It's a personal blog - my very tiny corner of the web, if you will - so I feel totally justified writing about technology, politics, hockey and whatever else I want to. I figure that if you don't like it, you're free to unsubscribe and neither of either of us will lose any sleep over it.</p><p>The flip side is that DevHawk has traditionally been the <em>only </em>place where I exercise such lack-of-restraint. When my blog was featured on <a href="http://msdn2.microsoft.com/architecture">MSDN Architecture Center</a>, I cross-posted relevant content to a <a href="http://blogs.msdn.com/devhawk">separate blog</a> so as to create an topic-focused and safe-for-work subset of my "real" blog. It was always a hassle - especially tracking comments to the same post in two places - and I <a href="http://blogs.msdn.com/devhawk/archive/2006/08/21/710966.aspx">quit doing it</a> shortly after leaving the Architecture Strategy Team.</p><p>However, now that I'm <a href="http://twitter.com/devhawk">using Twitter</a>, it doesn't feel like DevHawk is "my <em>only</em> place" anymore. My blog == my writing, my del.icio.us == <a href="http://del.icio.us/harrypierson">links I find interesting</a> and my Twitter == <a href="http://twitter.com/devhawk">real time updates</a>. I use <a href="http://www.feedburner.com">FeedBurner</a> to include my del.icio.us links in my blog feed and <a href="http://twitterfeed.com/">twitterfeed</a> to include the blog feed in my twitter feed. Therefore, Twitter is the <em>only </em>place to get <a href="http://twitter.com/statuses/user_timeline/14137542.rss">an feed</a> of all three. Obviously, Twitter's feed isn't full content, but in an always connected world, clicking the link to read the blog entry in the browser isn't that big a deal. Besides, you can always subscribe to both the blog and twitter feed if you want full content + real-time.</p><p>I haven't fully integrated Twitter into my daily life yet, though I'm getting there - for example I <a href="http://twitter.com/devhawk/statuses/774803604">twittered the results</a> of my hockey game last night. But unlike other social software sites, I think I'm going to be using Twitter regularly. I'm <a href="http://www.facebook.com/p/Harry_Pierson/537304487">on Facebook</a>, but there's too much "you've been bitten by a Vampire!" type spam to really <em>use </em>it for anything but pure entertainment. Twitter is more like blogging, where there's an information exchange with only the people I <strike>subscribe to</strike> follow. Also, maybe it's me, but there doesn't seem to be the same stigma if you stop following someone on Twitter compared to rejecting them as a friend on Facebook.</p><p>DevHawk has been "me", but now it feels like DevHawk @ Twitter will become "me" which leaves my blog to become my endless book. It's not a bad thing, but it does feel a little strange.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1129</wp:post_id>
		<wp:post_date>2008-03-21 13:31:19</wp:post_date>
		<wp:post_date_gmt>2008-03-21 13:31:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>will-the-real-devhawk-please-stand-up</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="web-2-0"><![CDATA[Web 2.0]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Will+The+Real+DevHawk+Please+Stand+Up]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/03/21/Will+The+Real+DevHawk+Please+Stand+Up]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[edd9bd6a-2d26-46ca-a89d-9f444e985982]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2053</wp:comment_id>
			<wp:comment_author><![CDATA[OffPoint]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.186.22.97</wp:comment_author_IP>
			<wp:comment_date>2008-03-21 14:30:01</wp:comment_date>
			<wp:comment_date_gmt>2008-03-21 21:30:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I feel as though reading a blog is a bit like being invited to dinner as a guest. The host is entitled to say what he or she wants -- it's their place and they're paying after all. However, some degree of manners towards your guests is a nice thing. People may hold different opinions and sometimes being receptive (not necessarily persuaded) is a good thing. A good discussion does not start by saying if you disagree with me you’re an idiot, evil or both. (You haven’t said that – but it feels implied)

There is also an asymmetry in your personal/political opinions. An extremely knowledgeable discussion of the technical is contrasted with a rather nasty and perhaps simple/close-minded view of the political world. (F# parsing vs. "[so-and-so] is a douchebag".

I've always appreciated your writing so thank you. 
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 160</title>
		<link>http://devhawk.net/2008/04/02/morning-coffee-160/</link>
		<pubDate>Wed, 02 Apr 2008 18:09:45 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://7d25906b-cd4d-409c-aeeb-e7455c6260aa</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I took most of last week between jobs and have spent much of this week getting machines setup, access to builds, etc. Furthermore, RSS Bandit ate my feedlist and I am still soldiering on sans mobile phone so I was pretty much unconnected for about a week and a half.</p><h4>IPy Stuff</h4><ul><li>Laurence Moroney <a href="http://blogs.msdn.com/webnext/archive/2008/03/30/silverlight-dynamic-languages-in-visual-studio.aspx">demonstrates</a> how to configure a web site project in VS08 to use <a href="http://dynamicsilverlight.net/">Dynamic Silverlight’s</a> development web server Chiron. I looked at turned it into an exported template, but I think the Start Options are stored in the suo file and I’m not sure how to include that in the template. Maybe it could be set w/ a macro or at worst a GAX recipe?  </li><li>If you’re a regular reader, you might as well get used to the name “Michael Foord”. He’s a developer @ <a href="http://www.resolversystems.com/">Resolver Systems</a>, makers of the IPy based <a href="http://www.resolversystems.com/products/resolver-one.php">Resolver One</a> app/spreadsheet hybrid I’ve <a href="http://devhawk.net/2008/01/31/Morning+Coffee+141+LangNET+08+Edition.aspx">written about before</a>. He’s also the author of the upcoming <a href="http://www.ironpythoninaction.com/">IronPython in Action</a> book and the maintainer of <a href="http://www.voidspace.org.uk/ironpython/planet/">Planet IronPython</a> and the <a href="http://www.ironpython.info/">IronPython Cookbook</a>. I’m going to try very hard to only link to Michael at most once per day. Frankly, that’ll be tough.  </li><li>Today’s Michael Foord Link: Michael turned his PyCon talk on IPy + SL2 into a series of articles entitled <a href="http://www.voidspace.org.uk/python/weblog/arch_d7_2008_03_22.shtml#e949">IronPython &amp; Silverlight 2 Tutorial with Demos and Downloads</a>.  </li><li>Ken Levy (who now sits just down the hall from me) <a href="http://blogs.msdn.com/vsxteam/archive/2008/03/31/ironpython-studio-1-0-for-isolated-and-integrated-vs-shell.aspx">clued me</a> into the 1.0 release of <a href="http://www.codeplex.com/IronPythonStudio">IronPython Studio</a>, which is a free IDE based on the VS08 Shell for IronPython (based on code from the <a href="http://msdn2.microsoft.com/vsx/">VS SDK</a>). Big new feature in this release is support for the integrated VS08 Shell, which means it’ll snap into your existing VS08 installation (well, not express) rather than forcing you to install the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=ACA38719-F449-4937-9BAC-45A9F8A73822&amp;displaylang=en">300 MB isolated shell</a>.</li></ul><p>Other Stuff</p><ul><li>Caps had a <a href="http://www2.nhl.com/nhl/app?service=page&amp;page=Recap&amp;gameNumber=1189&amp;season=20072008&amp;gameType=2">BIG win last night</a> when they needed it most. Now they’re tied with Carolina for the SE division lead, but they lose the tiebreaker so unfortunately, they can’t make the playoffs without help. ‘Canes have to head back home last night to play Tampa Bay, they have to win tonight and Friday to clinch. Loss in either gives the Caps control of their own destiny. Caps are only one game back of Ottawa, Boston and Philly, none of whom have played well down the stretch. It does mean I have to root for the frakking Penguins to beat Philly, twice. </li><li>Now that I'm in a job where I'll be traveling occasionally, I really appreciated Scott Hanselman's <a href="http://www.hanselman.com/blog/10GuerillaAirlineTravelTipsForTheGeekMindedPerson.aspx">travel tips</a>, though I'm not sure "Don't look like a schlub" is in the cards for me. </li><li>Unless you’ve been living under a rock, you’re probably aware that Scott Guthrie <a href="http://weblogs.asp.net/scottgu/archive/2008/03/21/asp-net-mvc-source-code-now-available.aspx">blogged</a> that the ASP.NET MVC Source Code is <a href="http://www.codeplex.com/aspnet">available on CodePlex</a>. The project name is “aspnet” not “aspnetmvc” which makes me wonder if they might release the source to more ASP.NET stuff over time.  </li><li>Speaking of Scott Guthrie, today he blogged about <a href="http://weblogs.asp.net/scottgu/archive/2008/04/02/unit-testing-with-silverlight.aspx">unit testing in SilverLight</a>. Jeff Wilcox appears to have the <a href="http://www.jeff.wilcox.name/2008/03/31/silverlight2-unit-testing/">definitive post</a> on the subject, including links to the SilverLight testing framework (it’s included in the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=EA93DD89-3AF2-4ACB-9CF4-BFE01B3F02D4&amp;displaylang=en">SL Controls source code release</a>). He also provides a prebuilt “SilverLight Test” project template for easy download. Personally, I really like the in-browser test runner. I wonder how hard it would be to hook that up to <a href="http://dynamicsilverlight.net/">DySL</a> so you could write your tests in IPy? (given that IPy doesn’t have attributes, I’m guessing there’d be at least a bit of work involved in making this happen)  </li><li>Speaking of SilverLight, <a href="http://www.microsoft.com/presspass/press/2008/apr08/04-01WM61PR.mspx?rss_fdn=Press%20Releases">apparently</a> the <a href="http://www.microsoft.com/windowsmobile/6-1/default.mspx">next version of Windows Mobile</a> (i.e. 6.1) will support it. Since I'm in the market for a new phone anyway, I'm thinking of getting one of these. Also, it's nice to see a <a href="http://www.microsoft.com/windowsmobile/6-1/default.mspx">marketing site for WM 6.1</a> using Silverlight instead of Flash like <a href="http://www.microsoft.com/windowsmobile/6/default.mspx?WT.mc_ID=wmhome_WM6">WM 6.0 marketing site</a> does.(via <a href="http://www.liveside.net/blogs/main/archive/2008/04/01/at-ctia-wireless-microsoft-unveils-windows-mobile-6-1-new-version-of-internet-explorer-mobile.aspx">LiveSide</a>) </li><li>Ted Neward turns the news that MSFT is <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=3356AF19-A36E-4D6D-9D13-C37DB81EE607&amp;displaylang=en">releasing XAML under the OSP</a> into a <a href="http://blogs.tedneward.com/2008/04/02/Is+Microsoft+Serious.aspx">long and fascinating history lesson</a> that is well worth the read. I’m going to skip commenting on it, beyond advising you dear reader to read this if you haven’t already, except to wonder: how many sides does a “Redmondagon” have?</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1130</wp:post_id>
		<wp:post_date>2008-04-02 11:09:45</wp:post_date>
		<wp:post_date_gmt>2008-04-02 18:09:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-160</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="dynamic-silverlight"><![CDATA[Dynamic Silverlight]]></category>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="post_tag" nicename="mobile-phone"><![CDATA[Mobile Phone]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="post_tag" nicename="software-industry"><![CDATA[Software Industry]]></category>
		<category domain="post_tag" nicename="travel"><![CDATA[Travel]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+160]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/04/02/Morning+Coffee+160]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[7d25906b-cd4d-409c-aeeb-e7455c6260aa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2054</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://ironpython-urls.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>149.254.192.195</wp:comment_author_IP>
			<wp:comment_date>2008-04-02 13:51:12</wp:comment_date>
			<wp:comment_date_gmt>2008-04-02 20:51:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Heh - thanks for the mention. You forgot the IronPython-URLs blog though. ;-)

If the lack of attributes in IronPython makes it hard to use the 'in browser' Silverlight test runner, then maybe you need to prod Dino Veihland to add IP support for attributes. That would be *fantastic* as it is the glaring hole in the IronPython .NET integration.

Now that class decorators have made it into Python 2.6 there is no syntactic reason not to. :-)

(Running Silverlight tests in the browser is fantastic - great to see a focus on testing.)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2055</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.voidspace.org.uk/python/weblog/</wp:comment_author_url>
			<wp:comment_author_IP>149.254.192.195</wp:comment_author_IP>
			<wp:comment_date>2008-04-02 13:55:39</wp:comment_date>
			<wp:comment_date_gmt>2008-04-02 20:55:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Any word on whether Win Mobile 6.1 will support Silverlight 2?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2056</wp:comment_id>
			<wp:comment_author><![CDATA[Brent]]></wp:comment_author>
			<wp:comment_author_email>brent@brentter.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.brentter.com</wp:comment_author_url>
			<wp:comment_author_IP>24.99.61.181</wp:comment_author_IP>
			<wp:comment_date>2008-04-02 14:54:05</wp:comment_date>
			<wp:comment_date_gmt>2008-04-02 21:54:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[wait, so you're holding out for the next release of WMobile and not the next model of iPhone which rumor has it will incorporate 3G (finally)?!??!
j/k

thanks for the links... ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Rock the Red</title>
		<link>http://devhawk.net/2008/04/05/rock-the-red/</link>
		<pubDate>Sun, 06 Apr 2008 02:19:08 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://c471ef71-95e8-4550-ad77-d884195ff51e</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://japersrink.blogspot.com/2008/04/southeast-division.html"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="154" alt="Conque(red)" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/RocktheRed_10D93/Conque(red)_3.jpg" width="244" align="right" border="0" /></a></p><p>Japers says all there needs to be said: <a href="http://japersrink.blogspot.com/2008/04/southeast-division.html">CONQUE(RED)</a>!</p><p>With a <a href="http://capitals.nhl.com/team/app?gameNumber=1221&amp;gameType=2&amp;page=Recap&amp;season=20072008&amp;service=page">3-1 win over the Panthers</a>, coupled with a Hurricanes' 4-3 loss to the same Panthers the night before, the Washington Capitals are the Southeast Division champions.</p><p>These words are music to my ears: <a href="http://capitals.nhl.com/team/app/?service=page&amp;page=NewsPage&amp;articleid=359323">Capitals Playoff Tickets On Sale Now</a>!!!</p><p>The win was their 7th straight, and they went 14-4 since the trade deadline @ the end of February. They finished the season 43-31-8 after starting the season 6-14-1. That's a 20 game swing (from 8 games under .500 to 12 games over) in 61 games. That's frakking amazing. Had the Caps played at that clip all season, they would have ended up with around 109 points, which would have been good enough for first in the east, though still short of Detriot's 113 points (and they still have a game to play). Ovechkin isn't the only Cap who should be a shoo-in for <a href="http://www2.nhl.com/trophies/hart.html">a trophy</a>. Coach Bruce Boudreau should be a lock for the <a href="http://www.nhl.com/trophies/adams.html">Adams</a>.</p><p><a href="http://capitals.nhl.com"><img style="border-right: 0px; border-top: 0px; margin: 0px 5px 0px 0px; border-left: 0px; border-bottom: 0px" height="158" alt="rock_the_red" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/RocktheRed_10D93/rock_the_red_3.png" width="244" align="left" border="0" /></a></p><p>I just spoke to my parents, who were at the game and have almost no voice left after no doubt screaming their frakking heads off or chanting M-V-P in the stands. I also spoke to my brother, who lives in 'Canes country these days but was on his way back home from England. Until he talked to my father earlier today, he didn't even know the 'Canes had lost last night. He sounded slightly stunned, but that might be a by-product of being on a plane all day.</p><p>What an amazing year. Can't wait to see what they do in the playoffs.</p><p>Go Caps Go. Rock the Red. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1131</wp:post_id>
		<wp:post_date>2008-04-05 19:19:08</wp:post_date>
		<wp:post_date_gmt>2008-04-06 02:19:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rock-the-red</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[c471ef71-95e8-4550-ad77-d884195ff51e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Rock+The+Red]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/04/06/Rock+The+Red]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 161</title>
		<link>http://devhawk.net/2008/04/07/morning-coffee-161/</link>
		<pubDate>Mon, 07 Apr 2008 16:39:41 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://6575cb8c-b295-42ec-b064-483f26c21789</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Huge perk of the new job: new hardware. I had to give up my Dell workstation but I got a <a href="http://shop.lenovo.com/SEUILibrary/controller/e/web/LenovoPortal/en_US/catalog.workflow:category.details?current-catalog-id=12F0696583E04D86B9B79B0FEC01C087&amp;current-category-id=1F106632CBC24D2CBD23DF19644D3694">Lenovo T61p dual core widescreen laptop</a>, an <a href="http://h10010.www1.hp.com/wwpc/us/en/en/WF25a/12454-12454-64287-321860-3328898-3459240.html">HP dc7800 dual monitor quad core desktop</a> and a <a href="http://www.polycom.com/usa/en/products/voice/desktop/cx/communicator_cx700.html">Polycom CX700 IP phone</a>. I'm really digging the Lenovo's integrated fingerprint reader - no more password login - but I'm most impressed with their <a href="http://www-307.ibm.com/pc/support/site.wss/document.do?lndocid=TVSU-UPDATE">integrated driver management software</a>. Sure beats the heck out of hunting for dozens of updated drivers all over the place like most vendors for you to. </li><li>Minor downside to all my new toys: I spent most of my first week on the job installing and configuring said new toys. </li><li>Caps will face the Flyers in the first round of the playoffs which <a href="http://blog.washingtonpost.com/capitalsinsider/2008/04/playoff_schedule.html">starts Friday</a>. I have a feeling that I'll be feeling poorly Friday around 3pm and have to head home early. :) </li></ul><p>DyLang Stuff</p><ul><li>Apparently, Michael Foord isn't getting enough exposure on this blog. :) <a href="http://devhawk.net/CommentView,guid,7d25906b-cd4d-409c-aeeb-e7455c6260aa.aspx#commentstart">He left a comment</a> to remind me to mention the <a href="http://ironpython-urls.blogspot.com/">IronPython URLs link blog</a> he writes along with Mark Rees and Seo Sanghyeon. </li><li>Speaking of Michael, his employer Resolver Systems just launched a new product: <a href="http://www.resolversystems.com/products/resolver-one-quant.php">Resolver One Quant</a>. </li><li>Still speaking of Michael, he's quoted in the InternetNews article <a href="http://www.internetnews.com/dev-news/article.php/3738856 ">Python Fans Take Aim at the Enterprise</a>. </li><li>My teammate Jimmy Schementi <a href="http://blog.jimmy.schementi.com/2008/04/silverlight-on-rails.html">posts a preview</a> of his spare time project "Silverlight on Rails". This RoR plugin lets you declaratively specify if you want your RoR controller code to be accessed remotely via AJAX and run on the server or if you want that code to be downloaded to the client and run in SilverLight. Very cool stuff. </li></ul><p>Other Stuff</p><ul><li>Don Syme provides <a href="http://blogs.msdn.com/dsyme/archive/2008/04/04/tackling-the-f-productization.aspx">some insight</a> into the F# producization process. There's going to be an update to the "Research release" later this month and a CTP of the "Product release" later this summer (Brian McNamara has the <a href="http://lorgonblog.spaces.live.com/blog/cns!701679AD17B6D310!160.entry">CTP details</a>). I am looking forward to these releases, though I'll probably be too busy w/ IPy to experiment much with them. </li><li>Speaking of F#, Matt Podwysocki continues his adventures with F# with a look at tuples, records and discriminated unions. Of the three, I find discriminated unions the most interesting since there isn't anything like it in other languages I've used. </li><li><a href="http://blogs.msdn.com/agile/archive/2008/04/04/unity-di-container-1-0-shipped.aspx">Gregori</a> and <a href="http://www.tavaresstudios.com/Blog/post.aspx?id=f3b5c7a9-feb5-4695-b5f3-1b70b0b87719">Chris</a> both announce the release of <a href="http://www.codeplex.com/Release/ProjectReleases.aspx?ProjectName=unity&amp;ReleaseId=12276">Unity 1.0</a>. Congrats guys! But if I don't have time to hack around with the latest F# release, you can imagine I won't be getting to Unity any time soon... </li><li>Jeff Atwood <a href="http://www.codinghorror.com/blog/archives/001091.html">recommends</a> you build your application UI first. Furthermore, he does a good job selling the value of paper prototyping as well as introducing the concept of PowerPoint prototyping. Money quote: "You don't want something too powerful." </li><li>Via <a href="http://www.liveside.net/blogs/opinion/archive/2008/04/07/perspectives-james-hamilton-on-containers-condos-and-the-cloud.aspx">LiveSide</a> I discovered <a href="http://perspectives.mvdirona.com/default.aspx">James Hamilton's blog</a>. Normally, hardware infrastructure isn't really my bag, but I find his ideas around <a href="http://research.microsoft.com/~JamesRH/TalksAndPapers/JamesRH_CIDR.doc">using ISO standard shipping containers as modular data center building blocks</a> fascinating. For example, check out <a href="http://perspectives.mvdirona.com/2008/04/06/DiseconomiesOfScale.aspx">this post</a> that suggests sticking modular data centers in condos would be cheaper than building data centers!<a href="http://perspectives.mvdirona.com/SyndicationService.asmx/GetRss">Subscribed</a>. </li><li>Speaking of ISO, you may have heard Open Office XML was <a href="http://www.microsoft.com/presspass/press/2008/apr08/04-01OpenXMLVotePR.mspx">ratified as an ISO standard</a>. Obviously, there was a lot of controversy around this, but Miguel de Icaza lists of what he considers <a href="http://tirania.org/blog/archive/2008/Apr-02.html">major community wins</a> from the standardization process. Anything that "pushed Microsoft into more open directions" is a good thing IMO. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1132</wp:post_id>
		<wp:post_date>2008-04-07 09:39:41</wp:post_date>
		<wp:post_date_gmt>2008-04-07 16:39:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-161</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dependency-injection"><![CDATA[Dependency Injection]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="infrastructure"><![CDATA[infrastructure]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="office"><![CDATA[Office]]></category>
		<category domain="post_tag" nicename="ux"><![CDATA[UX]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<category domain="post_tag" nicename="working-at-msft"><![CDATA[Working at MSFT]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/04/07/Morning+Coffee+161]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[6575cb8c-b295-42ec-b064-483f26c21789]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+161]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2057</wp:comment_id>
			<wp:comment_author><![CDATA[Barry Kelly]]></wp:comment_author>
			<wp:comment_author_email>bkelly.ie@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://barrkel.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>78.86.121.60</wp:comment_author_IP>
			<wp:comment_date>2008-04-07 13:17:10</wp:comment_date>
			<wp:comment_date_gmt>2008-04-07 20:17:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Never used anything like discriminated unions? Did you never use Pascal? It uses a 'case' statement-like declaration inside the record definition to define the "variant record", as Pascal calls it.

The equivalent, manually built out of union and struct, is common practice in C too, when OO-style behaviour needs to be modelled.

Integrating them with pattern matching is important too, of course, and it's mainly functional languages that have done that.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2058</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.16.13.155</wp:comment_author_IP>
			<wp:comment_date>2008-04-07 18:15:08</wp:comment_date>
			<wp:comment_date_gmt>2008-04-08 01:15:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My Pascal days are long behind me. Unions are sort of similar, but they aren't type safe and - as you point out - it's the integration with pattern matching that makes the discriminated unions so powerful.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 162</title>
		<link>http://devhawk.net/2008/04/09/morning-coffee-162/</link>
		<pubDate>Wed, 09 Apr 2008 17:20:12 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://9d987009-6527-4def-b5af-689d2c246fa1</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Another nice thing about the new job: I'm working in the vicinity of some good friends. I was over in building 42 yesterday and made it a point to stop by <a href="http://blogs.msdn.com/pathelland/">Pat Helland</a>'s office yesterday and spend an hour or so chatting about the new gig. Pat is down the hall from <a href="http://blogs.msdn.com/dphill/">David Hill</a>, whom I worked with on Architecture Strategy. Back in my building, we're down the hall from the <a href="http://msdn.com/vsx">VSX folks</a> including my friends <a href="http://blogs.msdn.com/klevy">Ken Levy</a> and <a href="http://blogs.msdn.com/garethj/">Gareth Jones</a>. I'm sure there are more folks I know around, but hey it's only my second week! </li><li>I'm a big fan of <a href="http://www.carbonite.com">Carbonite</a>, which I use to back up all the digital media on my home computer. With two little kids, we have lots of digital photos as you might imagine . However, one thing that bugs me about Carbonite is that it <a href="http://www.carbonite.com/customersupport/ViewPost.aspx?postid=89">doesn't back up video files by default</a>, you have to go in on a folder by folder basis and select "'Back up Video files in this folder" from the context menu. Given how much trouble this "feature" has given me, I imagine less techie folks don't even realize their video files aren't getting backed up. However, I will say the <a href="http://www.carbonite.com/customersupport/BrowseCategory.aspx?forumid=38#0">latest version</a> of the Carbonite Software at least makes it easy to find files that aren't backed up. A quick sweep revealed around a dozen folders that had un-backed-up video files in them, which I promptly fixed.</li><li>The big news yesterday was the new <a href="http://code.google.com/appengine/">Google App Engine</a>, which looks to give you access to virtualized infrastructure that sounds similar to what GOOG is rumored to use internally. I like Dave Winer's <a href="http://www.scripting.com/stories/2008/04/08/earlyNotesOnGoogleapps.html">comment</a> that this enables "shrinkwrap net apps that scale that can be deployed by civillians." Given Google's history w/ Python - Python's <a href="http://wiki.python.org/moin/BDFL">BDFL</a><a href="http://www.python.org/~guido/">Guido van Rossum</a> works there - it's no surprise that Google App Engine (GAE?) <a href="http://code.google.com/appengine/kb/general.html#language">runs on Python</a>, though <a href="http://code.google.com/appengine/docs/whatisgoogleappengine.html">apparently they</a> "look forward to supporting more languages in the future". I'm guessing "more languages" == Ruby, maybe Erlang too. </li><li>I wonder if/how Google App Engine will affect <a href="http://www.rubyonrails.org/">Ruby on Rails</a> momentum? If there's a significant lag before App Engine supports Ruby, will that drive developers to Python web stacks like <a href="http://www.djangoproject.com/">Django</a>? (Django is <a href="http://code.google.com/appengine/articles/django.html">included in "the box"</a> with App Engine)?@ PyCon, I was surprised at the intra-language animosity I observed. I wonder how many Python developers are secretly hoping Google <em>never</em> ships Ruby support. I highly doubt Google would do that - they want to tap the exploding RoR market like everyone else - but I'd bet it would really take the wind out of Rails' sails if they did. </li><li>Today's Michael Foord Link: <a href="http://www.voidspace.org.uk/ironpython/dlr_hosting.shtml">Embedding IronPython 2, Examples of the DLR Hosting API</a>. You can read the <a href="http://compilerlab.members.winisp.net/dlr-spec-hosting.pdf">DLR Hosting spec</a>, but it's pretty out of date so Michael's article helps fill in some of the gaps. </li><li>Looks like PowerShell has gotten the open source community treatment in a project called <a href="http://pash.sourceforge.net/">Pash</a>. While I'm sure others are excited about PS on Linux or Mac, I'm excited to see PS running on Compact Framework. I wonder if it would work with XNA? </li><li>Speaking of XNA, <a href="http://www.codeplex.com/XnaConsole">XNA Console</a> is a new CodePlex project that provides an IPy console to manipulate your XNA based game on the fly. Python is no stranger to game development - Civ IV for example provided mod capabilities <a href="http://en.wikipedia.org/wiki/Civ_iv#Python">via python</a>. Alas, the compact framework can't run IPy today, so neither can XNA on Xbox. But wouldn't it be cool to hack your game in IPy running on a 360 using the <a href="http://www.xbox.com/en-US/hardware/x/xbox360messengerkit/">messenger kit</a>? (via <a href="http://ironpython-urls.blogspot.com/2008/04/xna-console.html">IPy URLs</a>) </li><li>Bart De Smet gets functional, writing <a href="http://community.bartdesmet.net/blogs/bart/archive/2008/03/30/a-functional-c-type-switch.aspx">type switch</a> and <a href="http://community.bartdesmet.net/blogs/bart/archive/2008/04/06/pattern-matching-in-c-part-0.aspx">pattern matching</a> in C# 3.0. I guess it works, but it sure is ugly. Why not just use F# and be done with it? </li><li>Soma <a href="http://blogs.msdn.com/somasegar/archive/2008/04/07/visual-c-2008-feature-pack-shipped.aspx">announces</a> that the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=D466226B-8DAB-445F-A7B4-448B326C48E7&amp;displaylang=en">VC++ Feature Pack</a> has shipped. Somewhere, I assume, there is much (some?) rejoicing. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1133</wp:post_id>
		<wp:post_date>2008-04-09 10:20:12</wp:post_date>
		<wp:post_date_gmt>2008-04-09 17:20:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-162</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-plus-plus"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="home-network"><![CDATA[Home Network]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="post_tag" nicename="web-2-0"><![CDATA[Web 2.0]]></category>
		<category domain="post_tag" nicename="working-at-msft"><![CDATA[Working at MSFT]]></category>
		<category domain="post_tag" nicename="xna"><![CDATA[XNA]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+162]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/04/09/Morning+Coffee+162]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[9d987009-6527-4def-b5af-689d2c246fa1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2059</wp:comment_id>
			<wp:comment_author><![CDATA[Alison]]></wp:comment_author>
			<wp:comment_author_email>amahoney@carbonite.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.carbonite.com</wp:comment_author_url>
			<wp:comment_author_IP>65.209.100.50</wp:comment_author_IP>
			<wp:comment_date>2008-04-09 13:55:12</wp:comment_date>
			<wp:comment_date_gmt>2008-04-09 20:55:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey there. Glad to hear you’re a fan of Carbonite. I work for the company and thought I’d take a sec to explain our reasoning on the video backup. A lot of users contacted us within our first year or two to let us know that we were backing up a lot more video files than they’d prefer. It caused their backup and restore processes to take far longer than necessary, since in a lot of cases these were files they had downloaded that were easily replaced or that were ripped from DVD or podcasts. So to make it easier for folks to manage the size of their backups (and therefore how long it takes to back up and restore their computer files), we decided to let users who wish to back up videos select them on the folder level. All you have to do is right-click a folder that is selected for backup and select “Back up video files in this folder” from the Carbonite menu. This way, you can back up videos if you like, but those who don't care about video won't waste thier time.  

Anyway, we just launched a corporate blog and we'd love to get comments/thoughts/suggestions from our users. If you want, stop by and share your comments with our CEO at http://www.carbonite.com/blog/. We always try to take our user's feedback into consideration when planning future versions.

Thanks,
Alison
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2060</wp:comment_id>
			<wp:comment_author><![CDATA[bill]]></wp:comment_author>
			<wp:comment_author_email>billchi@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.42.97.5</wp:comment_author_IP>
			<wp:comment_date>2008-04-10 08:03:52</wp:comment_date>
			<wp:comment_date_gmt>2008-04-10 15:03:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Why are you saying the DLR spec is pretty out of date?  While I'm about ready to post an update at http://compilerlab.members.winisp.net/dlr-spec-hosting.doc, a quick scan of your copy doesn't look very out of date to me.

You may have a build of the code that is not in sync with the latest design.  Also, I note that Michael's post that you refer to directly calls on the PythonEngine class, which is not part of the common hosting model for the DLR.  One thing we're adding soon is a config/options model for passing those to engines, which would remove the need for Michael to set options on the PythonEngine directly.

Bill]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Caps Win Game One With a Three Goal Third</title>
		<link>http://devhawk.net/2008/04/11/caps-win-game-one-with-a-three-goal-third/</link>
		<pubDate>Sat, 12 Apr 2008 06:43:38 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://cfeb03c8-92e4-4fd6-81c8-8b3bace27e64</guid>
		<description></description>
		<content:encoded><![CDATA[<p>OK, I'll admit it. When the Caps were down 4-2 after two I started having, you know, unsure thoughts. Thoughts like:</p><p>"We should be proud to have even made the playoffs". </p><p>"It's a young team, they're just getting started, this year doesn't matter much".</p><p>Oh me of little faith. :)</p><p><a href="http://capitals.nhl.com/team/app/?service=page&amp;page=Recap&amp;seas=20072008&amp;gtype=3&amp;gnum=131"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="145" alt="" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/CapsWinGameOneWithaThreeGoalThird_14DA8/ovechkin-alex-ap-080411_3.jpg" width="244" align="right" border="0" /></a>The Caps <a href="http://www.nhl.com/nhl/app?service=page&amp;page=Recap&amp;gameNumber=131&amp;season=20072008&amp;gameType=3">took game one</a> of their best-of-seven series with the Flyers in fairly dramatic fashion, scoring three goals in the third period, including a nifty steal by Ovechkin for the game winner. Game winning goal, assist and eight hits on a supposedly more physical team == quite a first playoff game for Alex the Great. </p><p>I'm sure folks that more regularly blog the Caps than I do will recap the game better than I will. Peerless Prognosticator <a href="http://peerlessprognosticator.blogspot.com/2008/04/caps-win-caps-win-caps-win-caps-5.html">already has</a> and I'm sure <a href="http://japersrink.blogspot.com/">Japers</a> will by tomorrow. But here are a few of my thoughts.</p><ul><li>The <a href="http://www.nhl.com/scores/htmlreports/20072008/ES030131.HTM">stats</a> say we did well in the faceoff circle, winning 58% (36 of 62). However, their first goal was scored when the Flyers got a clean faceoff win in our end, so I was acutely attuned to every faceoff loss from that point forward. My gut impression was that we hadn't done as well as we did.</li><li>Remember, I don't get to see the Caps very often. So it was kinda surreal to see a Caps team able to cycle the puck down low so well. The Flyers seems fairly helpless to stop us.</li><li>On the other hand, we didn't seem to do so well getting the puck out of our own zone. On Philly's second goal, we managed to get it out of the zone, but turned it over in the neutral zone which lead to a 3-on-2. </li><li>With the exception of the second half of the second (where the Flyers scored three times in under four minutes), I thought the Caps out played the Flyers most of the way. The third period was especially good for the Caps. Not only did they score three, the held the Flyers to a mere three shots, and NONE after Ovechkin scored what turned out to be the game winner. My mom always says a two goal lead is the most dangerous lead in hockey. that sure was true tonight.</li><li>Both Ovechkin and Brashear showed great patience on their goals. There's a <a href="http://www.ericmcerlain.com/offwingopinion/archives/008335.php#008335">great picture</a> of Ovechkin waiting for Biron to commit over @ Off Wing Opinion.</li><li>The refs pretty much let them skate. There was what I thought was a missed tripping call at one point and my brother pointed out Richards was standing in Huet's way in the crease on Briere's second goal, but frankly it was such a pretty pass I doubt Huet could have gotten it. Caps do need to do a better job clearing their crease.</li><li>There's a bit of a controversy surrounding the Caps' fourth goal. The Caps were on the power play and Green unleashed a shot that <a href="http://sports.espn.go.com/nhl/news/story?id=3342832">hit Flyer's winger Thoresen in the groin</a>. The refs didn't whistle the play dead and the Caps scored while Thoresen writhed on the ice in pain. Apparently, the rules are that you don't blow the whistle unless the player's life is in danger, so it looks like a good non-call. But I'm guessing Philly fan doesn't agree.</li></ul><p>Game two, Sunday 2pm Eastern/11am Pacific. You'll know where I'll be.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1134</wp:post_id>
		<wp:post_date>2008-04-11 23:43:38</wp:post_date>
		<wp:post_date_gmt>2008-04-12 06:43:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>caps-win-game-one-with-a-three-goal-third</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Caps+Win+Game+One+With+A+Three+Goal+Third]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/04/12/Caps+Win+Game+One+With+A+Three+Goal+Third]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[cfeb03c8-92e4-4fd6-81c8-8b3bace27e64]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Flyers Knot Series @ One</title>
		<link>http://devhawk.net/2008/04/13/flyers-knot-series-one/</link>
		<pubDate>Mon, 14 Apr 2008 03:57:33 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://3578ad25-be05-419f-bc3f-87ae93ec1270</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Ever hear the phrase "if you don't have anything nice to say, then don't say anything at all"? That's about how I feel about the Caps effort in <a href="http://www2.nhl.com/nhl/app?service=page&amp;page=Recap&amp;gameNumber=132&amp;season=20072008&amp;gameType=3">this afternoon's loss</a> to the Flyers. </p><p>There are two possible explanations for today's game:</p><ol><li>After going 11-1 to finish the season and coming from behind in the third period of <a href="http://devhawk.net/2008/04/12/Caps+Win+Game+One+With+A+Three+Goal+Third.aspx">game one</a>, the Caps were just emotionally drained and couldn't get up for today's game.</li><li>The Flyers have figured out how to shut the Caps down completely. </li></ol><p>Personally, I think it's explanation #1. If it's #2, it's gonna be a short series.</p><p>I had written a bunch of observations, but go <a href="http://japersrink.blogspot.com/2008/04/game-2-recap-flyers-2-caps-0.html">read Japers instead</a>. He hit all the points I was going to and more. </p><p>Update - I almost forgot, good to see Patrick Thoresen (the Flyer who took a Mike Green Slapshot to the groin Friday) <a href="http://sports.espn.go.com/nhl/playoffs2008/news/story?id=3343675">wasn't as seriously hurt</a> as initially thought. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1135</wp:post_id>
		<wp:post_date>2008-04-13 20:57:33</wp:post_date>
		<wp:post_date_gmt>2008-04-14 03:57:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flyers-knot-series-one</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[3578ad25-be05-419f-bc3f-87ae93ec1270]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Flyers+Knot+Series+One]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/04/14/Flyers+Knot+Series+One]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>&#039;rents Rock the Red</title>
		<link>http://devhawk.net/2008/04/14/rents-rock-the-red/</link>
		<pubDate>Mon, 14 Apr 2008 17:12:12 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d1126e8d-29ad-4985-b4f5-9defd2b6556b</guid>
		<description></description>
		<content:encoded><![CDATA[<p>My brother saw this picture on <a href="http://peerlessprognosticator.blogspot.com/2008/04/loudtake-it-from-man-who-should-know.html">The Peerless Prognosticator</a> and noticed something cool.</p><p align="center"><a href="http://sports.yahoo.com/nhl/photo?slug=3bab7d544982b5098f9ca8adece5b138-getty-80520893gf002_phil_wash&amp;prov=getty"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="441" alt="clip_image001" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/rentsRocktheRed_8F6C/clip_image001_3.jpg" width="664" border="0" /></a></p><p align="right"><font size="1">Photo by Greg Fiume/Getty Images</font></p><p>Those are my parents, screaming their head off after Brashear scored in <a href="http://devhawk.net/2008/04/12/Caps+Win+Game+One+With+A+Three+Goal+Third.aspx">game one</a>. I especially like my mom rockin' the old school Caps gear.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1136</wp:post_id>
		<wp:post_date>2008-04-14 10:12:12</wp:post_date>
		<wp:post_date_gmt>2008-04-14 17:12:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rents-rock-the-red</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d1126e8d-29ad-4985-b4f5-9defd2b6556b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[rents+Rock+The+Red]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/04/14/rents+Rock+The+Red]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wanna Work on IPy + VS?</title>
		<link>http://devhawk.net/2008/04/17/wanna-work-on-ipy-vs/</link>
		<pubDate>Thu, 17 Apr 2008 15:52:41 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://709f2c71-091b-425a-afe3-88c0f9093412</guid>
		<description></description>
		<content:encoded><![CDATA[<p>We've hired a few people around here recently (including me obviously). However, if you have a burning desire to work on IronPython (or IronRuby) and Visual Studio, we're <a href="http://members.microsoft.com/careers/search/details.aspx?JobID=5CC7E752-B603-4E85-AE0D-8509EC6ECE70">still hiring</a>:</p><blockquote><p>An important aspect of developing these dynamic languages [aka IronPython and IronRuby] is providing support in the Visual Studio IDE. This includes editing features (color-coding of source code, intellisense, go-to-definition, refactoring, etc), debugging features (breakpoints, data tool tips, etc), ensuring a language-specific look-and-feel (interactive console, etc), and integration into the Visual Studio project system. It includes integration with the various designers like the WPF designer via CodeDOM, and development of project templates for various scenarios (Silverlight 2 app, WPF app, ASP.Net website, VSTT unit tests, etc). We also want to integrate with Visual Studio technologies like profiling and code coverage. Your job will be to ensure that developers using dynamic languages built on top of the Dynamic Language Runtime (DLR) have the best development environment in Visual Studio. </p><p>We’re looking for a talented developer with exceptional programming ability and a passion for dynamic languages. Experience in these areas is a bonus though not strictly required: building developer tools like editors and debuggers, compiler implementation, reflection, dynamic languages, VM implementation, performance measurement and/or optimization, C#. Applicants should have a BS/MS in computer science or equivalent, and three or more years of industry experience.</p></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1137</wp:post_id>
		<wp:post_date>2008-04-17 15:52:41</wp:post_date>
		<wp:post_date_gmt>2008-04-17 15:52:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wanna-work-on-ipy-vs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dynamic-languages"><![CDATA[Dynamic Languages]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="working-at-msft"><![CDATA[Working at MSFT]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[709f2c71-091b-425a-afe3-88c0f9093412]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Wanna+Work+On+IPy+VS]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/04/17/Wanna+Work+On+IPy+VS]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 163</title>
		<link>http://devhawk.net/2008/04/22/morning-coffee-163/</link>
		<pubDate>Tue, 22 Apr 2008 18:27:39 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://a8fb0a3b-ecc8-4cd4-8073-5c6e0b36841b</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Between MVP summit last week, ALT.NET this past weekend and an internal brown-bag presentation yesterday, my unread email and blog posts have piled up. Most of the following is old news, but I wanted to get <em>something</em> out. Especially since I feel a case of <a href="http://www.nhl.com/nhl/app/?service=page&amp;page=NewsPage&amp;articleid=361256">Caps Fever coming on</a> that will force - <em><strong>force</strong></em>you understand - me to head home early today.</p><p>DyLang Stuff</p><ul><li>My teammate Srivatsn <a href="http://blogs.msdn.com/srivatsn/archive/2008/04/12/turning-your-net-object-models-dynamic-for-ironpython.aspx">demonstrates</a> how to make your static C# types act more dynamic in order to interop better with DLR languages. For example, by implementing GetBoundMember and SetMemberAfter, you can support setting arbitrary attributes on a C# class from Python. Cool.  </li><li>Today's Michael Foord link: <a href="http://www.voidspace.org.uk/python/weblog/arch_d7_2008_04_12.shtml#e960">On Testing: Some Programmers Refuse to Get it</a>. He's responding to a comment by Allen Holub suggesting that having 110k of test code for 30k of production code is "a real indictment of the language" (IronPython). I'm with Michael on this, Holub's suggestion is laughable and worse radically uninformed. I like the way Larry O'Brien (who passed on Holub's comment in the first place) <a href="http://www.knowing.net/PermaLink,guid,1e1d2066-8a6f-4eb9-aff8-4298736712bc.aspx">describes</a> the views of tests from inside and outside the agile community. I also like his description of tests as "quality diodes".</li></ul><p>Other Stuff</p><ul><li>Werner Vogels <a href="http://www.allthingsdistributed.com/2008/04/persistent_storage_for_amazon.html">posts</a> about a new Amazon EC2 feature: Persistent local storage. Basically, you can create an empty volume up to a terabyte in size and then mount it to your images as a drive. The objective seems to be able to run relational databases in the images, rather than being limited to S3 and SimpleDB. Kinda interesting, but given <a href="http://googleappengine.blogspot.com/2008/04/introducing-google-app-engine-our-new.html">Google's announcement</a> last week, I think the shine is off EC2 a bit.  </li><li>This past weekend's Twitter outage has Dave Winer <a href="http://www.scripting.com/stories/2008/04/21/ifThisWereANormalDayOnTwit.html">re-thinking</a> the idea of building networks on a single point of failure. While obviously I agree with the concept, I don't agree with his solution that "We need some big infrastructure companies to get into this game". While there are some big blog infrastructures out there, most of that network was built on a massive number of small infrastructures. Why wouldn't the same thing work for microblogging?</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1138</wp:post_id>
		<wp:post_date>2008-04-22 11:27:39</wp:post_date>
		<wp:post_date_gmt>2008-04-22 18:27:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-163</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dynamic-languages"><![CDATA[Dynamic Languages]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="social-software"><![CDATA[Social Software]]></category>
		<category domain="post_tag" nicename="web-2-0"><![CDATA[Web 2.0]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[a8fb0a3b-ecc8-4cd4-8073-5c6e0b36841b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+163]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/04/22/Morning+Coffee+163]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Caps&#039; Season Ends</title>
		<link>http://devhawk.net/2008/04/22/caps-season-ends/</link>
		<pubDate>Wed, 23 Apr 2008 06:09:26 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://9c20a2b4-e214-4a5b-b2fc-ec0e92db39b5</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I should be mad. Angry. Furious even.</p><p>The Capitals season ended tonight in large part due to what I think was a horrific non call in the second period. The on-air commentators were stunned that the officials allowed the goal after the Flyers Patrick Toresen took Caps' goaltender Huet out of the play by body checking Shaone Morrison into him. Sami Kapanen had the whole net to shoot at and didn't miss. The NHL <a href="http://dumpnchase.wordpress.com/2008/04/22/explanation-from-the-league/">quickly trotted out an <strike>excuse</strike> justification</a> for the call, but what else are they going to say. "Yep, the officials blew the call. It only decided game 7, no big deal"? </p><p>As I said, I should be pretty upset. Especially after what sounded like a <a href="http://dumpnchase.wordpress.com/2008/04/18/horse-hockey/">poorly called game four</a> (no comment from me - I didn't see the game).</p><p>However, I can't help but think back to the <a href="http://devhawk.net/2007/11/24/Afternoon+Coffee+126.aspx">last Friday in November</a> when the Caps had the worst record in the league @ 6-14-1 and had just promoted their minor league affiliate's coach to the big leagues. If you had told me then - almost exactly five months ago - that the Caps would go 37-17-7 over the remaining 3/4ths of the season, win the division in their last game and take battle back from a 3-1 series deficit to force a game seven, I would have wondered what you were smoking.</p><p>This season has been a gift for Caps fans and I've relished the few games I've gotten to see, even the one that sent us home. </p><p>Furthermore, even though they lost, these playoffs are a promise of future success. I tell my kids all the time that the only way to get good at something is to work hard while you're bad at it. Playoff hockey is no different. Most of the Caps had little or no playoff experience going into this series and it really showed thru the first three games. But they kept at it and played much better over the last four games of the series. They went 2-2 in those games, but the two losses went to overtime. A little more luck (or better officiating) and the Caps are headed to Pittsburgh instead of the golf course.  </p><p>Speaking of Pittsburgh, look back at the Penguin's performance in the <a href="http://www.nhl.com/nhl/app/?service=page&amp;page=NewsPage&amp;articleid=298734">playoffs last year</a>. Like the Caps, Pittsburgh is loaded with young talent that were thin on playoff experience. Also like the Caps, they went home after the first round. However, unlike the Caps, they only managed one win against an Ottawa team they had beaten three times down the stretch in the regular season. Furthermore, when facing elimination, the Penguins <a href="http://www.nhl.com/nhl/app?service=page&amp;page=Recap&amp;gameNumber=145&amp;season=20062007&amp;gameType=3">laid a goose egg</a>. However, as much as I hate to complement the Penguins, things are <a href="http://www.nhl.com/cup/series/seriesb_index.html">very different this year</a>. Here's hoping the early playoff exit has a similar effect on the Caps.</p><p>Bumping around my music collection for a song that captured my mood, I came across Getting Better from <a href="http://social.zune.net/AlbumDetails.aspx?aid=4f980a00-0100-11db-89ca-0019b92a3933">Tesla's debut album</a>.</p><blockquote><p>All that rain, outside my window<br />But I'll live on I know<br />Its gettin' better every day<br />Soon the sun will shine, through my window<br />When it's gonna come<br />You know I really, couldn't say<br />But I know, it's gettin' better every day</p></blockquote><p>Swapping "season" for "day" kills the rhythm and rhyme, but it captures how I feel.</p><p>Thank you Washington Capitals for a great season. I look forward to many more to come.</p><p>Thank you Bruce Boudreau for jumping in the deep end unafraid and turning this season around.</p><p>Thanks you Washington fans for turning out in such force. Who would have thought the Verizon Center would be considered "<a href="http://sports.espn.go.com/nhl/playoffs2008/news/story?id=3337943">most electric arena</a>"? </p><p>Finally, thank you to Ted Leonsis for enduring <a href="http://devhawk.net/2004/02/19/Doing+The+Unthinkable.aspx">the criticism</a>, for turning Washington DC into a hockey town and <a href="http://devhawk.net/2008/01/11/Superman+Signed.aspx">for ensuring</a> I'll be able to wear my #8 Ovechkin jersey until <a href="http://techiewife.spaces.live.com/blog/cns!3DAECC033B88329C!2093.entry">my kids</a> are in high school. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1139</wp:post_id>
		<wp:post_date>2008-04-22 23:09:26</wp:post_date>
		<wp:post_date_gmt>2008-04-23 06:09:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>caps-season-ends</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[9c20a2b4-e214-4a5b-b2fc-ec0e92db39b5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Caps+Season+Ends]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/04/23/Caps+Season+Ends]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2061</wp:comment_id>
			<wp:comment_author><![CDATA[Tony Nassar]]></wp:comment_author>
			<wp:comment_author_email>tnassar@palantirtech.com</wp:comment_author_email>
			<wp:comment_author_url>http://slideguitarist.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>68.239.116.202</wp:comment_author_IP>
			<wp:comment_date>2008-04-24 14:43:11</wp:comment_date>
			<wp:comment_date_gmt>2008-04-24 21:43:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Harry, I would have loved the Caps to meet the Red Wings in the finals. Still, it was an encouraging season, and Ovechkin is a joy to watch. I've already bought the jersey (couldn't find my old Steve Yzerman jersey after yet another move). ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2062</wp:comment_id>
			<wp:comment_author><![CDATA[Dale Churchward]]></wp:comment_author>
			<wp:comment_author_email>dale.churchward@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-04-25 10:33:09</wp:comment_date>
			<wp:comment_date_gmt>2008-04-25 17:33:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[When i heard that the game was going into sudden death overtime I was thinking, "Wow! Harry must be enjoying this game and nervous as hell." I'm sorry the Capitals lost, but as you pointed out they really turned around their season and Ovechkin is awesome. Hope they will build on their success next year.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 164</title>
		<link>http://devhawk.net/2008/04/24/morning-coffee-164/</link>
		<pubDate>Thu, 24 Apr 2008 17:53:32 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://1b609add-8724-4b91-9610-8f93ead98f6b</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Big news since my last Morning Coffee post was the announcement of <a href="https://www.mesh.com/">Live Mesh</a>. I've been running it for about a month, and I'm really digging it. Make sure you check out the <a href="http://blogs.msdn.com/livemesh/">team blog</a> and watch the <a href="http://www.mesh.com/Welcome/TourDeveloper.aspx">developer tour video</a> (be on the lookout for IPy about half way thru the video)</li></ul><p>ALT.NET</p><ul><li>I had a great time @ the <a href="http://altdotnet.org/">ALT.NET</a> open space conference last weekend. I was somewhat distracted on Saturday as due to a family communication mixup, I had to bring my son Patrick with me. <a href="http://codebetter.com/blogs/jeffrey.palermo/">Jeffrey Palermo</a> shot a <a href="http://codebetter.com/blogs/jeffrey.palermo/archive/2008/04/19/alt-net-attendees-video-posted.aspx">cute video of him</a> (3 minutes in) where he explains that he's at the conference "to be with my dad". Having a five year old is a little distracting, but everyone was amazingly cool with having him around. When he gets a little older I have no doubt he'll be attending conferences and leading open sessions.  </li><li>I did a session on F#, but it felt kinda all over the place. I hadn't touched F# in a few months and it showed IMO. <a href="http://weblogs.asp.net/podwysocki/default.aspx">Matt Podwysocki</a> was there to help keep the session from devolving into mass chaos. Thanks Matt.  </li><li>My favorite session of the conference was Scott Hanselman's "Are We Innovating?" talk, which I think originated from a question I asked him: There are many examples of large OSS projects in other dev communities that get ported to .NET (<a href="http://www.hibernate.org/343.html">NHibernate</a>, <a href="http://nant.sourceforge.net/">NAnt</a>, <a href="http://www.castleproject.org/monorail/index.html">MonoRail</a>, etc). Can you name one that's gone the other way? I can't.  </li><li>I took <a href="http://weblogs.asp.net/podwysocki/archive/2008/04/24/alt-net-open-spaces-closing-day-recap.aspx">Matt's advice</a> and joined the local <a href="http://groups.google.com/group/altnetseattle">ALT.NET Seattle group</a>. </li></ul><p>DyLang Stuff</p><ul><li>Martin Maly <a href="http://blogs.msdn.com/mmaly/archive/2008/04/22/dlr-caches.aspx">posts about</a> how dynamic method dispatches are cached in three different layers by the DLR. You shouldn't care about this stuff if you're a DLR language user, but you will certainly care about it if you're a DLR language builder.  </li><li>I'm really excited to see Phil Haack (whom I met F2F @ ALT.NET) is <a href="http://haacked.com/archive/2008/04/22/defining-asp.net-mvc-routes-and-views-in-ironruby.aspx">experimenting with IronRuby &amp; ASP.NET MVC</a>. True, I'd rather it was IPy, but his Routes.LoadFromRuby would work with Python with very little code change.  </li><li>Note to self, take a deeper look at <a href="http://www.t3rse.com/twining/">Twining</a>, the IPy database DSL by <a href="http://metadeveloper.blogspot.com/">David Seruyange</a>.  </li><li>Daily Michael Foord - <a href="http://www.voidspace.org.uk/python/weblog/arch_d7_2008_04_19.shtml#e968">Ironclad 0.2 Released</a>. Ironclad is a project to implement <a href="http://docs.python.org/api/api.html">Python's C extension API</a> in C# so that IronPython could load standard Python C modules like <a href="http://www.scipy.org/">SciPy</a> and <a href="http://www.numpy.org/">NumPy</a>. So far, they're able to load the <a href="http://docs.python.org/lib/module-bz2.html">bz2 module</a>.  </li></ul><p>Other Stuff</p><ul><li>Congrats to <a href="http://bradwilson.typepad.com/blog/2008/04/xunitnet-10-rel.html">Brad</a> and <a href="http://jamesnewkirk.typepad.com/posts/2008/04/xunitnet-10-rel.html">Jim</a> for shipping <a href="http://www.codeplex.com/xunit/Release/ProjectReleases.aspx?ReleaseId=12516">xUnit.net 1.0</a>.  </li><li>Everyone seems to be jumping on the functional C# coding bandwagon. Bart De Smet's series on pattern matching in C# is <a href="http://community.bartdesmet.net/blogs/bart/archive/2008/04/16/pattern-matching-in-c-part-8.aspx">currently at eight posts</a>. Now Luca Bolognese is in on the action, with three posts so far on <a href="http://blogs.msdn.com/lucabol/archive/2008/04/21/a-c-library-to-write-functional-code-part-iii-records.aspx">functional code in C#</a>. I like how Luca keeps writing that the C# syntax is "not terrible" for functional programming. Again, why suffer thru the "not terrible" syntax when you could be using F# instead? (via <a href="http://blogs.msdn.com/charlie/archive/2008/04/23/community-convergence-xliii.aspx">Charlie Calvert</a>)  </li><li>I need to take a look at <a href="http://blogs.msdn.com/mitsu/archive/2008/04/02/visual-linq-query-builder-for-linq-to-sql-vlinq.aspx">VLinq</a>. Charlie and <a href="http://feeds.feedburner.com/~r/ScottHanselman/~3/267517424/TheWeeklySourceCode23BigSolutionEdition.aspx">Scott Hanselman</a> both mentioned it recently.  </li><li>I would like to have been <a href="http://blogs.tedneward.com/2008/04/16/Do+You+Fall+Prey+To+Technical+Folk+Etymology.aspx">in the conversation</a> with Ted Neward, Neal Ford, Venkat Subramaniam, Don Box and Amanda Silver.  </li><li>I haven't had any time to play with XNA of late, which means the <a href="http://blogs.msdn.com/xna/archive/2008/04/20/gdc-2008-presenations-are-now-available.aspx">great list of GDC videos</a> Dave Weller posted on the XNA team blog will remain beyond my ability to invest time for now.  </li><li>There's a <a href="http://research.microsoft.com/research/downloads/Details/8826adb9-8398-40d6-a22d-951923fe2647/Details.aspx">new drop</a> of <a href="http://research.microsoft.com/specsharp/?0sr=a">Spec#</a> from MS Research. <a href="http://rubyforge.org/projects/ironruby/">IronRuby</a> is using Spec# heavily as I recall.</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1140</wp:post_id>
		<wp:post_date>2008-04-24 10:53:32</wp:post_date>
		<wp:post_date_gmt>2008-04-24 17:53:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-164</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[Database]]></category>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="domain-specific-languages"><![CDATA[Domain Specific Languages]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[LINQ]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="open-space"><![CDATA[Open Space]]></category>
		<category domain="post_tag" nicename="web-2-0"><![CDATA[Web 2.0]]></category>
		<category domain="post_tag" nicename="windows-live"><![CDATA[Windows Live]]></category>
		<category domain="post_tag" nicename="xna"><![CDATA[XNA]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[1b609add-8724-4b91-9610-8f93ead98f6b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+164]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/04/24/Morning+Coffee+164]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2063</wp:comment_id>
			<wp:comment_author><![CDATA[Oran]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://orand.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>209.112.218.6</wp:comment_author_IP>
			<wp:comment_date>2008-04-25 00:12:05</wp:comment_date>
			<wp:comment_date_gmt>2008-04-25 07:12:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["Can you name one that's gone the other way?"  Not if you filter by "large" and "OSS".  Otherwise, there are a few examples.

There are LINQ knock-offs in JavaScript, Java, and PHP.  I'm sure more will follow.

.NET Attributes and the style of unit test integration first invented by NUnit have found their way back into Java Annotations and Java unit test frameworks.

There are a number of XAML clones.

Live Mesh is an interesting one since it's meant to have broad reach with platforms and languages, but I'll bet that besides that, there will by several whole-sale concept knock-offs.

The conclusion I draw is that currently most of the .NET innovation is happening inside of Microsoft, but I wouldn't be surprised if OSS .NET projects that heavily depend on LINQ don't get ported to other platforms.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2064</wp:comment_id>
			<wp:comment_author><![CDATA[Oran]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://orand.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>209.112.218.6</wp:comment_author_IP>
			<wp:comment_date>2008-04-25 00:35:12</wp:comment_date>
			<wp:comment_date_gmt>2008-04-25 07:35:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[SharpDevelop -> MonoDevelop is another interesting one.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Importing Static Methods with IPy</title>
		<link>http://devhawk.net/2008/04/28/importing-static-methods-with-ipy/</link>
		<pubDate>Mon, 28 Apr 2008 15:09:45 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://5b8ab5a9-be5c-4fbb-9c7d-dacdf801247b</guid>
		<description></description>
		<content:encoded><![CDATA[Like .NET, Python uses namespaces to avoid name collisions. However, the semantics are a bit different. If you want to use a type or function from a a given namespace in Python, you have to import it into your current scope. For example, if you want to use the Python datetime built-in module, you would import it into the current scope and use it like this:
<pre class="brush: python">import datetime 
bush_last_day = datetime.date(2009,1,20)</pre>
Notice that when I import a Python module this way, it's scoped into it's namespace, which forces me to use the entire namespace scoped name to access the type. Of course, that gets tedious quickly, so Python provides a way to import a type from a specific namespace into your current scope like this:
<pre class="brush: python">from datetime import date 
bush_last_day = date(2009,1,20)</pre>
With IronPython, you can do import .NET namespaces as well. Here's that same code using the standard .NET <a href="http://msdn2.microsoft.com/library/System.DateTime">DateTime class</a>.
<pre class="brush: python">from System import DateTime 
bush_last_day = DateTime(2009,1,20)</pre>
What I didn't know is that you can import static methods &amp; properties from .NET types into the current scope using the same syntax. Here's an example:
<pre class="brush: python">from System.DateTime import Now 

if Now &gt;= bush_last_day:
    print 'celebrate'
else:
    print (bush_last_day - Now).Days, 'days left'</pre>
Being able to import a static method into the current scope is pretty convenient. Thanks to <a href="http://blog.jimmy.schementi.com/">my teammate Jimmy</a> for cluing me into this IPy feature.

One caveat though: in Python, you can import an entire namespace into your current scope. You can do that with .NET namespaces, but not with .NET types
<pre class="brush:py">from datetime import *         # this works
from System import *           # so does this
from System.DateTime import *  # this doesn’t work</pre>
<strong><span style="text-decoration: underline;">Update</span></strong>: <a href="http://www.voidspace.org.uk/python/weblog/index.shtml">Michael Foord</a> <a href="http://devhawk.net/2008/04/28/Importing+Static+Methods+With+IPy.aspx#commentstart">pointed out</a> that if you import Now as I describe above, it places a DateTime object representing the time you imported it into local scope, rather than placing the underlying get_Now static method in local scope. So while DateTime.Now always returns a new value, Now never changes. Sounds like an <a href="http://www.codeplex.com/IronPython/WorkItem/View.aspx?WorkItemId=16323">IPy bug</a> to me, but I'll have to circle back with the team to be sure.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1141</wp:post_id>
		<wp:post_date>2008-04-28 15:09:45</wp:post_date>
		<wp:post_date_gmt>2008-04-28 15:09:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>importing-static-methods-with-ipy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[5b8ab5a9-be5c-4fbb-9c7d-dacdf801247b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Importing+Static+Methods+With+IPy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/04/28/Importing+Static+Methods+With+IPy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2065</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
			<wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
			<wp:comment_date>2008-04-28 15:38:56</wp:comment_date>
			<wp:comment_date_gmt>2008-04-28 22:38:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well... personally I think it is a terrible abuse of the import mechanism. LOL :-)
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2066</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
			<wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
			<wp:comment_date>2008-04-28 16:30:23</wp:comment_date>
			<wp:comment_date_gmt>2008-04-28 23:30:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I was mostly being a troublemaker with that comment, but I know that this feature has confused at least one IronPython user.

He did exactly as you did in your example:

    from System.DateTime import Now 

and was then surprised that when he used Now it didn't update as it should. This is because in Python you can't use the import machinery to access static members on classes.

When you import a class method from IronPython you are doing something not normally possible from Python - so what is actually happening may not be immediately obvious to anyone reading the code.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2067</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.16.91.67</wp:comment_author_IP>
			<wp:comment_date>2008-04-28 20:26:20</wp:comment_date>
			<wp:comment_date_gmt>2008-04-29 03:26:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No, I'd say that might be a bug. For example, if you import the static DateTime.Parse method, it works as you would expect. IPy appears to be placing the result if calling get_Now in the local scope, rather than the get_Now static method. I need to circle back with the team, but that seems wrong to me.

I opened up a CodePlex bug for it. http://www.codeplex.com/IronPython/WorkItem/View.aspx?WorkItemId=16323]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2068</wp:comment_id>
			<wp:comment_author><![CDATA[matt]]></wp:comment_author>
			<wp:comment_author_email>matthew.grab@tycoelectronics.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>198.175.154.212</wp:comment_author_IP>
			<wp:comment_date>2008-05-05 12:35:59</wp:comment_date>
			<wp:comment_date_gmt>2008-05-05 19:35:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have this simple code.  But it returns an error:
"TypeError: expected ProcessPriorityClass, got int"

from System.Diagnostics import Process
procs = Process.GetProcesses()
for p in procs:
	if p.ProcessName == 'notepad':
		print p.BasePriority
		p.PriorityClass = 8

I thought one of the main points of ironpython is not have to worry about typing variables.  But this seems to imply unless I do some sort of dim x as ProcessPriorityClass, I can't call set the value of PriorityClass.

I have searched hard for the answer to this, but it seems like maybe IP isn't that widely used yet.  If you have some good links to where to go to get more help with IP that would be nice.
Thanks,
Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2069</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.108</wp:comment_author_IP>
			<wp:comment_date>2008-05-05 13:59:37</wp:comment_date>
			<wp:comment_date_gmt>2008-05-05 20:59:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[IronPython is dynamically typed, but the underlying types from the .NET framework are still statically typed. IronPython won't auto convert an integer into an enumerated type, which is why you're getting a type exception. BasePriority is an integer, but it's read only. PriorityClass is read/write, but it takes a ProcessPriorityClass enum value.

You could write the code this way:

from System.Diagnostics import Process, ProcessPriorityClass
procs = Process.GetProcesses()
for p in procs:
__if p.ProcessName == 'notepad':
____print p.BasePriority
____p.PriorityClass = ProcessPriorityClass.BelowNormal

Note, I need to figure out how to get significant whitespace to work in comments. In the meantime, I'm using underscore as space in the code above. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2070</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>matthew.grab@tycoelectronics.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>198.175.154.212</wp:comment_author_IP>
			<wp:comment_date>2008-05-06 04:17:48</wp:comment_date>
			<wp:comment_date_gmt>2008-05-06 11:17:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well that worked for me.  It's actually pretty amazing what can be done with a few lines of code.

As per your original topic, I did import Process from System.Diagnostics.  I figured ProcessPriorityClass was part of Process.

Is there a simple way to know what all is included when you import or try to import a .Net class.

Thanks
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2071</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.108</wp:comment_author_IP>
			<wp:comment_date>2008-05-06 11:19:31</wp:comment_date>
			<wp:comment_date_gmt>2008-05-06 18:19:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep, use Python's built in dir function. You can also use the built-in help function to retrieve the built-in help and method signature for types and methods.

from System import Diagnostics
dir(Diagnostics.Process)
dir(Diagnostics.Process.PriorityClass)
help(Diagnostics.Process.GetProcesses)

]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython 2.0 Beta 2</title>
		<link>http://devhawk.net/2008/05/02/ironpython-2-0-beta-2/</link>
		<pubDate>Fri, 02 May 2008 11:45:54 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://826dfa82-652e-43b0-bb59-48cf46a4e15e</guid>
		<description></description>
		<content:encoded><![CDATA[<p>We pushed out the <a href="https://www.codeplex.com/Release/ProjectReleases.aspx?ProjectName=IronPython&amp;ReleaseId=11566">latest beta</a> of IronPython 2.0 this morning. From the <a href="http://www.codeplex.com/IronPython/Wiki/View.aspx?title=v2.0%20Beta%202%20Release%20Notes&amp;referringTitle=Home">release notes</a>:</p><blockquote><p>We’re pleased to announce the release of IronPython 2.0 Beta 2. In addition to the usual bug fixes (~25 reported on CodePlex and ~50 reported internally), this release has been partially focused on improving the performance of IronPython, in particular startup perf. Another focus of this release was improving upon our traceback support which had regressed quite a bit in 2.0B1 and had largely been broken in the 2.0 Alphas. Our traceback support should now be superior to that of IronPython 1.1!</p><p>We’ve also made a minor change to our packaging by adding a Microsoft.Scripting.Core.dll in addition to the Microsoft.Scripting.dll that’s been around since the start of 2.0. We are doing this purely as an architectural layering cleanup. Microsoft.Scripting.Core contains DLR features that are essential to building dynamic languages. Microsoft.Scripting will contain language implementation helpers that can either be re-used (e.g., BigInts) or copied (possibly e.g., the default binder). This process is all about our work to get the DLR architecture right and shouldn’t have any noticeable IronPython impact except that there’s now one more DLL to include in any package.</p><p>As a consequence of the new DLL, the deprecated file IronPython2005.sln is broken. This is the last release that will include this .sln file in the source zip file. Of course the Visual Studio 2008 version of this file, IronPython.sln, still builds.</p><p>We’d like to thank everyone in the community who reported these: kevgu, oldman, christmas, brucec, scottw, fuzzyman, haibo, Seo Sanghyeon, grizlupo, J. Merrill, perhaps, antont, 05031972, Jason Ferrara, Matt Beckius, and Davy Mitchell.</p></blockquote><p>The full release notes have details about the bugs we fixed. Congrats to the team and thanks again to the community members for their assistance. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1142</wp:post_id>
		<wp:post_date>2008-05-02 11:45:54</wp:post_date>
		<wp:post_date_gmt>2008-05-02 11:45:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-2-0-beta-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[826dfa82-652e-43b0-bb59-48cf46a4e15e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+20+Beta+2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/05/02/IronPython+20+Beta+2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rare Insight Into the IPy Team</title>
		<link>http://devhawk.net/2008/05/05/rare-insight-into-the-ipy-team/</link>
		<pubDate>Mon, 05 May 2008 23:48:26 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://0dd8ac9e-f362-4791-ab1b-589945fd20fa</guid>
		<description></description>
		<content:encoded><![CDATA[<p>An email conversation between two members of the IPy team that you, dear reader, might find amusing. </p><blockquote><p><b>From:</b><a href="http://blogs.msdn.com/Srivatsn/">Srivatsn Narayanan</a><br /><b>Sent:</b> Friday, May 02, 2008 4:00 PM<br /><b>Subject:</b> You dont need pinky fingers? :)</p><p><a href="http://twitter.com/DevHawk/statuses/802239164">http://twitter.com/DevHawk/statuses/802239164</a></p><hr /><p><b>From:</b><a href="http://blogs.msdn.com/dinoviehland/">Dino Viehland</a><br /><b>Sent:</b> Friday, May 02, 2008 11:30 PM</p><p>Wow, am I really that loud? :) </p><p>This is a response to the idea that no design is complete until you can’t remove anything else without sacrificing the overall goals of the end result.  Is the pinky really necessary?  We can “cut that feature”, right? :)</p><hr /><p><b>From:</b> Srivatsn Narayanan <br /><b>Sent:</b> Friday, May 02, 2008 11:49 PM</p><p>If you cut off the pinkie, then the ring finger becomes the pinkie and so iteratively you will have to lose all of them :). If I remember right in Europe, you hold up the pinkie to order beer. So it’s quite important :)</p><hr /><p><b>From:</b> Dino Viehland <br /><b>Sent:</b> Friday, May 02, 2008 11:59 PM</p><p>Well I find it hard to argue with ordering beer, but I doubt the pinkie’s original use was to order beer.  Therefore I’d describe this as an abuse of an existing API that might be better served by a new API specifically designed for this purpose.  But I question even if a new API is necessary.  </p><p>Drinking beer by definition involves a container in which the beer is consumed from.  Therefore the container it’s self (or the lack thereof) might be able to serve the dual role for both consuming the beer and indicating the need for a refill.  For example when drinking sake I’ve been told it is customary to tip the bottle on its side to indicate the desire for a refill.  Are we really to expect that the Human API exposes every need in a direct fashion?  For example should I have another appendage for “I need more bread sticks” and yet another for “Can I get a refill or on the water?”.  I’d propose the “2 creams no sugar” appendage because that’s the way I take my coffee.  </p><p>On the other hand the iterative problem does seem to be more relevant – but it presupposes a purpose for the pinky in the first place!  But alas, I admit I’ve just returned from drinking beer, so this may not be the best argument :).</p><hr /><p><b>From:</b> Srivatsn Narayanan <br /><b>Sent:</b> Saturday, May 03, 2008 12:21 AM</p><p>The pinkie is like a reserved field/custom field in a API. Every user community can come up with its own use for it but they have to devise the protocol themselves. Apparently different civilizations have. Wikipedia as usual has a <a href="http://en.wikipedia.org/wiki/Little_finger#Cultural_significance">list of those</a>. So do you get your “2 creams no sugar” appendage – sure if u can agree on the semantics with the waiter. Seems like a PM call to me :)</p><p>PS: What beer did u have? I should try that – seems effective :)</p><hr /><p><b>From:</b> Dino Viehland <br /><b>Sent:</b> Saturday, May 03, 2008 12:26 AM</p><p>I hadn’t quite considered it like this but I’d propose an alternate encoding – binary.  With 4 fingers one can communicate up to 16 different which seems to cover most of the listed issues.  Yes 5 gives you up to 32 messages but 16 should be enough for everyone :). </p><p>And they were various Hale’s Ales fresh from the brewery.</p><hr /><p><b>From:</b> Srivatsn Narayanan <br /><b>Sent:</b> Saturday, May 03, 2008 12:31 AM</p><p>I wouldn’t want to hold up 0010 really (although it won’t be the middle finger anymore) :)</p><hr /><p><b>From:</b> Dino Viehland <br /><b>Sent:</b> Saturday, May 03, 2008 12:40 AM</p><p>Ahh, but let’s just call that one reserved – that leaves the end-user with 15 other messages!  Personally I’d suggest we reserve the entire bit – that way we could use other codes like 1010 for future expansion of various standard messages.  Urination seems popular on the pinky list so maybe we’d want to standardize that in the future – we of course need to look at uses of the other fingers before we come to this conclusion.  Users are now left with 8 user-defined messages but that seems plenty.  Also they can then use 1000 or 0001 (depending their endianness, a.k.a. left-handed or right-handed) for the now deprecated pinky-messages.</p><hr /><p><b>From:</b> Srivatsn Narayanan <br /><b>Sent:</b> Saturday, May 03, 2008 12:55 AM</p><p>1000, 1100, 1110 and 1111 are actually used for counting numbers 1,2,3,4 :) They are too obvious to be non-standardized. So they are out as well.  </p><p>That cuts the user messages to 5 (third bit is reserved anyway). Some of the ones left are hard to make as well – try 0101 :)</p></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1143</wp:post_id>
		<wp:post_date>2008-05-05 23:48:26</wp:post_date>
		<wp:post_date_gmt>2008-05-05 23:48:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rare-insight-into-the-ipy-team</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="humor"><![CDATA[Humor]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[0dd8ac9e-f362-4791-ab1b-589945fd20fa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Rare+Insight+Into+The+IPy+Team]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/05/06/Rare+Insight+Into+The+IPy+Team]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2072</wp:comment_id>
			<wp:comment_author><![CDATA[Jimmy Schementi]]></wp:comment_author>
			<wp:comment_author_email>jimmysch@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.jimmy.schementi.com</wp:comment_author_url>
			<wp:comment_author_IP>24.17.245.190</wp:comment_author_IP>
			<wp:comment_date>2008-05-06 00:27:00</wp:comment_date>
			<wp:comment_date_gmt>2008-05-06 07:27:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How did Sri and Dino get on this topic? And where the hell was I? ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2073</wp:comment_id>
			<wp:comment_author><![CDATA[Douglas]]></wp:comment_author>
			<wp:comment_author_email>drhent@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.185.20.77</wp:comment_author_IP>
			<wp:comment_date>2008-05-30 10:32:12</wp:comment_date>
			<wp:comment_date_gmt>2008-05-30 17:32:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ahh but to continue the conversation.  just reducing the middle finger would be a cultural thing. (while it is mostly known world wide what it means) 

In the Ukraine maybe Russia also??   the thumb between the index and middle finger has the same meaning.

in the Middle East for us UT fans would be rude to display the hook em horns as it has that meaning there. 

Of course there are also the other Gestures you would have to account for, in England (I believe) the thumb to the nose has simuliar(sp) connotations.

Oh well;)  more food for thought. don't hate me too much when the conversation starts back up:)
 ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Stream Processing XML in IronPython</title>
		<link>http://devhawk.net/2008/05/06/stream-processing-xml-in-ironpython/</link>
		<pubDate>Tue, 06 May 2008 11:21:54 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://381bc642-1227-46ac-8b2c-447db5ea9e7b</guid>
		<description></description>
		<content:encoded><![CDATA[<p align="left">When it comes to processing XML, there are two basic approaches - load it all into memory at once or process it a node at a time. In the .NET world where I have spent most of the past ten years, those two models are represented by <a href="http://msdn.microsoft.com/library/system.xml.xmldocument">XmlDocument</a> and <a href="http://msdn.microsoft.com/library/system.xml.xmlreader">XmlReader</a>. There are alternatives to XmlDocument, such as <a href="http://msdn.microsoft.com/library/system.xml.linq.xdocument">XDocument</a> and <a href="http://msdn.microsoft.com/library/system.xml.xpath.xpathdocument">XPathDocument</a>, but you get the idea.</p><p>Out in non-MSFT land, the same two basic models exist, however the de facto standard for stream based processing is SAX, the <a href="http://www.saxproject.org/">Simple API for XML</a>. SAX is supported by <a href="http://www.saxproject.org/langs.html">many languages</a>, <a href="http://www.python.org/doc/current/lib/module-xml.sax.html">including Python</a>.</p><p>Personally, I've never been a fan of SAX's event-driven approach. Pushing events makes total sense for a human driven UI, but I never understood why anyone thought that was a good idea for stream processing XML. I like XmlReader's pull model much better. When you're ready for the next node, just call <a href="http://msdn.microsoft.com/library/system.xml.xmlreader.Read">Read</a>() - no mucking about setting <a href="http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html">content handlers</a> or handling node processing events. </p><p>Luckily, the <a href="http://docs.python.org/lib/lib.html">Python standard library</a> supports both approaches. It provides both a <a href="http://docs.python.org/lib/module-xml.sax.html">SAX based parser</a> as well as a <a href="http://docs.python.org/lib/module-xml.dom.pulldom.html">pull based parser called pulldom</a>. Pulldom doc's are fairly sparse, but <a href="http://www.prescod.net/">Paul Prescod</a> wrote a <a href="http://www.prescod.net/python/pulldom.html">nice introduction</a>. Here's an example from Paul's site (slightly modified):</p><pre class="brush: python">
from xml.dom import pulldom 
nodes = pulldom.parse( "file.xml" )  
for (event,node) in nodes:  
    if event=="START_ELEMENT" and node.tagName=="table":  
        nodes.expandNode( node )
</pre><p>Actually, I like this <em>better</em> than XmlReader, since it provides the nodes in a list-like construct that appeals to the functional programmer in me. I'd like it even more if Python had a native pattern matching syntax - you know, like F# - but you can get similar results by chaining together conditionals with <a href="http://docs.python.org/ref/if.html">elif</a>.</p><p>However, IronPython doesn't support any of the XML parsing modules from Python's standard library. They're all based on a C-based python module called <a href="http://docs.python.org/lib/module-xml.parsers.expat.html">pyexpat</a> which IronPython can't load. [1] I wanted a pulldom type model, so I decided to wrap XmlReader to provide a similar API and lets me write code like this:</p><pre class="brush: python">
import ipypulldom  
nodes = ipypulldom.parse( "sample.xml" )   
for node in nodes:   
  if node.nodeType==XmlNodeType.Element:   
    print node.xname
</pre><p>There are a few differences from pulldom, but it's basically the same model. I'm using the native .NET type XmlNodeType rather than a string to indicate the node type. Furthermore, I made the node type a property of the node, rather than a separate variable. I also didn't implement expandNode, though doing so would be a fairly straightforward combination of XmlReader.ReadSubtree and XmlDocument.Load.</p><p>I stuck the <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/ipypulldom.py">code for ipypulldom</a> up in a new folder on my Skydrive: <a href="http://cid-0d9bc809858885a4.skydrive.live.com/browse.aspx/DevHawk%20Content/IronPython%20Stuff">IronPython Stuff</a>. It's fairly short - only about 45 lines of code. Feel free to use it if you need it.</p><hr /><p>[1] The <a href="http://fepy.sourceforge.net/">FePy project</a> has a <a href="https://fepy.svn.sourceforge.net/svnroot/fepy/trunk/lib/pyexpat.py">.NET port of pyexpat</a> as part of their distribution, so I assume that lets you use the standard pulldom implementation in IPy. FePy looks really cool but I haven't had time to dig into it yet. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1144</wp:post_id>
		<wp:post_date>2008-05-06 11:21:54</wp:post_date>
		<wp:post_date_gmt>2008-05-06 11:21:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stream-processing-xml-in-ironpython</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[XML]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[381bc642-1227-46ac-8b2c-447db5ea9e7b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Stream+Processing+XML+In+IronPython]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/05/06/Stream+Processing+XML+In+IronPython]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Deserializing XML with IronPython</title>
		<link>http://devhawk.net/2008/05/06/deserializing-xml-with-ironpython/</link>
		<pubDate>Tue, 06 May 2008 17:37:25 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://6eb7375a-4ee7-4846-a1ba-15f4abde9b98</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Now that I can <a href="http://devhawk.net/2008/05/06/Stream+Processing+XML+In+IronPython.aspx">stream process XML</a>, the next logical step is to deserialize it into some type of object graph. As I said in my last post, there are at least three different DOM-esque options on the .NET platform as well as two in the Python library (<a href="http://docs.python.org/lib/module-xml.dom.html">xml.dom</a> and <a href="http://docs.python.org/lib/module-xml.dom.minidom.html">xml.minidom</a>)</p><p>However, anyone who's ever programmed against the <a href="http://www.w3.org/DOM/">DOM</a> knows just what a major PITA it is. </p><p>Instead, you could deserialize the XML into a custom object tree, based on the nodes in the XML stream. In .NET, there are at least two libraries for doing this: the old-school <a href="http://msdn.microsoft.com/library/system.xml.serialization.xmlserializer">XmlSerializer</a> as well as the new-fangled <a href="http://msdn.microsoft.com/library/system.runtime.serialization.datacontractserializer">DataContractSerializer</a>. In these libraries, the PITA comes in defining the static types with all the various custom attribute adornments you need to tell the deserializer how to do it's job. Actually, if you're defining your code first, all those adornments aren't that big a deal. However, if you're starting from the XML, especially XML with lots of different namespaces - like say <a href="http://feeds.feedburner.com/Devhawk">my RSS feed</a> - defining a static type for this gets old fast. </p><p>Of course, if you're not using a statically typed language... ;)</p><p>One of the cool aspects of dynamic languages is the ability to easily generate new types on the fly. In Python, you can create a new type by calling the type function. Here's an example of creating a new type for a XML node:</p><pre class="brush: python">
def create_type(node, parent):  
  return type(node.name, (parent,), {'xmlns':node.namespace})
</pre><p>Since I'm working with XML, I wanted to make sure I handled namespaces. Thus, I add the namespace to the class definition (the third parameter in the type function above). This lets me walk up to any arbitrary object created from an XML element and check it's namespace. </p><p>I used this dynamic type creation functionality in my <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/xml2py.py">xml2py</a> module, which I added to my <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff">IronPython SkyDrive folder</a>. It leverages <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/ipypulldom.py">ipypulldom</a>, so make sure you get both. The heart of the module is the xml2py function, which recursively iterates thru the node stream and builds the tree. Attributes and child elements become named attributes on the object, so I can write code that looks like this:</p><pre class="brush: python">
import xml2py  
rss = xml2py.parse('http://feeds.feedburner.com/Devhawk')  
for item in rss.channel.item:  
  print item.title
</pre><p>You see? No screwing around with childNodes or getAttribute here.</p><p>The basic processing loop of xml2py creates a new instance of a new type when it encounters a start element tag. It then collects all the attributes and children of that element, and adds them as attributes on the element object, using the name of the type as name of the attribute. If there are multiple children with the same type name, xml2py converts that attribute to a list of values. For example, in an RSS feed, there will be likely be many rss.channel.item elements. In xml2py, the item attribute of the channel object will be a list of item objects. </p><p>Since attributes and child elements are getting slotted together, I added a _nodetype attribute on each so I can later tell (if I care) if the value was originally an attribute or element. I haven't written py2xml yet, but that might be important then.</p><p>I do one optimization for simple string elements like &lt;foo&gt;bar&lt;/foo&gt;. In this case, I create a type that inherits from string (hence the need for the parent parameter in the create_type function above) and contains the string text. It still has the xmlns and _nodetype attributes, so I could write item.title.xmlns (which is empty since RSS is in the default namespace) or item.title._nodetype (which would be XmlNodeType.Element)</p><p>It's not much code - about 100 lines of code split evenly between the xml2py function and the _type_factory object. Given that you usually see the same element in an XML stream over an over, I didn't want to create multiple types for the same element. So _type_factory caches types in a dictionary so I can reuse them. One of the cool things is that it's a callable type (i.e. it implements __call__ so I can use the instance like a function. I started by defining a xtype function that didn't cache anything, but then later switched xtype to be a _type_factory instance, but none of my code that called xtype had to change!</p><p>One other quick note. If you put xml2py.py and ipypylldom.py in a folder, you can experiment with them by launching "ipy -i xml2py". This runs xml2py.py as a script, but dumps you into the interactive console when you're thru. It will run the little snippet of code above which runs xml2py on my <a href="http://feeds.feedburner.com/Devhawk">FeedBurner feed</a>, but then you can play around with the rss object and see what it contains. Be sure to check out the xmlns attribute for each object in the rss.channel.link list.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1145</wp:post_id>
		<wp:post_date>2008-05-06 17:37:25</wp:post_date>
		<wp:post_date_gmt>2008-05-06 17:37:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>deserializing-xml-with-ironpython</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[XML]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[6eb7375a-4ee7-4846-a1ba-15f4abde9b98]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Deserializing+XML+With+IronPython]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/05/07/Deserializing+XML+With+IronPython]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2074</wp:comment_id>
			<wp:comment_author><![CDATA[Bryant Likes]]></wp:comment_author>
			<wp:comment_author_email>devhawk@bryantlikes.com</wp:comment_author_email>
			<wp:comment_author_url>http://blogs.sqlxml.org/BryantLikes</wp:comment_author_url>
			<wp:comment_author_IP>204.238.46.100</wp:comment_author_IP>
			<wp:comment_date>2008-05-06 18:25:23</wp:comment_date>
			<wp:comment_date_gmt>2008-05-07 01:25:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm using my statically typed language and I'm not screwing around with childNodes or getAttribute either (thankfully!):

XElement rss = XElement.Load("http://feeds.feedburner.com/Devhawk");
foreach (XElement item in rss.Element("channel").Elements("item"))
    Console.WriteLine(item.Element("title").Value);

Not quite as elegant as yours, but not too far off. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2075</wp:comment_id>
			<wp:comment_author><![CDATA[Seo Sanghyeon]]></wp:comment_author>
			<wp:comment_author_email>sanxiyn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>143.248.233.155</wp:comment_author_IP>
			<wp:comment_date>2008-05-06 18:30:50</wp:comment_date>
			<wp:comment_date_gmt>2008-05-07 01:30:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For a mature Python library to do XML to object serialization, take a look at lxml.objectify.

http://codespeak.net/lxml/objectify.html

You really should try FePy. FePy doesn't run lxml.objectify yet (this one is a monster), but it does run gnosis.xml.objectify. And it runs same on CPython too.

It is impressive that you could cook up XML to object serializer in relative short time and code, but I personally won't use any IronPython-only solution when there are lots of mature Python solutions.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2076</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.16.91.67</wp:comment_author_IP>
			<wp:comment_date>2008-05-06 20:23:25</wp:comment_date>
			<wp:comment_date_gmt>2008-05-07 03:23:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Bryant, XDocument + LINQ is a HUGE improvement over XmlDocument. But support for late binding is what makes the Python version so much more readable. 

@Seo, Don't worry, I plan to take a very long look at FePy. Just haven't had the time yet. 

As for my code, it's more about me learning Python not really about providing a definitive solution to any specific problem. I think xml2py could be tweaked to support pulldom with little effort. I just know .NET FX very well, so it's easier for me to focus on learning the language with a library I know then it is to learn the language and library at the same time. 

Thanks for the link to lxml.objectify. I'll take a look at that too. I figure there must be other (and better) libraries out there that do something similar to xml2py. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2077</wp:comment_id>
			<wp:comment_author><![CDATA[Oran]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://orand.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>66.230.108.88</wp:comment_author_IP>
			<wp:comment_date>2008-05-06 21:20:33</wp:comment_date>
			<wp:comment_date_gmt>2008-05-07 04:20:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks like LINQ to XSD!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2078</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.16.91.67</wp:comment_author_IP>
			<wp:comment_date>2008-05-06 23:53:11</wp:comment_date>
			<wp:comment_date_gmt>2008-05-07 06:53:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Oran, except there's no XSD required - xml2py works with any arbitrary XML stream]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Debugging IronPython Code in Visual Studio</title>
		<link>http://devhawk.net/2008/05/08/debugging-ironpython-code-in-visual-studio/</link>
		<pubDate>Thu, 08 May 2008 13:58:00 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://28860a1d-d909-4cd5-ba18-be6456a1ca5b</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In case I'm not the last person on the planet to figure this out...</p><ol><li>In VS, click on File-&gt;Open-&gt;Project/Solution or press Ctl-Shift-O</li><li>Select ipy.exe from wherever you put it</li><li>Right click ipy.exe in Solution Explorer and select Properties</li><li>In the Command Arguments box, type "-D" (to generate debug code) and the full path to the script you want to execute. If you want to drop into interactive mode after the script executes, also include a "-i"</li><li>Open the script you specified in step 4 and place breakpoints as usual</li><li>Run via Debug-&gt;Start Debugging or press F5</li></ol><p>Thanks <a href="http://blogs.msdn.com/srivatsn">Srivatsn</a> for helping me out with this.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1146</wp:post_id>
		<wp:post_date>2008-05-08 13:58:00</wp:post_date>
		<wp:post_date_gmt>2008-05-08 13:58:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>debugging-ironpython-code-in-visual-studio</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[28860a1d-d909-4cd5-ba18-be6456a1ca5b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Debugging+IronPython+Code+In+Visual+Studio]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/05/08/Debugging+IronPython+Code+In+Visual+Studio]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2079</wp:comment_id>
			<wp:comment_author><![CDATA[nice air force ones]]></wp:comment_author>
			<wp:comment_author_email>airforcenice@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.sneakernice.com</wp:comment_author_url>
			<wp:comment_author_IP>65.49.14.94</wp:comment_author_IP>
			<wp:comment_date>2008-05-17 06:01:43</wp:comment_date>
			<wp:comment_date_gmt>2008-05-17 13:01:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very helpful, thanks!! ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2080</wp:comment_id>
			<wp:comment_author><![CDATA[Mitch]]></wp:comment_author>
			<wp:comment_author_email>mbarnett@uniserve.com</wp:comment_author_email>
			<wp:comment_author_url>http://globalsystembuider.com</wp:comment_author_url>
			<wp:comment_author_IP>199.60.230.44</wp:comment_author_IP>
			<wp:comment_date>2008-07-05 18:26:36</wp:comment_date>
			<wp:comment_date_gmt>2008-07-06 01:26:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Harry!  One question I have is - is it possible to step through app.py in Jim Hugunin's wonderful DLR Console?  It is 2k lines of Python code that I am trying to wrap my head around, but have not found a way in VS 2008 to step through the code.  Any help appreciated.  Keep up the good writings!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>DevHawk World Tour 2008</title>
		<link>http://devhawk.net/2008/05/16/devhawk-world-tour-2008/</link>
		<pubDate>Fri, 16 May 2008 15:41:14 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://f991adee-f322-4814-a150-289c3d8dc1da</guid>
		<description></description>
		<content:encoded><![CDATA[<p>As expected, my new role is going to involve much more travel than my old role. Here's a list of all the places I'm going / have been this year. I'll be updating this post periodically as I get tapped for more presentations. There are several other conferences I'm considering, submitting sessions for, in discussions with, but these are the ones that are confirmed.</p><p><strong><u><a href="http://www.devdays.nl/"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="119" alt="dutchdevdays" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DevHawkWorldTour2008_DC84/dutchdevdays_3.jpg" width="154" align="right" border="0" /></a><a href="http://www.devdays.nl">DevDays 2008</a><br /></u></strong>May 22nd - 23rd, Amsterdam, The Netherlands </p><p>This is a kinda last minute pickup. My boss was originally scheduled to do this. Or should I say, my ex-boss? (I've been here less than two months and already scared off my boss! :) I'm doing two talks, but I only have the abstract for one of them. </p><blockquote><p><strong><u>DEV315 - "IronPython" and Dynamic Languages on .NET          <br /></u></strong>"IronPython" is the codename for a new implementation of the Python programming language on the .NET Framework. IronPython is fast—in fact, up to 1.8 times faster than Python-2.4 on the standard pystone benchmark. It supports an interactive interpreter with fully dynamic compilation as well as static compilation to produce pre-compiled executables. It's well integrated with the rest of the framework and makes all .NET libraries easily available to Python programmers. This session shows how IronPython brings the power of .NET to Python and the power of Python to .NET. At OSCON 2004, the first public release of IronPython was announced. This session demonstrates the latest IronPython version in a range of situations from using GUI frameworks to driving Microsoft Office applications to working with a variety of external libraries. We also discuss other scripting languages on .NET.</p></blockquote><p>I'm also going to do a talk on Dynamic Languages in Web Development, focused on Silverlight and ASP.NET. I got asked to do a second session at the last minute (technically, later than the last minute) so this one has no abstract. </p><p><strong><u><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="64" alt="teched" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DevHawkWorldTour2008_DC84/teched_3.jpg" width="204" align="right" border="0" /> TechEd <a href="http://www.microsoft.com/nz/teched08/index.aspx">New Zealand</a> and <a href="http://www.microsoft.com.au/teched/default.aspx">Australia</a><br /></u></strong>Sept 1st - 5th, Auckland, New Zealand and Sydney, Australia  </p><p>I did TechEd NZ &amp; Australia back in 2004 and had a blast, so I'm looking forward to coming back this year. Content isn't locked down yet, but I'm looking to do both a dynamic languages session as well as an architecture session. There's also rumor of a web futures panel discussion that I'll be participating in. </p><p><strong><u><a href="http://www.microsoftpdc.com/"><strong><u></u></strong><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DevHawkWorldTour2008_DC84/pdc_flair_2.jpg"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; margin: 0px 0px 0px 5px; border-right-width: 0px" height="115" alt="pdc_flair" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DevHawkWorldTour2008_DC84/pdc_flair_thumb.jpg" width="84" align="right" border="0" /></a></a><a href="http://microsoftpdc.com/">PDC08</a><br /></u></strong>Oct 27th – 30th, Los Angeles, California</p><p>I’m not doing a session, but I'm helping drive PDC content for my group, so I'm assuming I'll be at the conference in some capacity. I’m thinking we need a dynamic language <a href="http://microsoftpdc.com/Agenda/UnSessions.aspx#open-space">open space session</a>.</p><p><a href="http://www.pnpsummit.com/west2008/west2008.aspx"><strong><img title="pnpSummitHero" style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="104" alt="pnpSummitHero" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DevHawkWorldTour2008_9B9F/pnpSummitHero_ba4d0b19-a8c8-4db7-b1ff-79ceffba7109.jpg" width="144" align="right" border="0" /> patterns &amp; practices Summit 2008</strong></a><br />Nov 3rd-7th, Redmond, Washington</p><p>I really enjoy p&amp;p Summit because <a href="http://weblogs.asp.net/kpleas/">Keith</a> lets me experiment with somewhat off the wall sessions like “Developer 2.0” and “Moving Beyond Industrial Software”. Frankly, I have NO idea what I’m going to do at this years’ Summit, but I’m looking to stay outside the box like I have in the past. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1147</wp:post_id>
		<wp:post_date>2008-05-16 15:41:14</wp:post_date>
		<wp:post_date_gmt>2008-05-16 15:41:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devhawk-world-tour-2008</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="presentation"><![CDATA[Presentation]]></category>
		<category domain="post_tag" nicename="travel"><![CDATA[Travel]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[f991adee-f322-4814-a150-289c3d8dc1da]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[DevHawk+World+Tour+2008]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/05/16/DevHawk+World+Tour+2008]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee - Post Vacation Edition</title>
		<link>http://devhawk.net/2008/06/16/morning-coffee-post-vacation-edition/</link>
		<pubDate>Mon, 16 Jun 2008 10:13:02 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://7cec6919-24b2-4a13-95a6-4bd6c70a8c87</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It's been exactly a month since <a href="http://devhawk.net/2008/05/16/DevHawk+World+Tour+2008.aspx">my last post</a>. A crazy month, hence the lack of blog posting around here. Sorry about that. <a href="http://techiewife.spaces.live.com">My wife</a> has been much more regular in her blogging than I have of late - she's posted a dozen times since my last entry. </p><p>Since I'm so far behind on blog reading, and email, and work, and pretty much everything, this is going to be a slightly different Morning Coffee - more forward looking than backwards. Back to normal Morning Coffee posts in a day or so.</p><ul><li>Hawaii was awesome. I was going to post a trip summary, but my wife <a href="http://techiewife.spaces.live.com/Blog/cns!3DAECC033B88329C!2363.entry">beat me to the punch</a>. My personal favorite part was the <a href="http://www.wingsoverkauai.com/">air tour</a>, but frankly it was all good.</li><li>I hear the weather in Seattle was awful while I was gone. My wife's best friend called it "Juneuary". However, the weather since we got back has been pretty awesome. I take full credit for bringing the good weather to Seattle from Hawaii. :)</li><li>I was in Amsterdam for work and I didn't have my family with me, but it was pretty good all the same. My good friend <a href="http://technovangelist.com/">Matt</a> lives in Amsterdam full time, so I got to spend a lot of time with him. I also discovered that I have a new favorite beer - <a href="http://en.wikipedia.org/wiki/Pauwel_Kwak">Kwak</a>. </li><li>I'm sure you're aware of these, but I should post the links anyway: <a href="http://www.iunknown.com/2008/05/ironruby-and-rails.html">IronRuby on Rails</a>, <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=12988">IronPython Beta 3</a>, <a href="http://weblogs.asp.net/scottgu/archive/2008/06/06/silverlight-2-beta2-released.aspx">Silverlight 2 Beta 2</a>, <a href="http://www.codeplex.com/sdlsdk/Release/ProjectReleases.aspx?ReleaseId=14254">Silverlight Dynamic Languages SDK Beta 2</a>, <a href="http://weblogs.asp.net/scottgu/archive/2008/05/27/asp-net-mvc-preview-3-release.aspx">ASP.NET MVC Preview 3</a>.</li><li>I have 419 mails in my inbox - and I've been fairly diligent about deleting stuff that I didn't need to keep even on vacation. That's about 400 more than I'd like to have in there. Most of today will be spent digging out my inbox. Small miracle: I have nothing currently on my calendar for today.</li><li>I'm one of the content owners for PDC08. After getting my inbox cleaned up, my #1 priority is to see where we are on PDC planning. I have a feeling that's going to take up the majority of my time for the next couple of weeks.</li><li>I mentioned above that we shipped the latest beta of IronPython while I was away. As you can imagine, there's a bunch of PM work to be done as we get down to the release of IPy 2.0 (sometime this fall) as well as early work on the next version of IPy. </li><li>Outside of work, I've got a lot of writing to do. I'm finishing up an article on IPy and starting to really hunker down on a book that I'm writing. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1148</wp:post_id>
		<wp:post_date>2008-06-16 10:13:02</wp:post_date>
		<wp:post_date_gmt>2008-06-16 10:13:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-post-vacation-edition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[7cec6919-24b2-4a13-95a6-4bd6c70a8c87]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+Post+Vacation+Edition]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/06/16/Morning+Coffee+Post+Vacation+Edition]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2081</wp:comment_id>
			<wp:comment_author><![CDATA[renjith]]></wp:comment_author>
			<wp:comment_author_email>drrenjithnice@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>59.93.7.60</wp:comment_author_IP>
			<wp:comment_date>2008-06-21 00:25:37</wp:comment_date>
			<wp:comment_date_gmt>2008-06-21 07:25:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[check this: www.qviclub.com
            www.amezcua.com
            www.qlstyle.com


i think this may help you



]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Programming Languages @ PDC08</title>
		<link>http://devhawk.net/2008/07/01/programming-languages-pdc08/</link>
		<pubDate>Tue, 01 Jul 2008 17:37:57 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://5bc87995-3e97-4630-ba7a-cfe8f091d9f4</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The PDC folks pushed out a <a href="http://microsoftpdc.com/View.aspx?post=91d46819-8472-40ad-a661-2c78acb4018c:8675956">bunch of new sessions</a> yesterday, including a bunch from my part of DevDiv. You can see the <a href="http://microsoftpdc.com/Agenda/Sessions.aspx">full list of sessions</a> that have been published (so far) at the <a href="http://microsoftpdc.com">PDC site</a>.</p><blockquote><p><strong>An Introduction to F#        <br /></strong>Learn about Microsoft's new language, F#, a typed functional programming language for the .NET Framework. F# combines functional programming with the runtime support, libraries, tools, and object model of .Net. Understand how F# asynchronous workflows help tame the complexity of parallel and asynchronous I/O programming and how to use F# in conjunction with tools such as Parallel Extensions for .NET.</p><p><strong>Deep Dive: Dynamic Languages in .NET        <br /></strong>The CLR has great support for dynamic languages like IronPython. Learn how the new Dynamic Language Runtime (DLR) adds a shared dynamic type system, a standard hosting model, and support for generating fast dynamic code. Hear how these features enable languages that use the DLR to share code with other dynamic and static languages like VB.NET and C#. </p><p><strong>Future Directions for Visual Basic        <br /></strong>Come learn about the new capabilities in the next version of the language, including: extensions to LINQ, syntax simplifications, and improvements to the IDE. We'll provide insight into the direction of the language, including dynamic binding, meta-programming, and scripting. </p><p><strong>The Future of C#        <br /></strong>In this talk Microsoft Technical fellow and C# Chief Architect Anders Hejlsberg outlines the future of C#. He will describe the many forces that influence and shape the future of programming languages and explain how they fit into C#. </p><p><strong>Visual C++: 10 is the New 6        <br /></strong>Get more done. The next version of Visual C++ is all about improving developer productivity for large-scale applications. Learn about the IntelliSense and browsing experiences, changes to the project and build system, project-less browsing, collaboration through remote symbol indexing, and custom visualization of symbolic information. </p></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1149</wp:post_id>
		<wp:post_date>2008-07-01 10:37:57</wp:post_date>
		<wp:post_date_gmt>2008-07-01 17:37:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>programming-languages-pdc08</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="c-plus-plus"><![CDATA[C++]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="post_tag" nicename="pdc08"><![CDATA[PDC08]]></category>
		<category domain="post_tag" nicename="visual-basic"><![CDATA[Visual Basic]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[5bc87995-3e97-4630-ba7a-cfe8f091d9f4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Programming+Languages+PDC08]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/01/Programming+Languages+PDC08]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 166</title>
		<link>http://devhawk.net/2008/07/07/morning-coffee-166/</link>
		<pubDate>Mon, 07 Jul 2008 16:30:14 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d270fb89-4145-4e10-9527-e520c417c4aa</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Yes, I realize it’s been a while. I tried in vain to catch up with my blog reading after my Hawaii vacation and finally just gave up and hit “mark all as read”. </p><p><strong>Dynamic Languages</strong></p><ul><li>There's a new version of the DLR hosting spec available (<a href="http://compilerlab.members.winisp.net/dlr-spec-hosting.doc">doc</a>, <a href="http://compilerlab.members.winisp.net/dlr-spec-hosting.pdf">pdf</a>). The DLR implementation is still in motion, so there are some inconsistencies between the spec and the code, but the spec should give you the high level overview you need if you want to host DLR languages inside your app.  </li><li><a href="http://www.tkachenko.com/blog/index.html">Oleg Tkachenko</a> recently joined the dynamic languages team. He's the creator of the <a href="http://www.ironruby.info/ir/">Interactive IronRuby Web Shell</a>, an IronRuby version of <a href="http://tryruby.hobix.com/">Try Ruby</a>. Of course, it’s not as cool as using SL2to execute the code directly in the browser. Michael Foord has his <a href="http://www.voidspace.org.uk/ironpython/silverlight-console/console.html">Python in the Browser</a> and my teammates John and Jimmy demoed a Silverlight version of Try Ruby @ <a href="http://www.iunknown.com/2008/06/ironruby-at-tech-ed-2008.html">TechEd</a>.  </li><li>Jim Deville, also of the dynamic languages team, recently started <a href="http://blog.jredville.com/">blogging</a>.  </li><li>I have a new boss, Dave Remy. He doesn't have a blog - yet - but you can follow him on Twitter as daveremy. When Twitter is actually working that is.  </li><li>There's a new <a href="http://ironruby.com/">homepage/wiki for IronRuby</a> though I’m not sure why there's a picture of Matz wearing a Python shirt on the home page.  </li><li>My teammate Jimmy Schementi <a href="http://blog.jimmy.schementi.com/2008/07/aspnet-and-dynamic-languages.html">provides some "continued hope"</a> for a better (heck, I'll take current) ASP.NET and ASP.NET MVC story for DLR languages.  </li><li>Via Michael Foord, sounds like <a href="http://www.resolversystems.com/documentation/index.php/Ironclad">IronClad</a> is making good progress. V0.4 can run the bz2 module "in its entirity" (maybe run a spellcheck on your site, guys?) and now <a href="http://twitter.com/voidspace/statuses/838177435">apparently</a>, it's now able to load numpy.core. Very exciting! </li></ul><p><strong>Other Stuff</strong></p><ul><li>Pat Helland, who has blogged even less than me for the past few months, has a post up about <a href="http://blogs.msdn.com/pathelland/archive/2008/07/06/controllers-and-doers.aspx">controller and doers</a> in the IT department. After 18 months in MSIT, put me in the doer camp, please.  </li><li>The F# team has pushed out a <a href="http://research.microsoft.com/fsharp/manual/spec2.aspx">spec for v1.9.4 of the language</a>. Don Syme says <a href="http://blogs.msdn.com/dsyme/archive/2008/06/28/updated-specification-for-the-1-9-4-spring-refresh-release.aspx">it's not official</a>, but it's a huge improvement over the <a href="http://research.microsoft.com/fsharp/manual/lexyacc.aspx">old informal spec</a></li><li>Speaking of F#, my friend Matthew Podwysocki <a href="http://weblogs.asp.net/podwysocki/archive/2008/06/19/announcing-fstest-a-testing-dsl-for-f.aspx">recently published</a> FsTest, a testing DSL for F#. I <a href="http://devhawk.net/2007/12/12/Practical+F+Parsing+Unit+Testing.aspx">wrote about F# unit testing</a> as part of my <a href="http://devhawk.net/2007/12/10/Practical+Parsing+In+F.aspx">PEG parsing series</a>, and I really like the direction Matthew has taken this project. You can pull it down from <a href="http://www.codeplex.com/FsTest">CodePlex</a>.  </li><li>When I did my <a href="http://www.langnetsymposium.com/talks/3-03%20-%20Parsing%20Expression%20Grammars%20in%20FSharp%20-%20Harry%20Pierson.html">PEG talk</a> @ Lang.NET, <a href="http://gbracha.blogspot.com/">Gilad Bracha</a> mentioned I should check out <a href="http://www.cs.ucla.edu/~awarth/ometa/">oMeta</a>. It looks really cool, though with the job change I haven’t had the time to play with it. Now I discover that <a href="http://www.moserware.com">Jeff Moser</a> is working on a version for CLR called <a href="http://www.moserware.com/2008/06/ometa-who-what-when-where-why.html">oMeta#</a> that I’ve got to spend some time with. And in the comments to that post, I discovered <a href="http://washort.twistedmatrix.com/2008/04/pymeta-is-more-than-just-parsing.html">pyMeta</a> from <a href="http://washort.twistedmatrix.com">Allen Short</a>, though it <a href="http://www.moserware.com/2008/06/ometa-who-what-when-where-why.html?showComment=1214526120000#c1681985703114584575">apparently doesn’t work</a> on IronPython (must investigate why).  </li><li>James Kovacs <a href="http://codebetter.com/blogs/james.kovacs/archive/2008/06/27/introducing-psake.aspx">introduces psake</a>, a PowerShell based build automation tool which uses a rake-inspired internal DSL syntax similar to one <a href="http://devhawk.net/2007/02/21/Internal+DSLs+In+PowerShell.aspx">I blogged last year</a>. I'd love to see this take off, but given MSBuild's tool integration, I wonder if that's feasible. </li><li>I <a href="http://devhawk.net/2007/07/09/Upgrading+My+Home+Wireless+Network.aspx">upgraded my home wireless network</a> almost exactly a year ago. I've been happy with the range and coverage, but not so happy with the Buffalo Tech firmware. The built-in DHCP server is pretty flaky. So I upgraded to the open-source <a href="http://www.polarcloud.com/tomato">Tomato firmware</a>. Upgrade was smooth, though I did need to reset my cable modem. But even that was smooth - Comcast has an automated service for that now,</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1150</wp:post_id>
		<wp:post_date>2008-07-07 09:30:14</wp:post_date>
		<wp:post_date_gmt>2008-07-07 16:30:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-166</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="home-network"><![CDATA[Home Network]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="parsing-expression-grammar"><![CDATA[Parsing Expression Grammar]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d270fb89-4145-4e10-9527-e520c417c4aa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+166]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/07/Morning+Coffee+166]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 167</title>
		<link>http://devhawk.net/2008/07/14/morning-coffee-167/</link>
		<pubDate>Mon, 14 Jul 2008 09:30:10 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://b93bcbe5-a9e9-42c3-a64a-3db4d92526c7</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>If you're a gamer, you're probably already well aware that <a href="http://www.xbox.com/en-US/community/events/e32008/">E3 is this week</a>. The <a href="http://majornelson.com/archive/2008/07/14/demo-too-human.aspx">Too Human demo</a> has already been released. I have a friend who's been working on "something" that will be announced today (I think).  </li><li>Live Mesh folks <a href="http://blogs.msdn.com/livemesh/archive/2008/07/11/service-update-new-build-new-features-coming-today-0-9-3103-2.aspx">pushed out an update</a> Friday. Among the new features is the ability to sync folders among peers but NOT up to the cloud. This is cool because it means I can sync my many many GB of pictures and music on my home machine backed up with Carbonite. This means I can sync them without blowing thru my 5GB Mesh storage limit.  </li><li>It looks like there's a new F# drop - <a href="http://research.microsoft.com/research/downloads/Details/7ac148a7-149b-4056-aa06-1e6754efd36f/Details.aspx">1.9.4.19</a> - <strike>but as usual there is no announcement or details as to what's new. Release notes guys, look into it.</strike>  UPDATE - Don Syme <a href="http://blogs.msdn.com/dsyme/archive/2008/07/14/1-9-4-19-release.aspx">blogged the release</a>, and it's pretty minor. a .NET FX 3.5 SP1 bug fix, a fix for Mono, and they removed WebRequest.GetResponseAsync to make F# work on Silverlight. And the release notes are in the readme. My bad. </li><li>Speaking of F#, it was "partially inspired" by <a href="http://en.wikipedia.org/wiki/OCaml">OCaml</a>, so when I see papers related to OCaml, I immediately wonder if I an apply the described techniques to F#. "<a href="http://www.univ-orleans.fr/lifo/Members/David.Teller/publications/ml2008.pdf">Catch me if you can, Towards type-safe, hierarchical, lightweight, polymorphic and efﬁcient error management in OCaml</a>" is one such paper. (via <a href="http://lambda-the-ultimate.org/node/2892">LtU</a>)  </li><li>Speaking of functional programming, Matthew Podwysocki <a href="http://weblogs.asp.net/podwysocki/archive/2008/07/10/aspects-of-functional-programming-in-c-presentation-and-code.aspx">posted</a> a bunch of FP links as well as a Code Gallery Sample <a href="http://code.msdn.microsoft.com/FunctionalCSharp/">on FP in C#.</a> Good stuff.  </li><li>As <a href="http://weblogs.asp.net/scottgu/archive/2008/07/14/asp-net-mvc-preview-4-release-part-1.aspx">per Scott Guthrie</a>, it looks like there's a new ASP.NET MVC drop coming this week.  </li><li>Based on posts by <a href="http://blogs.tedneward.com/2008/07/11/So+You+Say+You+Want+To+Kill+XML.aspx">Ted Neward</a>, <a href="http://www.25hoursaday.com/weblog/2008/07/10/TheRevengeOfRPCGoogleProtocolBuffersAndFacebookThrift.aspx">Dare Obasanjo</a> and <a href="http://steve.vinoski.net/blog/2008/07/11/protocol-buffers-no-big-deal/">Steve Vinoski</a>, Google <a href="http://code.google.com/p/protobuf/">Protocol Buffers</a> sounds like it's going to be a dud. Note, I haven't looked at it depth personally, I'm just passing on opinions of some folks I read and trust.  </li><li>Speaking of Dare, both <a href="http://www.25hoursaday.com/weblog/2008/07/14/ProjectCassandraFacebooksOpenSourceAlternativeToGoogleBigTable.aspx">he</a> and <a href="http://perspectives.mvdirona.com/2008/07/12/FacebookReleasesCassandraAsOpenSource.aspx">James Hamilton</a> take a look at <a href="http://code.google.com/p/the-cassandra-project/">Cassandra</a> and come away impressed. I wonder how easy it is to code against from Python and/or .NET?  </li><li>Bart de Smet has a <a href="http://community.bartdesmet.net/blogs/bart/archive/2008/07/06/windows-powershell-through-ironruby-writing-a-custom-pshost.aspx">cool sample</a> of calling out to PowerShell from IronRuby via the backtick command. Pretty cool, but it would even cooler to show how to call out to PS and return .NET objects to Ruby (though that would probably not be spec compliant for the backtick command).  </li><li>Here's a MS code name I had never heard before - <a href="https://connect.microsoft.com/site/sitehome.aspx?SiteID=642">Zermatt</a>. It's "a framework for implementing claims-based identity in your applications." (via <a href="http://stevegilham.blogspot.com/2008/07/links-for-14-jul.html">Steve Gilham</a>)</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1151</wp:post_id>
		<wp:post_date>2008-07-14 09:30:10</wp:post_date>
		<wp:post_date_gmt>2008-07-14 09:30:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-167</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="post_tag" nicename="windows-live"><![CDATA[Windows Live]]></category>
		<category domain="post_tag" nicename="xbox-360"><![CDATA[Xbox 360]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[b93bcbe5-a9e9-42c3-a64a-3db4d92526c7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+167]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/14/Morning+Coffee+167]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2082</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
			<wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
			<wp:comment_date>2008-07-14 09:37:22</wp:comment_date>
			<wp:comment_date_gmt>2008-07-14 16:37:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[As Powershell is all implemented as .NET assemblies (surprise!) calling into Powershell from IronPython is quite easy. There are examples of it (and embedding IronPython in Powershell) in IronPython in Action.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2083</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.203.236.114</wp:comment_author_IP>
			<wp:comment_date>2008-07-15 21:54:33</wp:comment_date>
			<wp:comment_date_gmt>2008-07-16 04:54:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looking forward to it Michael!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython 1.1.2 RC</title>
		<link>http://devhawk.net/2008/07/15/ironpython-1-1-2-rc/</link>
		<pubDate>Tue, 15 Jul 2008 11:16:25 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://3d24829f-4d1d-45cd-aec2-4f83d0a206ad</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It's a little late, but we just pushed out the <a href="http://www.codeplex.com/Release/ProjectReleases.aspx?ProjectName=IronPython&amp;ReleaseId=15198">RC for IronPython 1.1.2</a>. This is a minor release with a bunch of bug fixes we've backported from our 2.0 work. </p><p>However, there are two minor breaking changes I wanted to highlight:</p><ol><li>Work Item <a href="http://www.codeplex.com/IronPython/WorkItem/View.aspx?WorkItemId=16348">#16348</a> - We've changed the nt.unlink method so that it raises an exception if the file doesn't exist. This brings nt.unlink in line with CPython's behavior, but does change the public behavior of the method.  </li><li>Work Item <a href="http://www.codeplex.com/IronPython/WorkItem/View.aspx?WorkItemId=16735">#16735</a> - We've changed the return type of IronPython.Runtime.Operations.Ops.Id() from long to object. We return a boxed 32-bit integer for Ops.Id(), unless you've allocated over 2^32 objects in which case we roll over to our arbitrary precision IronMath.BigInteger type. Note, this only would affect statically typed languages compiled against the IronPython assembly. It wouldn't affect python  code in any way.</li></ol><p>We think these are fairly minor (hence the reason we green-lit them) and furthermore these changes mirrors the eventual behavior of 2.0. Please let me know if either of the changes is a problem for you or your project. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1152</wp:post_id>
		<wp:post_date>2008-07-15 11:16:25</wp:post_date>
		<wp:post_date_gmt>2008-07-15 11:16:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-1-1-2-rc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[3d24829f-4d1d-45cd-aec2-4f83d0a206ad]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+112+RC]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/15/IronPython+112+RC]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 168 - E3 Edition</title>
		<link>http://devhawk.net/2008/07/15/morning-coffee-168-e3-edition/</link>
		<pubDate>Tue, 15 Jul 2008 17:42:53 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://902d3f93-fe77-40f5-b4af-00980a0d2fe5</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Yesterday, was <a href="http://www.xbox.com/en-US/community/events/e32008/">Microsoft's big reveal</a> for Xbox 360 this coming holiday season. If you're not a gamer, please move along, nothing to see here. Also note, I work @ Microsoft, but not in the games division so this is only my thoughts on yesterday's announcements.</p><ul><li>While several "hard-core" games were showcased - <a href="http://www.xbox.com/games/fallout3/">Fallout 3</a>, Resident Evil 5, <a href="http://www.xbox.com/games/fable2/">Fable 2</a>, <a href="http://www.xbox.com/games/gearsofwar2/">Gears of War 2</a> and the surprise announcement that Final Fantasy XIII - the rest of yesterday's briefing screamed "we're not just for hard core gamers!"  Call it the Wii effect. Even the title of the main E3 Press Release was <a href="http://www.xbox.com/en-US/community/events/e32008/articles/0714-gamesall.htm">Gameplay for Every Passion</a>.</li><li>Honestly, my favorite announcement from yesterday wasn't game related at all - it was the announcement of <a href="http://www.xbox.com/en-US/community/events/e32008/articles/0714-netflixteamup.htm">Netflix on Xbox 360</a>. I've been <a href="http://devhawk.net/2006/11/24/Hawkeye+On+XBL+Video+Marketplace.aspx">hoping for a flat rate subscription plan</a> since Video Marketplace first launched. Soon, I'll have it. </li><li>I'm not sure what I think of the <a href="http://www.xbox.com/NR/rdonlyres/BE004694-EDED-4077-BD82-6AD23014821F/0/vidNXEe30801LLHi.asx">New Xbox Experience</a> yet. On the one hand, the whole cartoon avatar thing isn't really my bag. Plus, isn't it quite the Mii clone? However, the ability to share photo and video viewing experiences - even with cartoony avatars - and the flashy + engaging navigation mechanism looks like a real improvement. Here's hoping they improve the performance of navigating hard drive content (games library, gamer pictures, etc).</li><li>Congrats to my friend Matt who's been very involved in the development of the new Primetime game show channel. I'm not that interested in "1 vs 100", but I think the potential of that game model is pretty huge. If they created a Jeopardy game for Primetime, I think my parents would by a 360 right away. </li><li>Music / party games seem to have been the primary focus of the press briefing. I'm definitely getting <a href="http://www.xbox.com/games/rockband2/">Rock Band 2</a> (AC/DC woot!) and I think my wife would like <a href="http://www.xbox.com/games/lips/">Lips</a> (she usually sings when we play Rock Band). I want to see how the "wireless interactive microphones: Featuring stylish interactive motion sensors and lights" will work. Guitar Hero World Tour looks cool too, but I'm not re-buying all new music hardware.</li><li><a href="http://www.xbox.com/games/yitm/">You're in the Movies</a> looks like a hoot, plus it doesn't really look like a game, so much as a "party activity". For example, while there are minigame winners or losers, "winning" takes a back seat to the final movie result. I'm guessing this will be big with the kids.</li><li>Speaking of kids, Patrick is really looking forward to <a href="http://www.xbox.com/games/bknutsandbolts/">Banjo-Kazooie Nuts &amp; Bolts</a>. He loves anything related to building, and building fantastic vehicles is a core part of the gameplay. As for Riley, I think she's getting old enough to enjoy Viva Pinata - she enjoys watching Patrick and I play - though I'm not sure we need the <a href="http://www.xbox.com/games/vptip/">new Viva Pinata</a>.</li><li><a href="http://www.xbox.com/games/geowarsre2xboxlivearcade/">Geometry Wars 2</a> and <a href="http://www.xbox.com/games/portalxboxlivearcade/">Portal: Still Alive</a>, both coming to Xbox Live Arcade. 'nuff said.</li><li>Not really "new" news, but <a href="http://catalog.xna.com/gamescatalog.aspx">XNA Community Games</a> launches this fall. I've got a creators club membership, so I'm able to experiment with this now - it rocks, though the available games are pretty shall I say "unpolished" at this point.</li><li><a href="http://www.xbox.com/games/halowars/">Halo Wars</a> not coming until 2009. :(</li><li>No new Bungie news, but their <a href="http://www.bungie.net/defaultsi.aspx">website</a> is counting down to *something* tomorrow. I guess we'll find out then. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1153</wp:post_id>
		<wp:post_date>2008-07-15 10:42:53</wp:post_date>
		<wp:post_date_gmt>2008-07-15 17:42:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-168-e3-edition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="games"><![CDATA[Games]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="movies"><![CDATA[Movies]]></category>
		<category domain="post_tag" nicename="xbox-360"><![CDATA[Xbox 360]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[902d3f93-fe77-40f5-b4af-00980a0d2fe5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+168+E3+Edition]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/15/Morning+Coffee+168+E3+Edition]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.xbox.com/NR/rdonlyres/BE004694-EDED-4077-BD82-6AD23014821F/0/vidNXEe30801LLHi.asx
223
video/asf
]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronPython Post 2.0 Roadmap</title>
		<link>http://devhawk.net/2008/07/16/ironpython-post-2-0-roadmap/</link>
		<pubDate>Wed, 16 Jul 2008 17:05:43 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://663bc86a-8185-4c5b-8a5b-c01634a1b1bc</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://www.voidspace.org.uk/python/weblog/index.shtml">Michael Foord</a> (aka voidspace) <a href="http://twitter.com/voidspace/statuses/855791807">twittered</a> that "None of the IronPython team can get it together to blog regularly, except @<a href="http://twitter.com/jschementi">jschementi</a> of course." While I'm not sure <a href="http://blog.jimmy.schementi.com/">Jimmy</a> is all that prolific either, Michael's certainly right about me. I started this job at the beginning of April, and I've only blogged twenty one times in the three and a half months since. Worse, I've only blogged <em>six </em>times in the past month and a half - and half of those have been since Michael called out my lack o' posting. My wife has blogged like <em>twenty five </em>times in that same time period. I can only plead pressures of a new job plus a two week vacation. I have been <a href="http://twitter.com/devhawk">twittering a lot</a>. </p><p>Michael was twittering in response to Todd Ogasawara's <a href="http://www.oreillynet.com/onlamp/blog/2008/07/ironpython_20_beta_3_and_pytho.html">post</a> wondering about our Python 3.0 plans. Since we haven't been particularly transparent (my fault) I thought I'd lay out our near and middle term plans.</p><p>First off, we're on the verge of releasing 1.1.2 (the <a href="http://www.codeplex.com/Release/ProjectReleases.aspx?ProjectName=IronPython&amp;ReleaseId=15198">release candidate</a> is available now), a service release in our 1.x branch which contains a bunch of bug fixes we've back ported from our 2.0 work. This is our last planned release in the 1.x branch. For those who don't know, our 1.x branch tracks <a href="http://www.python.org/download/releases/2.4/">CPython's 2.4 branch</a>. </p><p>Most of our team's focus has been on 2.0 which we're on track to shipping later this year. Our 2.0 corresponds to <a href="http://www.python.org/download/releases/2.5">CPython's 2.5 branch</a>. It's a major release for us because of the addition of the <a href="http://blogs.msdn.com/hugunin/archive/2007/04/30/a-dynamic-language-runtime-dlr.aspx">Dynamic Language Runtime</a>. Currently, you can get <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=12988">2.0 Beta 3</a>, with Beta 4 scheduled for early August (we go about 6 weeks between beta releases). If you want even fresher code than our latest release, you can pull and build <a href="http://www.codeplex.com/IronPython/SourceControl/ListDownloadableCommits.aspx">the source</a> yourself. We went about two months without pushing source due to some broken scripts, but they're fixed now so we're going to try and push out code much more often than we have in the past.</p><p>For the non-Python geeks in the audience, Python is undergoing a major change. <a href="http://www.python.org/dev/peps/pep-3000/">Python 3.0</a> is going to break backwards compatibility with Python 2.x in <a href="http://www.python.org/dev/peps/pep-3100/">number of ways</a>. Breaking backwards compatibility always has to be handled carefully, so the Python community is investing quite a bit of effort to make the transition as smooth as possible.The Python Software Foundation is currently working on both <a href="http://www.python.org/download/releases/2.6/">2.6</a> and <a href="http://www.python.org/download/releases/3.0/">3.0</a> simultaneously. The idea is to have as much feature parity between the two releases (except for the stuff being removed from 3.0) and to provide an <a href="http://svn.python.org/view/sandbox/trunk/2to3/">automatic tool</a> to translating to the new version.</p><p>Let me be very clear (since as Todd discovered, we haven't been to date) that once we get IronPython 2.0 out the door, we will start working towards IronPython 3.0, which will be our version of Python 3.0. We want to take the same stepping-stone approach that CPython is taking. So that means <em>at a minimum</em> we'll do an IPy 2.1 with CPython 2.6's <a href="http://docs.python.org/dev/whatsnew/2.6.html">new language and library features</a>, (along with the usual bug fixing and other quality improvements we do every cycle) before then proceeding to work on IPy 3.0. </p><p>Until we get IPy 2.0 out the door, I'm not willing to talk about specific timelines. We're an agile project and we're going to be feature and quality driven, full stop. There were about seven months between the release of IPy 1.0 and 1.1, however that didn't include much new Python feature work so it's not a good comparison IMO. My gut tells me the IPy 2.1 release will take longer than a typical minor release while the IPy 3.0 release won't take as long as a typical major release. Note, those are <em><u>guesses</u></em>, not <em><u>commitments</u></em>. </p><p>Besides IPy 2.1 and 3.0, the other major thing we're working on is Visual Studio integration for IronPython. Yes, there is <a href="http://codeplex.com/IronPythonStudio">IronPythonStudio</a>, but that's a VS SDK sample not a production-quality VS integration the IPy team maintains or supports. The IntelliSense implementation is pretty flaky, the compile-oriented project system feels pretty un-pythonic and of course we need to upgrade it to support IPy 2.0 and the DLR (it would be nice if IronRuby could leverage our efforts down the road). Like everything else we do in this group, we'll be publishing the VS Integration source code up on CodePlex as early and often as we can. </p><p>So to recap our current thinking:</p><ul><li>IPy 1.1.2 in RC now, shipping in several weeks assuming we don't find any major regressions  </li><li>IPy 2.0 in beta now, shipping later this year  </li><li>IPy 2.1 supporting new CPy 2.6 features at some point after IPy 2.1, probably longer than a typical minor release </li><li>First release of IPy integration with VS in the same timeframe as IPy 2.1 but with alpha drops as soon as we can  </li><li>IPy 3.0 supporting new CPy 3.0 after IPy 2.1, probably shorter than a typical major release</li></ul><p>One last thing, as many of you know the IronRuby project supports <a href="http://www.ironruby.com/Frequently_Asked_Questions/How_do_I_contribute_modifications_I've_made_to_the_code%3f">community contributions</a> to the standard libraries. I wanted the IPy community to know I'm 100% committed for establishing a similar arrangement for IronPython. I've got nothing to announce yet, but rest assured I've been spending a lot of time talking to lawyers. </p><p>As always, if you've got opinions to share please feel free to leave me comments below, <a href="mailto:harry.pierson@microsoft.com">shoot me an email</a>, or join the <a href="http://lists.ironpython.com/listinfo.cgi/users-ironpython.com">IPy mailing list</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1154</wp:post_id>
		<wp:post_date>2008-07-16 17:05:43</wp:post_date>
		<wp:post_date_gmt>2008-07-16 17:05:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-post-2-0-roadmap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[663bc86a-8185-4c5b-8a5b-c01634a1b1bc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+Post+20+Roadmap]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/17/IronPython+Post+20+Roadmap]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2084</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://htto://www.ironpythoninaction.com</wp:comment_author_url>
			<wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
			<wp:comment_date>2008-07-17 15:32:30</wp:comment_date>
			<wp:comment_date_gmt>2008-07-17 22:32:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Harry - nice blog entry. My comment on Twitter wasn't really aimed at you - I was hoping to prod Dino, MArtin or Sri into blogging more!

One question. When IronPython 3 is started, targeting CPython 3.0, will you actively maintain IronPython and IronPython 3 in parallel?

This is what the Python developers will do for several years to come as it will be a long time before the majority of the community has switched over to Python 3. OF course because of the Unicode strings Python 3 is a better fit for IronPython, but for example the library support outside the standard library won't be there for quite a long time.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2085</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://htto://www.ironpythoninaction.com</wp:comment_author_url>
			<wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
			<wp:comment_date>2008-07-17 15:33:31</wp:comment_date>
			<wp:comment_date_gmt>2008-07-17 22:33:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["will you actively maintain IronPython and IronPython 3 in parallel?"

That should have read "will you actively maintain IronPython 2 and IronPython 3 in parallel?".

Sorry...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2086</wp:comment_id>
			<wp:comment_author><![CDATA[francois]]></wp:comment_author>
			<wp:comment_author_email>schneo@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://francois.schnell.free.fr</wp:comment_author_url>
			<wp:comment_author_IP>82.227.72.2</wp:comment_author_IP>
			<wp:comment_date>2008-07-26 06:58:02</wp:comment_date>
			<wp:comment_date_gmt>2008-07-26 13:58:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello and thanks for these informations especially about Visual Studio.

Sorry for my naive question but what do you mean exactly when you say "Visual Studio integration"?
Will it be necessary to buy VS standard/Pro to benefit from it?

When I first saw "Iron Python Studio"  I went over the Moon before emergency landing (when I realized it was more an example/"proof of concept demo" for the VS shell, without support or answers from the author on the forum).

My hope is to see something approaching the quality of VS Express free as in beer (or for a reasonable price for hobbyist, around 50$)

I say this because the Python world lack a reasonable GUI designer and Microsoft excels at building such tools.
I can't count the number of people coming to Python, *loving the language* and then asking where to download the GUI designer ("you know like in visual studio")... For my part I then continue to use WxPython "by hand" but I lose too much time for destop GUI.

If Microsoft releases such a "free" IDE/GUI designer I bet lots of people will jump in the IronPython band-wagon and leverage even more the .Net world.

On a side note for the "education world" maybe Microsoft could be more "broad". For example Adobe gives away "Flex Bulder Pro" to any students and *any staff* working in education (no need to be part of a special program or agreement):
https://freeriatools.adobe.com/
(At the place I work in my university it's one of the reason we're going the Flex/Air way instead of Silverlight).

Anyway thanks to Microsoft for working on Iron Python. After the FUD years against Open Source I'm surprise to see Microsoft again as a very innovative and cool place :) (when I see IronPython/Ruby, DLR, Silverlight, PhotoSynth, DeepZoom, CodePlex, PowerShell, Apache support, etc...).
Interesting times.
 
francois]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 169</title>
		<link>http://devhawk.net/2008/07/17/morning-coffee-169/</link>
		<pubDate>Thu, 17 Jul 2008 10:52:42 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://e7ec112c-e747-456c-827b-71d26d92df38</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li><a href="http://peerlessprognosticator.blogspot.com/2008/07/sro-at-kcidevelopment-camp-closes.html"><img style="margin: 0px 0px 0px 5px" height="180" src="http://bp2.blogger.com/_LtbODdut650/SHlJgiq937I/AAAAAAAAC6Q/0N2qfraAh6Y/s400/071208_development_camp+009.JPG" width="240" align="right" /></a><a href="http://peerlessprognosticator.blogspot.com/2008/07/sro-at-kcidevelopment-camp-closes.html">Check out the crowd</a> for a the Washington Capitals developmental camp scrimmage last week (My parents are in their somewhere). Standing room only in the practice facility to watch a bunch of kids, most of whom won't ever make it to the NHL, in July. If you think Washington can't be a hockey town, you are sorely mistaken.  </li><li>Speaking of the Caps, they are establishing a "<a href="http://capitals.nhl.com/team/app/?service=page&amp;page=NHLPage&amp;id=23007">spirit squad</a>"? Is that really necessary? (short answer: no). <a href="http://peerlessprognosticator.blogspot.com/2008/07/weve-got-spirit-how-bout-you.html">Peerless' take</a> is hilarious.  </li><li><a href="http://blogs.msdn.com/seshadripv">Seshadri Vijayaraghavan</a> is a tester on the DLR team and he's been writing quite a bit about the DLR hosting API. He's got a series of posts about <a href="http://blogs.msdn.com/seshadripv/archive/2008/06/24/how-to-write-a-simple-dlr-host-in-c-using-hosting-api.aspx">hosting</a>, <a href="http://blogs.msdn.com/seshadripv/archive/2008/06/30/how-to-invoke-a-python-function-from-c-using-the-dlr-hosting-api.aspx">invoking</a> and <a href="http://blogs.msdn.com/seshadripv/archive/2008/07/08/how-to-redirect-output-from-python-code-using-the-dlr-hosting-api.aspx">redirecting output</a> from IronPython in a C# application. </li><li>I haven't seen an official announcement, but <a href="http://www.liveside.net/blogs/main/archive/2008/07/17/microsoft-opens-up-live-mesh-for-basic-mobile-access.aspx">mobile access to Live Mesh is available</a> by pointing your phone browser to <a href="http://m.mesh.com">http://m.mesh.com</a>. It's mostly a web view of the Live Desktop, though there is a feature to upload photos from your phone. However, for some reason that feature doesn't work for me right now. I don't get the "browse" button. </li><li>ASP.NET MVC Preview 4 is <a href="http://www.codeplex.com/aspnet/Release/ProjectReleases.aspx?ReleaseId=15389">available for download</a>. Phil Haack has <a href="http://haacked.com/archive/2008/07/16/aspnetmvc-codeplex-preview4.aspx">a few details</a> that ScottGu didn't cover. Scott Hanselman shows off <a href="http://feeds.feedburner.com/~r/ScottHanselman/~3/337456906/ASPNETMVCPreview4UsingAjaxAndAjaxForm.aspx">some AJAX stuff</a>. </li><li>Speaking of Scott Hanselman, he <a href="http://www.hanselman.com/blog/LearningOpportunityNETTerrariumIsBack.aspx">highlights</a> the <a href="http://weblogs.asp.net/bsimser/archive/2008/07/16/reintroducing-terrarium-now-with-2-0-goodness.aspx">return of Terrarium</a> from <a href="http://weblogs.asp.net/bsimser/default.aspx">Bil Simser</a>. Scott mentions that most Terrarium animal implementations were big collections of nested if statements. I wonder if F# pattern matching would be a cleaner approach?  </li><li>Ted Neward obviously never "even tangentially" touched politics, as I think they have far worse flame wars far more often than we have in the software industry. However, certainly the Scala flame war <a href="http://blogs.tedneward.com/2008/07/16/Of+Zealotry+Idiocy+And+Etiquette.aspx">he's commenting on</a> seems fairly counterproductive.  </li><li>Brad Wilson <a href="http://bradwilson.typepad.com/blog/2008/07/creating-nullab.html">runs into a wall</a> trying to convert a string to an arbitrary Nullable&lt;T&gt;.He doesn't find an answer, but I found reading thru the steps he took to try and find an answer strangely compelling. </li><li>Jeff Atwood argues that <a href="http://www.codinghorror.com/blog/archives/001152.html">Maybe Normalization isn't Normal</a>. It's mostly a collection of information from other places, including a compilation of high-scale database case studies. But it's a useful collection of info and links, with a little common-sense thrown in for good measure. </li><li>I have a hard time imagining <a href="http://blogs.msdn.com/pathelland/archive/2008/07/16/a-weekend-at-foo-camp.aspx">Pat Helland camping</a>. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1155</wp:post_id>
		<wp:post_date>2008-07-17 10:52:42</wp:post_date>
		<wp:post_date_gmt>2008-07-17 10:52:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-169</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[Database]]></category>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="live-mesh"><![CDATA[Live Mesh]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<category domain="post_tag" nicename="windows-live"><![CDATA[Windows Live]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[e7ec112c-e747-456c-827b-71d26d92df38]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+169]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/17/Morning+Coffee+169]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Five Minutes Past Noon Coffee 170</title>
		<link>http://devhawk.net/2008/07/21/five-minutes-past-noon-coffee-170/</link>
		<pubDate>Mon, 21 Jul 2008 19:05:43 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://a18942b5-00eb-411c-854e-70175a80daa5</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Ben Hall <a href="http://blog.benhall.me.uk/2008/07/announcing-ironeditor-editor-for.html">announces</a><a href="http://www.codeplex.com/IronEditor">IronEditor</a>, a simple dev tool for IronPython and IronRuby. Pretty nice, though fairly simplistic (as Ben readily admits). For example, it doesn't have an interactive mode, only the ability to execute scripts and direct the output to IronEditor's output window. However, it is a good start and I'm sure it'll just get better. One thing he's <a href="http://twitter.com/Ben_Hall/statuses/862967588">apparently considering</a> is a Silverlight version. (via <a href="http://twitter.com/voidspace/statuses/862951177">Michael Foord</a>)  </li><li>Speaking of "Iron" tools, <a href="http://www.sapphiresteel.com/">Sapphire Steel</a> have had an <a href="http://www.sapphiresteel.com/Ruby-In-Steel-For-IronRuby">IronRuby version (in alpha)</a> of their <a href="http://www.sapphiresteel.com/Ruby-In-Steel-Developer-Overview">Ruby in Steel</a> product for several months now. I wonder if <a href="http://www.iunknown.com/">John's</a> had a chance to play with it.  </li><li>Speaking of John, the ASP.NET MVC / IronRuby prototype he <a href="http://www.iunknown.com/2008/06/ironruby-and-aspnet-mvc.html">talked about @ TechEd</a> is <a href="http://haacked.com/archive/2008/07/20/ironruby-aspnetmvc-prototype.aspx">now available</a> on ASP.NET MVC Preview 4 via Phil Haack.  </li><li>Ted Neward has <a href="http://code.msdn.microsoft.com/IPyDD">an article</a> exploring the IronPython VS Integration sample that ships in the VS SDK. As I <a href="http://devhawk.net/2008/07/17/IronPython+Post+20+Roadmap.aspx">mentioned the other day</a>, we're starting working on a production quality implementation of VS Integration for IPy.  </li><li>Ophir Kra-Oz (aka Evil Fish) blogs <a href="http://ophir.wordpress.com/2008/07/20/python-for-executives/">Python for Executives</a>. I like his "Risk, Recruiting, Performance and Maturity" model - four boxes, perfect for keeping an executive's attention! :) Plus Ophir has some nice things to say about IronPython. (via <a href="http://twitter.com/voidspace/statuses/863648598">Michael Foord</a>)  </li><li>Ronnie Maor <a href="http://www.ronnie-midnight-oil.net/2008/07/easier-python-evaluation-from-c.html">blogs</a> an <a href="http://www.ironpython.info/index.php/PythonEngineEvalExtension">extension method for PythonEngine</a> to make Eval simpler. I especially like how he uses string format syntax so you can dynamically generate the code to eval. I wonder what this would look like in IPy 2.0 with DLR Hosting API. (via <a href="http://ironpython-urls.blogspot.com/2008/07/easier-python-evaluation-from-c.html">IronPython URLs</a>)  </li><li>Speaking of DLR Hosting, Seshadri has <a href="http://blogs.msdn.com/seshadripv/archive/2008/07/17/dlr-hosting-sample-write-event-handlers-for-vs-in-ironpython.aspx">another great DLR hosting post</a>, this time hosting IPy inside of VS08 so you can script VS08 events (document saved, window created, etc) with Python.  </li><li>Justin Etheredge has a bunch of IronRuby posts - <a href="http://www.codethinked.com/post/2008/07/14/Getting-IronRuby-Up-and-Running.aspx">Getting IronRuby Up and Running</a>, <a href="http://www.codethinked.com/post/2008/07/17/Running-Applications-in-IronRuby.aspx">Running Applications in IronRuby</a>, <a href="http://www.codethinked.com/post/2008/07/21/Learning-Ruby-via-IronRuby-and-C-Part-1.aspx">Learning Ruby via IronRuby and C# Part 1</a>. (via <a href="http://samgentile.com/blogs/samgentile/archive/2008/07/21/new-and-notable-255.aspx">Sam Gentile</a>) </li><li>Don Syme <a href="http://blogs.msdn.com/dsyme/archive/2008/07/19/f-and-arcgis-arcobjects.aspx">links</a> to several F# related posts by <a href="http://vernagus.blogspot.com/">Ray Vernagus</a>, though he's apparently also <a href="http://vernagus.blogspot.com/2007/10/extension-methods-and-ironruby.html">experimenting with IronRuby</a>. I'm really interested in his <a href="http://www.cambridge.org/us/catalogue/catalogue.asp?isbn=0521663504">Purely Functional Data Structures</a> port to F#.  </li><li>Speaking of F#, Brian has a <a href="http://lorgonblog.spaces.live.com/blog/cns!701679AD17B6D310!282.entry">teaser screenshot</a> of F# upcoming CTP. However, he chooses the New Item dialog to tease, which looks pretty much like the current new item dialog (the new one does have fewer F# templates). However, if you look in the Solution Explorer, you'll notice a real "References" node. No more #I/#R! Yeah! </li><li>The interactive graphic in <a href="http://www.wired.com/special_multimedia/2008/st_infoporn_1607">Kevin Kelly's One Machine article</a> is fascinating. It really highlights that the vast vast vast majority of power, storage, CPU cycles and RAM come from personal computers on the edge. Even in bandwidth, where PC's still have the highest share but it looks to be around 1/3rd, the aggregate of all edge devices (PCs, mobile phones, PDAs, etc.) still dominates the data centers. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1156</wp:post_id>
		<wp:post_date>2008-07-21 12:05:43</wp:post_date>
		<wp:post_date_gmt>2008-07-21 19:05:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>five-minutes-past-noon-coffee-170</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[a18942b5-00eb-411c-854e-70175a80daa5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Five+Minutes+Past+Noon+Coffee+170]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/21/Five+Minutes+Past+Noon+Coffee+170]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 171</title>
		<link>http://devhawk.net/2008/07/25/morning-coffee-171/</link>
		<pubDate>Fri, 25 Jul 2008 18:41:11 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://e6c07f23-9453-4785-9968-c7c62e983395</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>Big news for IronRuby out of OSCON. <a href="http://www.iunknown.com/2008/07/ironruby-at-oscon.html">John</a> and <a href="http://blog.jredville.com/2008/07/24/ironruby-gives-back-to-rubyspec/">Jim</a> have the details. Congrats to the IronRuby folks on reaching these milestones and paving the way for others (i.e. IPy) to follow some of the same paths.  </li><li>One of those OSCON announcements, is a project my teammate Jimmy Schementi has been working on: <a href="http://schementi.com/silverline">Silverline</a>, which "<a href="http://blog.jimmy.schementi.com/2008/07/browser-meet-ruby-on-rails.html">let's you write Rails code that can run on the client</a>".  </li><li>Shri Borde - the dev manager for IPy, IRuby and F# - <a href="http://blogs.msdn.com/shrib/archive/2008/07/24/cls-compilation-of-ironpython.aspx">tackles a tricky subject</a> of static compilation of dynamic Python code. This came up on the mailing list recently as one of the outstanding requests for IPy to do is support custom attributes, which requires static compilation. Shri lays out some of the big issues with this approach. However, the community has been fairly clear on this, so it's obviously something we need to look at.  </li><li>I met someone from MS Research at the MS Product Fair who pointed me to the Institute for <a href="http://www.roboteducation.org/">Personal Robots in Education</a>, a joint effort between <a href="http://www.gatech.edu">Georgia Tech</a> and <a href="http://www.brynmawr.edu/">Bryn Mawr College</a> and sponsored by <a href="http://research.microsoft.com/">Microsoft Research</a>. Their <a href="http://wiki.roboteducation.org/Myro">Myro software</a> (myro == my robot) is written in CPython, but there's an effort underway (aka <a href="http://wiki.roboteducation.org/Myro_3.0">Miro 3.0</a>) to build a .NET version that uses IronPython. Must investigate.  </li><li>Seshadri <a href="http://blogs.msdn.com/seshadripv/archive/2008/07/23/how-to-create-objects-of-types-defined-in-c-inside-a-hosted-python-script.aspx">shows</a> how easy it is to extend C# types in IronPython. It's also shows how simple it is to host DLR code in your app - it's like 6 lines of code!  </li><li><a href="http://baoilleach.blogspot.com/2008/07/review-of-ironpython-in-action.html">Early reviews</a> of <a href="http://www.manning.com/foord/">IronPython in Action</a> are good.   </li><li>If you want to run an IronPython IDE in your browser with Silverlight, check out <a href="http://code.google.com/p/silvershell/">SilverShell</a> from Dan Eloff.  </li><li>The XNA team has <a href="http://creators.xna.com/en-us/XboxLIVECommunityGames">announced their business plans</a> for community games. Basically, you set a price point between 200 and 800 points (aka between $2.50 and $10) and receive a "baseline" of 70% of the revenue the game generates. More details are available in the <a href="http://creators.xna.com/en-us/XboxLIVECommunityGames">FAQ</a>. This is pretty excited. I'd like to build some co-op kids games.  </li><li>Speaking of XNA, Caligari is now offering <a href="http://www.caligari.com/Products/trueSpace/tS75/brochure/intro.asp?Cate=BIntro">TrueSpace 7.6</a> for free . <a href="http://letskilldave.com/blog/truespace-7-6-is-available-for-free-and-why-you-should-care/">David Weller</a> and <a href="http://www.virtualrealm.com.au/blogs/caligari-truespace-7-6-released-for-free/">Glenn Wilson</a> provide an XNA viewpoint on the announcement, Chris Pendleton <a href="http://blogs.msdn.com/virtualearth/archive/2008/07/23/announcing-truespace-for-virtual-earth-3d-development.aspx">shows</a> how to upload your models to VirtualEarth.  </li><li>Congrats to the CodePlex team on <a href="http://blogs.msdn.com/codeplex/archive/2008/07/23/codeplex-project-discussions-mailing-lists.aspx">their latest drop</a>, which features that a cool new feature - <a href="http://www.codeplex.com/CodePlex/Wiki/View.aspx?title=Mailing%20Lists&amp;referringTitle=CodePlex%20Documentation">Mailing Lists</a>! IronPython has had a <a href="http://lists.ironpython.com/listinfo.cgi/users-ironpython.com">Mailman mailing list</a> for years, so I'm not sure we'll use this feature on IPy, but I'll investigate it  </li><li>Two PDC notes: First, Rick Rashid - VP of MS Research - will be <a href="http://www.microsoftpdc.com/View.aspx?post=91d46819-8472-40ad-a661-2c78acb4018c:8763070">delivering a PDC keynote</a>. Second, the PDC team has put up a video podcast on <a href="http://channel9.msdn.com/posts/Dan/Countdown-To-PDC2008--Producing-a-Ginormous-Conference-in-10-Minutes-or-Less/">Producing a Ginormous Conference in 10 Minutes or Less!</a> It's the "inaugural episode" so watch for more Countdown to PDC video podcast episodes in the future.  </li><li>I recently discovered Chris Smith's F# blog. He's got recent posts on <a href="http://blogs.msdn.com/chrsmith/archive/2008/07/10/mastering-f-lists.aspx">Mastering F# Lists</a> and <a href="http://blogs.msdn.com/chrsmith/archive/2008/06/25/some-guidelines-for-readable-f-code.aspx">Guidelines for Readable F# code</a>. For the F# novice, check out his F# in 20 Minutes posts (<a href="http://blogs.msdn.com/chrsmith/archive/2008/05/02/f-in-20-minutes-part-i.aspx">part one</a>, <a href="http://blogs.msdn.com/chrsmith/archive/2008/05/09/f-in-20-minutes-part-ii.aspx">part two</a>)  </li><li>Pat Helland is <a href="http://blogs.msdn.com/pathelland/archive/2008/07/23/transferring-to-the-sql-team.aspx">moving to the SQL team</a>. Good luck Pat!  </li><li>I like Nick Malik's formal definition of use cases, but I can't help be reminded of Charlie Alfred's <a href="http://msdn.microsoft.com/en-us/library/aa480060.aspx">Value-Driven Architecture</a> article in <a href="http://msdn.microsoft.com/en-us/library/aa480034.aspx">Architecture Journal 5</a> where he said use cases were "easy to teach and explain" but that "if simplicity were the only goal that counted, we'd all still be walking or riding horses to get from one place to another."</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1157</wp:post_id>
		<wp:post_date>2008-07-25 11:41:11</wp:post_date>
		<wp:post_date_gmt>2008-07-25 18:41:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-171</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[Open Source]]></category>
		<category domain="post_tag" nicename="pdc08"><![CDATA[PDC08]]></category>
		<category domain="post_tag" nicename="robotics"><![CDATA[Robotics]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="post_tag" nicename="xna"><![CDATA[XNA]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[e6c07f23-9453-4785-9968-c7c62e983395]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+171]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/25/Morning+Coffee+171]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DevHawk&#039;s Slightly Useful Powershell Configuration</title>
		<link>http://devhawk.net/2008/07/28/devhawks-slightly-useful-powershell-configuration/</link>
		<pubDate>Mon, 28 Jul 2008 09:52:25 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://a64069d4-9084-46d2-b0c9-2cbf350b3d75</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Since folks were interested in <a href="http://devhawk.net/2008/02/28/DevHawks+Inessential+List+Of+Tools.aspx">my favorite tools</a>, I thought I'd blog how I have PowerShell configured. I'm not an ultra-power user, but I hold my own and hopefully you can use some of this configuration for yourself. Please tell me you're not still using CMD. </p><p>First, I use a trick I <a href="http://www.winterdom.com/weblog/2008/01/24/ModifyingTheHomeInPowerShell.aspx">picked up from Tomas Restrepo</a> to change your home directory and profile script. Here's my Microsoft.PowerShell_profile.ps1 file (in the WindowsPowerShell subdirectory of My Documents) </p><pre class="brush: powershell">
# reset $HOME and $PROFILE variables
set-variable -name HOME -value "D:HPierson.Files" -force  
(get-psprovider FileSystem).Home = $HOME  
set-variable -name Profile -Value "$HomeScripts_profile.ps1"

# Run the $PROFILE script
. $profile
</pre><p>By default, PS uses the user's personal directory (c:usershpierson in my case) as the home directory and the aforementioned filename for the profile script. Personally, I like to keep all "real" data off my boot partition so that I don't have to back it all up when I repave. So my "real" home location is d:HPierson.Files. The above script sets both the $HOME variable and file system home property to this directory. It also resets the $PROFILE variable to a script in my $homeScripts folder and runs it.</p><p>My $PROFILE script does several things of note:</p><ul><li>It adds the aforementioned $homeScripts folder to the path. My utilities folder is a permanent part of the path, put I only add the scripts folder when I'm actually running PS.  </li><li>If I'm running as administrator, I set the background color of the console window to red. I think I picked up this script from <a href="http://bradwilson.typepad.com/">Brad Wilson</a> at some point.  </li><li>Set location to home, otherwise when I start PS as admin, it starts in c:winsys32.  </li><li>I have a simple prompt script file that displays current folder, the current command number and a list of yellow plus signs indicating how deep I am in the directory stack. To get it to work, I have to remove the standard prompt function, which I do in $PROFILE.  </li><li>I can't ever remember the space between "cd" and "..", so I wrote a simple function called "cd.." that executes "cd ..".  </li><li>I have a su function that leverages the <a href="http://technet.microsoft.com/en-us/magazine/cc162321.aspx">Script Elevation PowerToys</a>. If you pass in a command, it executes it with elevated credentials. If you just execute su, it runs an elevated PowerShell.  </li><li>I use <a href="http://www.7-zip.org/">7-zip</a> for my compression needs, including the 7za command line app. However, PS has issues w/ executing an exe that starts with a number. So I aliased 7za as "zip". <strong>UPDATE: </strong>Tomas <a href="http://twitter.com/tomasrestrepo/statuses/870758014">points out</a> that you can prepend an ampersand to force execution, so I could have typed "&amp;7za". I forgot that when I created the alias and am now used to using zip, so I'm not going to change it. But I thought you should know. </li><li>I have an ever-changing set of aliases, depending on my needs. Currently, I alias "ipy", "cpy", "fsi", "fsc", "devenv" and "chiron" to their fully path-qualified equivalents, so I can run them from anywhere without having to add their respective folders to the path.</li></ul><p>I don't set vsvars in the $profile script, but I do have a copy of <a href="http://www.tavaresstudios.com/Blog/post/The-last-vsvars32ps1-Ill-ever-need.aspx">the one Chris Tavares wrote</a> in my scripts folder, so I can set up a VS environment in a moments' notice.</p><p>Also, I put PowerShell on the Vista quick launch bar, so I can bring it up by typing Win-2.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1158</wp:post_id>
		<wp:post_date>2008-07-28 09:52:25</wp:post_date>
		<wp:post_date_gmt>2008-07-28 09:52:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devhawks-slightly-useful-powershell-configuration</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[a64069d4-9084-46d2-b0c9-2cbf350b3d75]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[DevHawks+Slightly+Useful+Powershell+Configuration]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/28/DevHawks+Slightly+Useful+Powershell+Configuration]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2087</wp:comment_id>
			<wp:comment_author><![CDATA[Philip Craig]]></wp:comment_author>
			<wp:comment_author_email>philip@pobox.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>147.62.42.119</wp:comment_author_IP>
			<wp:comment_date>2008-07-28 10:23:03</wp:comment_date>
			<wp:comment_date_gmt>2008-07-28 17:23:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Any chance of pasting the actual $profile for us to work on?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2088</wp:comment_id>
			<wp:comment_author><![CDATA[Philip Craig]]></wp:comment_author>
			<wp:comment_author_email>philip@pobox.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>147.62.42.119</wp:comment_author_IP>
			<wp:comment_date>2008-07-28 10:23:51</wp:comment_date>
			<wp:comment_date_gmt>2008-07-28 17:23:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Would it be possible to post the actual $profile for us to see/copy/paste?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2089</wp:comment_id>
			<wp:comment_author><![CDATA[orcmid]]></wp:comment_author>
			<wp:comment_author_email>dennis.hamilton@acm.org</wp:comment_author_email>
			<wp:comment_author_url>http://orcmid.com/BlunderDome/clueless</wp:comment_author_url>
			<wp:comment_author_IP>71.35.110.8</wp:comment_author_IP>
			<wp:comment_date>2008-07-28 12:20:16</wp:comment_date>
			<wp:comment_date_gmt>2008-07-28 19:20:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[yes, I am still using CMD!  (Simple reason for it, not important here.)

But I have flagged this one as good things to do if and when I succumb to PowerShell.  Also, these are all good things to do in my various SFA and SUA shells too, as I get more into those subsystems.  (CMD and C Shell, I really am a throw-back!)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2090</wp:comment_id>
			<wp:comment_author><![CDATA[Richard Rousseau]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.richardrousseau.com</wp:comment_author_url>
			<wp:comment_author_IP>67.152.152.11</wp:comment_author_IP>
			<wp:comment_date>2008-07-30 07:42:18</wp:comment_date>
			<wp:comment_date_gmt>2008-07-30 14:42:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You should give the Powershell Community Extensions a look.  They have functions that cover the CD.. and CD... as well as zip functions and many more.

http://www.codeplex.com/PowerShellCX/Wiki/View.aspx?title=PSCX%201.1.1%20Features&referringTitle=Home]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2091</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-07-30 11:29:48</wp:comment_date>
			<wp:comment_date_gmt>2008-07-30 18:29:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Richard, I keep meaning to take a look at the PS Community Extensions. Just haven't made the time yet. Thanks for the heads up.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Some Powershell Scripts</title>
		<link>http://devhawk.net/2008/07/28/some-powershell-scripts/</link>
		<pubDate>Mon, 28 Jul 2008 16:26:24 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://c5d2c168-4ed0-4e2e-b78f-a4ca4ba80695</guid>
		<description></description>
		<content:encoded><![CDATA[<p>By popular demand, I uploaded a bunch of my scripts to <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell">my SkyDrive</a>. Included are:</p><ul><li><a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/Set%20Powershell%20Home.zip">Set Powershell Home</a> - this is actually a zip file that contains the profile redirect script. Unzip this in your Documents folder and change the path in Microsoft.PowerShell_profile to where ever you want your profile and home directories to live.</li><li><a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/%7C_profile.ps1">_profile</a> - my "real" profile script. Note, the su function requires the <a href="http://technet.microsoft.com/en-us/magazine/cc162321.aspx">Script Elevation PowerToys</a> in order to work. Also, all the various aliases are hard coded to their location on my machine. You'll probably want to change them.</li><li><a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/prompt.ps1">prompt</a> - my prompt script</li><li><a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/prepend-path.ps1">prepend-path</a> - a script to add a directory to start of my path</li><li><a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/append-path.ps1">append-path</a> - like above, but adds the directory to the end of the path</li><li><a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/append-path-perm.ps1">append-path-perm</a> - like append-path, but permanently updates the path in the registry </li></ul><p>Enjoy.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1159</wp:post_id>
		<wp:post_date>2008-07-28 16:26:24</wp:post_date>
		<wp:post_date_gmt>2008-07-28 16:26:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>some-powershell-scripts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[c5d2c168-4ed0-4e2e-b78f-a4ca4ba80695]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Some+Powershell+Scripts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/28/Some+Powershell+Scripts]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2092</wp:comment_id>
			<wp:comment_author><![CDATA[Richard]]></wp:comment_author>
			<wp:comment_author_email>richard@rjcox.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>217.146.112.218</wp:comment_author_IP>
			<wp:comment_date>2008-07-30 10:09:10</wp:comment_date>
			<wp:comment_date_gmt>2008-07-30 17:09:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[From profile.ps1:
> cmd.exe /c color 4f
You can control the colours that PSH's console host uses by assigning to the members of $Host.PrivateData.
E.g. $Host.PrivateData.WarningForegroundColor = "green"
(Each is of type [System]::ConsoleColor)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2093</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-07-30 11:32:21</wp:comment_date>
			<wp:comment_date_gmt>2008-07-30 18:32:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Richard, Thanks. However, that doesn't appear to let me set the background for the command shell window as a whole though. Only, the Warning, Error, Debug, Verbose and Progress fore & background colors. I can see the value of that, but my goal with that line of script is to set the entire background to red.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2094</wp:comment_id>
			<wp:comment_author><![CDATA[Tommy Williams]]></wp:comment_author>
			<wp:comment_author_email>twwjr@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://twwilliams.com/blog/</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-07-31 09:42:06</wp:comment_date>
			<wp:comment_date_gmt>2008-07-31 16:42:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you want to change the settings for the console, use $host.ui.rawui.foregroundcolor and .background color. I have functions like this:

function green { $host.ui.rawui.foregroundcolor = "Green"; $host.ui.rawui.backgroundcolor = "Black" }

function yellow { $host.ui.rawui.foregroundcolor = "Yellow"; $host.ui.rawui.backgroundcolor = "Black" }
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2095</wp:comment_id>
			<wp:comment_author><![CDATA[Richard]]></wp:comment_author>
			<wp:comment_author_email>richard@rjcox.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>217.146.112.218</wp:comment_author_IP>
			<wp:comment_date>2008-08-01 06:41:04</wp:comment_date>
			<wp:comment_date_gmt>2008-08-01 13:41:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[> However, that doesn't appear to let me set the background for the command shell window as a whole though

Follow it with a Clear-Host

My current^h finally implemented elevated PSH (use scope modifiers so don't just create a local variable in the condition block containing this):
$host.UI.RawUI.Backgroundcolor="DarkGray"
$host.UI.RawUI.Foregroundcolor="Red"
clear-host
write-host "`n** Elevated Session **`n" -foreground DarkRed -background Yellow
$global:ConsolePromptColour = "Red" # Override prompt function's default
$global:ConfirmPreference = "Medium"
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2096</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.108</wp:comment_author_IP>
			<wp:comment_date>2008-08-01 13:10:52</wp:comment_date>
			<wp:comment_date_gmt>2008-08-01 20:10:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Tommy and Richard! I updated my _profile script to use instead of $host.UI.RawUI.Backgroundcolor cmd.exe /c color. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IPy Post 2.0 Roadmap Clarifications</title>
		<link>http://devhawk.net/2008/07/30/ipy-post-2-0-roadmap-clarifications/</link>
		<pubDate>Wed, 30 Jul 2008 15:43:40 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://79c950fa-5fc9-46b9-b17a-fda01477f3ae</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Two weeks ago, I posted a <a href="http://devhawk.net/2008/07/17/IronPython+Post+20+Roadmap.aspx">roadmap</a> for where IPy is heading after we get 2.0 out the door later this year. I got two questions in <a href="http://devhawk.net/CommentView,guid,663bc86a-8185-4c5b-8a5b-c01634a1b1bc.aspx#commentstart">the comments</a> that I wanted to address. </p><ul><li><a href="http://www.ironpythoninaction.com">Michael Foord</a> wants to know "will you actively maintain IronPython 2 and IronPython 3 in parallel?"  </li><li><a href="http://francois.schnell.free.fr">francois</a> wants to know for the VS integration "Will it be necessary to buy VS standard/Pro to benefit from it?"</li></ul><p>As to the first question, Curt Hagenlocher (aka <a href="http://blogs.msdn.com/curth/">Iron Curt</a>) from the IPy dev team <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2008-July/007728.html">wrote the following</a> on the IPy mailing list:</p><blockquote><p>"I think it's fair to say that this will be driven mostly by the needs of our community and of the larger Python community. By the time IronPython 3.0 ships, it's likely that CPython 3.0 will have been out for a year or even longer, and we'll have a much better idea of what the uptake is like in the community."</p></blockquote><p>Let me second Curt's comment. I used to think getting to 3.0 as quickly as possible was one of our highest priorities. However, it looks like the CPy 3.0 uptake rate is a real open question right now. If the Python community takes 3-4 years to fully embrace 3.0 (as <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2008-July/007729.html">Michael suggested</a>) then I don't see how we will have any choice but to maintain both in parallel. It also suggests that better 2.6 support may be more important than 3.0 support, at least for the next 18-24 months.</p><p>Francois's question is much easier: No, we will not require you to buy any version of VS in order to get IPy VS integration. It will work with the <a href="http://msdn.microsoft.com/en-us/vstudio/bb510103.aspx">Visual Studio Shell</a>, much like the current IronPythonStudio VSX sample does today. </p><p>For out first release, we are focusing on the integrated mode scenario. This means that if you own a copy of VS (other than express), the IPy tools will snap into your existing VS installation. If you don't own a copy of VS, you'll be able to download and install the integrated shell for free and our IPy tools will snap into that. Down the road, we might investigate an "IronPython Express" version that leverages the isolated shell, but that's not a priority right now.</p><p>The VS shell <a href="http://msdn.microsoft.com/en-us/vstudio/bb856491.aspx">includes support</a> for the WinForms and WPF designers and we expect to support both eventually. WPF support is fairly straightforward since the designer works with XAML files rather than code files. WinForms support is harder, since it wants to emit statically typed code into code files - a neat trick for a dynamically typed language like Python. The current implementation that the IronPythonStudio sample uses requires us to inject a bunch of custom type hints disguised as python @decorators in order to round trip between the designer and code views. However, we're not bringing those custom type hints forward in the 2.0 release so we'll need to find a better way to integrate with the WinForms designer. </p><p>As for web apps, ASP.NET support is currently on the back burner while Jimmy and David <a href="http://blog.jimmy.schementi.com/2008/07/aspnet-and-dynamic-languages.html">drink coffee and expensive juice</a> while they figure out the ASP.NET / dynamic language story. We also want to support Silverlight development for IronPython in VS, but I'm exactly sure how we get Silverlight designer support yet. <a href="http://go.microsoft.com/fwlink/?LinkId=120319">Silverlight Tools for VS08</a> today require VS Standard, so I'm guessing there's some leg work to do if we want to support the SL designer in VS Shell.</p><p>As always, feel free to ask here or on <a href="http://lists.ironpython.com/listinfo.cgi/users-ironpython.com">the mailing list</a> if you've got any questions or feedback on our plans. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1160</wp:post_id>
		<wp:post_date>2008-07-30 15:43:40</wp:post_date>
		<wp:post_date_gmt>2008-07-30 15:43:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ipy-post-2-0-roadmap-clarifications</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[79c950fa-5fc9-46b9-b17a-fda01477f3ae]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IPy+Post+20+Roadmap+Clarifications]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/30/IPy+Post+20+Roadmap+Clarifications]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2097</wp:comment_id>
			<wp:comment_author><![CDATA[francois]]></wp:comment_author>
			<wp:comment_author_email>schneo@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://francois.schnell.free.fr</wp:comment_author_url>
			<wp:comment_author_IP>82.227.72.2</wp:comment_author_IP>
			<wp:comment_date>2008-07-31 13:51:40</wp:comment_date>
			<wp:comment_date_gmt>2008-07-31 20:51:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for these informations, I will look forward for this VS integration :) ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Monadic Philosophy Part 2 - The LINQ Monad</title>
		<link>http://devhawk.net/2008/07/30/monadic-philosophy-part-2-the-linq-monad/</link>
		<pubDate>Wed, 30 Jul 2008 16:53:19 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://6ce19647-2f6f-4d41-aff6-b202df528d21</guid>
		<description></description>
		<content:encoded><![CDATA[If you don't come from a <a href="http://en.wikipedia.org/wiki/Monad_%28category_theory%29">math</a> or <a href="http://en.wikipedia.org/wiki/Monad_%28symbol%29">philosophy</a> background (and I don't) "monad" sounds like a made-up word. Of course, understanding OO's use of terms like "class" and "object" can be hard to grok at first too. But at least those terms have some grounding in real-world concepts that non-math geeks come across. Because I couldn't draw an analogy of monads to anything at first, it made grasping the concept of monads very hard for me.

It's such a unfamiliar word that the F# team doesn't like it either:
<blockquote>"[W]hen the designers of F# talked with the designers of Haskell about this, they agreed that the word <em>monad</em> is a bit obscure and sounds a little daunting and that using other names might be wise."
[F# Workflows and Haskell Monads, <a href="http://www.expert-fsharp.com/default.aspx">Expert F#</a>, p232]</blockquote>
The F# team thought about calling them workflows, but settled on <em><a href="http://research.microsoft.com/fsharp/manual/spec2.aspx#_Toc202383771">computation expression</a></em>. Frankly, I don't like these names much better. Workflow is too easily confused with <a href="http://msdn2.microsoft.com/en-us/library/bb628617.aspx">WF</a> and if the term computation expression is way to generic. Isn't everything in programming a computation expression? I think I'll just stick with monad.

Of course, if there was a short, pithy way of describing a monad, I'm sure <em>that's what we'd call them</em>. It's a kinda complicated idea, so there's no simple two or three word phrase that accurately describes it. "Sequential computation with context flow" is the best I could come up with. It's a crappy description, but here's an elegant example that most .NET programmers are probably already familiar with.
<pre class="brush: csharp">var Orders = new List&lt;Order&gt;()

//code to populate orders omitted

var q = Orders
    .Where(x =&gt; x.OrderDate &lt; DateTime.Now)
    .OrderBy(x =&gt; x.OrderDate)
    .Select(x =&gt; new {ID = x.OrderID, Date = x.OrderDate})</pre>
Yes it's true: LINQ is a monad. The two basic concepts about a monad from my description above is that it's a) a sequence of operations and b) there's a context that flows from operation to operation. We see both here in this simple LINQ query. I realize I'm using what looks like a LINQ to SQL query here, but for the sake of argument let's assume that this is all happening in memory.

The query is a sequence of three operations: Where, OrderBy and Select. LINQ has a set of standard query operators that you can mix and match in whatever order you need to. Part of the monad's job is to enforce the sequence of actions. For C#, that's not really a big deal, since it has explicit sequencing already. However, other languages like Haskell use lazy evaluation, meaning there is no explicit order of execution. Many lazy evaluation languages use monads in areas, such as I/O, where order of execution matters.

While C# doesn't need any help to enforce execution order, monads are very useful in the way they flow context between the operations. In the case of LINQ, all the standard query operators take an IEnumerable&lt;T&gt; as their first parameter and return an IEnumerable&lt;T&gt;. Since they have the same inputs and outputs, they can be plugged together in whatever order is required. Yet, you don't see any reference to GetEnumerator or the enumerator objects they return in the LINQ code above. All that code is hidden inside the LINQ query operators so the LINQ developer doesn't have to look at it.

If you squint hard enough, IEnumerable kinda looks like a functional construct. It exposes a single method (GetEnumerator) and can be passed around much the same way functional languages like F# pass around first-order functions. Furthermore, the result of calling GetEnumerator is an IEnumerator object that likewise exposes one main function (MoveNext). In other words, you can think of IEnumerable sort of like a function that returns a function that you call to iterate the collection.

So to sum up, a monad is a sequence of operations in a specific order that automatically flows context from one operation to the next. In the LINQ example, C# has built-in constructs - IEnumerable&lt;T&gt;, foreach and yield return - that makes the monad seem less foreign (which is why I used it as my first example!) However, as we'll see, the concepts of sequence and context flow in a monad still hold even if we're not using built in features of C# to implement them.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1161</wp:post_id>
		<wp:post_date>2008-07-30 09:53:19</wp:post_date>
		<wp:post_date_gmt>2008-07-30 16:53:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>monadic-philosophy-part-2-the-linq-monad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="monads"><![CDATA[Monads]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[6ce19647-2f6f-4d41-aff6-b202df528d21]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Monadic+Philosophy+Part+2+The+LINQ+Monad]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/30/Monadic+Philosophy+Part+2+The+LINQ+Monad]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2098</wp:comment_id>
			<wp:comment_author><![CDATA[Barry Kelly]]></wp:comment_author>
			<wp:comment_author_email>barry.j.kelly@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://barrkel.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>143.186.50.11</wp:comment_author_IP>
			<wp:comment_date>2008-07-30 12:33:42</wp:comment_date>
			<wp:comment_date_gmt>2008-07-30 19:33:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think programmers would understand monads better if they were described as a design pattern - anything that follows the monad rules is a monad, effectively.

Monads are that design pattern that permits a library designer to insert himself between a user's data and the actions a user wants to apply to that data. Rather than acting directly on data, the data is stuffed into a wrapper object, and the action desired is passed as an argument; the monad then returns a new monad that has logically applied the desired action to the wrapped-up data. The whole point behind the pattern is that the monad can subtly alter the action depending on the purpose of the monad.

For a List monad, it's going to apply the operation not just to one element, but to every element in the list. For a Mabye monad, it's only going to apply the operation if the wrapper actually holds any data, and not if otherwise. For an IO monad, it's going to return a value which logically contains a set of imperative instructions that, when finally interpreted after being returned by the main function, will perform operations with side-effects.

The basic *design pattern* for them all is a wrapper object that takes in functions and returns a new wrapper that has logically applied the function to the contained data.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2099</wp:comment_id>
			<wp:comment_author><![CDATA[Haskeller]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>88.100.241.85</wp:comment_author_IP>
			<wp:comment_date>2008-07-30 13:38:53</wp:comment_date>
			<wp:comment_date_gmt>2008-07-30 20:38:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I hate seeing these Microsoft shits renaming functional theory, like its Visual Basic.... ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2100</wp:comment_id>
			<wp:comment_author><![CDATA[atp]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.112.206.130</wp:comment_author_IP>
			<wp:comment_date>2008-07-31 05:56:59</wp:comment_date>
			<wp:comment_date_gmt>2008-07-31 12:56:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Don't fall into the newbie trap of thinking that monads are about sequencing operations.  They aren't.  A large number of monads (for example, Reader) are commutative and do not enforce any sort of statement ordering.

It seems most people are first introduced to the notion of monads when attempting to do purely functional IO or stateful computations, which is too bad.  Not only are these monads extremely complex (causing the beginner to think monads are more complex in general than they really are) but they are also not representatitive.

I think the Maybe monad and List monad are better "first monads" than State or IO.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Monadic Philosophy</title>
		<link>http://devhawk.net/2008/07/29/monadic-philosophy/</link>
		<pubDate>Wed, 30 Jul 2008 00:10:16 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://2ab057d0-cfbb-4941-a275-e5decbd1838c</guid>
		<description></description>
		<content:encoded><![CDATA[<p>(Since I accidentally <a href="http://devhawk.net/2008/07/30/Pushed+The+Wrong+Button.aspx">published part one</a> of this series a few minutes ago, I figured I might as well start publishing the series.)</p><p>If you start learning functional programming, eventually you'll come across the idea of a <a href="http://en.wikipedia.org/wiki/Monad_%28functional_programming%29">monad</a>. Coming from the object/imperative world of languages like C#, I've had a hard time wrapping my head around this concept. There's no shortage of <a href="http://en.wikipedia.org/wiki/Monad_%28functional_programming%29#External_links">monad tutorials</a> out there, but most use <a href="http://www.prairienet.org/~dsb/monads.htm">Haskell's IO</a> as the prototypical example of a monad. Given that I don't know Haskell very well, I found it hard to separate the Haskell stuff from monad stuff. So I set monads on the back burner and decided not to worry about them.</p><p>However, all that changed when Stephan Tolksdorf alerted me to his very cool monadic parser combinator library <a href="http://www.quanttec.com/fparsec">FParsec</a>. I found the FParsec parsers much easier to read <a href="http://devhawk.net/2007/12/10/Practical+Parsing+In+F.aspx">my F# parser efforts</a>, so I became very interested in monadic parser combinators. As you might guess, a "monadic parser combinator library" makes heavy use of monads. Time to switch burners.</p><p>The problem with learning monads with FParsec is that it's really designed for production use. I needed to break monads down to first principles, so I rolled my own monadic parser library. Make no mistake, if I were looking to build a production parser in F# right now, I'd use with FParsec. My monadic parser library might "get there" eventually, but right now it's a toy. </p><p>Over a series of posts, I'm going to describe what I know about monads. I didn't set out to write a tutorial on monads - as I said, there are plenty of them out there. However, I found most of the the many monad tutorials I read lacking because the did a good job explaining the "how", but not such a good job on the "why". Coming from an imperative world, I wanted to understand the philosophy better. That being said, there's a lot of tutorial in and around the philosophy. Hopefully, you'll find both useful.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1162</wp:post_id>
		<wp:post_date>2008-07-29 17:10:16</wp:post_date>
		<wp:post_date_gmt>2008-07-30 00:10:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>monadic-philosophy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="monads"><![CDATA[Monads]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[2ab057d0-cfbb-4941-a275-e5decbd1838c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Monadic+Philosophy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/30/Monadic+Philosophy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2101</wp:comment_id>
			<wp:comment_author><![CDATA[ilanchelian]]></wp:comment_author>
			<wp:comment_author_email>ilanchelian.kannan@cognizant.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.99.197.2</wp:comment_author_IP>
			<wp:comment_date>2008-07-30 06:03:13</wp:comment_date>
			<wp:comment_date_gmt>2008-07-30 13:03:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It is interesting to know that you are going to blog about monads. i am curiously looking forward.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2102</wp:comment_id>
			<wp:comment_author><![CDATA[Anthony Mills]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://amills.net/</wp:comment_author_url>
			<wp:comment_author_IP>66.46.108.118</wp:comment_author_IP>
			<wp:comment_date>2008-07-30 07:26:34</wp:comment_date>
			<wp:comment_date_gmt>2008-07-30 14:26:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I remember having trouble with monads until I understood that monads made things quasi-imperative by taking advantage of the fact that in order to evaluate the body of a function, you have to evaluate the parameters first.

So, imperative form:

function1(state); function2(state); function3(state);

And monadic form:

function3(function2(function1(state), state), state)

Something like that, anyway. The point being, in both forms function1 must execute before function2, which must execute before function3.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Pushed the Wrong Button</title>
		<link>http://devhawk.net/2008/07/29/pushed-the-wrong-button/</link>
		<pubDate>Tue, 29 Jul 2008 17:06:04 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://16a5e140-f18a-46ea-a8a1-cf2648b3ca6f</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I'm working on a new series of posts on parser monads, but I accidentally pushed out part thre (I hit "Publish" instead of "New" in WL Writer). I can't stop you from reading it, as it's already in Google and FeedBurner's cache. However, if you want any context at all, do yourself a favor and wait until I publish parts one and two first!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1163</wp:post_id>
		<wp:post_date>2008-07-29 17:06:04</wp:post_date>
		<wp:post_date_gmt>2008-07-29 17:06:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pushed-the-wrong-button</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[16a5e140-f18a-46ea-a8a1-cf2648b3ca6f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Pushed+The+Wrong+Button]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/07/30/Pushed+The+Wrong+Button]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>McCain&#039;s Dick Move of the Week</title>
		<link>http://devhawk.net/2008/08/01/mccains-dick-move-of-the-week/</link>
		<pubDate>Fri, 01 Aug 2008 13:39:16 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://be8c3c37-012b-499f-a1d2-1db86c5771b5</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://www.thedailyshow.com/video/index.jhtml?videoId=178207&amp;title=dick-move-of-the-week-mccain">This segment</a> on last night's Daily Show was fantastic. </p><p><embed name="comedy_central_player" pluginspage="http://www.macromedia.com/go/getflashplayer" align="middle" src="http://www.thedailyshow.com/sitewide/video_player/view/default/swf.jhtml" width="332" height="316" type="application/x-shockwave-flash" allownetworking="external" allowscriptaccess="always" bgcolor="#cccccc" quality="high" flashvars="videoId=178207"></embed></p><p>At the rate McCain's going, Jon Stewart is going to have to change this segment to "McCain's Dick Move of the Day". I don't know which is more embarrassing, McCain's campaign or the mainstream media coverage of the campaign. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1164</wp:post_id>
		<wp:post_date>2008-08-01 13:39:16</wp:post_date>
		<wp:post_date_gmt>2008-08-01 13:39:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mccains-dick-move-of-the-week</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="politics"><![CDATA[Politics]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[be8c3c37-012b-499f-a1d2-1db86c5771b5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[McCains+Dick+Move+Of+The+Week]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/08/01/McCains+Dick+Move+Of+The+Week]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2103</wp:comment_id>
			<wp:comment_author><![CDATA[Dale Churchward]]></wp:comment_author>
			<wp:comment_author_email>dale.churchward@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url>http://halfmybrain.spaces.live.com/</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-08-01 15:34:00</wp:comment_date>
			<wp:comment_date_gmt>2008-08-01 22:34:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah, McCain made a mistake there. Although the part about Obama being the biggest celebrity in the world, but not ready to rule is dead on. :-)

Of course, it would be no fun if we all agreed.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2104</wp:comment_id>
			<wp:comment_author><![CDATA[BigJ]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-08-01 19:07:27</wp:comment_date>
			<wp:comment_date_gmt>2008-08-02 02:07:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So, a politician who's not afraid to tick off a powerful, influential, big money contributor.  Yeah, a real d---.  Too bad there aren't more like him.

Besides, this is tantamount to saying that comparing someone to Barry Obama is insulting.  Now I know.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2105</wp:comment_id>
			<wp:comment_author><![CDATA[RandyG]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>205.203.136.136</wp:comment_author_IP>
			<wp:comment_date>2008-08-05 10:49:12</wp:comment_date>
			<wp:comment_date_gmt>2008-08-05 17:49:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I was planning on voting for Obama, but he's proven himself to be such a pompous dick himself that I just can't bring myself to do it. He'll probably win anyway, but not with my help at least.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2106</wp:comment_id>
			<wp:comment_author><![CDATA[Jonathan Birge]]></wp:comment_author>
			<wp:comment_author_email>birge@mit.edu</wp:comment_author_email>
			<wp:comment_author_url>http://scripts.mit.edu/~birge/blog</wp:comment_author_url>
			<wp:comment_author_IP>18.62.15.23</wp:comment_author_IP>
			<wp:comment_date>2008-09-02 13:45:18</wp:comment_date>
			<wp:comment_date_gmt>2008-09-02 20:45:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The problem with the Daily Show is that John Stewart makes good points, but can't resist behind such a smart ass little dick himself that it ruins whatever point he had. He's like the kid in school who would win arguments by repeating everything you said so that you lost your cool. You look stupid, but he hasn't actually said anything intelligent. Same with his critique of McCain. Sure, McCain was wrong with those spots, but Stewarts entire tirade against him was only made possible by cheap shots on out of context footage and a sycophantic audience of the kind of douchebag zealots who expect to find in Manhattan in the middle of the day without somewhere to be. That's pretty much the daily show right there. Steward wouldn't do so good without home studio advantage...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Monadic Philosophy Part 3 - The Parser Monad in C#</title>
		<link>http://devhawk.net/2008/07/31/monadic-philosophy-part-3-the-parser-monad-in-c/</link>
		<pubDate>Fri, 01 Aug 2008 03:47:30 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://f0fb5461-eb30-4268-a4b3-7262276768cb</guid>
		<description></description>
		<content:encoded><![CDATA[<p>(If you disregarded <a href="http://devhawk.net/2008/07/30/Pushed+The+Wrong+Button.aspx">my advice</a> and read the previous version of this post, please note I rewrote this post significantly so you'll probably want to read it again.)</p><p>In the <a href="http://devhawk.net/2008/07/30/Monadic+Philosophy+Part+2+The+LINQ+Monad.aspx">last post</a>, we looked at how LINQ is a monad and how IEnumerable is a pseudo-functional construct. However, C#'s intrinsic collection support - aka foreach and yield return - really obscure how you might go about building your own monad. So for this post, we're going to take a look at a parsing monad instead. Just as LINQ broke the big problem of queries into a collection of standard query operators that were composable, we want to take the same approach for parsers. </p><p>Note, I'm going to stick with C# for now, and get into F# monads in my next post. Quick shout out to <a href="http://blogs.msdn.com/lukeh/archive/2007/08/19/monadic-parser-combinators-using-c-3-0.aspx">Luke Hoban</a> and <a href="http://lorgonblog.spaces.live.com/blog/cns!701679AD17B6D310!124.entry">Brian McNamara</a>, from whom I <strike>stole</strike> obtained some of the code below.</p><p>Quick refresher: I've described a monad as a sequence of computations with a context flow. Since C# has explicit sequencing, we want to focus on the context flow. For LINQ, the context was IEnumerable. For parsers, we could define an similar IParser interface like this:</p><pre class="brush: csharp">
class Tuple&lt;T1, T2&gt; 
{ 
    public readonly T1 Item1; 
    public readonly T2 Item2; 
    public Tuple(T1 val1, T2 val2) { Item1 = val1; Item2 = val2; } 
} 

class Result&lt;T&gt; : Tuple&lt;T, string&gt; 
{ 
    public Result(T val, string rest) : base(val, rest) { } 
} 

interface IParser&lt;T&gt; 
{ 
    Result&lt;T&gt; Parse(string input); 
}
</pre><p>The Parse function takes a string to be parsed as input and returns the parsing result which pairs the semantic value with with the remaining string input to be parsed. I've built out a simple generic tuple class because I know I'll use it again later. I've <a href="http://devhawk.net/2006/08/22/Language+Features+I+Wish+C+Had+Tuples.aspx">long wished</a> C# would support intrinsic tuples like F# does. For convenience, I've also created a strongly typed subclass of Tuple to represent parse results where the second item is a string, to save some typing. Since Result is a class, it can be null which means the the Parser failed to parse the input. </p><p>The problem with this approach is that unlike IEnumerable, the C# compiler has no built-in knowledge of this interface. That means there are no easy-to-use keywords like foreach and yield return that can do our heavy lifting of consuming or creating these IParser types for us. Instead, we would have to explicitly declare classes to implement the interface. As we add more and more parsers, that additional overhead of creating types would become more and more unwieldy. Instead, let's redefine Parser as a delegate.</p><pre class="brush: csharp">
delegate Result&lt;T&gt; Parser&lt;T&gt;(string input);
</pre><p>The benefit of this approach is that you can create Parser delegates inside functions, using C#'s anonymous delegate syntax, without the overhead of creating a type. For example, here's a function to create a simple primitive parser that strips the first character off the parse string and returns it as the parse result:</p><pre class="brush: csharp">
static Parser&lt;char&gt; Item() 
{ 
    return input =&gt; 
        { 
            return string.IsNullOrEmpty(input) 
                ? null
                : new Result&lt;char&gt;(input[0], input.Substring(1)); 
        }; 
}
</pre><p>That's a lot more convenient than building a type just to implement a single method. </p><p>Now that we have our Parser type, we need to think about how to compose Parsers so that we can flow context between them. Much as LINQ provides a collection of primitive query operators (Select, Where, OrderBy, etc), you would expect a monadic parser library to provide a collection of primitive parsers (Item, Satisfy, AnyOf, ItemEqual, etc), that you could combine into higher-order parsers along with some language specific lower-order parsers. Here's an example from the the <a href="http://pdos.csail.mit.edu/~baford/packrat/popl04/peg-popl04.pdf">PEG grammar</a>:</p><p>    Primary &lt;- Identifier !LEFTARROW / OPEN Expression CLOSE / Literal / Class / DOT</p><p>The Primary parser depends on some high-order language specific parsers (Identifier, Expression, Literal and Class) as well as some language specific low-order tokenizer style parsers (LEFTARROW, OPEN, CLOSE and DOT) and finally some language-independent primitive parsers (the failure predicate ! and the prioritized choice operator /). </p><p>So how should we compose these various Parsers? LINQ query operators were fairly easy to compose because they all take in and return the same type (IEnumerable) so you can simply chain them together. Parsers are a little trickier because the inputs and outputs are asymmetric - i.e. they take a string, but return a Result - so simple chaining won't work. </p><p>We could combine the parsers sequentially, taking the parse string returned from first parser and feed it into the second. Then we could combine the two parse values in a Tuple to return them (you see why I created a generic Tuple class?) resulting in a function that looks like this:</p><pre class="brush: csharp">
static Parser&lt;Tuple&lt;T1,T2&gt;&gt; Join&lt;T1,T2&gt;(this Parser&lt;T1&gt; p1, Parser&lt;T2&gt; p2)  
{  
    return input =&gt;  
        {  
            var ret1 = p1(input);  
            if (ret1 == null)  
                return null;  

            var ret2 = p2(ret1.Item2);  
            if (ret2 == null)  
                return null;  

            return new Result&lt;Tuple&lt;T1,T2&gt;&gt;(  
                new Tuple&lt;T1, T2&gt;(ret1.Item1, ret2.Item1),  
                ret2.Item2);  
        };  
}
</pre><p>Note this is an extension method so we can call Parser1.Join(Parser2) rather than the less fluent Join(Parser1, Parser2). I was going to call this function Combine, but there's already a static Combine method on the Delegate type that caused a conflict, so I used Join instead. </p><p>The Join approach works, but it's a bit unwieldy to return the parsing values in a tuple. Every set of joined parsers will result in another level of tuple nesting in the Result that's returned. That gets pretty ugly pretty fast. For example, lets say we want to create a parser that combines two instances of Item. It looks like this:</p><pre class="brush: csharp">
static Parser&lt;Tuple&lt;char, char&gt;&gt; TwoItems() 
{ 
    return Item().Plus(Item()); 
}
</pre><p>That's not so bad. But now look what happens if we combine the TwoItems parser with another instance of Item:</p><pre class="brush: csharp">
static Parser&lt;Tuple&lt;Tuple&lt;char, char&gt;, char&gt;&gt; ThreeItems() 
{ 
    return TwoItems().Plus(Item()); 
}
</pre><p>The result is a nested tuple. Yuck. We need a better way. Enter the monadic bind. The code looks like this:</p><pre class="brush: csharp">
static Parser&lt;U&gt; Bind&lt;T, U&gt;(this Parser&lt;T&gt; p1, Func&lt;T, Parser&lt;U&gt;&gt; fun) 
{ 
    return input =&gt; 
        { 
            var ret1 = p1(input); 
            if (ret1 == null) 
                return null; 

            var p2 = fun(ret1.Item1); 
            if (p2 == null) 
                return null; 

            return p2(ret1.Item2); 
        }; 
}
</pre><p>Like the Join function above, Bind starts by calling the first parser function, returning null if the parse fails. However, instead of calling to the second parser directly, it calls to the provided function that generates the second parser. This function acts as a <a href="http://en.wikipedia.org/wiki/Closure_%28computer_science%29">closure</a>, packaging up the parse value from the first parser for later processing. Finally, Bind calls to the generated second parser, feeding in the remaining text from the first parser result. </p><p>This approach allows you to inject code that combines the parsing values however we like rather than always pairing them up in a tuple. Here's a version of TwoItems that binds a call to Item with a custom function that calls Item again and returns the two characters as a string rather than a tuple:</p><pre class="brush: csharp">
static Parser&lt;string&gt; BetterTwoItems() 
{ 
    return Item().Bind&lt;char, string&gt;( 
        val =&gt;  
        { 
            return input =&gt; 
            { 
                var result = Item()(input); 
                return new Result&lt;string&gt;( 
                    string.Format("{0}{1}", val, result.Item1), 
                    result.Item2); 
            }; 
        }); 
}
</pre><p>It's kinda strange to see a lambda expression that returns a lambda expression in C#, but that's what this code does. The first lambda expression (val =&gt;) defines the custom function, the second lambda expression (input =&gt;) defines the Parser delegate. Val is the parse value from calling Item() the first time - ret1.Item1 in the Bind function above. Input is the remainder of the parse string - ret1.Item2 from the Bind function. </p><p>Unfortunately, while this approach avoids nested tuples for parse values, we've had to give up quite a bit of simplicity. The original TwoItems method was a single line of code. BetterTwoItems is significantly more complex. Furthermore, the double lambda expression syntax confuses C#'s type inference, forcing you to explicitly specify the generic types on the Bind method. Luckily there's a better way to write this. However, let's start by rewriting the function like this:</p><pre class="brush: csharp">
static Parser&lt;string&gt; SlightlyBetterTwoItems() 
{ 
    return Item().Bind( 
        v1 =&gt; Item().Bind&lt;char, string&gt;( 
            v2 =&gt; 
            { 
                return input =&gt; 
                { 
                    return new Result&lt;string&gt;( 
                        string.Format("{0}{1}", v1, v2), 
                        input); 
                }; 
            })); 
}
</pre><p>SlightlyBetterTwoItems pulls the second call to Item out into a second Bind operation. The point of this refactoring is to make it clear that we can view this function as a call to Item, bound to a second call to Item, bound to custom function to return a Parser that returns the two parse value chars formatted as a string. You'll notice that by eliminating the the double lambda expression on the first call to Bind, we were able to drop out the explicit generic type specification. </p><p>This version is a little clearer, but we can make it clearer yet. It turns out that wrapping up a parse value in a Parser that unconditionally returns the parse value and the parse text input in a Result is a very common operation. So let's create a primitive function Result to wrap up a parse value in a Parser delegate and build our final version of TwoItems that uses it.</p><pre class="brush: csharp">
static Parser&lt;T&gt; Result&lt;T&gt;(T val)  
{  
    return input =&gt; new Result&lt;T&gt;(val, input);  
}  

static Parser&lt;string&gt; BestTwoItems() 
{ 
    return Item().Bind( 
        v1 =&gt; Item().Bind( 
        v2 =&gt; Result(string.Format("{0}{1}", v1, v2)))); 
}
</pre><p>Now it's very clear that we have a call to Item, bound to a second call to item, which is in turn bound to a call to Result. We've now dropped all use of double lambdas, which means C# can infer the types to each of our Bind calls implicitly. But more importantly, do you see <em>any</em> reference to Parser&lt;T&gt; delegates or input strings in this code? Only in the return type specification. Just as LINQ hides the specifics of flowing IEnumerable or enumerator objects between standard query operators, the parser monad hides the specifics of flowing Parser delegates or input strings between parse operations. </p><p>The Parser delegate plus the Bind and Result methods are all there are to our basic parser monad. Seriously, all that worry that monad "is a bit obscure and sounds a little daunting" and it's really just two functions and a delegate type. </p><p>While this code is fairly straight forward, the whole nested lambdas expressions is fairly atypical syntax that some developers might have a hard time understanding. Unfortunately, if we're writing our parsers in C#, we're kinda stuck with this syntax. However, F# has a special syntax that lets you write what looks like normal sequential code, while still flowing the Parser context between parse operations exactly like the code above does. We'll take a look at that syntax in the next post.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1165</wp:post_id>
		<wp:post_date>2008-07-31 20:47:30</wp:post_date>
		<wp:post_date_gmt>2008-08-01 03:47:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>monadic-philosophy-part-3-the-parser-monad-in-c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="monads"><![CDATA[Monads]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[f0fb5461-eb30-4268-a4b3-7262276768cb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Monadic+Philosophy+Part+3+The+Parser+Monad+In+C]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/08/01/Monadic+Philosophy+Part+3+The+Parser+Monad+In+C]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2108</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.108</wp:comment_author_IP>
			<wp:comment_date>2008-08-01 12:58:11</wp:comment_date>
			<wp:comment_date_gmt>2008-08-01 19:58:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah, there's not a direct match between Bind and Result as I defined them and C#'s Query comprehension syntax, so I decided to skip discussing Luke's post (for now). But as you rightly point out, F#'s monadic syntax rocks (as we'll see in my next post!)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2107</wp:comment_id>
			<wp:comment_author><![CDATA[Yuri K.]]></wp:comment_author>
			<wp:comment_author_email>georgetk@rambler.ru</wp:comment_author_email>
			<wp:comment_author_url>http://elder_george.livejournal.com</wp:comment_author_url>
			<wp:comment_author_IP>193.233.82.10</wp:comment_author_IP>
			<wp:comment_date>2008-07-31 22:53:47</wp:comment_date>
			<wp:comment_date_gmt>2008-08-01 05:53:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, we apparently aren't stuck with 'nested lambda syntax' in C#, since it has more nice 'from-select' syntax the (ab)use of which Luke Hoban has shown in the post you referenced.
But of course, F# sugar for monads is much sweeter =)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Monadic Philosophy Part 4 - The Parser Monad in F#</title>
		<link>http://devhawk.net/2008/08/01/monadic-philosophy-part-4-the-parser-monad-in-f/</link>
		<pubDate>Fri, 01 Aug 2008 22:42:57 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://9b8f0a29-ba33-46a2-a34d-ab470fa5e59a</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In the <a href="http://devhawk.net/2008/08/01/Monadic+Philosophy+Part+3+The+Parser+Monad+In+C.aspx">last post</a>, I built out a basic parser monad in C#. While the approach worked OK, the syntax is still a little foreign to your typical .NET programmer, what with it's nested anonymous functions and all. Now, I'm going to translate that code to F# and take a look at the special monadic syntax F# supports that makes using monads as easy any sequential code.</p><p>First, let's translate our Parser delegate, Bind, Result and Item functions over to F#. Just for kicks, let's also port over the final version of TwoItems too.</p><pre class="brush: fsharp">
type Parser&lt;'input, 'result&gt; = 'input-&gt; ('result * 'input) option 

// the Bind function, defined as a custom operator
let (&gt;&gt;=) p f : Parser&lt;'i,'r&gt; =  
    fun input -&gt;
        match p input with
        | Some(value, input) -&gt; (f value) input 
        | None -&gt; None 

let Result v : Parser&lt;'i,'r&gt; = fun input -&gt; Some(v, input)

let Item : Parser&lt;string, char&gt; =  
    fun input -&gt;
        if string.IsNullOrEmpty(input)  
            then None 
            else Some(input.[0], input.Substring(1))

let BestTwoItems =  
    Item &gt;&gt;= (fun v1 -&gt;  
    Item &gt;&gt;= (fun v2 -&gt;  
    Result (sprintf "%c%c" v1 v2)))
</pre><p>First, we start with the declaration of the Parser type. Unlike C#, F# has built in support for tuples, so I didn't bother to define a Result type (just the Result function). A Parser is declared to be a function that takes in some generic input type and returns an optional tuple pairing the result with the remaining input to be parsed. As I've blogged before, F#'s option type is kinda like C#'s Nullable type, so a parser that returns None is considered to have failed to parse the input.</p><p>Next up is are the monad functions Bind and Result. The only significant change from the C# version is that I used the custom operator &gt;&gt;= for the Bind function. So instead of calling "Item().Bind(some_function)", we can call "Item &gt;&gt;= some_function". F# functions aren't attached to a type like C# extension methods are, so this is the only way to get the more readable infix notation. I'm using &gt;&gt;= as the bind operator because that's the operator <a href="http://www.haskell.org/haskellwiki/Monad">Haskell uses</a> for their monad function. Other than the custom operator name, Bind and Result work identically to their C# counterparts. Note, I explicitly specified the return type of Bind, Result and Item, but I didn't have to. F# can infer the types of all the parameters from usage just fine. I added the type specifications for the reader, in case you're not familiar with F#'s syntax. </p><p>Likewise, Item is identical to the C# version including using strings as the parse input, except for than the F# syntax. Typically, in a real parsing app you would use an intrinsic list of chars instead of strings, since F#s list is a much more efficient data structure than strings for operations that strip characters off the head of the list (like parsers are wont to do). However, I wanted to make this code as similar to the previous code, so I stuck with strings.</p><p>Finally, we have BestTwoItems. Again, syntax aside, it's exactly like it's C# cousin though I did use the slightly more compact sprintf function instead of string.Format. Again, while BestTwoItems it works well, it uses the same nested anonymous function syntax from the C# version. Maybe I shouldn't have called it "BestTwoItems"!</p><p>However, in F# it's possible to define a custom syntax for your monad that let's you write the function this way:</p><pre class="brush: fsharp">
let VeryBestTwoItems = 
    parse {
        let! v1 = Item 
        let! v2 = Item 
        return sprintf "%c%c" v1 v2 }
</pre><p>With this monadic syntax, we've now completely eliminated not only the Parser delegate and the input string, but also the nested anonymous functions needed by the Bind function, making the code appear completely sequential. </p><p>The secret to making this work is the parse monad object. It the code above, the word parse almost feels like a language keyword, but it's not. It's actually an instance of an parse monad object with a specific signature. F# knows how to take the syntax above and combine it with the parse monad object to produce the right code. Here's the parse monad:</p><pre class="brush: fsharp">
type ParseMonad() = 
    member w.Delay(f) = fun input -&gt; f () input  
    member w.Return(v) = Result v  
    member w.Bind(p, f) = p &gt;&gt;= f 
     
let parse = ParseMonad()
</pre><p>As you can see, there's an obvious direct correlation of Result and Bind functions we defined last time and the Return and Bind methods in the ParseMonad. The only thing we haven't seen before is the Delay method. Monads are one of of F#'s many <a href="http://research.microsoft.com/projects/fsharp/manual/spec2.aspx#_Toc202383770">delayed expressions</a>. F# wraps the entire monad in a call to Delay to ensure the monad isn't executed prematurely. </p><p>As per the <a href="http://research.microsoft.com/projects/fsharp/manual/spec2.aspx#_Toc202383771">F# grammar spec</a>, there are several other functions you can define on your monad if you so choose. My "real" parser monad also implements Zero and Combine. Zero returns a parser that unconditionally fails. By defining Zero on my monad object, I can write ifs without elses, the parser monad will implicitly inject Zero clause as your else statement. Combine combines results (I know, a shocker!). I use it as a prioritized choice. In other words, when you Combine two parsers, you only call the second parser if calling the first parsers fails. Prioritized Choice is used very often in PEGs, which is why I chose to define it this way.</p><p>F# monadic syntax also support For, Let, While, Using, TryFinally and TryWith. Frankly, I haven't spent much time thinking about scenarios where you'd use these other syntax elements. The only one that's obvious to me is Using for deterministic finalization, which you could see using anywhere you access IDispoasble objects. Here's hoping the F# folks document in detail how to use this powerful syntax.</p><p>So that's it for basic monads in F#. I've gotten some great comments (and one less than great comments) as I've written this series. In my last post on monads (in this series at least) I'll repost some of those comments as well as provide some concluding thoughts. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1166</wp:post_id>
		<wp:post_date>2008-08-01 15:42:57</wp:post_date>
		<wp:post_date_gmt>2008-08-01 22:42:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>monadic-philosophy-part-4-the-parser-monad-in-f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="monads"><![CDATA[Monads]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[9b8f0a29-ba33-46a2-a34d-ab470fa5e59a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Monadic+Philosophy+Part+4+The+Parser+Monad+In+F]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/08/01/Monadic+Philosophy+Part+4+The+Parser+Monad+In+F]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Including the Batteries in IronPython</title>
		<link>http://devhawk.net/2008/08/06/including-the-batteries-in-ironpython/</link>
		<pubDate>Wed, 06 Aug 2008 07:50:23 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://355828d2-3864-47f4-9baf-3abb037fcf1d</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><p>Fans of Python use the phrase "batteries included" to describe the <a href="http://docs.python.org/lib/lib.html">standard library</a>, which covers everything from asynchronous processing to zip files.<br /><a href="http://www.python.org/about/">About Python</a></p></blockquote><p>I'm very happy to announce that as of <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=14353">IronPython Beta 4</a>, we are including the Python standard library in an IronPython release. In addition to the usual binary and source zip archives, we're shipping an MSI installer that gives you the option to include the library files. I <a href="http://devhawk.net/2008/07/17/IronPython+Post+20+Roadmap.aspx">mentioned</a> a couple of weeks ago that I've been spending a lot of time with lawyers, and this is the first step towards making the IronPython project as open as possible. Note the use of the word "first" in that previous statement. In other words, I've got more lawyers to talk to.</p><p>We've added a new standard library component category to the <a href="http://www.codeplex.com/IronPython/WorkItem/AdvancedList.aspx">IronPython Issue Tracker</a>. So if you find any issues or incompatibilities with using the standard library with IronPython, please files bugs on them. We haven't figured out what set of libraries we're going to ship, but we don't want to include ones that we know wont work. For example, Kevin Chu <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2008-August/007908.html">reported on the mailing list</a> that importing the sqlite3 module fails. This is because we don't have a managed version of the _sqlite3 C-based module. So that's one we'll probably remove outright. </p><p>Also, this is the first release we've distributed as an MSI file, and it looks some folks on the mailing list have had some troubles with it. If you have issues, please file setup bugs as well.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1167</wp:post_id>
		<wp:post_date>2008-08-06 07:50:23</wp:post_date>
		<wp:post_date_gmt>2008-08-06 07:50:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>including-the-batteries-in-ironpython</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[355828d2-3864-47f4-9baf-3abb037fcf1d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Including+The+Batteries+In+IronPython]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/08/06/Including+The+Batteries+In+IronPython]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2109</wp:comment_id>
			<wp:comment_author><![CDATA[Seo Sanghyeon]]></wp:comment_author>
			<wp:comment_author_email>sanxiyn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>143.248.52.225</wp:comment_author_IP>
			<wp:comment_date>2008-08-06 13:40:25</wp:comment_date>
			<wp:comment_date_gmt>2008-08-06 20:40:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[FePy project maintains a list of known-to-work standard library modules here:

http://fepy.svn.sourceforge.net/svnroot/fepy/trunk/script/mlist

Feel free to consult it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2110</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.ironpythoninaction.com</wp:comment_author_url>
			<wp:comment_author_IP>88.96.105.246</wp:comment_author_IP>
			<wp:comment_date>2008-08-07 06:35:20</wp:comment_date>
			<wp:comment_date_gmt>2008-08-07 13:35:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[_sqlite3 could be implemented as a compatibility shim over System.Data.SQLite:

http://sqlite.phxsoftware.com/

This would be waaay better than removing the module. There are many standard library modules that could be supported using this technique.

FePy has had a compatibility shim for pyexpat (over System.Xml) for a long time. The more of these modules that are supported the more Python applications and frameworks will work with IronPython.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Nobody Cares That I Called McCain a Dick?</title>
		<link>http://devhawk.net/2008/08/08/nobody-cares-that-i-called-mccain-a-dick/</link>
		<pubDate>Fri, 08 Aug 2008 13:42:44 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://bec9c96a-0cd2-49f8-a322-af9cb882073f</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In Febuary, <a href="http://devhawk.net/2008/02/11/Morning+Coffee+145.aspx">when I said</a> "Romney's a real douche bag", <a href="http://devhawk.net/CommentView,guid,d88e8506-d669-41c3-a246-6da1865f9a2e.aspx#commentstart">several upset commenters</a> vowed never to read my blog again. I was even called a bigot (though <a href="http://halfmybrain.spaces.live.com/">Dale</a> jumped in and explained how wrong a charge that is). Frankly, anytime I run a political post, especially ones where I call prominent Republicans names, that's the reaction I expect. </p><p>So it kinda surprised me that the <a href="http://devhawk.net/CommentView,guid,be8c3c37-012b-499f-a1d2-1db86c5771b5.aspx#commentstart">response</a> to <a href="http://devhawk.net/2008/08/01/McCains+Dick+Move+Of+The+Week.aspx">calling McCain a dick and his campaign an embarrassment</a> was so tepid. No outrage. No promises to unsubscribe nor predictions that others would do likewise. Dale sounds like he agrees that McCain's campaign is an embarrassment, even though he clearly supports McCain. RandyG doesn't have anything to say about McCain one way or the other, but he thinks Obama is a "pompous dick". Only BigJ provides any defense of McCain at all, but it's an extremely weak defense. He described McCain as "not afraid to tick off a powerful, influential, big money contributor", which I would expect is hard to say out loud with a straight face. Given that McCain <a href="http://www.washingtonpost.com/wp-dyn/content/article/2008/07/26/AR2008072601891_pf.html">has raked in millions in contributions from the oil industry</a> after flip-flopping on offshore drilling, describing the Hilton's $4,600 contribution as "powerful, influential, big money" is laughable. Hell, McCain is returning <a href="http://thecaucus.blogs.nytimes.com/2008/08/07/mccain-campaign-is-reviewing-donations/">ten times that amount</a> in "unusual" (read: possibly illegal) contributions because they "just didn’t sound right". </p><p>I figure there are two main possible reasons for the lack of outrage:</p><ul><li>All my readers who are willing to unsubscribe because I don't agree with their political view have already left, leaving only those who agree with or simply ignore my political posts.</li><li>The number of people willing to stand up and defend McCain, even anonymously in my small corner of the Internet, is very small.</li></ul><p>Personally, I probably a little of both, but I'm guessing it's more the latter than the former. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1168</wp:post_id>
		<wp:post_date>2008-08-08 13:42:44</wp:post_date>
		<wp:post_date_gmt>2008-08-08 13:42:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nobody-cares-that-i-called-mccain-a-dick</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="politics"><![CDATA[Politics]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[bec9c96a-0cd2-49f8-a322-af9cb882073f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Nobody+Cares+That+I+Called+McCain+A+Dick]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/08/08/Nobody+Cares+That+I+Called+McCain+A+Dick]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2111</wp:comment_id>
			<wp:comment_author><![CDATA[Dan Ciruli]]></wp:comment_author>
			<wp:comment_author_email>danciruli@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>64.167.110.217</wp:comment_author_IP>
			<wp:comment_date>2008-08-08 14:54:10</wp:comment_date>
			<wp:comment_date_gmt>2008-08-08 21:54:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[When I saw your comment, I bought a second subscription!  ;-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2112</wp:comment_id>
			<wp:comment_author><![CDATA[gabe anzelini]]></wp:comment_author>
			<wp:comment_author_email>devhawk@anzelini.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>170.220.2.193</wp:comment_author_IP>
			<wp:comment_date>2008-08-08 15:17:05</wp:comment_date>
			<wp:comment_date_gmt>2008-08-08 22:17:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[why be upset, if liberals want to call their own names, who am i to stop them?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2113</wp:comment_id>
			<wp:comment_author><![CDATA[BigJ]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>65.10.77.102</wp:comment_author_IP>
			<wp:comment_date>2008-08-08 15:52:04</wp:comment_date>
			<wp:comment_date_gmt>2008-08-08 22:52:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ok, we can have some fun with this!  You're right, "powerful, influential, big money contributor" doesn't really sound right without the proper inflection.  Dittoheads would understand.  Reading long responses can be arduous so I was trying to be short and cute.

As for the post analysis, there is an additional possible reason for the lack of responses that you failed to mention.  No one cares what an Obama supporter thinks about politics, it’s likely to change when his handlers write the next speech anyway ;) haha.
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2114</wp:comment_id>
			<wp:comment_author><![CDATA[wcy]]></wp:comment_author>
			<wp:comment_author_email>wcyeee@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.99.87.168</wp:comment_author_IP>
			<wp:comment_date>2008-08-08 19:14:49</wp:comment_date>
			<wp:comment_date_gmt>2008-08-09 02:14:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I wasn't as outraged as you by that clip. But, to your question, it's because everyone knows just how much of a dick he really can be:

Postmodern John McCain: the presidential candidate some Arizonans know — and loathe
http://www.phoenixnewtimes.com/content/printVersion/848709

Seriously, he made a tasteless joke about Chelsea Clinton who was a teen at the time? Wow, a bunch of old men laughing over that. Dick. Definitely.

On a lighter note, it's only deserving to laugh at the old coot and his early onset moments:

http://www.youtube.com/watch?v=iWX5u69hmzY

]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2115</wp:comment_id>
			<wp:comment_author><![CDATA[Dale Churchward]]></wp:comment_author>
			<wp:comment_author_email>dale.churchward@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url>http://halfmybrain.live.spaces.com</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-08-11 13:46:33</wp:comment_date>
			<wp:comment_date_gmt>2008-08-11 20:46:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I wouldn't call McCain's whole campaign an embarrassment, simply agreeing that the commercial in question was in poor taste. In any case, I haven't decided for sure who I am voting for since neither candidate is close to what I would call a conservative. I will never unsubscribe just because you write something political. It is your blog after all, and I find your arguments well thought out even when I disagree with them.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2116</wp:comment_id>
			<wp:comment_author><![CDATA[Dan Ciruli]]></wp:comment_author>
			<wp:comment_author_email>danciruli@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>64.167.110.217</wp:comment_author_IP>
			<wp:comment_date>2008-08-13 12:36:48</wp:comment_date>
			<wp:comment_date_gmt>2008-08-13 19:36:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have to agree with Dale Churchward -- one commercial doesn't make the whole campaign an embarrassment.

But since EVERY commercial exhibits the same qualities, I think it's safe to say.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2117</wp:comment_id>
			<wp:comment_author><![CDATA[Tim]]></wp:comment_author>
			<wp:comment_author_email>tboland@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.techtoolblog.com</wp:comment_author_url>
			<wp:comment_author_IP>216.136.68.194</wp:comment_author_IP>
			<wp:comment_date>2008-10-07 06:44:50</wp:comment_date>
			<wp:comment_date_gmt>2008-10-07 13:44:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ok,you asked for it :)  You are a dick & I'm not following your blog anymore]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Monadic Philosophy Part 5 - Reader Comments</title>
		<link>http://devhawk.net/2008/08/08/monadic-philosophy-part-5-reader-comments/</link>
		<pubDate>Sat, 09 Aug 2008 00:20:06 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://c7d7d1db-0c17-4845-b30f-0fbed21e5741</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://barrkel.blogspot.com/">Barry Kelly</a> <a href="http://devhawk.net/CommentView,guid,6ce19647-2f6f-4d41-aff6-b202df528d21.aspx#commentstart">thinks</a> that "programmers would understand monads better if they were described as a design pattern". I agree 100% and would love to see a monad design pattern written out using p&amp;p's <a href="http://msdn.microsoft.com/en-us/library/ms979209.aspx">pattern form</a>. The one thing I would note on this is that certain language constructs can make working with certain design patterns easier. For example, C# obviously has great language level support for the <a href="http://en.wikipedia.org/wiki/Iterator_pattern">Iterator design pattern</a>. Once you've got language level support, it doesn't really feel like a design pattern anymore, it feels like a language feature. I mean, given that you can write OO code in a language like C, does that mean technically OO is a "design pattern". I don't think so. </p><p>A commenter named atp <a href="http://devhawk.net/CommentView,guid,6ce19647-2f6f-4d41-aff6-b202df528d21.aspx#commentstart">warned me</a> not to "fall into the newbie trap of thinking that monads are about sequencing operations. They aren't. A large number of monads (for example, Reader) are commutative and do not enforce any sort of statement ordering." Fair enough. For example, you switch the order of some LINQ operators and still end up with the same result. If you switch Where and Select, you should end up with the same output (assuming the where clause isn't invalidated by the select projection). But from a C#/F# perspective, I don't really care about monads for enforcing order anyway - the language has that natively. I care much more about the context flow aspect of monads, which it sounds like atp thinks we should be focused on anyway. Works for me. </p><p>Finally, <a href="http://elder_george.livejournal.com">Yuri K.</a> <a href="http://devhawk.net/CommentView,guid,f0fb5461-eb30-4268-a4b3-7262276768cb.aspx#commentstart">pointed out</a> that we aren't really stuck with the nested lambda expression syntax in C#. In Luke Hoban's <a href="http://blogs.msdn.com/lukeh/archive/2007/08/19/monadic-parser-combinators-using-c-3-0.aspx">Monadic Parser Combinators using C# 3.0</a> post, he implements a Where, Select and SelectMany extension method for his Parser delegate type, which allows him to plug into C#'s query comprehension syntax. He's 100% correct and I considered including this fact in my post. However, the mapping between query comprehension and the Bind and Result functions is a little murky, so I skipped it. </p><p>For C# query comprehensions, basically SelectMany does double duty, not only binding the parser and the parser generating function (which Luke called 'selector'), but also taking the two parse values and calling to a projector function and returning the projection return value in a Result. By implementing SelectMany, you can rewrite the TwoValues parser like this:</p><pre class="brush: csharp">
static Parser&lt;string&gt; QueryTwoItems()  
{  
    return from v1 in Item()   
           from v2 in Item()   
           select string.Format("{0}{1}", v1, v2);  
}
</pre><p>which looks pretty much identical to the F# monadic syntax version. Luke also implements Where, which I have in my F# parser library as Satisfy. Where takes a parser and only returns the parser result if the provided boolean predicate returns true. Select is a projection, similar to SelectMany but only used with a single parser. I have a couple of specific projectors in my F# library (Ignore which tosses the parse result and Listify which turns a single result into a single item list) but I haven't had any need for a generic projector like Select. I'm assuming Luke only implemented Select to make the query comprehension work when you don't have multiple from statements. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1169</wp:post_id>
		<wp:post_date>2008-08-08 17:20:06</wp:post_date>
		<wp:post_date_gmt>2008-08-09 00:20:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>monadic-philosophy-part-5-reader-comments</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="monads"><![CDATA[Monads]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[c7d7d1db-0c17-4845-b30f-0fbed21e5741]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Monadic+Philosophy+Part+5+Reader+Comments]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/08/09/Monadic+Philosophy+Part+5+Reader+Comments]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2118</wp:comment_id>
			<wp:comment_author><![CDATA[louis vuitton handbags]]></wp:comment_author>
			<wp:comment_author_email>lomotbiz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.designerfaves.com</wp:comment_author_url>
			<wp:comment_author_IP>131.137.245.199</wp:comment_author_IP>
			<wp:comment_date>2008-08-12 11:29:03</wp:comment_date>
			<wp:comment_date_gmt>2008-08-12 18:29:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great article. Thank you for clearing that up!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Missing Missing Persons</title>
		<link>http://devhawk.net/2008/08/19/missing-missing-persons/</link>
		<pubDate>Tue, 19 Aug 2008 17:14:31 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d7cb17a3-d9f6-44a0-995e-50187201a6b8</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I'm having a hard time focusing on work today. I just found out that a good friend and ex-teammate Robert Satterwhite <a href="http://www.legacy.com/Tribnet/DeathNotices.asp?Page=LifeStory&amp;PersonId=115888841">passed away last week</a>. </p><p>I spent a year on the .NET Adoption Team with Robert back in 2002 &amp; 2003 - basically my last year in the Microsoft field organization. NAT - as were were known - was a national team of developer and architecture evangelists, so while we were all teammates, we didn't see much of each other in person. However, Rob and I both lived in the Puget Sound area and called on many of the same customers - I was an architect evangelist and Robert was a developer evangelist - so we ended up working together often. We drove together to Olympia many times- he drove and I hacked code in a kind of strange pair programming effort.</p><p>Robert grew up in the Pacific NW and had spent almost his entire career as an enterprise technology sales engineer here, so he had friends everywhere. I often used the lame line from the <a href="http://www.imdb.com/title/tt0092925/">Dragnet movie</a> with Dan Aykroyd: "They ought to put you in Missing Persons. You know everybody." because it seemed like everywhere we went we'd run into someone he grew up with, had worked with or had sold to. If we hung around before or after a sales call - coffee shop in Olympia before a meeting, debriefing with the sales rep on the steps outside of Costco HQ in Issaquah, etc - chances are someone would recognize him. </p><p>When I was leaving the NAT, Robert and I went to Phoenix so I could hand off my customers there to him. I joked that at least I could be sure we wouldn't run into anyone he knew in Arizona. Yet, it turned out he used to work with the woman who was sitting in front of him on the flight home. She and her husband owned car dealerships in Phoenix and Tacoma. I was astonished - what are the frakking odds? - but Rob just shrugged his shoulders. It happened to him all the time so I guess he was used to it.</p><p>I only saw him off and on since I left the team, though as fate would have it I did see him last week on the day he died. I was heading into building 18 for a meeting as he was pulling into the parking lot - I hadn't realized he was working on campus. We exchanged the usual pleasantries and promised that we'd get together soon. He was blocking traffic, so it was a short conversation. 24 hours later, he was dead. </p><p>Rob wasn't your prototypical <a href="http://blogs.msdn.com/stevecla01/archive/2006/10/31/microsoft-change-the-world-or-go-home.aspx">blue monster</a>, but he sure touched a lot of people and he made the world a better place by just being himself. You will be missed, Rob.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1170</wp:post_id>
		<wp:post_date>2008-08-19 10:14:31</wp:post_date>
		<wp:post_date_gmt>2008-08-19 17:14:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>missing-missing-persons</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="category" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d7cb17a3-d9f6-44a0-995e-50187201a6b8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Missing+Missing+Persons]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/08/19/Missing+Missing+Persons]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Morning Coffee 172</title>
		<link>http://devhawk.net/2008/08/25/morning-coffee-172/</link>
		<pubDate>Mon, 25 Aug 2008 16:56:01 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://1446b623-c799-4f44-9cf7-a69fd666ca26</guid>
		<description></description>
		<content:encoded><![CDATA[<ul><li>I took the kids to see <a href="http://www.flymetothemoonthemovie.com/">Fly Me To The Moon</a> recently. We had to trek to Monroe (about 30 minutes away) because it's a special 3D movie, and it was only playing there and in downtown Seattle. The movie's story is insipid - three flies stow away on Apollo 11 - but all the space shots were actually kinda cool. It sure felt like they wanted to be scientifically and historically accurate about the the actual mission (well, other than the part about the flies). Patrick really liked it (he wants to build a rocket in the back yard) and Riley sat thru the whole thing with a minimum of fussing.  </li><li>I'm a big fan of Joe Biden, so I'm really happy Obama <a href="http://www.msnbc.msn.com/id/26365828/">picked him</a> to be his running mate.  </li><li>I know it's old news but what the frak was John Edwards thinking? I like his policies, but the arrogance it takes to run for president when you know you've got that skeleton in your closet is mind-boggling.  </li><li>On the other hand, watching the Sean Hannity and guest's hypocrisy on Edwards' affair, only to watch them <a href="http://www.youtube.com/watch?v=Da4N-CTTRIM">scramble like cockroaches</a> when Colmes points out McCain had admitted to having an affair was frakking hilarious. </li></ul><p>OK, onto geek stuff: </p><ul><li>My new boss Dave Remy has moved to a <a href="http://blog.remlog.net/">new blog</a>. If you're curious what he was up to for the 10 months he was away from Microsoft, he's <a href="http://blog.remlog.net/?p=4">happy to share</a>.  </li><li>IPy and IRuby developer Curt Hagenlocher (aka Iron Curt) is <a href="http://blogs.msdn.com/curth/">blogging</a>. Cue the Ozzy...I AM IRON CURT. Or don't. Anyway, he dives in the deep end of the pool - no "hello world" lollyblogging for Iron Curt - digging into the <a href="http://blogs.msdn.com/curth/archive/2008/07/29/stackoverflowexception-and-ironpython.aspx">stack implications of rethrowing exceptions</a> and <a href="http://blogs.msdn.com/curth/archive/2008/08/12/viewing-emitted-il.aspx">debugging emitted IL</a>.  </li><li>Srivatsn writes about <a href="http://blogs.msdn.com/srivatsn/archive/2008/08/06/static-compilation-of-ironpython-scripts.aspx">static compilation of IPy scripts</a>. Note, we're not talking about static typing - it's still the same good-old dynamically typed IronPython, just packaged up as an assembly, rather than as a bunch of .py files. Note, if you're interested in compiling IronPython, you should check out the PYC sample we published as part of <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=14353">Beta 4</a>.  </li><li>Speaking of IPy Beta 4, Shri Borde posts about the <a href="http://blogs.msdn.com/shrib/archive/2008/07/30/idispatch-support-on-in-ironpython-beta-4.aspx">COM dispatch support</a> which is enabled by default as of Beta 4. If you're driving COM automation clients (like Office) from IPy, this is a huge improvement over the old mechanism.  </li><li>Jeff Hardy has released a new version of NWSGI, a managed version of Python's <a href="http://www.python.org/dev/peps/pep-0333/">Web <strike>Service</strike> Server Gateway Interface</a>. My understanding is that this would allow any Python web stack written against WSGI to run in IIS with IronPython (subject to IronPython's compatibility with CPython). Jeff's been <a href="http://jdhardy.blogspot.com/">documenting</a> his efforts getting Django running with NWSGI on his blog. Awesome work Jeff! (Thanks for the correction Seo!) </li><li>I <a href="http://devhawk.net/2006/03/08/The+SoCalled+Attention+Economy.aspx">never really bought into</a> the "Attention Economy", but Chris Anderson's <a href="http://www.longtail.com/the_long_tail/2008/08/i-wish-people-w.html">economic analysis</a> of his DIY Drones site traffic was fascinating.  </li><li>Lutz announces "<a href="http://blog.lutzroeder.com/2008/08/future-of-net-reflector.html">it is time to move on</a>" from Reflector and there was a collective horrified scream in the .NET community. He's handing it over to Red Gate, who <a href="http://www.simple-talk.com/opinion/opinion-pieces/the-future-of-reflector-/">promised</a> they "will continue to offer the tool for free to the community".  </li><li>I missed this when he posted it in June, but I really liked Nikhil Kothari <a href="http://www.nikhilk.net/ViewModel-Pattern-DLR.aspx">use of the DLR</a> in Silverlight to cut down on the XAML verbosity in his ViewModel action binding.  </li><li>Brian McNamara previews the new <a href="http://lorgonblog.spaces.live.com/Blog/cns!701679AD17B6D310!307.entry">Add Reference</a> and <a href="http://lorgonblog.spaces.live.com/Blog/cns!701679AD17B6D310!347.entry">file ordering</a> support in the upcoming F# CTP. I'm really looking forward to the project-to-project reference support. I can't tell you how many times I've gotten burned because my main project recompiled but my test project didn't. You just get used to hitting Rebuild All instead of Build. As for file ordering, it's a bit of a bummer that F# requires it, but the new experience is hella better than editing the project file by hand. I'm <em>really </em>looking forward to the new CTP. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1171</wp:post_id>
		<wp:post_date>2008-08-25 09:56:01</wp:post_date>
		<wp:post_date_gmt>2008-08-25 16:56:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-172</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="family"><![CDATA[Family]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="post_tag" nicename="web-2-0"><![CDATA[Web 2.0]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[1446b623-c799-4f44-9cf7-a69fd666ca26]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+172]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/08/25/Morning+Coffee+172]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2119</wp:comment_id>
			<wp:comment_author><![CDATA[Seo Sanghyeon]]></wp:comment_author>
			<wp:comment_author_email>sanxiyn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>143.248.233.144</wp:comment_author_IP>
			<wp:comment_date>2008-08-25 13:32:07</wp:comment_date>
			<wp:comment_date_gmt>2008-08-25 20:32:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[WSGI is Web Server Gateway Interface, not Web Service.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Morning Coffee 173</title>
		<link>http://devhawk.net/2008/08/29/morning-coffee-173/</link>
		<pubDate>Fri, 29 Aug 2008 20:29:09 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://a50f3ddf-941b-43ae-890a-532f527d2849</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I'm on my way out the door for New Zealand and Australia, but I wanted to push out a few things.</p><ul><li>F# <strike>August</strike> September CTP is out! Don Syme has the <a href="http://blogs.msdn.com/dsyme/archive/2008/08/29/the-f-september-2008-ctp-is-now-available.aspx">announcement</a>, Jomo Fisher has the <a href="http://blogs.msdn.com/jomo_fisher/pages/f-1-9-6-0-link-roundup.aspx">link roundup</a> and details are on the brand-spanking-new MSDN F# Dev Center. Major congrats to the F# team. I've been running a pre-release version of these bits, and they are a huge step forward if you're an F# developer. </li><li>I've got an <a href="http://www.code-magazine.com/Article.aspx?quickid=0809071">article on IronPython</a> in the latest issue of CoDe magazine. Also check out <a href="http://bradwilson.typepad.com/">Brad Wilson's</a><a href="http://www.code-magazine.com/Article.aspx?quickid=0809061">IronRuby article</a>, <a href="http://blogs.tedneward.com/">Ted Neward's</a><a href="http://www.code-magazine.com/Article.aspx?quickid=0809051">F# article</a> and <a href="http://memeagora.blogspot.com/">Neil Ford's</a><a href="http://www.code-magazine.com/Article.aspx?quickid=0809041">Polygot Programming article</a>.  </li><li>Via Michael Foord I discovered that IronPython tester Dave Fugate is <a href="http://knowbody.livejournal.com/">back on the blog</a>. He starts with a <a href="http://knowbody.livejournal.com/6191.html">couple</a> of <a href="http://knowbody.livejournal.com/6442.html">posts</a> about measuring IronPython performance.  </li><li>Speaking of blogging teammates, I think the dynamic languages team has the highest percentage of bloggers in any group at MSFT. All four Program Managers (<a href="http://blog.remlog.net/">Dave</a> (lead), <a href="http://www.iunknown.com/">John</a>, <a href="http://blog.jimmy.schementi.com/">Jimmy</a> and <a href="http://devhawk.net/">me</a>), four of five developers (<a href="http://blogs.msdn.com/shrib">Shri</a> (lead), <a href="http://blogs.msdn.com/dinoviehland">Dino</a>, <a href="http://blogs.msdn.com/curth">Curt</a> and <a href="http://www.tkachenko.com/blog/">Oleg</a>) and all three Testers (<a href="http://blog.jredville.com/">Jim</a>, <a href="http://knowbody.livejournal.com/">Dave</a> and <a href="http://blogs.msdn.com/srivatsn/default.aspx">Srivatsn</a>). The only non blogger right now is Tomas - who at least has a <a href="http://tmd.havit.cz/">home page</a> - and  the lead tester which is an open position right now. 11 bloggers out of 12 team members equals 91.67% team blogger coverage.  </li><li>I was really impressed with Newspeak when I <a href="http://www.langnetsymposium.com/talks/2-01%20-%20Newspeak%20-%20Gilad%20Braha%20-%20Cadence.html">saw it at Lang.NET</a> so I'm very excited to see they have a <a href="http://newspeaklanguage.org/">new website</a>. No public bits yet, but I like the part where they point out Newspeak "can be implemented independently of Squeak, Smalltalk or any particular VM or IDE". How about implementing a version on DLR guys?  </li><li>Maurice de Beijer <a href="http://msmvps.com/blogs/theproblemsolver/archive/2008/08/25/using-an-ironpython-runtime-service-from-windows-workflow-foundation.aspx">shows off</a> embedding IronPython inside a WF application. Kinda cool, but he's primarily showing off implementing a CLR interface in IPy. How about a WF activity that execute arbitrary IPy code. That would be cool. (via <a href="http://ironpython-urls.blogspot.com/2008/08/ironpython-and-windows-workflow.html">IronPython URLs</a>)  </li><li><a href="http://code.google.com/p/ironclad/">Ironclad</a> has <a href="http://groups.google.com/group/ironpy/browse_frm/thread/4baf2673c0f0afcf/6e5d15c5d01de5e">reached</a> their 0.5 milestone, being able to import numpy from IronPython. BTW, guys - I'm not sure commenting out one line that appears to be unreferenced qualifies as a "monstrous caveat". Congrats guys! (via <a href="http://ironpython-urls.blogspot.com/2008/08/ironclad-05-released-use-numpy-from.html">IronPython URLs</a>)</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1172</wp:post_id>
		<wp:post_date>2008-08-29 13:29:09</wp:post_date>
		<wp:post_date_gmt>2008-08-29 20:29:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>morning-coffee-173</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="wf"><![CDATA[WF]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[a50f3ddf-941b-43ae-890a-532f527d2849]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Morning+Coffee+173]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/08/29/Morning+Coffee+173]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Afternoon Coffee 174</title>
		<link>http://devhawk.net/2008/09/12/afternoon-coffee-174/</link>
		<pubDate>Fri, 12 Sep 2008 20:20:30 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://13268d97-1632-4593-8ff5-f84bb0dc88e7</guid>
		<description></description>
		<content:encoded><![CDATA[<p>You know, this gets pretty long when I go a week between morning coffee posts.</p><p><strong>Dynamic Language Stuff</strong></p><ul><li>There's a new version of the <a href="http://compilerlab.members.winisp.net/dlr-spec-hosting.pdf">DLR Hosting spec</a>. One of the biggest changes is the removal of DLR's pre-canned knowledge of IPy and IRuby. Now, you use app.config to specify DLR languages and map them to extensions. Sesh has <a href="http://blogs.msdn.com/seshadripv/archive/2008/09/07/dlr-hosting-api-latest-version-of-the-spec-is-available-online-includes-changes-to-runtime-initialization.aspx">the details</a> and <a href="http://blogs.msdn.com/seshadripv/archive/2008/09/11/dlr-hosting-sample-simple-dlr-host-using-the-new-app-config-based-scriptruntime-creation.aspx">a sample</a>. If you only care about hosting IPy, you can use our <a href="http://www.codeplex.com/IronPython/SourceControl/FileView.aspx?itemId=490056&amp;changeSetId=39648">language specific hosting API</a> which doesn't require app.config. </li><li>Jimmy <a href="http://blog.jimmy.schementi.com/2008/08/silverlight-dynamic-languages-sdk-03.html">pushed out</a> a new version of the <a href="http://www.codeplex.com/sdlsdk/Release/ProjectReleases.aspx?ReleaseId=16845">Silverlight Dynamic Languages SDK</a>. He's on the lookout for a better name, one of his commenters suggested "SilverWhisper Kit". </li><li>Srivatsn shows <a href="http://blogs.msdn.com/srivatsn/archive/2008/09/09/passing-keyword-args-to-c-methods-from-ironpython.aspx">how to pass Python keyword arguments to a C# method</a> using <a href="http://www.codeplex.com/IronPython/SourceControl/FileView.aspx?itemId=478028&amp;changeSetId=39648">ParamDictionaryAttribute</a>, similar to how C# supports the params keyword via the <a href="http://msdn.microsoft.com/en-us/library/system.paramarrayattribute.aspx">ParamArrayAttribute</a>. Unfortunately, there's no syntactic sugar for calling param dictionary methods from C#. I wonder, do most people like or dislike the idea of language level support for keyword arguments in C#? I'm guessing most would be against, though I think it's a cool idea.</li><li>Maybe it's me, but I've noticed an uptick in <a href="http://summize.com/search?q=ironpython">twitter posts containing "ironpython"</a> of late. For example, <a href="http://twitter.com/jjude/statuses/912592287">via Summize</a> I discovered <a href="http://www.jjude.com/">Joseph Jude's blog finally{}</a> where he has posted a <a href="http://www.jjude.com/index.php/archives/2008/09/01/a-time-tracking-tool/">time tracking tool</a> he built in IPy as well as his initial <a href="http://www.jjude.com/index.php/archives/2008/09/07/ironpython-learnings/">IPy learnings</a>. </li><li>Michael Foord, as usual, has been generating quite a bit of good IPy content. He did a <a href="http://www.pyconuk.org/community/IronPythonTutorial">tutorial on IPy at PyCon UK</a>,  <a href="http://www.ironpythoninaction.com/">his book</a> is almost done, he has some interesting thoughts on <a href="http://www.voidspace.org.uk/python/weblog/arch_d7_2008_09_06.shtml#e1010">dynamic language performance</a> and even admits that <a href="http://www.voidspace.org.uk/python/weblog/arch_d7_2008_08_30.shtml#e1008">he likes C#</a>, though not as much as he likes Python. </li><li>Vernon Cole <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2008-August/008261.html">announced</a> that the <a href="http://adodbapi.sourceforge.net/">adodbapi project</a> now supports IronPython 2.0 as well as CPython. This library is a <a href="http://www.python.org/topics/database/DatabaseAPI-2.0.html">DB-API 2.0</a> compliant interface for any database that support ADO (note, that's native ADO not ADO.NET). I love to see Python projects with explicit support for IPy. </li><li>My boss - who apparently will be called "Rem" from now on in the office - saves you "gazillions" by <a href="http://blog.remlog.net/?p=15">explaining non-positional negotiating strategy</a> and draws the comparison to agile software development. Not exactly related to dynamic languages, but I'd like to see him further explore the relationship super-optimal, non-positional, significantly-hyphenated negotiation and software design. (OK, I made up "significantly-hyphenated")</li></ul><p><strong>Other Stuff</strong></p><ul><li>Don Syme blogs about an <a href="http://blogs.msdn.com/dsyme/archive/2008/09/06/f-ctp-release-update.aspx">update to the F# CTP</a>, a mere week after the original release. One week? That's more often than even IPy releases. I can't wait to see what they ship in next week's release! :) Seriously, I hope they can keep the release sprints short, but every week would be a bit crazy!</li><li>Speaking of F#, Matt Podwysocki <a href="http://weblogs.asp.net/podwysocki/archive/2008/09/04/fstest-updated-with-f-ctp.aspx">updates FsTest</a> for the F# CTP and posts about <a href="http://weblogs.asp.net/podwysocki/archive/2008/09/09/object-oriented-f-extension-everything.aspx">Extension Everything</a> in F#. Unlike C#, which only supports extension methods, F# also supports extensions properties, static methods and events, though like Matt I can't think of a good use for extension events. </li><li>Still speaking about F#, Andrew Kennedy has a <a href="http://blogs.msdn.com/andrewkennedy/archive/2008/08/29/units-of-measure-in-f-part-one-introducing-units.aspx">three</a><a href="http://blogs.msdn.com/andrewkennedy/archive/2008/09/02/units-of-measure-in-f-part-two-unit-conversions.aspx">part</a><a href="http://blogs.msdn.com/andrewkennedy/archive/2008/09/04/units-of-measure-in-f-part-three-generic-units.aspx">series</a> on the new units of measure feature of F#. If you were going to use F# to build the physics engine of a game, I would suspect UoM would be extremely useful. (via <a href="http://blogs.msdn.com/dsyme/archive/2008/08/30/an-introduction-to-units-of-measure-by-andrew-kennedy.aspx">Don Syme</a>)</li><li>Oh look, Chris Smith built an <a href="http://feeds.feedburner.com/~r/ChrisSmithsCompletelyUniqueView/~3/383195149/simple-f-game-using-wpf.aspx">F# version of artillery game</a> that uses Units of Measure for the physics code. I'll bet UoM was extremely useful. :)</li><li>Talking about Live Mesh at TechEd Australia - where much to my surprise frankly they were <a href="http://www.liveside.net/main/archive/2008/09/07/live-mesh-buildup-begins-mesh-apps-shown-at-tech-ed-australia.aspx">demoing Live Mesh Apps</a> - I pointed out to Scott Hanselman that Mesh is running an embedded CoreCLR (aka the same CLR from Silverlight 2). Scott went poking around and <a href="http://www.hanselman.com/blog/WindowsLiveMeshSilverlightAndTheCoreCLR.aspx">posted what he discovered</a>. Looking forward to finding out what he digs up on using CoreCLR outside the browser. </li><li>Speaking of Scott, I need to set up a <a href="http://www.hanselman.com/blog/SkypingTheWifeFoolproofVideoConferencingWithYourFamilyWhileOnTheRoad.aspx">family video conference solution</a> like Scott's before my next trip.</li><li>Congrats to Glenn Block and the MEF team for their <a href="http://blogs.msdn.com/gblock/archive/2008/09/06/mef-making-its-debut-on-codeplex.aspx">initial CodePlex source drop</a>! I've been hearing about this possibility since Glenn joined the team, so I'm really excited to see it happen. I need to take a look at it in detail (in my copious spare time) because I want to find out how to make it work with IPy.</li><li>Bart de Smet has a whole series (<a href="http://community.bartdesmet.net/blogs/bart/archive/2008/08/26/to-bind-or-not-to-bind-dynamic-expression-trees-part-0.aspx">starting here</a>) on Dynamic Expression Trees. However, given that he specifically writes "This blog series is not about DLR itself" makes it seem pretty conceptual to me. Why not talk about DLR expression trees instead Bart?</li><li>I'm sure you noticed <a href="http://haacked.com/archive/2008/08/29/asp.net-mvc-codeplex-preview-5-released.aspx">ASP.NET MVC preview 5</a> dropped last week. I really liked Brad Wilson's discussion of the <a href="http://bradwilson.typepad.com/blog/2008/08/partial-renderi.html">new view engine design</a>.</li><li>Tomas Restrepo has started <a href="http://www.winterdom.com/weblog/2008/08/31/WhyGitHub.aspx">publishing his source code on GitHub</a>. Personally, I haven't published any source code lately but I am using Git for all of my non IPy core work (which is stored in TFS). Like Tomas, I'm still getting the hang of Git but I'm really digging it's speed, it's branching and the fact that there's zero infrastructure requirements. SVN provides the lightweight <a href="http://svnbook.red-bean.com/en/1.4/svn.serverconfig.svnserve.html">svnserve</a>, but Git is even lighter weight than that. </li><li>I liked Steve Yegge's <a href="http://steve-yegge.blogspot.com/2008/09/programmings-dirtiest-little-secret.html">post on typing</a>. I am a touch typer, but I doubt I type 70 words a minutes. I do know where the number keys are without looking though, so I guess that's pretty good. I remember seeing <a href="http://www.simplegeek.com/">Chris Anderson</a> demo <strike>Avalon</strike> WPF long before it was public and being impressed at how fast he could type. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1173</wp:post_id>
		<wp:post_date>2008-09-12 13:20:30</wp:post_date>
		<wp:post_date_gmt>2008-09-12 20:20:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>afternoon-coffee-174</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="dynamic-languages"><![CDATA[Dynamic Languages]]></category>
		<category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="live-mesh"><![CDATA[Live Mesh]]></category>
		<category domain="category" nicename="morning-coffee"><![CDATA[Morning Coffee]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="post_tag" nicename="software-design"><![CDATA[Software Design]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[13268d97-1632-4593-8ff5-f84bb0dc88e7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Afternoon+Coffee+174]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/09/12/Afternoon+Coffee+174]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2120</wp:comment_id>
			<wp:comment_author><![CDATA[sesh]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/seshadripv</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.104</wp:comment_author_IP>
			<wp:comment_date>2008-09-14 16:54:38</wp:comment_date>
			<wp:comment_date_gmt>2008-09-14 23:54:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["If you only care about hosting IPy, you can use our language specific hosting API which doesn't require app.config."

Here is some quick info on that - http://blogs.msdn.com/seshadripv/archive/2008/09/14/dlr-hosting-api-how-to-create-a-scriptruntime-object-without-using-app-config-files-using-language-specific-hosting-api.aspx]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2121</wp:comment_id>
			<wp:comment_author><![CDATA[seo]]></wp:comment_author>
			<wp:comment_author_email>finty@finty.sk</wp:comment_author_email>
			<wp:comment_author_url>http://www.finty.sk</wp:comment_author_url>
			<wp:comment_author_IP>78.98.70.237</wp:comment_author_IP>
			<wp:comment_date>2008-09-27 15:45:12</wp:comment_date>
			<wp:comment_date_gmt>2008-09-27 22:45:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[subscribe to the view to the small errors]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Webdev Script and KillWebDevServer</title>
		<link>http://devhawk.net/2008/09/12/webdev-script-and-killwebdevserver/</link>
		<pubDate>Fri, 12 Sep 2008 17:53:41 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://7781e275-7468-40cb-8f1a-fd28c2edcc78</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I was updating <a href="http://devhawk.net/2008/03/20/WebDevWebServer+PowerShell+Function.aspx">my webdev powershell script</a> today. I wanted to add support for a -browser switch that would automatically launch a browser window the way chiron from the <a href="http://codeplex.com/sdlsdk">Silverlight Dynamic Languages SDK</a>. does. I also set the script to serve up the current directory by default. I posted <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/webdev.ps1">the new version</a> up on my SkyDrive.</p><p>While I was working on the script, I thought about how one might shutdown the WebDev server from the command line. That turned out to be much harder. Basically, you have to look thru all the top level windows for one that has "ASP.NET Development Server" in the window text, then you send that window two messages - WM_QUERYENDSESSION and WM_QUIT. Not sure why the WebDev server uses WM_QUERYENDSESSION to shut down it's tray icon, but if you look at WebDev.WebServer.exe in Reflector, you'll see the tray icon form overrides WinProc in order to look for message 0x11, i.e. WM_QUERYENDSESSION.</p><p>I threw together a quick little <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Utilities/KillWebDevServer.exe">C# console app</a> to shutdown the WebDev server and stuck it up on my SkyDrive as well. <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Utilities/KillWebDevServer.zip">Source code</a> is up there too. I had to use a bunch of P/Invokes to make it work, or I would have written it in Powershell or IronPython.</p><p>Enjoy.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1174</wp:post_id>
		<wp:post_date>2008-09-12 17:53:41</wp:post_date>
		<wp:post_date_gmt>2008-09-12 17:53:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>webdev-script-and-killwebdevserver</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[7781e275-7468-40cb-8f1a-fd28c2edcc78]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Webdev+Script+And+KillWebDevServer]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/09/13/Webdev+Script+And+KillWebDevServer]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2122</wp:comment_id>
			<wp:comment_author><![CDATA[Tomas Restrepo]]></wp:comment_author>
			<wp:comment_author_email>tomas@winterdom.com</wp:comment_author_email>
			<wp:comment_author_url>http://winterdom.com/</wp:comment_author_url>
			<wp:comment_author_IP>200.116.183.12</wp:comment_author_IP>
			<wp:comment_date>2008-09-12 18:37:09</wp:comment_date>
			<wp:comment_date_gmt>2008-09-13 01:37:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey that's pretty cool! I've become quite a regular user of your webdev script :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>DLR Namespace Change Fire Drill</title>
		<link>http://devhawk.net/2008/09/17/dlr-namespace-change-fire-drill/</link>
		<pubDate>Wed, 17 Sep 2008 16:46:18 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d36d596b-e086-49dd-a05e-2a83fa790bdf</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>UPDATE</strong>: This approach <span style="text-decoration: underline;"><em>doesn't work</em></span>. Please see the <a href="http://devhawk.net/2008/10/21/the-fifth-assembly/">followup article</a> for the gory details.

[Ed. Note – This long post is about changes we made in the DLR to avoid type collisions with System.Core. The short version of this post is “You can safely ignore the CS1685 warning you’ll get if you embed IPy 2.0 Beta 5 or later in your C# 3.0 application”. The long version below has the gory details of what we did, why we did it, a little about how extension methods work and why you can ignore warning CS1685.]

[Author note – I don’t really have an editor.]

Between Beta 3 and Beta 4 of IronPython 2.0, the DLR team made a very significant change to Microsoft.Scripting.Core.dll. As <a href="http://evain.net/blog/articles/2008/07/29/net-4-c-4-and-the-dlr">JB noticed</a>, the DLR expression trees have merged with the LINQ expression trees. As part of this effort, they moved the newly merged expression tree types in Microsoft.Scripting.Core.dll into the System.Linq.Expressions namespace – the same namespace where those types live in System.Core.dll in .NET Framework 3.5.

This change caused <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2008-August/thread.html#8036">quite a few issues</a> with our users. Basically, because of the expression tree merge and the namespace change, the beta 4 version of Microsoft.Scripting.Core.dll had type collisions with System.Core.dll all over the place, making it hard or impossible to use them together. If you're using C# you could get around these type collisions by using an <a href="http://msdn.microsoft.com/en-us/library/yabyz3h4.aspx">assembly reference alias</a>. However, assembly reference aliases aren’t supported for Web Sites projects or in Visual Basic.

To fix this, we're changing the top level namespace in Microsoft.Scripting.Core.dll from System to Microsoft. We're not going back to the namespaces as they were in Beta 3 - for example, DLR expression trees were originally in the Microsoft.Scripting.Ast namespace but now they'll be in Microsoft.Linq.Expressions. We don't think this change will be much of an issue because most people don't use types from Microsoft.Scripting.Core.dll directly. Unless you're building your own DLR language, this namespace change shouldn't affect you at all except to solve the type collision problem.

However, we did hit a small snag.

The LINQ expression tree code, having been written for .NET 3.5, is a heavy user of extension methods. This means IronPython is now also a heavy user of extension methods. However, unlike LINQ, IronPython has to run against .NET 2.0 SP1. That means we can't reference System.Core.dll in IPy or DLR. If you try to compile C# code with extension methods but without a reference System.Core.dll, you get a <a href="http://msdn.microsoft.com/en-us/library/bb384020.aspx">compiler error</a> complaining that it can't find the required <a href="http://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.extensionattribute.aspx">ExtensionAttribute</a> type, which is defined in System.Core.dll.

This might appear to be an unsolvable problem, but it turns out the C# compiler doesn't actually care <em>where</em> the ExtensionAttribute type comes from. You can actually define your own copy of ExtensionAttribute (in the <a href="http://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.aspx">right namespace</a>) and C# will happily compile extension methods without complaint. Furthermore, ExtensionAttribute is only used as a marker - there's <a href="code://System.Core:3.5.0.0/System.Runtime.CompilerServices.ExtensionAttribute">no real code in it</a> - so implementing your own copy is trivial. In the DLR source, you'll find they have defined their own copy of <a href="http://www.codeplex.com/IronPython/SourceControl/FileView.aspx?itemId=478318&amp;changeSetId=39144">ExtensionAttribute</a> so they can use extension methods and remain .NET 2.0 SP1 compatible. Since we were using them in Microsoft.Scripting.Core.dll, we started using extension methods in Microsoft.Scripting.dll and IronPython.dll as well.

If you'll recall back to the start of this post, we're changing namespaces in order to eliminate type collisions. The snag we hit was that we couldn’t change the ExtensionAttribute namespace without breaking all the extension methods. But we couldn’t leave it the same without having a type collision with the ExtensionAttribute defined in System.Core.dll. If you had a project including both copies of ExtensionAttribute, C# would generate a multiple type definition warning and VB would generate a multiple type definition error.

We've looked at a several possible solutions to this. One idea was to ship two completely different sets of binaries - one for .NET 2.0 and one for .NET 3.5. But the upgrade story for that stinks - you want to upgrade your app to .NET 3.5 you have to swap out all your IPy and DLR dlls. Yuck. We considered having separate copies of just Microsoft.Scripting.Core.dll - one defining ExtensionAttribute and the other linked to System.Core.dll and using <a href="http://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.typeforwardedtoattribute.aspx">TypeForwardedTo</a> - but since the assemblies are strongly typed they'd have to same exact version number in order to be swappable. Double yuck.

In the end, we decided to put an internal copy of ExtensionAttribute in each assembly that needs it. As previously indicated, that's IronPython.dll and Microsoft.Scripting.dll as well as making the copy already in Microsoft.Scripting.Core.dll internal. For <a href="http://www.ironruby.com/">IronRuby</a> fans reading this, we also added a copy of ExtensionAttribute to IronRuby.dll and IronRuby.Libraries.Scanner.dll as well.

It seems counterintuitive, doesn't it? To solve a multiple type definition problem, we defined even more copies of the type in question.

The key thing is that all these copies of ExtensionAttribute (except the one in System.Core.dll) are internal rather than public types. If you build a VB app that references System.Core.dll and Microsoft.Scripting.Core.dll (beta 4), you end up with multiple <em>public</em> copies of ExtensionAttribute and are rewarded with a VB compiler error. However, as long as there's only one public copy of ExtensionAttribute - regardless of the number of internal copies of that type - VB is happy. So if you're building a VB app against Microsoft.Scripting.Core.dll (beta 5) and System.Core, you should be golden.

In C# 3.0, on the other hand, continues to throw a warning. If ExtensionAttribute was a user-defined type, we'd be fine. However, since Extension attribute is a "predefined system type", you get <a href="http://msdn.microsoft.com/en-us/library/8xys0hxk.aspx">C# warning 1685</a> even though the copies of ExtensionAttribute are all internal. Furthermore, since there are multiple internal copies of ExtensionAttribute in the IPy dlls, you'll get this warning even if you're not referencing System.Core. It seems here that C# 3.0 considers ExtensionAttribute a predefined system type while VB doesn't.

I realize that always having a warning in C# 3.0 - even if you're not referencing System.Core.dll - doesn't feel particularly clean. Given our desire to support both .NET v2 and v3.5 with the same binaries, it was the only choice. Remember that ExtensionAttribute has literally no code and is only used to signal the compiler for extension methods, so we decided it was fairly ignorable as warnings go.

If you're willing to compile from source yourself, it's fairly easy to build a set of binaries for a specific version .NET that doesn't have the warning. If you're building for v3.5, you need to remove Extension.cs from the three projects that have a copy of it (Microsoft.Scripting.Core, Microsoft.Scripting, IronPython) and add a reference to System.Core.dll. If you're building for v2.0, remove the Extension.cs from Microsoft.Scripting and IronPython then change the visibility in the Microsoft.Scripting.Core version from internal to public. Note, we <a href="http://msdn.microsoft.com/en-us/library/microsoft.build.tasks.managedcompiler.treatwarningsaserrors.aspx">treat warnings as errors</a> in IPy, but we did add CS1685 to the list of <a href="http://msdn.microsoft.com/en-us/library/microsoft.build.tasks.csc.warningsnotaserrors.aspx">WarningsNotAsErrors</a> so the code still compiles. Of course, if you’re defining a framework specific version, you won’t get the warning anyway.

As usual, we appreciate all feedback from our community so hammer on this build as much as you can - esp. if you've been having type conflict errors with Beta 4. As I <a href="http://devhawk.net/2008/09/17/IronPython+Beta+5.aspx">said in an earlier post</a>, this is our last planned beta, so now’s the time put it thru the paces to make sure there’s nothing blocking you before we get to 2.0.

Finally, major props to Curt...aka <a href="http://blogs.msdn.com/curth/">IRON CURT</a>...for driving these dev changes and putting up with the constant barrage of "where are we now?" status requests from yours truly. I'm sure he now regrets sitting across the hall within easy earshot.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1175</wp:post_id>
		<wp:post_date>2008-09-17 16:46:18</wp:post_date>
		<wp:post_date_gmt>2008-09-17 16:46:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dlr-namespace-change-fire-drill</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d36d596b-e086-49dd-a05e-2a83fa790bdf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[DLR+Namespace+Change+Fire+Drill]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/09/17/DLR+Namespace+Change+Fire+Drill]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2123</wp:comment_id>
			<wp:comment_author><![CDATA[Domonyi]]></wp:comment_author>
			<wp:comment_author_email>info@aries.hu</wp:comment_author_email>
			<wp:comment_author_url>http://arieshu.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>89.132.3.143</wp:comment_author_IP>
			<wp:comment_date>2008-09-27 23:19:12</wp:comment_date>
			<wp:comment_date_gmt>2008-09-28 06:19:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

Your site is one of my favorites seen around blog explosion. Keep up the good work.
I enjoy reading your blog. It is great to find someone who can find the fun things in life!
I wish you all the best in all years. Please take a look at my websites and increase your page rank, 
traffic as well. I look forward to developing a friendship and networking with you. Let me know if there 
is something I can do to assist you with your business free.

With Regards,
Karoly Domonyi
http://www.ariestrade.com]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython Beta 5</title>
		<link>http://devhawk.net/2008/09/17/ironpython-beta-5/</link>
		<pubDate>Wed, 17 Sep 2008 15:55:02 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://db451118-d62b-43f7-9847-7b8f3bd50a53</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://knowbody.livejournal.com/">Dave</a> just posted <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2008-September/008424.html">the announcement</a> to the IPy mailing list, Beta 5 has been released. You can <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=15625">download the release from CodePlex</a>. Like Beta 4, this release is available in MSI or ZIP format, with the MSI including the Python Standard Library as an option.</p><p>As per <a href="http://www.codeplex.com/IronPython/Wiki/View.aspx?title=v2.0%20Beta%205%20Release%20Notes&amp;referringTitle=Home">the release notes</a>, this is our last planned beta for 2.0 – our next planned release is RC1. So if you’ve been holding off on upgrading to the latest betas or to 2.0 in general, now is the time to upgrade if you want us to fix your bug before we ship 2.0.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1176</wp:post_id>
		<wp:post_date>2008-09-17 15:55:02</wp:post_date>
		<wp:post_date_gmt>2008-09-17 15:55:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-beta-5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[db451118-d62b-43f7-9847-7b8f3bd50a53]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+Beta+5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/09/17/IronPython+Beta+5]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The PDC Prep Death March - It&#039;s Almost Over</title>
		<link>http://devhawk.net/2008/10/19/the-pdc-prep-death-march-its-almost-over/</link>
		<pubDate>Sun, 19 Oct 2008 12:00:12 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://87983a0e-d4c9-4f9e-bdcf-0f9e0b5baeda</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="display: inline; margin-left: 0px; margin-right: 0px" align="right" src="http://microsoftpdc.com/Images/BlogBling/PDC2008Brain.gif" />So it’s been just over a month since my last post, and I think it’s safe to say it’s been one of the busiest of my career to date. If you’ve been following my <a href="http://twitter.com/devhawk">Twitter stream</a>, you already know that I’ve spent the last two weeks in <a href="http://microsoftpdc.com/">PDC</a> dry runs – we went thru almost every session in the track, reviewing content and giving feedback to the speakers. Some were very good (as I <a href="http://twitter.com/DevHawk/statuses/948784175">twittered at the time</a>, <a href="http://blogs.msdn.com/edpinto/">Ed Pinto’s</a><a href="http://channel9.msdn.com/pdc2008/TL06/">Building WCF Services with WF</a> blew my mind). Others, needed more work, but I think will be great by PDC. I got into several disagreements about the best way to present content, had to raise my voice once, and called some speakers “a little creepy”. (No, I’m not telling you which sessions those were.)</p><p>After 9 days of dry runs, I spent Friday with <a href="http://blogs.msdn.com/jasonz/">Jason Zander</a>, General Manager for Visual Studio, again reviewing almost all the decks with him and some marketing folks. Frankly, spending that much time with my boss’s boss’s boss’s boss is a bit intimidating, but Jason’s been great and I’m guessing the visibility will be great for my career. I mean, come review time, he won’t be saying “Harry who?” I’ve also gotten to meet people from far and wide across my division, which has been great since I’m still new over here.</p><p>Unfortunately,  I can’t talk much about <em>what</em> I’ve seen, since as you know most of it is new and being revealed at PDC for the first time publicly. For example, I can tell you Ed’s talk was frakking awesome, but I can’t tell you <em>why</em> I think it’s frakking awesome, yet. But I’m queuing up some posts now that I will publish later once the sessions are public. </p><p>Tomorrow, I’m back to my “day job” as the IronPython PM. My teammates have been soldering on in my absence – the one time I was in my office in the past two weeks I joked that no one would recognize me since I’ve been gone so long. We’re coming up on the final release of IronPython 2.0, and my exclusive focus on PDC has left me a mountain of work to do here in the final stretch. </p><p>In addition to my teammates, I need to give a quick shout out to <a href="http://channel9.msdn.com/shows/WM_IN/Developers-are-my-life-I-love-them-OK-how-can-you-not-want-to-find-out-more-about-who-said-tha">Shoshanna Budzianowski</a> and <a href="http://blogs.msdn.com/mswanson">Mike Swanson</a>, without whom I’m not sure I would have survived the past two weeks. Mike is the PDC content owner, so as hard as the past two weeks have been for me, I’m sure they’re worse for him. Shoshanna is the track owner for the “Tools and Languages” track (that’s what the TL in the session codes stands for) and I’ve been the main representative for the VS group in the track. I don’t know if she’s ever done something like PDC before, but she’s awesome.  </p><p>I leave Friday for southern California. I’m going down early to see a few friends and to do my <a href="http://www.socalcodecamp.com/session.aspx?sid=96fe471e-e96d-4c82-bfa4-a2f7d4d88387">Pumping Iron talk</a> at the <a href="http://www.socalcodecamp.com/">SoCal Code Camp</a> next Saturday. That should be fun since it’s being held at <a href="http://viterbi.usc.edu/">my alma mater</a>. Then Monday starts PDC proper. If you’re going to PDC, some find me in the <a href="http://microsoftpdc.com/Agenda/UnSessions.aspx#pdc-lounges">PDC Lounges</a>. I’ll be spending the vast majority of my time there, since I’ve seen all the content in my track already! </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1177</wp:post_id>
		<wp:post_date>2008-10-19 12:00:12</wp:post_date>
		<wp:post_date_gmt>2008-10-19 12:00:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-pdc-prep-death-march-its-almost-over</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="post_tag" nicename="pdc08"><![CDATA[PDC08]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[87983a0e-d4c9-4f9e-bdcf-0f9e0b5baeda]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[The+PDC+Prep+Death+March+Ndash+Itrsquos+Almost+Over]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/10/19/The+PDC+Prep+Death+March+Ndash+Itrsquos+Almost+Over]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Fifth Assembly</title>
		<link>http://devhawk.net/2008/10/21/the-fifth-assembly/</link>
		<pubDate>Tue, 21 Oct 2008 12:42:41 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://c229d24e-6da3-40cc-8d5f-b09193b85d65</guid>
		<description></description>
		<content:encoded><![CDATA[<p>As I’ve <a href="http://devhawk.net/2008/09/17/DLR+Namespace+Change+Fire+Drill.aspx">written previously</a>, we’ve had a few challenges recently with name collisions in the DLR. In that post, I described how we had solved – or thought we solved, as it turned out – the problem with ExtensionAttribute name collisions between Microsoft.Scripting.Core.dll and System.dll. </p><p>However, as it turns out, having lots of copies of the same type <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2008-September/008485.html">didn’t solve the problem</a>. Since ExtensionAttribute is a known type to the C# 3.0 compiler, it has to choose one of the multiple copies that are in the project. We <em>thought</em> that given a choice, it would favor the System.Core version. However, what folks discovered after we released Beta 5 is that C# 3.0 will choose the <em>first</em> copy of ExtensionAttribute that it finds. So if you have System.Core.dll and IronPython referenced in your project, and you define your own extension methods, the compile fails if the C# 3.0 compiler finds one of the IronPython or DLR private copies of ExtensionAttribute before the public copy in System.Core.</p><p>Furthermore, there doesn’t seem to be any way to set the reference order in MSBuild files. I’ve never dug deep into the MSBuild file format, but changing the order of the references in the csproj file didn’t seem to effect the order the references were passed to the C# compiler. I’m guessing we might be able to change this by fiddling with the <a href="http://msdn.microsoft.com/en-us/library/9ad3f294.aspx">ResolveAssemblyReference task</a>, but we didn’t want to force low level MSBuild file hacking on our user base.</p><p>We looked at a variety of other solutions, including rewriting the IL after compilation to change the namespace of the ExtensionAttribute. However, we had trouble making that solution work and besides, changing the ExtensionAttribute namespace would have broken anyone using the existing DLR or IPy extension methods. So instead, we went with a different solution that we like to refer to as “The Fifth Assembly” around the office.</p><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheFifthAssembly_B085/image_2.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="IPy References" border="0" alt="IPy References" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheFifthAssembly_B085/image_thumb.png" width="312" height="216" /></a>In IronPython 2.0 Beta 5, there were four DLLs that implement IronPython: IronPython.dll, IronPython.Modules.dll, Microsoft.Scripting.dll and Microsoft.Scripting.Core.dll. In our RC1 release, we’ve added “The Fifth Assembly”: Microsoft.Scripting.ExtensionAttribute.dll. As you might guess from its name, it has only a single public type: ExtensionAttribute. By having ExtensionAttribute in its own dedicated assembly, we can avoid the type collision at compile time by not referencing both System.Core.dll and Microsoft.Scripting.ExtensionAttribute.dll in the same project. </p><p>In IronPython, we reference the ExtensionAttribute assembly because we use the C# 3.0 complier but IPy has to be able to run on .NET Framework 2.0 SP1. <a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheFifthAssembly_B085/image_4.png"><img style="border-right-width: 0px; margin: 0px 5px 0px 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" align="left" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheFifthAssembly_B085/image_thumb_1.png" width="247" height="205" /></a>However, projects that embed IronPython in a .NET 3.5 project (aka C# 3.0 or VB 9.0) will reference System.Core instead. The only reason why you would explicitly use the ExtensionAttribute assembly was that if you, like us, wanted to build your app with .NET 3.5, use extension methods but still be compatible with .NET 2.0 SP1. We’re guessing there aren’t many of our customers doing that, but if you are, explicitly referencing ExtensionAttribute will work just as it does for compiling IronPython itself.</p><p>It’s important to remember two things about the Fifth Assembly:</p><ol><li>Never reference System.Core and Microsoft.Scripting.ExtensionAttribute in the same project. </li><li>Always deploy Microsoft.Scripting.ExtensionAttribute.dll as part of any solution that embeds IronPython (or IronRuby or vanilla DLR for that matter), even if you don’t reference it explicitly within your project. </li></ol><p>This change is public in the source code as of <a href="http://www.codeplex.com/IronPython/SourceControl/DirectoryView.aspx?SourcePath=&amp;changeSetId=42076">change set 42076</a> and will also be in the nearly-ready RC1 release of IronPython 2.0. If you’ve got any questions or &lt;shudder&gt; find any more issues with this solution, please let us know right away.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1178</wp:post_id>
		<wp:post_date>2008-10-21 12:42:41</wp:post_date>
		<wp:post_date_gmt>2008-10-21 12:42:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-fifth-assembly</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[c229d24e-6da3-40cc-8d5f-b09193b85d65]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[The+Fifth+Assembly]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/10/21/The+Fifth+Assembly]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2124</wp:comment_id>
			<wp:comment_author><![CDATA[Dave]]></wp:comment_author>
			<wp:comment_author_email>almostdave@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>128.250.77.144</wp:comment_author_IP>
			<wp:comment_date>2008-10-23 00:16:22</wp:comment_date>
			<wp:comment_date_gmt>2008-10-23 07:16:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

This is perhaps not the best place to report this, but I couldn't find the associated ticket in the CodePlex issue tracker.  I've just updated to RC1.  My project is a fairly basic WPF project and references System.Core; it previously got the warning about the duplicate definition.  Now when I build I get the following error:

Target MarkupCompilePass1:
    C:WindowsMicrosoft.NETFrameworkv3.5Microsoft.WinFX.targets(294,9): error MC1000: Unknown build error, 'Cannot resolve dependency to assembly 'Microsoft.Scripting.ExtensionAttribute, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' because it has not been preloaded. When using the ReflectionOnly APIs, dependent assemblies must be pre-loaded or loaded on demand through the ReflectionOnlyAssemblyResolve event.' 


Initially I just used RC1 from the zip file, but I also tried installing from the .msi on the chance the it would install the assemblies into the GAC but it didn't do that.  Have I missed something in my project configuration?

Thanks,
Dave]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2125</wp:comment_id>
			<wp:comment_author><![CDATA[Chris Cavanagh]]></wp:comment_author>
			<wp:comment_author_email>cjcavanagh@benefittech.com</wp:comment_author_email>
			<wp:comment_author_url>http://chriscavanagh.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>65.166.200.179</wp:comment_author_IP>
			<wp:comment_date>2008-11-12 12:44:33</wp:comment_date>
			<wp:comment_date_gmt>2008-11-12 20:44:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Harry - Will Microsoft.Scripting.Core and System.Core eventually be merged? I'm hitting some problems using Microsoft.Scripting.Core in a Silverlight 2 project (it wants a System.Core reference too).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2126</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.108</wp:comment_author_IP>
			<wp:comment_date>2008-11-18 16:17:42</wp:comment_date>
			<wp:comment_date_gmt>2008-11-19 00:17:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Dave, Did you create a new issue on CodePlex?

@Chris, Microsoft.Scripting.Core is essentially the .NET 4.0 version of System.Core. The merge has already been done]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython 2.0 Release Candidate</title>
		<link>http://devhawk.net/2008/10/24/ironpython-2-0-release-candidate/</link>
		<pubDate>Fri, 24 Oct 2008 11:13:22 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d5dfce96-a6fd-4604-b625-2435d5d53b96</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’ve been so busy with last minute PDC prep that I totally missed that my teammates shipped the <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=17404">IronPython 2.0 Release Candidate</a>. Awesome work guys!</p><p>If you’re an IPy user, this is your last chance to hammer on the release and raise any issues to our attention before we ship. If you find anything, please <a href="http://www.codeplex.com/IronPython/WorkItem/Create.aspx">file a bug</a> and report it on the <a href="http://lists.ironpython.com/listinfo.cgi/users-ironpython.com">mailing list</a> right away. For those who haven’t seen it, Dave from our test team has a <a href="http://knowbody.livejournal.com/7964.html">handy guide</a> for reporting bugs, including a link to the bug template. </p><p>Next step, RTM!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1179</wp:post_id>
		<wp:post_date>2008-10-24 11:13:22</wp:post_date>
		<wp:post_date_gmt>2008-10-24 11:13:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-2-0-release-candidate</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d5dfce96-a6fd-4604-b625-2435d5d53b96]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+20+Release+Candidate]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/10/24/IronPython+20+Release+Candidate]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PDC08 Day -2</title>
		<link>http://devhawk.net/2008/10/25/pdc08-day-2/</link>
		<pubDate>Sat, 25 Oct 2008 16:02:53 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://0c0fea3c-8f82-4e2f-a017-a989cf25d04c</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’m in Los Angeles for PDC. Now that all the prep work is done, I’m going to to try and get back to regular blogging and I figure that daily reports from PDC is as good a way as any to get started.</p><p>I’m in town early for two reasons. We’re doing some last minute dry runs tomorrow afternoon and I wanted to make sure I was in town in case there was any other last minute stuff to do. Additionally, there’s a <a href="http://www.socalcodecamp.com/">Code Camp in SoCal</a> this weekend, so I volunteered to do my <a href="http://www.socalcodecamp.com/session.aspx?sid=96fe471e-e96d-4c82-bfa4-a2f7d4d88387">Pumping Iron</a> talk. </p><p>The talk went pretty well – the room was mostly full (though small) and many folks stayed as much as 30 minutes over to ask questions. The Code Camp is being held at USC, my alma mater, so it was kind of strange to be standing in the front of the classroom in Vivian Hall rather than taking notes at the back. I made a trip over to the campus bookstore (thought I kept calling it the ‘company store’) for a new T-shirt for me and some SC gear for the kids. </p><p>Hung out most of the day with <a href="http://mvasoftware.com/blogs/mikev_weblog">Mike VIncent</a> whom I’ve gotten to know over the past couple of years thru his IASA and INETA involvement. He’s doing a talk on <a href="http://www.socalcodecamp.com/session.aspx?sid=2151c611-844d-4918-bf8d-af0563677baa">Dynamic Languages and the DLR</a> tomorrow at Code Camp, so I’m looking forward to that. Also spent time with <a href="http://blogs.msdn.com/chrsmith/">Chris Smith</a> (F# SDET), <a href="http://diditwith.net/">Dustin Campbell</a> (VB PM), <a href="http://blogs.msdn.com/charlie/">Charlie Calvert</a> (C# PM) and ran into <a href="http://donxml.com/">DonXML</a> as I was heading out.</p><p>I headed out early because I’m going up over the hill to Burbank tonight to see some of my old college / LA buddies, drink some beer and watch the <a href="http://sports.espn.go.com/ncf/preview?gameId=282990012">SC game</a>. With our early loss to Oregon State, we can’t make the Rose Bowl, much less the BCS Championship, without help. If win out but don’t get help, we’ll still probably get a BCS at-large bid. For a team that’s been in the championship hunt for the past five years, it’s disappointing, but it’s also like “no pressure” – at least for me, an non-obsessive alumni fan. (I typically save my obsession for Capitals hockey, but even that takes a back seat to the presidential election for the next 11 days.)</p><p>I forget who said it, but someone said today that “Los Angeles was like paradise 50 years ago”. Truer words were rarely ever said. It’s nice to be on campus and see friends and all that, but I can’t wait to go home. Why does PDC <em>always</em> have to be in LA? <a href="http://blogs.msdn.com/mswanson/">Mike</a>? Well, at least it’s not <a href="http://devhawk.net/2003/10/26/Stuck+SEATACLike+Everyone+Else.aspx">on fire this time</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1180</wp:post_id>
		<wp:post_date>2008-10-25 16:02:53</wp:post_date>
		<wp:post_date_gmt>2008-10-25 16:02:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pdc08-day-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="pdc08"><![CDATA[PDC08]]></category>
		<category domain="post_tag" nicename="usc"><![CDATA[USC]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[0c0fea3c-8f82-4e2f-a017-a989cf25d04c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[PDC08+Day+Ndash2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/10/25/PDC08+Day+Ndash2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I Survived October</title>
		<link>http://devhawk.net/2008/11/01/i-survived-october/</link>
		<pubDate>Sat, 01 Nov 2008 10:59:40 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://e375ccf8-6a9f-4c99-8f21-3b108eacb1f6</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It' felt touch and go at times, but I did manage to make it thru PDC prep, PDC itself, shipping <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=17404">IPy 2.0 RC1</a> and Halloween relatively unscathed. I was Superman for Halloween – the perils of letting the five year old pick everyone’s costume, we we’re *all* Superman (well, Jules and Riley were Supergirl) – but given how exhausted I was, I could have skipped the costume and just gone as a zombie. </p><p>My inbox is currently just under 500 messages, I’ve got a mountain of stuff to finish for IPy RTM, I’m presenting at the <a href="http://www.pnpsummit.com/west2008/west2008.aspx">p&amp;p Summit</a> and I’m finally get some attention from the legal dept (now that we’re past PDC). In other words, it’s not the end of PDC is ushering in a golden age of zero work for Harry. But with PDC in my rear view mirror, I don’t feel quite so overwhelmed as I did.</p><p>And on top of all this, I’ve been borderline obsessed with election news. I’ve basically given up on all my non-political blog reading – if I hadn’t been working on PDC I might not have even been aware of the big announcements like Oslo and Azure. Things are looking good for Obama and the Democrats, but as this <a href="https://donate.barackobama.com/page/contribute/finishline1">hilarious video shows</a> “Being in a good position to win is not the same as winning.” I haven’t had the time to volunteer for Obama but my father has been volunteering for Obama in Northern Virginia – aka “<a href="http://ap.google.com/article/ALeqM5hby_5Pku5ywmfC_rEtEV5BcYKR5gD93KDFPO0">communist country</a>”. It sure would be nice to see my home state go blue.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1181</wp:post_id>
		<wp:post_date>2008-11-01 10:59:40</wp:post_date>
		<wp:post_date_gmt>2008-11-01 10:59:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>i-survived-october</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="pdc08"><![CDATA[PDC08]]></category>
		<category domain="category" nicename="politics"><![CDATA[Politics]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[e375ccf8-6a9f-4c99-8f21-3b108eacb1f6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[I+Survived+October]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/01/I+Survived+October]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2127</wp:comment_id>
			<wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.165.73.204</wp:comment_author_IP>
			<wp:comment_date>2008-11-01 18:24:00</wp:comment_date>
			<wp:comment_date_gmt>2008-11-02 01:24:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[stick to technology because I don't think people read your excellent blogs because of your ideological convictions...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2128</wp:comment_id>
			<wp:comment_author><![CDATA[Serge Baranovsky]]></wp:comment_author>
			<wp:comment_author_email>sergeb@submain.com</wp:comment_author_email>
			<wp:comment_author_url>http://http//submain.com</wp:comment_author_url>
			<wp:comment_author_IP>24.17.254.114</wp:comment_author_IP>
			<wp:comment_date>2008-11-03 10:59:48</wp:comment_date>
			<wp:comment_date_gmt>2008-11-03 18:59:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[2 Anonymous - that's really harsh. There is a real person behind this blog. Not a chicken who wouldn't even sign comments with own name. Let me repeat - "Weblog" - in its original meaning a web based "diary". Hence - "personal". If one wants to read technical only stuff, pick up a copy of MSDN magazine. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Election Day 2008</title>
		<link>http://devhawk.net/2008/11/04/election-day-2008/</link>
		<pubDate>Tue, 04 Nov 2008 12:21:12 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://c352750f-63f1-4889-95c3-42be3ebc0319</guid>
		<description></description>
		<content:encoded><![CDATA[<p><em>(Editor’s note: almost every time I make a political post, some yahoo, typically anonymously, suggests that I “</em><a href="http://devhawk.net/CommentView,guid,e375ccf8-6a9f-4c99-8f21-3b108eacb1f6.aspx#commentstart"><em>stick to technology</em></a><em>”. I will remind you, dear reader, that </em><a href="http://devhawk.net/2007/04/03/This+Is+Not+A+Technical+Blog.aspx"><em>This Is Not A Technical Blog</em></a><em>. If you don’t like my politics, you’re free to ignore the political posts or simply unsubscribe from my blog altogether. Anonymous suggestions as to what I should or should not be blogging about will be summarily ignored.)</em></p><p>Jules and I voted this morning, before work and school. Patrick helped Julie vote and Riley helped me vote. I’m assuming regular readers don’t need to be told <a href="http://www.barackobama.com/">who I voted for</a>. Riley just wanted to help fill in the bubbles because it’s like coloring. Patrick kinda got what was going on – check out <a href="http://techiewife.spaces.live.com/Blog/cns!3DAECC033B88329C!2911.entry">Jules’ post</a> about how they cast “our” vote. </p><p>For shits and giggles, I went back and looked at my posts <a href="http://devhawk.net/2006/11/07/Certainly+Not+Politics+As+Usual.aspx">from two years ago</a>. It doesn’t make me Nostradamus, but I did guess we were going to have “a very ugly race, especially from the Republicans” and that “the nomination race will be worse” than the general election. If <a href="http://countdown.msnbc.com">Keith Olbermann</a> or <a href="http://rachel.msnbc.com/">Rachel Maddow</a> want to get in on this insightful political analysis, they know where to reach me. :)</p><p>I’ve been obsessed with three polling sites over the past few months:</p><ul><li><a href="http://www.fivethirtyeight.com/">FiveThirtyEight.com</a> which is projecting 6.1 point popular vote / 159.2 electoral vote Obama victory</li><li><a title="http://www.pollster.com/" href="http://www.pollster.com/">Pollster.com</a> which is projecting a <a href="http://www.pollster.com/polls/us/08-us-pres-ge-mvo.php?xml=/flashcharts/content/xml/08USPresGEMvO.xml&amp;choices=Obama,McCain&amp;phone=&amp;ivr=&amp;internet=&amp;mail=&amp;smoothing=&amp;from_date=&amp;to_date=&amp;min_pct=&amp;max_pct=&amp;grid=&amp;points=&amp;trends=&amp;lines=">7.6 point</a> PV / 149 EV Obama victory (with 105 toss-up EVs)</li><li><a href="http://www.realclearpolitics.com/">Real Clear Politics</a> is projecting a <a href="http://www.realclearpolitics.com/epolls/2008/president/us/general_election_mccain_vs_obama-225.html">7.5 point</a> PV / <a href="http://www.realclearpolitics.com/epolls/maps/obama_vs_mccain/?map=10">138 EV</a> Obama victory</li></ul><p>My wingnut libertarian friend (anyone from my kids’ playgroup who reads this blog can guess who I’m talking about) thinks McCain will win with “295-305” electoral votes. This election is far from being in the bag for Obama, but the suggestion that McCain will come from six or seven points down in the polls to win a 10-20 point bigger EV victory than Bush did four years ago seems like crazy talk. As for me, I’m not willing to make a firm prediction except to say that I think the polls are wrong – I’m just not sure in what direction they’re wrong. </p><p>On the one hand, if the polls are underestimating Obama’s support by excluding cell-phone only voters and Obama’s Get Out The Vote effort is as strong as it looks, that could net Obama as much as five or six points on top of the lead he’s already got and we’ll be looking at an epic landslide with Obama maybe brushing up against 400 EV. For example, Pollster.com’s 291 solid/lean Obama EV + 105 toss up EVs would be 396 total EVs for Obama.</p><p>On the other hand, if the polls are overestimating Obama’s support due to the <a href="http://en.wikipedia.org/wiki/Bradley_effect">Bradley Effect</a>, the undecideds break for decisively for McCain and Obama’s GOTV effort doesn’t materialize, McCain’s might net those five or six points and turn this into a toss-up squeaker decided by less than 35 EV (about the size of Bush’s victory in 2004). For example, if McCain wins all of Pollster.com’s tossups + the lean Obama states, it’s a scant 8 EV Obama victory (273-265). If McCain could also pick off any of New Mexico, Colorado, Iowa or Pennsylvania in that scenario, then he would win by anywhere from 2-34 EVs. </p><p>Of course, those effects could cancel out and leave us where we are right now, Obama with a six to seven point PV and low 100s EV victory. Frankly, I’ll be happy to be wrong about the poll inaccuracy since that would give Obama the presidency. </p><p>How do you think things are going to play out today?</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1182</wp:post_id>
		<wp:post_date>2008-11-04 12:21:12</wp:post_date>
		<wp:post_date_gmt>2008-11-04 12:21:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>election-day-2008</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="politics"><![CDATA[Politics]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[c352750f-63f1-4889-95c3-42be3ebc0319]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Election+Day+2008]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/04/Election+Day+2008]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2129</wp:comment_id>
			<wp:comment_author><![CDATA[Dale Churchward]]></wp:comment_author>
			<wp:comment_author_email>dale.churchward@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url>http://http://halfmybrain.spaces.live.com</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-11-04 13:00:42</wp:comment_date>
			<wp:comment_date_gmt>2008-11-04 21:00:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Harry,

I do think that the polls are wrong, but I basically agree with your assessment. The McCain path to the presidency requires a lot more elements to fall in place for him. It will be interesting to see how this comes out though. I won't watching tonight, but only because I have a parent group meeting.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Yes We Can</title>
		<link>http://devhawk.net/2008/11/05/yes-we-can/</link>
		<pubDate>Wed, 05 Nov 2008 00:28:33 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://ff18daa7-462b-429f-a6b2-7938cda6bb95</guid>
		<description></description>
		<content:encoded><![CDATA[<p>What a difference four years makes. In 2004, I was up <a href="http://devhawk.net/Cant+Sleep+Long+Election+Analysis+Post.aspx">until the wee hours</a> because Ohio wasn’t called until the following morning. This year, with Pennsylvania called at 8pm EST and Ohio about 90 minutes later, it was basically over before my kids finished their dinner. We were watching SNL on the DVR from last night when my Dad called to tell us the nets had called it for Obama. </p><p>As I write this, Obama has 349 electoral votes – 79 more than he needed to win – with three states still to be called. It looks like Obama will pick up <a href="http://www.msnbc.msn.com/id/25362802">North Carolina</a> (ahead by 12,160 votes with 100% of precincts reporting). <a href="http://www.msnbc.msn.com/id/25362602">Montana</a> looks to be going for McCain (he leads by 7,000 votes with 77% reporting) and <a href="http://www.msnbc.msn.com/id/25362534">Missouri</a> looks like a true tossup, with McCain ahead by a scant 1,740 votes with 99% reporting. Assuming those leads hold up, that would give Obama 364 EVs to McCain’s 174 EVs. Compared to the last two elections, that’s a good solid win on par with Clinton’s win in 1992 (370-168) but nowhere near the ass-kickings by Regan in 1980 (489-49) or 1984 (525-13) or Bush 41 in 1988 (426-111). </p><p>(BTW, check out the electoral college map from <a href="http://www.realclearpolitics.com/epolls/maps/obama_vs_mccain/?map=19">Carter’s win in 1976</a>. It looks like <a href="http://en.wikipedia.org/wiki/Bizarro">Bizarro’s</a> electoral map. The south went all blue while California went red? Can you even conceive of that happening today?)</p><p>But even though it wasn’t 500 point blowout, consider that Obama flipped all the following red 2004 states to blue in 2008: Virginia, Florida, Ohio, Iowa, Indiana, Colorado, New Mexico, Nevada and (probably) North Carolina. My parents are very excited to live in a blue state (VA) now. McCain on the other hand flipped none – goose egg – from blue to red. McCain’s only real hope was Pennsylvania and it <a href="http://www.cnn.com/ELECTION/2008/results/individual/#mapPPA">wasn’t even close</a> – Obama won PA by 9%. </p><p>I did like McCain’s <a href="http://www.msnbc.msn.com/id/27545248/">concession speech</a>. Obviously, with the president around 25% approval rating, the incumbent party is at a major disadvantage to start with. But of all the Republican candidates, McCain was the only one I was ever worried about. IMO, any of the other Republican possible nominees would have lost by a much worse margin. McCain was attractive to independents in a way no other Republican candidate this year was. </p><p>But in the end, McCain had the probably impossible job of pulling together the 25% of Americans who approve of Bush (politely called “the Republican base”, though I call them “wack-jobs”) with another 25% of Americans who don’t. Kinda like trying to push like charged magnets together, they just wouldn’t stick. To me, it seemed like McCain tacked hard right and prayed the independents would still support him. But as I watched McCain’s concession speech, it made me wonder if McCain could have won by running an honorable campaign, tacking to the center and hoping the conservatives would still support him. Maybe they would, maybe they wouldn’t, but he ended up running as a hate-mongering Rovian erratic demagogue and significantly damaged his personal brand. I can barely reconcile McCain from the stump with McCain from the concession speech. I’m guessing he’ll retire instead of running for <a href="http://en.wikipedia.org/wiki/United_States_Senate_elections,_2010#John_McCain_of_Arizona">reelection in two years</a>. </p><p>(I’ve also got thoughts on Palin’s political future, but those will wait for another day.) </p><p>As for President-Elect Obama, I’m obviously excited than he won. Patrick made me promise to tell him who won in the morning (it wasn’t official until the west coast results came in after he went to bed). I’m going to show him Obama’s <a href="http://tpmelectioncentral.talkingpointsmemo.com/2008/11/obama_my_election_demonstrates.php">victory speech</a> - it was amazing. I especially liked when he said “And to those Americans whose support I have yet to earn - I may not have won your vote, but I hear your voices, I need your help, and I will be your President too.” My libertarian friend who thought it would break for McCain today (way, <em>way</em> wrong dude) immediately went political, pointing out that the Democratic “trifecta” means they can’t shift the blame if things get worse. I’m guessing Obama will have to do quite a bit to earn my friend’s support but I’m hopeful that he can.</p><p>In other races I’m following, looks like Gov. Christine Gregoire <a href="http://www.cnn.com/ELECTION/2008/results/individual/#mapGWA">will win reelection</a> and Darcy Burner is <a href="http://www.cnn.com/ELECTION/2008/results/individual/#mapHWA/H/08">leading in her race</a> to unseat Rep. Reichert (though with only 21% reporting so it’s far from sure thing). In California, Prop 8 to ban gay marriage is <a href="http://www.cnn.com/ELECTION/2008/results/county/#CAI01map">currently leading</a> but with only 51% reporting so I’m hoping that changes. (Amending the constitution in CA doesn’t require a super-majority? That sucks). </p><p>Finally, a quick shout out to my friends from New Zealand that I hung out with after the <a href="http://www.opshopmusic.com/">Opshop</a> concert at the TechEd Attendee party back in September. They confided in me that “everyone in the world” was pulling for an Obama victory. Based on this <a href="http://www.economist.com/vote2008">Global Electoral College</a> from the Economist magazine, “everyone in the world” is pretty close to spot on. Happy that my fellow Americans and I could deliver an Obama victory. Feels good, doesn’t it?</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1184</wp:post_id>
		<wp:post_date>2008-11-05 00:28:33</wp:post_date>
		<wp:post_date_gmt>2008-11-05 00:28:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>yes-we-can</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="politics"><![CDATA[Politics]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[ff18daa7-462b-429f-a6b2-7938cda6bb95]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Yes+We+Can]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/05/Yes+We+Can]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Election Predictions</title>
		<link>http://devhawk.net/2008/11/05/election-predictions/</link>
		<pubDate>Wed, 05 Nov 2008 10:27:16 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://8e0159c9-0b91-472d-b5bc-50ec793c0f22</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Is it to early to start making predictions about 2010, 2012 and beyond yet? Probably, but I’ve got a few thoughts anyway.</p><p>First, if Obama runs his presidency like he ran his candidacy, he’ll be a great president and will win reelection in a cakewalk. Obviously, there are *huge* challenges ahead, but I have faith his administration will be able to handle them. </p><p>Second, assuming prediction #1 pans out, we’ll see another wide open race in 2016. I’m a big Joe Biden fan, but he’ll be 74 in 2016 – two years older than McCain is now. No way he runs. Hillary Clinton will 69 so I don’t see her running either. Well, maybe they run but I doubt they’d win the nomination. I’m guessing the Democratic nominee in 2016 will be someone who’s not top of mind today – someone who emerges in the next two or four years as “the next Obama”.</p><p>Third, we haven’t seen the last of Sarah Palin. I’ve been extremely critical of her, but my libertarian friend recommended I not underestimate her. So I won’t. I think she’ll be the Republican nominee for president in 2016. I know folks are talking about her for 2012, but I think she’d rather take her chances in a wide open race in 2016 than go up against Obama a second time. She’s only 44 now, so she’ll be 52 in 2016 – about perfect for a presidential candidate. Eight years is a long time for her to close the unqualified gap. </p><p>In fact, I’d say Ted Stevens <a href="http://www.cnn.com/ELECTION/2008/results/individual/#mapSAK">apparent reelection</a> is a likely silver lining in otherwise crappy election for the Republicans. Ted Stevens was <a href="http://www.nytimes.com/aponline/washington/AP-StevensTrial.html?_r=1&amp;oref=slogin">found guilty on felony corruption charges</a> and faces <a href="http://www.rollcall.com/news/29690-1.html">expulsion from the senate</a>, regardless of his apparent victory yesterday. If he is expelled, there would be <a href="http://www.adn.com/ted-stevens/story/569836.html">a special election</a> to decide his successor. You have to assume Mark Begich, Stevens’ Democratic challenger, would handily win that special election. But what if Palin ran against Begich? She’s taken a hit it her approval ratings since joining the VP ticket, but she’s still very popular in Alaska and probably liked best by Stevens’ supporters. I’m not saying it’s a shoo-in, but I believe she’d have a very good chance to win a special election.</p><p>Being a senator for eight years would be long enough to shore up the concerns about her qualifications but short enough not to have much of an attackable voting record. She’d have to win reelection in 2014, but given that Stevens has won seven elections in a row dating back to 1970, I’m guessing getting reelected in 2014 would be no problem. </p><p>So my predictions are a fairly easy Obama reelection in 2012, followed by Sen Palin (R) vs. “The Next Obama” (D) in 2016. Midterms in 2010 will probably see Dems give back some of their recent gains, but not enough to lose control of either house of Congress. 2014 is to far out to predict, much less who wins in 2016. But looking at voting trends among minorities, party ID advantages, etc, I like Democrats chances for the foreseeable future. </p><p>Finally, I wonder if this is the “<a href="http://www.timesonline.co.uk/tol/comment/columnists/andrew_sullivan/article5013891.ece">end of identity politics</a>” as some have suggested. One election is not a trend, so I tend to think that Obama was immune to such attacks more than those attacks no longer viable. We may need to wait until 2016 to find out. When Palin does run again, will she still be a pitbull with lipstick? I like to think identity politics is toast, but I’m guessing the Republicans will go back to that well a few more times before giving up on it. Democrats, on the other hand, have all the proof they need that they can win against identity politics: President-Elect Obama.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1183</wp:post_id>
		<wp:post_date>2008-11-05 10:27:16</wp:post_date>
		<wp:post_date_gmt>2008-11-05 10:27:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>election-predictions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="politics"><![CDATA[Politics]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[8e0159c9-0b91-472d-b5bc-50ec793c0f22]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Election+Predictions]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/05/Election+Predictions]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2130</wp:comment_id>
			<wp:comment_author><![CDATA[BigJ]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>65.11.65.222</wp:comment_author_IP>
			<wp:comment_date>2008-11-05 12:02:07</wp:comment_date>
			<wp:comment_date_gmt>2008-11-05 20:02:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The one thing I'll give you is that Gov. Palin will be back, but I do hope it's not through the Senate.  Fortunately for us ;) Senators don't make long lasting Presidents.

Bush, Clinton, Reagan, FDR, Wilson were all two+ term Presidents who came from the Governor's office.  You have to go back to 1837 when the last former Senator finished a 2nd term.  And even then, both Jackson and Monroe were Governors after their Senate service.

Clinton got a pass with the .com bubble, a weakend Russia and Mr. Newt.  Obama faces a world more like 1976 and we know what happened to Carter.  

Some tickets I think will handly beat OB'12, Palin-Crist, Jindal-Crist, Romney-Huckabee, Romney-Pawlenty, Palin-Fiorina.

Oh, this is funny, we'll have Barack Obama & Biden, BOB, in the Whitehouse.  Snicker, snicker.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2131</wp:comment_id>
			<wp:comment_author><![CDATA[Julianne Pierson]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.techiewife.spaces.live.com</wp:comment_author_url>
			<wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
			<wp:comment_date>2008-11-05 14:44:34</wp:comment_date>
			<wp:comment_date_gmt>2008-11-05 22:44:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very well stated, oh husband of mine.....I am proud of you and your predictions and do not argue with them - except I would truly wish for a better representative of my "team" for the first American Woman President. Though as you state, 8 years or so will give her the opportunity to learn the things she needs to to lead. Here's hoping, when her crowd started chanting her name all I could think of was Eva Peron and I had chills (not the good kind). But underestimate her? How could anyone underestimate her? You never turn your back on the ocean, or a crocodile, or a shark and she is worse them all those :)
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2132</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
			<wp:comment_date>2008-11-05 18:51:44</wp:comment_date>
			<wp:comment_date_gmt>2008-11-06 02:51:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@BigJ You're entitled to your own predicitions, though I think you're off your rocker. Tell you what, why don't you put your real name on your prediction so we can circle back in four years and see who was right?

@Julie Yeah, I wish for a better representative of your "team" than Palin as well. 

BTW, to be clear I don't think Palin can "learn the things she needs to to lead" in 8 years or a lifetime for that matter - leadership is one of those things you have or you don't. Not to say she doesn't have it - I haven't seen enough of her to make a decision one way or the other. Certainly, she can excite the Republican base, but that's not leadership. Furthermore, it remains to be seen if she can appeal to voters outside the wack-job core. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2133</wp:comment_id>
			<wp:comment_author><![CDATA[Jacob Mattison]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>128.36.186.140</wp:comment_author_IP>
			<wp:comment_date>2008-11-06 12:10:23</wp:comment_date>
			<wp:comment_date_gmt>2008-11-06 20:10:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm not sure I believe that Palin will have the sense to wait for 2016 -- if she runs in 2012 I would expect her to go down in flames, although of course it depends on how the Obama administration fares.  As you say, he ran an unbelievably well-organized campaign in two difficult elections, so I'm optimistic.

I'm guessing the Republicans' best hope in 2016 is Bobby Jindal, but they won't go for it.

As for the Democrats, I imagine you're right about "the next Obama" emerging later.  People have pointed at Newark mayor Cory Booker.  Not that the next Obama needs to be black.  A woman would of course be great.  

Your anonymous correspondent above doesn't necessarily deserve to be rebutted point-by-point, but I do think the idea that Senators can't be two-term presidents is nonsense.  The only Senator to be elected to the Presidency in the modern era was JFK, and I think he would certainly have been reelected had he survived his first term.  Besides, Truman was a Senator, and essentially served two terms as President (having assumed the Presidency after only a few weeks as VP).

]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2134</wp:comment_id>
			<wp:comment_author><![CDATA[BigJ]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.146.123.144</wp:comment_author_IP>
			<wp:comment_date>2008-11-07 14:59:42</wp:comment_date>
			<wp:comment_date_gmt>2008-11-07 22:59:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My point was simply that history is not on his side for re-election.  15 former Senators have been elected Presisident.  Of these, only 3 won a second term.  Of those 3, two were also previously governors.

The only Senator to win a second term without a governorship is...drumroll please...Richard Nixon.

Just to clarify, 5 modern (since 1900 at least) Senators have won an election: Nixon, LBJ, JFK, Truman and Harding.

Larger point being that I believe Governors make better Presidents.  Yes, McCain was in the same boat.

I apologize for the pseudonym.  It won't happen again.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2135</wp:comment_id>
			<wp:comment_author><![CDATA[Miguel de Icaza]]></wp:comment_author>
			<wp:comment_author_email>miguel@novell.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>130.57.22.201</wp:comment_author_IP>
			<wp:comment_date>2008-11-10 17:15:32</wp:comment_date>
			<wp:comment_date_gmt>2008-11-11 01:15:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey!

It was great seeing you again at the PDC.   The predictions are right on track.   If Obama runs his presidency like he ran his campaign, he will get another four years.

Miguel.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>My Elevate-Process Script</title>
		<link>http://devhawk.net/2008/11/07/my-elevate-process-script/</link>
		<pubDate>Fri, 07 Nov 2008 16:16:40 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://044cf2d4-cc92-4d0d-8b5e-2b5d15a29982</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I used to use the <a href="http://technet.microsoft.com/en-us/magazine/cc162321.aspx">Script Elevation PowerToys</a> to provide a simple way to launch an elevated command window from a Powershell prompt. However, that required installing said PowerToys in order to work, which I invariably forgot to install when paving my machine. That got annoying, so I went in search of a pure Powershell solution, which <a href="http://www.peterprovost.org/blog/post/Powershell-Sudo-(sort-of)-for-Vista-UAC-REDUX.aspx">Peter Provost conveniently provided</a> on his blog. </p><p>However, one of the benefits of the Script Elevation PowerToys was the ability to launch an admin command prompt in a specific directory – including the current one. I wanted the ability to default to launching Powershell when the user doesn’t specify a command to run. I thought I could just set $psi.WorkingDirectory, but as I’ve <a href="http://devhawk.net/2008/07/28/DevHawks+Slightly+Useful+Powershell+Configuration.aspx">described previously</a>, I update $home in my profile script to D:HPierson.Files (I keep my important files on my D: drive so I can pave C: with impunity) then set my current location to $home. So I can’t set the current location by using $psi.WorkingDirectory – it just gets overridden by my profile script.</p><p>However, it turns out you can pass arbitrary script code to Powershell via the –Command arguments. You also have to pass –NoExit to keep the command window around. The script passed in via -Command is executed after the profile script, so I can pass in a little script code to set the current location to the right location. </p><p>I modified Peter’s elevate-process script to launch a new Powershell command window when zero arguments or one folder argument are passed in. In those cases, elevate-process sets the location to the specified directory (current directory as the default when no arguments are provided) via the –NoExit and –Command arguments.</p><p>I’ve <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/elevate-process.ps1">posted the script</a> to my SkyDrive as well as providing it below. Feel free to <strike>steal</strike> use it as you need. </p><pre class="brush: powershell">
function elevate-process  
{  
  $psi = new-object System.Diagnostics.ProcessStartInfo     
  $psi.Verb = "runas";     

  #if we pass no parameters, then launch PowerShell in the current location
  if ($args.length -eq 0)     
  {     
    $psi.FileName = 'powershell'
    $psi.Arguments =  
      "-NoExit -Command &amp;{set-location '" + (get-location).Path + "'}"
  }     

  #if we pass in a folder location, then launch powershell in that location
  elseif (($args.Length -eq 1) -and  
          (test-path $args[0] -pathType Container))     
  {     
    $psi.FileName = 'powershell'
    $psi.Arguments =  
        "-NoExit -Command &amp;{set-location '" + (resolve-path $args[0]) + "'}"
  }     

  #otherwise, launch the application specified in the arguments
  else
  {     
    $file, [string]$arguments = $args;     
    $psi.FileName = $file   
    $psi.Arguments = $arguments
  }     
     
  [System.Diagnostics.Process]::Start($psi) | out-null
}
</pre><p><strong><u>Update</u></strong>: I tried to run my elevate-process script from c:Program Files and discovered a bug. The set-location scripts need the path parameter to be encapsulated in single quotes in order to handle paths with spaces. I’ve updated both the code above as well as the copy on my SkyDrive.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1185</wp:post_id>
		<wp:post_date>2008-11-07 16:16:40</wp:post_date>
		<wp:post_date_gmt>2008-11-07 16:16:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-elevate-process-script</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[044cf2d4-cc92-4d0d-8b5e-2b5d15a29982]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[My+ElevateProcess+Script]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/08/My+ElevateProcess+Script]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My.Change.gov Idea</title>
		<link>http://devhawk.net/2008/11/10/my-change-gov-idea/</link>
		<pubDate>Mon, 10 Nov 2008 10:08:55 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://770dafc3-4a57-4cb2-b90c-fe10697059e6</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The words everyone is using to describe President-Elect Obama’s transition is “hit the ground running.” Of all the aspects of the transition, I wanted to call out <a href="http://change.gov/">Change.gov</a>, the new website dedicated to the transition. There’s not much up there yet: Obama’s election-night <a href="http://change.gov/newsroom/entry/president_elect_obama_speaks_on_the_eve_of_this_election/">Grant Park speech</a>, Obama’s <a href="http://change.gov/newsroom/entry/president_elect_obama_meets_with_economic_advisers_calls_for_swift_action_o/">first press conference</a> and first <a href="http://change.gov/newsroom/entry/president_elect_obama_calls_for_swift_action_on_the_economy_in_weekly_democ/">radio address</a> as president-elect, the <a href="http://change.gov/newsroom/entry/emanuel_to_be_obamas_white_house_chief_of_staff/">announcement</a> that Rahm Emanuel will be Chief of Staff and transition co-chair <a href="http://change.gov/newsroom/entry/transition_team_co_chair_valerie_jarrett_discusses_priorities_on_meet_the_p/">Valerie Jarrett’s MTP appearance</a>. Of course, it has been less than a week since the election – there’s only so much that could get done in that time, even when you hit the ground running.</p><p>Most interesting about the site is how it invites average American citizens to participate. Maybe not surprising, given the Politics 2.0 campaign Obama ran, but it’s nice to see an administration that’s interested in <a href="http://change.gov/page/s/yourstory">my story about the election</a>, <a href="http://change.gov/page/s/yourvision">my vision for what America can be</a> and <a href="http://change.gov/page/s/ofthepeople">my ideas about solving our biggest challenges</a>. Obviously, it remains to be seen how an Obama administration will use this information, but there’s little reason to ask for everyone’s opinions if you’re not really interested in reading or acting on them.</p><p>The one criticism I’d make about the site is that it looks like these stories, visions and ideas aren’t publicly published to the site. Obama’s campaign site had <a href="http://my.barackobama.com/">My.BarackObama</a> (which will <a href="http://my.barackobama.com/page/community/post/chrishughesatthecampaign/gGxZvh">“live on”</a>) but there’s no corollary My.Change.gov – at least, not yet. On the other hand, with only 71 days until we drop “elect” from “president-elect”, maybe it makes more sense to hold off on deploying that kind of infrastructure to a more permanent home. Personally, I’m rooting for My.WhiteHouse.gov. My.USA.gov, My.House.Gov and My.Senate.Gov would also be nice to have. Since Change.gov doesn’t publicly publish stories, visions or ideas, I wanted to post my idea here as well. </p><p>(Side note, is it just me or is <a title="http://www.usa.gov/" href="http://www.usa.gov/">http://www.usa.gov/</a> a pretty crappy home page?)</p><p>Obviously, there are immediate <a href="http://change.gov/agenda/economy/">economic issues</a> to deal with and we need to <a href="http://change.gov/agenda/iraq/">bring the troops home from Iraq</a>. But after those, I would like to see the Obama administration put <a href="http://change.gov/agenda/energyenvironment/">renewable energy</a> at the top of it’s priority list. I believe that investing in renewable energy as well as the infrastructure to deliver that energy (the so called “<a href="http://www.repoweramerica.org/elements/national-unified-smart-grid/">smart grid</a>”) should be our top priority because I believe it provides the most bang for the buck when it comes policy. </p><p>First off, it will create jobs which is probably the most critical step for turning the economy around. We’ve lost <a href="http://www.bls.gov/news.release/jec.nr0.htm">1.2 million jobs in the past year</a> and <a href="http://www.npr.org/templates/story/story.php?storyId=96746406">unemployment is at a 14 year high</a>.  Second, I’m a big believer in <a href="http://my.barackobama.com/page/content/newenergy_more#oil">Obama’s long-stated goal</a> of eliminating our dependency on foreign oil. This would have the dual benefit of improving our own economy while reducing the economic strength of petro-dictatorships, some of which sponsor terrorism. Third, shifting to clean renewable energy will reduce our carbon emissions. We need to do more on the climate change front, but it’s a good start. Finally, a smart grid would essentially be a new nationwide market for energy. Even though many Republicans are in the pocket of big oil, they are also big believers in free markets and individual responsibility, so maybe smart grid legislation can be passed in a bipartisan way rather than over the Republican’s wishes. </p><p>There seems to be a lot of indication already that <a href="http://www.nytimes.com/2008/11/09/us/politics/09promises.html">energy is Obama’s top priority after an economic stimulus package</a>, so maybe he doesn’t need to hear it from me. But that doesn’t change the fact that the soon-to-be President is continuing to embrace to concepts of Politics 2.0 in an effort to bring Americans together to solve our toughest challenges. Here’s hoping he keeps it up long after “elect” is dropped from his title.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1186</wp:post_id>
		<wp:post_date>2008-11-10 10:08:55</wp:post_date>
		<wp:post_date_gmt>2008-11-10 10:08:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-change-gov-idea</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="politics"><![CDATA[Politics]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[770dafc3-4a57-4cb2-b90c-fe10697059e6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[MyChangegov+Idea]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/10/MyChangegov+Idea]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2136</wp:comment_id>
			<wp:comment_author><![CDATA[Greg]]></wp:comment_author>
			<wp:comment_author_email>Greg@rnrstuff.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.rnrstuff.com</wp:comment_author_url>
			<wp:comment_author_IP>72.174.137.65</wp:comment_author_IP>
			<wp:comment_date>2008-11-10 11:58:32</wp:comment_date>
			<wp:comment_date_gmt>2008-11-10 19:58:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[    Love this topic can't wait to read more on this and any other topics.My feelings are mixed so far. This site is well put together and easy to nav. Let me read on and will comment myself.
Thanks
www.rnrstuff.com
<a href="http://www.rnrstuff.com/" rel="nofollow">Also Great Click Here</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython and [Insert MSFT Technology Here]</title>
		<link>http://devhawk.net/2008/11/12/ironpython-and-insert-msft-technology-here/</link>
		<pubDate>Wed, 12 Nov 2008 16:04:51 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://f777dfed-50f5-4a07-bc6b-c3ba8527b420</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Now that PDC08 is in my rear view mirror, I’m back to doing IronPython stuff. One of the things I’m looking at is making IronPython work with a variety of Microsoft technologies. Given the usage of dynamic languages in web scenarios, most of our focus to date has been on using <a href="http://www.codeplex.com/sdlsdk">Iron languages in Silverlight</a>. Being able to program the browser with the same language you program the server is a fairly compelling scenario. We’re also starting to see new progress on <a href="http://www.codeplex.com/aspnet/Wiki/View.aspx?title=Dynamic%20Language%20Support">ASP.NET support for Iron languages</a>.</p><p>But those are only two out of a veritable universe of cool technologies. Now that I’m done with PDC, I can start to explore some of the others. Some ideas include:</p><ul><li>IPy and WPF</li><li>IPy and Surface</li><li>IPy and XNA (desktop only – Xbox and Zune use the Compact Framework with doesn’t support DLR)</li><li>IPy and WCF</li><li>IPy and WF</li></ul><p>Any other suggestions? Please leave them in the comments. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1187</wp:post_id>
		<wp:post_date>2008-11-12 16:04:51</wp:post_date>
		<wp:post_date_gmt>2008-11-12 16:04:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-insert-msft-technology-here</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[f777dfed-50f5-4a07-bc6b-c3ba8527b420]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+LtInsert+MSFT+Technology+Heregt]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/13/IronPython+And+LtInsert+MSFT+Technology+Heregt]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2137</wp:comment_id>
			<wp:comment_author><![CDATA[Glenn Block]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/gblock</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-11-12 16:36:38</wp:comment_date>
			<wp:comment_date_gmt>2008-11-13 00:36:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[IPy and MEF :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2138</wp:comment_id>
			<wp:comment_author><![CDATA[Nick Hodge]]></wp:comment_author>
			<wp:comment_author_email>nhodge@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nickhodge.com/</wp:comment_author_url>
			<wp:comment_author_IP>59.167.244.222</wp:comment_author_IP>
			<wp:comment_date>2008-11-12 16:42:43</wp:comment_date>
			<wp:comment_date_gmt>2008-11-13 00:42:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How about IronPython and F# :-)

http://blogs.msdn.com/nickhodge/archive/2008/11/12/ironpython-f-parallel-async-a-kittehz-brekfst.aspx]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2139</wp:comment_id>
			<wp:comment_author><![CDATA[Mark]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>65.199.215.3</wp:comment_author_IP>
			<wp:comment_date>2008-11-12 16:47:34</wp:comment_date>
			<wp:comment_date_gmt>2008-11-13 00:47:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree with Glen, IPy and MEF would be a great combo.

Another one would be IPy and CCR/DSS.  I have just started looking at CCR/DSS and I think it would greatly benefit from a IPy integration.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2140</wp:comment_id>
			<wp:comment_author><![CDATA[Chris Vickerson]]></wp:comment_author>
			<wp:comment_author_email>chrisv@q4websystems.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.q4websystems.com</wp:comment_author_url>
			<wp:comment_author_IP>70.49.157.76</wp:comment_author_IP>
			<wp:comment_date>2008-11-12 20:34:52</wp:comment_date>
			<wp:comment_date_gmt>2008-11-13 04:34:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the opportunity!

Could you please post an example of how to use .net attributes - that would be very helpful.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2141</wp:comment_id>
			<wp:comment_author><![CDATA[Apolon Ivankovic]]></wp:comment_author>
			<wp:comment_author_email>apolon@torqsoftware.com</wp:comment_author_email>
			<wp:comment_author_url>http://torqsoftware.com</wp:comment_author_url>
			<wp:comment_author_IP>203.59.254.217</wp:comment_author_IP>
			<wp:comment_date>2008-11-13 15:25:52</wp:comment_date>
			<wp:comment_date_gmt>2008-11-13 23:25:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Data binding to IronPython and other DLR objects in Silverlight/WPF. I suppose the first question is whether it's possible and in what scenarios it can be done/not-done?

On an unrelated topic, whats happening with Managed JScript on the DLR. Will that be a language made available by Microsoft on the DLR?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2142</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.75</wp:comment_author_IP>
			<wp:comment_date>2008-11-14 15:11:00</wp:comment_date>
			<wp:comment_date_gmt>2008-11-14 23:11:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Everyone, thanks for the input!

@Chris, we can't use .NET attributes from IronPython today. It's something we're looking at post-2.0

@Apolon, I'll be addressing data binding in WPF next week. I'll look to see if the same approach I'll be describing works for Silverlight. As for Managed JScript on the DLR, it's available for Silverlight as part of the Silverlight Dynamic Language SDK (http://codeplex.com/sdlsdk). It's not available for the desktop CLR. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2143</wp:comment_id>
			<wp:comment_author><![CDATA[Apolon Ivankovic]]></wp:comment_author>
			<wp:comment_author_email>apolon@torqsoftware.com</wp:comment_author_email>
			<wp:comment_author_url>http://torqsoftware.com</wp:comment_author_url>
			<wp:comment_author_IP>203.59.157.24</wp:comment_author_IP>
			<wp:comment_date>2008-11-18 05:19:20</wp:comment_date>
			<wp:comment_date_gmt>2008-11-18 13:19:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I had a look at the Silverlight Dynamic Language SDK with respect to managed jscript and noticed two things:
a) source code is not provided while it is for IronRuby and IronPython
b) its only supported on Silverlight

Given this background I have the following questions:
a) Will the source code to managed jscript be provided as per IronPython and IronRuby
b) Will it be supported on WPF?
c) Is there a Microsoft blogger or PM in charge of the managed jscript on the DLR functionality (so I can stop bothering you with inane questions ;^)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython and WPF Part 1: Introduction</title>
		<link>http://devhawk.net/2008/11/12/ironpython-and-wpf-part-1-introduction/</link>
		<pubDate>Wed, 12 Nov 2008 17:18:33 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://15692716-a6ef-48f3-8fa4-afc9ddc4cc3d</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I decided to start my IronPython and “<a href="http://devhawk.net/2008/11/13/IronPython+And+LtInsert+MSFT+Technology+Heregt.aspx">veritable universe of cool technologies</a>” examples with WPF. I figured that since we already have Silverlight support, there might be some overlap (there was). Futhermore, after seeing <a href="http://www.hanselman.com/blog/PDC2008BabySmashPreparations.aspx">BabySmash on Surface</a> I’m jonesing to build a <a href="http://www.microsoft.com/surface/index.html">Surface</a> app of my own. Getting vanilla WPF working with IPy seems like a smart step before trying to build a Surface WPF app with IPy.</p><p>WPF is all about cool graphics, so I decided to build a photo viewing app. Kinda boring, I know. But it turns out my wife has posted <a href="http://techiewife.spaces.live.com/photos/">hundreds of photos</a> to her <a href="http://techiewife.spaces.live.com/">WL Space</a>, and WL Spaces provides convenient RSS feeds of both <a href="http://techiewife.spaces.live.com/photos/feed.rss">photo albums</a> as well as <a href="http://techiewife.spaces.live.com/photos/cns!3DAECC033B88329C!2885/feed.rss">photos in specific albums</a>. So I built out a simple WPF based photo viewer for my wife’s WL Space photos in IronPython.</p><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/IronPythonandWPF_EFC4/image_4.png"><img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="TechieWife Photo Viewer screenshot" border="0" alt="TechieWife Photo Viewer screenshot" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/IronPythonandWPF_EFC4/image_thumb_1.png" width="684" height="380" /></a></p><p>As you can see, I'm not quitting my job to go pursue a career in design anytime soon. But hey, the point is demonstrate building a WPF app in IPy, not to be a great designer. Plus, don’t those cute kids make up for the ugliness of the app?</p><p>Turns out building this app in IPy was fairly straightforward, with a few pitfalls. I wasted half a day digging thru data binding before realized that data binding against IPy objects works out of the box - but only if you type the case of the property correctly (Title != title). Also, I couldn’t make TypeConverters work the way I wanted, but python list comprehensions made it enough to transform the feed data before binding it to the UI. That approach worked great for this scenario but maybe not so much for others. (I’ve got feelers out to the WPF data binding wonks, so maybe there’s still hope for type converters) </p><p>Over the next several posts, I’m going to show you all the code for this app. It’s pretty small, only about 50 lines of app-specific python code + 50 lines of XAML to describe the window. There’s also some reusable code – 50 lines of WPF module code (mostly stolen from avalon.py in the IPy tutorial), 200 lines of xml2py code <a href="http://devhawk.net/2008/05/07/Deserializing+XML+With+IronPython.aspx">which I’ve discussed before</a> and a very small C# based assembly to make accessing WPF elements by name very pythonic. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1188</wp:post_id>
		<wp:post_date>2008-11-12 17:18:33</wp:post_date>
		<wp:post_date_gmt>2008-11-12 17:18:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-wpf-part-1-introduction</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="wpf"><![CDATA[WPF]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[15692716-a6ef-48f3-8fa4-afc9ddc4cc3d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+WPF+Part+1+Introduction]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/13/IronPython+And+WPF+Part+1+Introduction]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronPython and WPF Part 2: Loading XAML</title>
		<link>http://devhawk.net/2008/11/14/ironpython-and-wpf-part-2-loading-xaml/</link>
		<pubDate>Fri, 14 Nov 2008 15:06:49 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://8aeb8568-e08e-4dbf-bb03-02a2cb0cb567</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If we’re going to build a WPF app, we’re going to want to be able to load some XAML. Sure, you can programmatically build up your UI, but WPF and more importantly WPF tools like <a href="http://www.microsoft.com/expression/products/Overview.aspx?key=blend">Expression Blend</a> are designed to work with XAML. Luckily, loading XAML is fairly easy:</p><pre class="brush: python">
def LoadXaml(filename):     
    from System.IO import File     
    from System.Windows.Markup import XamlReader     
    with File.OpenRead(filename) as f:     
        return XamlReader.Load(f)
</pre><p></p><p>We simply open the filename provided and use XamlReader to build out the corresponding WPF object graph. Note, this is very different from the XAML approach used by C#/VB or even by IronPythonStudio. In those scenarios, the XAML is compiled into a binary format (BAML) and embedded in the compiled assembly. For my TechieWife Photo viewer, it’s all script so there’s neither a XAML to BAML compile step nor a compiled assembly to embed the BAML into, so we’re just loading raw XAML.</p><p>Since we’re using raw XAML, there are additional rules we need to follow. First, when using compiled XAML, we can specify the name of the event handler in the XAML directly. For XamlReader, that’s no allowed since there’s no C#/VB class associated with the XAML. Speaking of class, you can’t specify x:Class either. Finally, anywhere you want to use a static resource, as far as I can tell those need to be compiled in a static language. I think you could build one in C#, add a reference to that assembly via clr.AddReference, then use it from XAML and it should just work. However, since I’m trying to stick to IronPython exclusively, I didn’t try that scenario out.  </p><p>Since you can’t specify the event handlers in XAML loaded by XamlReader, you have to bind the event handlers in code. There are two listboxes in my photo viewing app, and I want to capture the SelectionChanged event of both of them. Binding event handlers in IronPython code uses the same += syntax as C# uses.</p><pre class="brush: python">
win1 = wpf.LoadXaml('win1.xaml')     
     
win1.listbox1.SelectionChanged += listbox1_OnSelectionChanged     
win1.listbox2.SelectionChanged += listbox2_OnSelectionChanged
</pre><p>My win1.xaml file has a Window type instance as the root. You don’t need to be a deep WPF expert to realize that the WPF Window doesn’t have listbox1 or listbox2 properties. Yet, in the code snippet above, I was able to say win1.listbox1 and get back the WPF ListBox element with that name. Cool trick, eh? Well, I can’t take credit for it – I <a href="http://www.codeplex.com/IronPython/SourceControl/FileView.aspx?itemId=649471&amp;changeSetId=43433">copied the code</a> from our Silverlight integration for dynamic languages. Unfortunately, this code has to be written in C# code, but it is the only C# code in my whole solution (and it’s reusable!)</p><pre class="brush: csharp">
[assembly: ExtensionType(    
    typeof(FrameworkElement),  
    typeof(DevHawk.Scripting.Wpf.FrameworkElementExtension))]  

namespace DevHawk.Scripting.Wpf  
{  
    public static class FrameworkElementExtension  
    {  
        [SpecialName]  
        public static object GetBoundMember(FrameworkElement e, string n)  
        {  
            object result = e.FindName(n);  
            if (result == null)  
            {  
                return OperationFailed.Value;  
            }  
            return result;  
        }  
    }  
}
</pre><p>GetBoundMember is kinda like Python’s <a href="http://www.python.org/doc/2.5.2/ref/attribute-access.html">__getattr__</a> or Ruby’s <a href="http://www.thinkruby.org/2007/10/48">method_missing</a>. Of course, it doesn’t work with C#, but it does lets us trap dynamic member resolution when calling a C# object from a DLR language. Srivatsn has a <a href="http://blogs.msdn.com/srivatsn/archive/2008/04/12/turning-your-net-object-models-dynamic-for-ironpython.aspx">great write up</a> on using GetBoundMember and the four other special methods you can use to make your CLR objects act more dynamic.</p><p>In this case, if the standard reflection-based member name resolution fails, we try calling FrameworkElement’s FindName method to see if there’s a corresponding control with the provided name. So win.listbox1 is the equivalent to win.FindName(‘listbox1’), but with less code and a much more pythonic feel.</p><p>You’ll notice that we’re attaching this GetBoundMember method to FrameworkElement as an extension method. It’s kinda cool that we can inject a new method into an existing class to provides dynamic behavior and it all works seamlessly from Python. However, DLR uses a different mechanism to locate and bind extension methods than C# or VB. Those languages use <a href="http://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.extensionattribute.aspx">ExtensionAttribute</a> to mark extension methods and the assemblies and classes that contain them. However, that approach forces you to examine ever single class in marked assemblies and every single method in marked classes. Examining every class and method is no big deal to do at compile time, but it would be a significant perf issue at runtime. By using ExtensionType attribute, the DLR only has to look at assembly attributes in order to bind extension methods.</p><p>Once you’ve got the compiled FrameworkElementExtension assembly, you just need to load it via clr.AddReference. I called the assembly Devhawk.Scripting.Wpf and I load it automatically in my wpy.py module. So if you’re building a WPF app in IronPython, you can simply “import wpy” and you get the GetBoundMember extension method, the LoadXaml function, and a bunch of WPF related namespaces imported into the wpf scope. That way, you can write wpf.Button() instead of System.Windows.Control.Button() to programmatically create a new button. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1189</wp:post_id>
		<wp:post_date>2008-11-14 15:06:49</wp:post_date>
		<wp:post_date_gmt>2008-11-14 15:06:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-wpf-part-2-loading-xaml</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="wpf"><![CDATA[WPF]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[8aeb8568-e08e-4dbf-bb03-02a2cb0cb567]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+WPF+Part+2+Loading+XAML]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/14/IronPython+And+WPF+Part+2+Loading+XAML]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronPython and WPF Part 3: Data Binding</title>
		<link>http://devhawk.net/2008/11/17/ironpython-and-wpf-part-3-data-binding/</link>
		<pubDate>Mon, 17 Nov 2008 17:00:17 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://81c4ca71-425d-4f5b-90c2-dba60eab4333</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Here’s the short version of this post: data binding in WPF to IPy objects just works...mostly. However, I’m guessing you are much more interested in the long version.</p><p>Typically, data binding depends on reflection. For example, the following snippet of XAML defines a data bound list box where the title property of each object in the bound collection gets bound to the text property of a text block control. WPF would typically find the title property of the bound objects via reflection.</p><pre class="brush: xml">
&lt;ListBox Grid.Column="0" x:Name="listbox1" &gt;
  &lt;ListBox.ItemTemplate&gt;
    &lt;DataTemplate&gt;
      &lt;TextBlock Text="{Binding Path=title}" /&gt;
    &lt;/DataTemplate&gt;
  &lt;/ListBox.ItemTemplate&gt;
&lt;/ListBox&gt;
</pre><p>The problem is that IronPython objects don’t support reflection – or more accurately, reflection won’t give you the answer you’re expecting. Every IPy object does have a static type, but it implements Python’s dynamic type model. [1] Thus, if you reflect on the IPy object looking for the title property or field, you won’t find it. It might seem we’re in a bit of a bind (pun intended). However, WPF does <a href="http://msdn.microsoft.com/en-us/library/ms743643.aspx">provide an out</a>:</p><blockquote><p>“You can bind to public properties, sub-properties, as well as indexers of any common language runtime (CLR) object. The binding engine uses CLR reflection to get the values of the properties. Alternatively, objects that implement <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.icustomtypedescriptor.aspx">ICustomTypeDescriptor</a> or have a registered <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.typedescriptionprovider.aspx">TypeDescriptionProvider</a> also work with the binding engine.”       <br />WPF <a href="http://msdn.microsoft.com/en-us/library/ms743643.aspx">Binding Sources Overview</a>, MSDN Library</p></blockquote><p style="margin-right: 0px" dir="ltr">Luckily for us, IronPython objects implement ICustomTypeDescriptor [2]. That snippet of XAML above? It’s straight from my photo viewing app. All I had to do was define the data template in the list box XAML then set the ItemsSource property of the list box instance. </p><pre class="brush: python">
w.listbox1.ItemsSource = albumsFeed.channel.item
</pre><p style="margin-right: 0px" dir="ltr">As I said, it just works. However, I did hit one small snag – hence the “mostly” caveat above. </p><p style="margin-right: 0px" dir="ltr">If you look at the <a href="http://techiewife.spaces.live.com/photos/feed.rss">top level WL Spaces photos feed</a>, you’ll see that each item’s title starts with “Photo Album:”. Yet in the <a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/IronPythonandWPF_EFC4/image_4.png">screenshot of my app</a>, you’ll notice that I’ve stripped that redundant text out of the title. Typically, if you want to change the bound value during the binding process, you build an <a href="http://msdn.microsoft.com/en-us/library/ms752347.aspx#data_conversion">IValueConverter</a> class. I needed two value conversions in my app, stripping “Photo Album:” for the album list box and converting a string URL into a BitmapImage for the image list box. </p><p style="margin-right: 0px" dir="ltr">IronPython objects can inherit from a .NET interface, so there’s no problem building an IValueConverter. However, in order to use a custom IValueConverter from XAML, you need to <a href="http://msdn.microsoft.com/en-us/library/ms752091.aspx">declare it in XAML as a static resource</a>. However, as you might imagine, dynamic IPy objects don’t work as static resources. So while I can define an IValueConverter in Python, I can’t create one from XAML.</p><p style="margin-right: 0px" dir="ltr">There are a few possible solutions to this. The first is to build up the data template in code. If you do that, they you can <a href="http://msdn.microsoft.com/en-us/library/ms742863.aspx">programmatically add the converter to the binding</a>. I was hopeful that I could define the data template in XAML then manipulate the binding, but there doesn’t appear to be any way to do that. Another option would be to build some type of generic IValueConverter class in C# that loads either an IPy based IValueConverter or embedded python conversion code. That’s problematic because those IPy object would need to be created in the right ScriptRuntime, and there’s no built-in way to access that. There are also a small set of XamlReader extensions such as <a href="http://msdn.microsoft.com/en-us/library/system.windows.markup.xamltypemapper.aspx">XamlTypeMapper</a> that might be able to provide the right hook into the XAML parsing to allow IronPython based conversion.</p><p style="margin-right: 0px" dir="ltr">In the end, I took the easiest way out – I transformed the data to be bound before binding it. It’s cheating of sorts, but given the read-only nature of this app, it was the easiest thing to do. So the actual line of code to set listbox1’s ItemsSource looks like this:</p><pre class="brush: python">
class Album(object):     
  def __init__(self, item):     
    self.title = item.title.Substring(13)     
    self.itemRSS = item.itemRSS     
     
w.listbox1.ItemsSource = [Album(item) for item in albumsFeed.channel.item]
</pre><p style="margin-right: 0px" dir="ltr">I create a Python class for each RSS item in the feed, saving the stripped title and the album RSS URL as fields. It’s kinda annoying to basically be parsing the feed twice, but at least it’s not much code. Python’s list comprehension syntax makes creating a list of Albums from a list of RSS items a single line of code. I do something very similar for data binding the second list box:</p><pre class="brush: python">
class Picture(object):     
  def __init__(self, item):     
    self.title = item.title  
    self.picture = BitmapImage(Uri(item.enclosure.url + ":thumbnail"))     

w.listbox2.ItemsSource = [Picture(item) for item in albumfeed.channel.item]
</pre><p style="margin-right: 0px" dir="ltr">Here I’m not only converting the raw data (adding “:thumbnail” at the end of the URL) but also changing the data type from string to BitmapImage. I’m binding to an image object in the second list box, but to do that I need a BitmapImage instead of a string.</p><p style="margin-right: 0px" dir="ltr">This “convert the data first” approach feels like a hack to me. After I get this series of posts done, I am planning on going back and improving this sample. Hopefully, I can find a better approach to value conversions. Any gurus out there on XAML parsing, please feel free to drop me a line or leave me a comment. </p><p style="margin-right: 0px" dir="ltr"></p><hr /><p></p><p>[1] you can access the underlying CLR type for any Python type via the clr.GetClrType method. You an also check out the CreateNewType method from <a href="http://www.codeplex.com/IronPython/SourceControl/FileView.aspx?itemId=649510&amp;changeSetId=43433">NewTypeMaker.cs</a></p><p>[2] I spent the better part of an afternoon trying to make TypeDescriptionProviders work before Dino pointed out that we already support ICustomTypeDescriptor in Python objects. I didn’t realize at first because I had a case sensitivity bug in my original prototype code - it turns out that “Title” != “title”. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1190</wp:post_id>
		<wp:post_date>2008-11-17 17:00:17</wp:post_date>
		<wp:post_date_gmt>2008-11-17 17:00:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-wpf-part-3-data-binding</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="wpf"><![CDATA[WPF]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[81c4ca71-425d-4f5b-90c2-dba60eab4333]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+WPF+Part+3+Data+Binding]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/18/IronPython+And+WPF+Part+3+Data+Binding]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2144</wp:comment_id>
			<wp:comment_author><![CDATA[Apolon Ivankovic]]></wp:comment_author>
			<wp:comment_author_email>apolon@torqsoftware.com</wp:comment_author_email>
			<wp:comment_author_url>http://torqsoftware.com</wp:comment_author_url>
			<wp:comment_author_IP>203.59.254.217</wp:comment_author_IP>
			<wp:comment_date>2008-11-18 01:14:31</wp:comment_date>
			<wp:comment_date_gmt>2008-11-18 09:14:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[From my understanding, Silverlight uses solely Reflection based binding with no support for ICustomTypeDescriptor or anything similar. Given this, then the conclusion is that there's no decent data binding story for the DLR languages in Silverlight. Is this correct? 

It seems like a shame. Is there any way to alter the IronPython/DLR behaviour so that it does generate IL defined properties/methods for some scenarios? i.e. even at the cost of dynamism for those scenarios.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython and WPF Part 4: Background Processing</title>
		<link>http://devhawk.net/2008/11/19/ironpython-and-wpf-part-4-background-processing/</link>
		<pubDate>Wed, 19 Nov 2008 13:47:57 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://304749a7-3483-4f00-9b09-3ddc9f33b783</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Like many apps today, my <a href="http://devhawk.net/2008/11/13/IronPython+And+WPF+Part+1+Introduction.aspx">WL Spaces photo viewer</a> is a connected app. The various WL Spaces RSS feeds that drive the app can take a several seconds to download. Unless you like annoying your users, it’s a bad idea to lock up your user interface while you make you make synchronous network calls on your UI thread. Typically, this long running processing gets farmed out to a background thread which keeps the UI thread free to service the user events.</p><p>.NET provides a variety of mechanisms for doing long running processing on a background thread. For example you can create a <a href="http://msdn.microsoft.com/en-us/library/system.threading.thread.aspx">new thread</a>, you can <a href="http://msdn.microsoft.com/en-us/library/system.threading.threadpool.queueuserworkitem.aspx">queue a work item</a> to the ThreadPoool or use the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx">BackgroundWorker component</a>. However, none of these are particularly pythonic, so I set out to see if I could leverage any of Python’s unique capabilities to make background processing as easy as possible. This is what I ended up with:</p><pre class="brush: python">
def OnClick(self, sender, args):  
    self.DLButton.IsEnabled = False  
    self.BackgroundTask(self._url.Text)  

@BGThread    
def BackgroundTask(self, url):  
    wc = WebClient()     
    data = wc.DownloadString(Uri(url))    
    self.Completed(data)  
      
@UIThread  
def Completed(self, data):  
    self.DLButton.IsEnabled = True
    self._text.Text = data
</pre><p>By using the cool <a href="http://www.python.org/dev/peps/pep-0318/">decorators feature</a> of Python, I’m able to declaratively indicate whether I want a given method to be executed on the UI thread or on a background thread. Doesn’t get much easier than that. Even better, the implementations of BGThread and UIThread are only about twenty lines of Python code combined!</p><p>Decorators kinda look like custom .NET attributes. However, where .NET attributes are passive (you have to <a href="http://msdn.microsoft.com/en-us/library/system.reflection.memberinfo.getcustomattributes.aspx">ask for them explicitly</a>), decorators act as an active modifier to the functions they are attached to. In that respect, they’re kind of like <a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">aspects</a>. Certainly, I would consider which thread a given method executes on to be a cross-cutting concern. </p><p>The Completed function above is exactly the same as if I had written the following:</p><pre class="brush: python">
def Completed(self, data):  
    self.DLButton.IsEnabled = True  
    self._text.Text = data  
Completed = UIThread(Completed)
</pre><p>In C#, you can’t pass a function as a parameter to another function – you have to first wrap that function in a delegate. Python, like F#, directly supports <a href="http://en.wikipedia.org/wiki/First_order_functions">higher-order functions</a>. This lets you easily factor common aspectual code out into reusable functions then compose them with your business logic. The decorators have no knowledge of the functions they are attached to and the code that calls those functions are written in complete ignorance of the decorators. Python goes the extra mile beyond even F# by providing the ‘@’ syntax.</p><p>Here are the implementations of my the UIThread and BGThread decorators:</p><pre class="brush: python">
def BGThread(fun):  
  def argUnpacker(args):  
    fun(*args)     
   
  def wrapper(*args):  
    ThreadPool.QueueUserWorkItem(WaitCallback(argUnpacker), args)     
   
  return wrapper     

def UIThread(fun):     
  def wrapper(self, *args):     
    if len(args) == 0:     
      actiontype = Action1[object]     
    else:     
      actiontype = Action[tuple(object for x in range(len(args)+1))]     

    action = actiontype(fun)     
    self.dispatcher.Invoke(action, self, *args)     
     
  return wrapper
</pre><p>BGThread defines a wrapper function that queues a call to the decorated function to the .NET thread pool.  UIThread defines a wrapper that marshals the call to the UI thread by using a <a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatcher.aspx">WPF Dispatcher</a>. I’m thinking there might be a way to use <a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.aspx">SynchronizationContext</a> to marshal it automatically, but I haven’t tried to figure that out yet. The above approach does require a dispatcher property hanging off the class, but that’s fairly trivial to implement and seems like a small price to pay to get declarative background thread processing. </p><p>A couple of quick implementation notes: </p><ul><li>The ‘*args’ syntax used in those methods above means “given me the rest of the positional arguments in a tuple”. Kinda like the <a href="http://msdn.microsoft.com/en-us/library/w5zay9db.aspx">C# params keyword</a>. But that syntax also lets you pass a tuple of parameters to a function, and have them broken out into individual parameters. QueueUserWorkItem only supports passing a single object into the queued function, so I pass the tupled arguments to the argUnpacker method, which in turn untuples the arguments and calls the decorated function.</li><li>The System assembly includes the <a href="http://msdn.microsoft.com/en-us/library/018hxwa8.aspx">single parameter Action&lt;T&gt; delegate</a>. The current DLR <a href="http://www.codeplex.com/IronPython/SourceControl/FileView.aspx?itemId=649845&amp;changeSetId=43712">provides Action delegates</a> with zero, two and up to sixteen parameters. However, those are in a separate namespace (<a href="http://devhawk.net/2008/09/17/DLR+Namespace+Change+Fire+Drill.aspx">remember?</a>) and IPy seems to have an issue with importing overloaded type names into the current scope. I could have used their namespace scoped name, but instead I redefined the version from System to be called Action1.</li><li>To interop with .NET generic types, IPy uses the legal but rarely used Python syntax type[typeparam]. For example, to create a List of strings, you would say “List[str]()”. The type parameter is a tuple, so in UIThread I build a tuple of objects based on the number of arguments passed into wrapper (with the special case of a single type parameter using Action1 instead of Action). </li></ul><p>I haven’t uploaded my WL Spaces Photo Viewer app because I keep making changes to it as I write this blog post series. However, for this post I built a simple demo app so I could focus on just the threading scenario. I’ve stuck the code for that demo <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/WpfThreadDemo.zip">up on my SkyDrive</a>, so feel free to leverage it as you need. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1191</wp:post_id>
		<wp:post_date>2008-11-19 13:47:57</wp:post_date>
		<wp:post_date_gmt>2008-11-19 13:47:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-wpf-part-4-background-processing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="parallel-programming"><![CDATA[Parallel Programming]]></category>
		<category domain="post_tag" nicename="wpf"><![CDATA[WPF]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[304749a7-3483-4f00-9b09-3ddc9f33b783]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+WPF+Part+4+Background+Processing]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/19/IronPython+And+WPF+Part+4+Background+Processing]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronPython and WPF Background Processing Revisited</title>
		<link>http://devhawk.net/2008/11/20/ironpython-and-wpf-background-processing-revisited/</link>
		<pubDate>Thu, 20 Nov 2008 14:57:18 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://cb662cda-a1c5-46fb-a936-4d662cf87551</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://devhawk.net/2008/11/19/IronPython+And+WPF+Part+4+Background+Processing.aspx">Yesterday</a>, I blogged about using decorators to indicate if a given function should execute on the UI or background thread. While the solution works, I wrote “I’m thinking there might be a way to use <a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.aspx">SynchronizationContext</a> to marshal it automatically, but I haven’t tried to figure that out yet.” I had some time this morning so I figured out how to use SynchronizationContext instead of the WPF dispatcher. </p><p>Leslie Sanford wrote a <a href="http://www.codeproject.com/KB/cpp/SyncContextTutorial.aspx">pretty good overview</a>, but the short version is that SyncContext is an abstraction for concurrency management. It lets you write code that is ignorant of specific synchronization mechanisms in concurrency-aware managed frameworks like WinForms and WPF. For example, while my previous version worked fine, it was specific to WPF. If I wanted to provide similar functionality that worked with WinForms, I’d have to rewrite my decorators to use Control.Invoke. But if I port them over to use SyncContext, they would work with WinForms, WPF and any other library that plugs into SyncContext.</p><p>SyncContext abstracts away both initially obtaining the sync context as well as marshaling calls back to the UI thread. SyncContext provides a <a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.current.aspx">static property</a> to access  current context, instead of a framework specific mechanism like accessing the <a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatcherobject.dispatcher.aspx">Dispatcher</a> property of the WPF <a href="http://msdn.microsoft.com/en-us/library/system.windows.window.aspx">Window</a> class. Once you have a context, you can call <a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.send.aspx">Send</a> or <a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.post.aspx">Post</a> to marshal the call back to the UI thread (Send blocks the calling thread, Post doesn’t). </p><p>With that in mind, here’s the new version of BGThread and UIThread. Slightly more complex, but still pretty simple clocking in at just under 30 lines. </p><pre class="brush: python">
def BGThread(fun):  
  def argUnpacker(args):  
    oldSyncContext = SynchronizationContext.Current     
    try:     
      SynchronizationContext.SetSynchronizationContext(args[-1])     
      fun(*args[:-1])     
    finally:     
      SynchronizationContext.SetSynchronizationContext(oldSyncContext)     
   
  def wrapper(*args):     
    args2 = args + (SynchronizationContext.Current,)     
    ThreadPool.QueueUserWorkItem(WaitCallback(argUnpacker), args2)     
   
  return wrapper     

def UIThread(fun):     
  def unpack(args):  
    ret = fun(*args)     
    if ret != None:     
      import warnings     
      warnings.warn(fun.__name__ + " function returned " + str(ret) + " but that return value isn't propigated to the calling thread")     

  def wrapper(*args):     
    if SynchronizationContext.Current == None:     
      fun(*args)     
    else:     
      SynchronizationContext.Current.Send(SendOrPostCallback(unpack), args)     
      
  return wrapper
</pre><p>In the BGThread wrapper, I add the current SyncContext to the parameter tuple that I pass to the background thread. Once on the background thread, I set the current SyncContext to the last element of the the parameter tuple then call the decorated function with the remaining parameters. (for the non pythonic: args[:-1] is <a href="http://www.python.org/doc/2.5.2/ref/slicings.html">Python slicing syntax</a> that means “all but the last element of args”). Using a try/finally block is probably overkill – I expect the current SyncContext to be either None or leftover garbage – but the urge to clean up after myself is apparently much stronger on the background thread than it is in say my office. :)</p><p>In the UIThread wrapper, I grab the current context and invoke the decorated method via the Send method. Like QueueUserWorkItem, SyncContext Send and Post only support a single parameter, so I use the same *args trick I <a href="http://devhawk.net/2008/11/19/IronPython+And+WPF+Part+4+Background+Processing.aspx">described</a> in my last post. (I changed the name to unpack in the code above for blog formatting purposes)</p><p>One major caveat about this approach is that there’s no way to return a value from a function decorated as UIThread. I understand why SyncContext.Post doesn’t return a value (it’s async) but SyncContext.Send is synchronous call, so why doesn’t it marshal the return value back to the calling thread? WPF’s <a href="http://msdn.microsoft.com/en-us/library/cc647509.aspx">Dispatcher.Invoke</a> and WinForm’s <a href="http://msdn.microsoft.com/en-us/library/a1hetckb.aspx">Control.Invoke</a> both return a value. I didn’t handle the return value in my original version of UIThread, but now that I’ve moved over to using SyncContext, I can’t. Not sure why the SyncContext is designed that way – seems like a design flaw to me. Since the return value won’t propagate, I sniff the result decorated function’s return value and raise a warning if it’s not None. </p><p>I’ve uploaded the SyncContext version <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/WpfThreadDemo2.zip">to my SkyDrive</a> in case you want the code for yourself. Note, I’ll thinking I’ll revise code this one more time – I want to rebuild the WPF version so that it propagates return values and picks up an dispatcher via Application.Current.MainWindow rather than having to have a dispatcher property on my class. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1192</wp:post_id>
		<wp:post_date>2008-11-20 14:57:18</wp:post_date>
		<wp:post_date_gmt>2008-11-20 14:57:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-wpf-background-processing-revisited</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="parallel-programming"><![CDATA[Parallel Programming]]></category>
		<category domain="post_tag" nicename="wpf"><![CDATA[WPF]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[cb662cda-a1c5-46fb-a936-4d662cf87551]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+WPF+Background+Processing+Revisited]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/20/IronPython+And+WPF+Background+Processing+Revisited]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Background Processing Re-Revisited</title>
		<link>http://devhawk.net/2008/11/21/background-processing-re-revisited/</link>
		<pubDate>Fri, 21 Nov 2008 07:20:28 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://04bd475a-9970-4b13-9380-eae294617f5d</guid>
		<description></description>
		<content:encoded><![CDATA[<p>OK, here’s the last word on this whole background processing / concurrency decorators thing. I went back and re-wrote the <a href="http://devhawk.net/2008/11/19/IronPython+And+WPF+Part+4+Background+Processing.aspx">original decorators</a>, but using the approach I used with the <a href="http://devhawk.net/2008/11/20/IronPython+And+WPF+Background+Processing+Revisited.aspx">SyncContext version</a>. I don’t want to rehash it again, here are the main points:</p><ul><li>Instead of using a property to retrieve the dispatcher, I get it via Application.Current.MainWindow.Dispatcher (checking to be sure Current and MainWindow aren’t null…err, None). This way, I pick up the dispatcher automatically rather than forcing a specific interface on the class with decorated methods. In fact, this approach should work with pure functions as well.</li><li>Since I don’t have a convenient function like SetSynchronizationContext, I store the dispatcher in thread local storage for later use in calling back to the UI thread.</li><li>Unlike the SyncContext version, this version propagates the return value of @UIThread decorated functions. I don’t propagate the return value of @BGThread functions – there’d be no point farming a task to a background thread then blocking the UI thread waiting for a response.</li></ul><p>As usual, the code is <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/WpfThreadDemo3.zip">on my SkyDrive</a>. It includes both the SyncContext and Dispatcher version of the decorators. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1193</wp:post_id>
		<wp:post_date>2008-11-21 07:20:28</wp:post_date>
		<wp:post_date_gmt>2008-11-21 07:20:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>background-processing-re-revisited</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="parallel-programming"><![CDATA[Parallel Programming]]></category>
		<category domain="post_tag" nicename="wpf"><![CDATA[WPF]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[04bd475a-9970-4b13-9380-eae294617f5d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Background+Processing+ReRevisited]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/21/Background+Processing+ReRevisited]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introducing IronPython Article</title>
		<link>http://devhawk.net/2008/11/21/introducing-ironpython-article/</link>
		<pubDate>Fri, 21 Nov 2008 00:08:38 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://a1e22057-c6df-4193-bced-950b23218596</guid>
		<description></description>
		<content:encoded><![CDATA[<p>FYI, my <a href="http://www.code-magazine.com/Article.aspx?quickid=0809071">Introducing IronPython article</a> from the <a href="http://www.code-magazine.com/DisplayIssue.aspx?id=e3b92e0b-1ec4-49d5-a4fb-4c8d4a6d4311">.NET Languages issue CoDe magazine</a> is now available online in it’s entirety. Previously, only the introduction was available online. And while we’re on the subject, major thanks to the folks who at the CoDe magazine booth at PDC, who gave me several copies of that issue.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1194</wp:post_id>
		<wp:post_date>2008-11-21 00:08:38</wp:post_date>
		<wp:post_date_gmt>2008-11-21 00:08:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-ironpython-article</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[a1e22057-c6df-4193-bced-950b23218596]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Introducing+IronPython+Article]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/21/Introducing+IronPython+Article]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Resolver One 1.3 Released</title>
		<link>http://devhawk.net/2008/11/21/resolver-one-1-3-released/</link>
		<pubDate>Fri, 21 Nov 2008 10:53:34 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://e44e00e1-db9a-4161-9c32-078fe83738d6</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/ResolverOne1.3Released_8D03/ResolverLogo_2.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="ResolverLogo" border="0" alt="ResolverLogo" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/ResolverOne1.3Released_8D03/ResolverLogo_thumb.png" width="250" height="80" /></a> IronPython’s biggest customer is <a href="http://www.resolversystems.com/">Resolver Systems</a>, makers of <a href="http://www.resolversystems.com/products/">Resolver One</a>, “a familiar spreadsheet-like interface with the powerful Python programming language to give you a tool to analyse and present your data.” While I think they have a great product on pure merit - I’ve been <a href="http://devhawk.net/2008/01/31/Morning+Coffee+141+LangNET+08+Edition.aspx">impressed with their product</a> since I was introduced to it at Lang.NET this year - I’m particularly interested in Resolver One as it’s written in IronPython. They use IPy not only as the embedded language exposed to end users but as the underlying implementation language as well. </p><p>Furthermore, these guys are heavily involved in the IPy community. Resolver developer <a href="http://www.voidspace.org.uk/python/weblog/index.shtml">Michael Foord</a> is <a href="http://www.ironpythoninaction.com/">writing a book on IronPython</a> and was our <a href="https://mvp.support.microsoft.com/profile=ACB6160C-9024-4838-98B7-3779DF6C79E8">first Dynamic Language MVP</a>. Michael’s Resolver colleague <a href="http://www.tartley.com/">Jonathan Hartley</a> did me a solid by <a href="http://www.oredev.org/topmenu/program/trackcoollanguages/jonathanhartley.4.3efb083311ac562f9fe80006879.html">taking my space</a> at <a href="http://www.oredev.org">ØreDev</a>. Even the CTO and Co-founder <a href="http://www.gilesthomas.com/">Giles Thomas</a> is a regular blogger and speaker at events. Let me tell you, having guys this great in the community sure makes my job easier.</p><p>I just wanted to give the Resolver folks a shout out and say major congratulations on <a href="http://www.resolversystems.com/news/?p=73">shipping a new version</a> of their core Resolver One product. Michael has <a href="http://www.voidspace.org.uk/python/weblog/arch_d7_2008_11_15.shtml#e1032">more info on this release</a> as well as a glance forward with their plans for their next (IPy 2.0, woot!)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1195</wp:post_id>
		<wp:post_date>2008-11-21 10:53:34</wp:post_date>
		<wp:post_date_gmt>2008-11-21 10:53:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>resolver-one-1-3-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[e44e00e1-db9a-4161-9c32-078fe83738d6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Resolver+One+13+Released]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/21/Resolver+One+13+Released]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronPython and WPF Part 5: Interactive Console</title>
		<link>http://devhawk.net/2008/11/24/ironpython-and-wpf-part-5-interactive-console/</link>
		<pubDate>Mon, 24 Nov 2008 10:45:35 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://92f9770d-1f99-4aa4-914a-b28e1445c22f</guid>
		<description></description>
		<content:encoded><![CDATA[<p>One of the hallmarks of dynamic language programming is the use of the interactive prompt, otherwise known as the <a href="http://en.wikipedia.org/wiki/REPL">Read-Eval-Print-Loop</a> or REPL. Even though I’m building a WPF client application, I’d still like to have the ability to poke around and even modify the app as it’s running from the command prompt, REPL style. </p><p>If you work thru the IronPython <a href="http://www.codeplex.com/IronPython/SourceControl/changeset/file/view/43829/649827">Tutorial</a>, there are exercises for interactively building both a WinForms and a WPF application. In both scenarios, you create a dedicated thread to service the UI so it can run while the interactive prompt thread is blocked waiting for user input. However, as we saw in the <a href="http://devhawk.net/2008/11/19/IronPython+And+WPF+Part+4+Background+Processing.aspx">last part of this series</a>, UI elements in both WinForms and WPF can only be accessed from the thread they are created on. We already know how to marshal calls to the correct UI thread – <a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatcher.invoke.aspx">Dispatcher.Invoke</a>. However, what we need is a way to intercept commands entered on the interactive prompt so we can marshal them to the correct thread before they execute. </p><p>Luckily, IronPython provides just such a mechanism: <a href="http://www.codeplex.com/IronPython/SourceControl/changeset/file/view/43829/649872">clr module’s</a> SetCommandDispatcher. A command dispatcher is a function hook that gets called for every command the user enters. It receives a single parameter, a delegate representing the command the user entered. In the WPF and WinForms tutorials, you use this function hook to marshal the commands to the right thread to be executed. Here’s the command dispatcher from the WPF tutorial:</p><pre class="brush: python">
def DispatchConsoleCommand(consoleCommand):     
    if consoleCommand:     
        dispatcher.Invoke(DispatcherPriority.Normal, consoleCommand)
</pre><p>The dispatcher.Invoke call looks kinda like the UIThread decorator from the <a href="http://devhawk.net/2008/11/19/IronPython+And+WPF+Part+4+Background+Processing.aspx">Background Processing</a> part of this series, doesn’t it?</p><p>Quick aside: I looked at using SyncContext here instead of Dispatcher, since I don’t care about propagating a return value back to the interactive console thread. However, SyncContext expects a <a href="http://msdn.microsoft.com/en-us/library/system.threading.sendorpostcallback.aspx">SendOrPostDelegate</a>, which expects a single object parameter. The delegate passed to the console hook function is an <a href="http://msdn.microsoft.com/en-us/library/system.action.aspx">Action</a> with no parameters. I could have built a wrapper function that took a single parameter which it would ignore, but I decided it wasn’t worth it. The more I look at it, the more I believe SyncContext is a good idea with a bad design. </p><p>I wrapped all the thread creation and command dispatching into a reusable helper class called InteractiveApp.</p><pre class="brush: python">
class InteractiveApp(object):     
  def __init__(self):     
    self.evt = AutoResetEvent(False)     
     
    thrd = Thread(ThreadStart(self.thread_start))     
    thrd.ApartmentState = ApartmentState.STA     
    thrd.IsBackground = True
    thrd.Start()     
     
    self.evt.WaitOne()     
    clr.SetCommandDispatcher(self.DispatchConsoleCommand)     
     
  def thread_start(self):     
    try:     
      self.app = Application()     
      self.app.Startup += self.on_startup     
      self.app.Run()     
    finally:     
      clr.SetCommandDispatcher(None)     

  def on_startup(self, *args):     
    self.dispatcher = Threading.Dispatcher.FromThread(Thread.CurrentThread)     
    self.evt.Set()     
     
  def DispatchConsoleCommand(self, consoleCommand):     
    if consoleCommand:     
        self.dispatcher.Invoke(consoleCommand)     
     
  def __getattr__(self, name):     
    return getattr(self.app, name)
</pre><p>The code is pretty self explanatory. The constructor (__init__) creates the UI thread, starts it, waits for it to signal that it’s ready via an AutoResetEvent and then finally sets the command dispatcher. The UI thread creates and runs the WPF application, saves the dispatcher object as a field on the object, then signals that it’s ready. DispatchConsoleCommand is nearly identical to the earlier version, I’ve just made it an instance method instead of a stand-alone function. Finally, I define __getattr__ so that any operations invoked on InteractiveApp are passed thru to the contained WPF Application instance. </p><p>In my app.py file, I look to see if the module has been started directly or if it’s been imported into another module. If the module is run directly (aka ‘ipy app.py’) then the global __name__ variable will be ‘__main__’. In that case, we start the application up normally (i.e. without the interactive prompt) by just creating an Application then running it with a Window instance. Otherwise, we are importing this app into another module (typically, the interactive console), so we create an InteractiveApp instance and we create an easy to use run method that can create the instance of the main window.</p><pre class="brush: python">
if __name__ == '__main__':     
  app = wpf.Application()     
  window1 = MainWin.MainWindow()     
  app.Run(window1.root)     
   
else:  
  app = wpf.InteractiveApp()     

  def run():     
    global mainwin     
    mainwin = MainWin.MainWindow()     
    mainwin.root.Show()
</pre><p>If you want to run the app interactively, you simply import the app module and call run. Here’s a sample session where I iterate thru the items bound to the first list box. Of course, I can do a variety of other operations I can do such as manipulate the data or create new UI elements. </p><pre class="brush: text">
IronPython 2.0 (2.0.0.0) on .NET 2.0.50727.3053   
&gt;&gt;&gt; import app   
&gt;&gt;&gt; app.run()   
#at this point the app window launches 
&gt;&gt;&gt; for i in app.mainwin.allAlbumsListBox.Items:   
...     print i.title   
...   
Harvest Festivals   
Mrs. Gardner's Art   
Riley's Playdate   
August 13   
Camp Days   
July 14   
May Photo Shoot   
Summer Play 2006   
Lake Washington With The Gellers   
Camp Pierson '06   
January 28
</pre><p>One small thing to keep in mind: if you exit the command prompt, the UI thread will also exit since it’s marked as a background thread. Also, it looks like you could shut the client down then call run again to restart it, but you can’t. If you shut the client down, the Run method in InteractiveApp.thread_start exits, resets the Command Dispatcher to nothing and the thread terminates. I could fix it so that you could run the app multiple times, but I find I typically only run the app once for a given session anyway. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1196</wp:post_id>
		<wp:post_date>2008-11-24 10:45:35</wp:post_date>
		<wp:post_date_gmt>2008-11-24 10:45:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-wpf-part-5-interactive-console</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="wpf"><![CDATA[WPF]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[92f9770d-1f99-4aa4-914a-b28e1445c22f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+WPF+Part+5+Interactive+Console]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/24/IronPython+And+WPF+Part+5+Interactive+Console]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2145</wp:comment_id>
			<wp:comment_author><![CDATA[Lukas Cenovsky]]></wp:comment_author>
			<wp:comment_author_email>cenovsky@bakalari.cz</wp:comment_author_email>
			<wp:comment_author_url>http://gui-at.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>195.250.144.226</wp:comment_author_IP>
			<wp:comment_date>2008-11-25 05:58:36</wp:comment_date>
			<wp:comment_date_gmt>2008-11-25 13:58:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
what about using ThreadPool? See my post: http://gui-at.blogspot.com/2008/06/exploring-test-application-ironpython-2.html
I don't see any functional difference and you don't need to care about Invoke.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2146</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
			<wp:comment_date>2008-11-26 21:50:48</wp:comment_date>
			<wp:comment_date_gmt>2008-11-27 05:50:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@lukas, I tried using the ThreadPool instead of manually spinning up a thread and it crashed. At least for WPF, the UI objects must be created on an STA thread and the ThreadPool threads are all MTA. 

As for not caring about Invoke, this code does not work without the command dispatcher calling Invoke. Just for kicks, I tried commenting it out and I get a "The calling thread cannot access this object because a different thread owns it." if I try to interact with the WPF objects in any way. 

I see from your blog entry that you're using WinForms not WPF, but I'm 99% sure the rules are the same. From http://msdn.microsoft.com/en-us/library/system.windows.forms.control.invokerequired.aspx: "Controls in Windows Forms are bound to a specific thread and are not thread safe. Therefore, if you are calling a control's method from a different thread, you must use one of the control's invoke methods to marshal the call to the proper thread."]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2147</wp:comment_id>
			<wp:comment_author><![CDATA[Lukas Cenovsky]]></wp:comment_author>
			<wp:comment_author_email>cenovsky@bakalari.cz</wp:comment_author_email>
			<wp:comment_author_url>http://gui-at.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>195.250.144.226</wp:comment_author_IP>
			<wp:comment_date>2008-11-27 09:37:30</wp:comment_date>
			<wp:comment_date_gmt>2008-11-27 17:37:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The threading is still kind of mystery for me. Especially when something works for me which shouldn't according to others.

Your first point is correct - I use WinForms instead of WPF. I also use IronPython 1.1.1 on .NET 2.0.50727.3053.

I do not call methods on WinForms. I only read properties because I simulate all methods via Win32 API calls. For example, when I want to click button, I send mouse click event to the position of the button. 

Interestingly, when I directly call OnClick method of a button, the method runs OK and the button is clicked. For example, using http://gui-at.cendaweb.cz/GUIAT_PoC.exe run:

IronPython 1.1.1 (1.1.1) on .NET 2.0.50727.3053
Copyright (c) Microsoft Corporation. All rights reserved.
>>> import clr
>>> clr.AddReference('System')
>>> clr.AddReference("System.Windows.Forms")
>>> from System import *
>>> from System.Reflection import *
>>> from System.Threading import *
>>> from System.Windows.Forms import Application
>>> from time import sleep
>>>
>>> def RunMeCallBack(var):
...     global App
...     asm = Assembly.LoadFrom('GUIAT_PoC.exe')
...     asm_type = asm.GetType('GUIAT_PoC.frmGUIAT')
...     App = Activator.CreateInstance(asm_type)
...     Application.Run(App)
...
>>> App = None
>>> ThreadPool.QueueUserWorkItem(WaitCallback(RunMeCallBack))

Wait a moment until the app is loaded and run:
>>> App.Controls[2].Text = 'text'
>>> App.Controls[0].OnClick(None)

The 'text' is added to the listbox. Is this just a lucky chance I have or is it correct behavior? I do not know...

PS: I tried it on IronPython 20 RC2 (IronPython 2.0 (2.0.0.0) on .NET 2.0.50727.3053) now and it behaves the same.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Early Christmas from Iron Languages and DLR</title>
		<link>http://devhawk.net/2008/11/26/early-christmas-from-iron-languages-and-dlr/</link>
		<pubDate>Wed, 26 Nov 2008 22:49:09 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://1a76f687-68e4-4016-aa67-fe9ad494d1be</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Tomorrow may be Thanksgiving, but the Microsoft DevDiv dynamic language teams are trying to make it feel like Christmas with three separate pre-holiday releases.</p><ol><li><a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=19841">IronPython 2.0 RC2</a>  <br />We were really hoping to only have one release candidate, but we ended up with a couple of significant bugs that we couldn’t push off to 2.0.1. With December holidays coming soon, RC2 has a pretty small window before we declare RTM so now is the time to download the release and try your code out.</li><li><a href="http://rubyforge.org/frs/?group_id=4359&amp;release_id=28422">IronRuby 1.0 Alpha 2</a>  <br />There’s been zero blog traffic on this, just a <a href="http://rubyforge.org/pipermail/ironruby-core/2008-November/003231.html">notice on the IronRuby mailing list</a>. As per said notice, “Notable features” include “the inclusion of iirb.bat, igem.bat, irails.bat, irake.bat”. </li><li><a href="http://www.codeplex.com/dlr">New DLR CodePlex Project</a> T      <br />he DLR source has been available as part of IronPython for <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=438">over a year</a> but now they have their own home on CodePlex. Check out the <a href="http://www.codeplex.com/dlr/Wiki/View.aspx?title=0.9%20beta%20release%20notes&amp;referringTitle=Home">Release Notes</a> for an overview, reads some <a href="http://www.codeplex.com/dlr/Wiki/View.aspx?title=Docs%20and%20specs&amp;referringTitle=0.9%20beta%20release%20notes">Docs and Specs</a> or just download their <a href="http://www.codeplex.com/dlr/Release/ProjectReleases.aspx?ReleaseId=19885#ReleaseFiles">initial v0.9 beta</a>. Their v0.9 beta is synced with IPy 2.0 RC2 (and their v0.9 final will sync with IPy 2.0 RTM) but it also includes synced versions of IronRuby and ToyScript in both source and binaries. Plus, Sesh <a href="http://blogs.msdn.com/seshadripv/archive/2008/11/26/dlr-v0-9-beta-released-in-codeplex.aspx">has promised</a> “weekly code drops”. Finally, unlike IronPython and IronRuby, DLR is using the <a href="http://www.codeplex.com/dlr/Thread/List.aspx">discussion section</a> of their CodePlex site – I’m eager to see how well the <a href="http://blogs.msdn.com/codeplex/archive/2008/07/23/codeplex-project-discussions-mailing-lists.aspx">new-ish discussion/mailing list integration</a> works.</li></ol><p>So there you go, new versions of IronPython and IronRuby plus a whole new DLR CodePlex project to boot. Enjoy.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1197</wp:post_id>
		<wp:post_date>2008-11-26 22:49:09</wp:post_date>
		<wp:post_date_gmt>2008-11-26 22:49:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>early-christmas-from-iron-languages-and-dlr</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[1a76f687-68e4-4016-aa67-fe9ad494d1be]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Early+Christmas+From+Iron+Languages+And+DLR]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/27/Early+Christmas+From+Iron+Languages+And+DLR]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2148</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Letterle]]></wp:comment_author>
			<wp:comment_author_email>michaeldotnet@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.prokrams.com</wp:comment_author_url>
			<wp:comment_author_IP>76.188.15.221</wp:comment_author_IP>
			<wp:comment_date>2008-11-27 21:20:05</wp:comment_date>
			<wp:comment_date_gmt>2008-11-28 05:20:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For me the biggest news was IronRuby moving to github along with a more "open" structure.  Far overshadowed the 1.0 alpha 2 release for me!

http://github.com/ironruby/ironruby/tree/master]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2149</wp:comment_id>
			<wp:comment_author><![CDATA[Sesh]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/seshadripv</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.83</wp:comment_author_IP>
			<wp:comment_date>2008-12-05 10:10:22</wp:comment_date>
			<wp:comment_date_gmt>2008-12-05 18:10:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["Sesh has promised “weekly code drops”."

Here it is - http://www.codeplex.com/dlr/SourceControl/ListDownloadableCommits.aspx. My blog post on the same is here - http://blogs.msdn.com/seshadripv/archive/2008/12/04/codeplex-com-dlr-is-now-setup-to-receive-regular-source-updates.aspx]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython and Linq to XML Part 1: Introduction</title>
		<link>http://devhawk.net/2008/11/26/ironpython-and-linq-to-xml-part-1-introduction/</link>
		<pubDate>Wed, 26 Nov 2008 17:07:59 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://0b2bdf02-2039-4ad7-a5d6-4b717a24755c</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Shortly after I joined the VS Languages team, we had a morale event that included a <a href="http://www.rockband.com/">Rock Band</a> tournament. I didn’t play that day in the tournament since I had never played before, but I was hooked just the same. I got <a href="http://www.xbox.com/games/rockband">Rock Band</a> for my birthday, <a href="http://www.xbox.com/games/rockband2">Rock Band 2</a> shortly after it came out in September and I’m hoping to get the <a href="http://www.rockband.com/games/acdc">AC/DC Track Pack</a> for Christmas.</p><p>There are <a href="http://www.rockband.com/music/songs">lots of songs</a> available for Rock Band - 461 currently available between on-disc and downloadable tracks – with more added every week. Frankly, there’s lots of music on that list that I don’t recognize. Luckily, I’m also a <a href="http://www.zune.net/software/zunepass/">Zune Pass</a> subscriber, so I can go out and download all the Rock Band tracks and listen to them on my Zune. But who has time to manually search for 461 songs? Not me. So I wrote a little Python app to download the list of Rock Band songs and save it as a Zune playlist. </p><p>I ended up use Linq to XML very heavily in this project. Zune playlists use the same XML format as <a href="http://msdn.microsoft.com/en-us/library/bb249686.aspx">Windows playlists</a>, Zune exposes the backend music catalog via a Atom feeds and I used <a href="http://www.lovettsoftware.com/blogs/blog.aspx?id=56">Chris Lovett’s SgmlReader</a> to expose the HTML list of Rock Band songs as XML. I realize Linq to XML wasn’t on “<a href="http://devhawk.net/2008/11/13/IronPython+And+LtInsert+MSFT+Technology+Heregt.aspx">the list</a>”, but I had a specific need so it got bumped to the head of the line.</p><p>BTW, for those who just want <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Zune/rockband.zpl">the playlist</a>, I stuck it on my Skydrive. Unfortunately, there’s no Skydrive API right now, so I can’t automate uploading the new playlist every week. If anyone has alternative suggestions or a way to programmatically upload files to SkyDrive, let me know.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1198</wp:post_id>
		<wp:post_date>2008-11-26 17:07:59</wp:post_date>
		<wp:post_date_gmt>2008-11-26 17:07:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-linq-to-xml-part-1-introduction</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[LINQ]]></category>
		<category domain="post_tag" nicename="rock-band"><![CDATA[Rock Band]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[XML]]></category>
		<category domain="post_tag" nicename="zune"><![CDATA[Zune]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[0b2bdf02-2039-4ad7-a5d6-4b717a24755c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+Linq+To+XML+Part+1+Introduction]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/27/IronPython+And+Linq+To+XML+Part+1+Introduction]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronPython and Linq to XML Part 2: Screen Scraping</title>
		<link>http://devhawk.net/2008/11/26/ironpython-and-linq-to-xml-part-2-screen-scraping/</link>
		<pubDate>Wed, 26 Nov 2008 17:16:51 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://bcc253be-4491-4c1a-bc67-d9df809ce716</guid>
		<description></description>
		<content:encoded><![CDATA[<p>First, I need to convert the HTML <a href="http://www.rockband.com/music/songs">list of Rock Band songs</a> into a machine readable format. That means doing a little screen scraping. Originally, I used <a href="http://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a> but I found that <a href="http://www.crummy.com/software/BeautifulSoup/documentation.html#Beautiful%20Soup%20Gives%20You%20Unicode,%20Dammit">UnicodeDammit</a> got confused on names like Blue Öyster Cult and Mötley Crüe. I’m guessing it’s broken because IronPython doesn’t have non-unicode strings.</p><p>Instead, I used SgmlReader to provide an XmlReader interface over the HTML, then queried that data via Linq to XML. I used the <a href="http://wiki.developer.mindtouch.com/Community/SgmlReader">version of SgmlReader from MindTouch</a> since they include a compiled binary and it seems to be the only active maintained version. I wrapped it all up in a function called load that loads HTML from either disk or the network (based on the URI scheme) into an <a href="http://msdn.microsoft.com/en-us/library/system.xml.linq.xdocument.aspx">XDocument</a>.</p><pre class="brush: python">
def loadStream(streamreader):
  from System.Xml.Linq import XDocument     
  from Sgml import SgmlReader     
   
  reader = SgmlReader()
  reader.DocType = "HTML"
  reader.InputStream = streamreader     
  return XDocument.Load(reader)
   
def load(url):
  from System import Uri     
  from System.IO import StreamReader     
   
  if isinstance(url, str):
    url = Uri(url)
   
  if url.Scheme == "file":
    from System.IO import File     
    with File.OpenRead(url.LocalPath) as fs:
      with StreamReader(fs) as sr:
        return loadStream(sr)
  else:
    from System.Net import WebClient     
    wc = WebClient()
    with wc.OpenRead(url) as ns:
      with StreamReader(ns) as sr:
        return loadStream(sr)

def parse(text):
  from System.IO import StringReader     
  return loadStream(StringReader(text))
</pre><p>I call load, passing in the URL to the list of songs. The “official” Rock Band song page loads the actual content from <a href="url = 'http://www.rockband.com/music/getSearchResultsTable_Ajax?sort_on=songs.NAME&amp;sort_order=asc'">a different page</a> via AJAX, so I just load the actual list directly via my load function. </p><p>Once the HTML is loaded as an XDocument, I need a way to find the specific HTML nodes I was looking for. As I said earlier, XDocument uses Linq to XML – there is not other API for querying the XML tree. In the HTML, there’s a div tag with the id “content” that contains all the song rows as table row elements. I built a simple function that uses the LINQ Single method to find the tag by it’s id attribute value.</p><pre class="brush: python">
def FindById(node, id):
  def CheckId(n):
    a = n.Attribute('id')
    return a != None and a.Value == id     
   
  return linq.Single(node.Descendants(), CheckId)
</pre><p>(Side note – I didn’t like the verbosity of the “a != None and a<span style="color: blue">.</span>Value == id” line of code, by XAttributes are not comparable by value. That is, I can’t write “node.Attribute(‘id’) == XAttribute(‘id’, id)”. And writing “node.Attribute(‘id’).Value == id” only works if every node has an id attribute. Not making XAttribute comparable by value seems like a strange design choice to me.)</p><p>LINQ to objects works just fine from IronPython, with a few caveats. First, IronPython doesn’t have extension methods, so you can’t chain calls together sequentially like you can in C#. So instead of collection.Where(…).Select(…), you have to write Select(Where(collection, …), …). Second, all the LINQ methods are generic, so you have to use the verbose list syntax (for example: Single[object] or Select[object,object]). Since Python doesn’t care about the generic types, I wrote a bunch of simple helper functions around the common LINQ methods that just use object as the generic type. Here are a few examples:</p><pre class="brush: python">
def Single(col, fun):
  return Enumerable.Single[object](col, Func[object, bool](fun))
   
def Where(col, fun):
  return Enumerable.Where[object](col, Func[object, bool](fun))
   
def Select(col, fun):
  return Enumerable.Select[object, object](col, Func[object, object](fun))
</pre><p>Once I have the content node, all the songs are in tr nodes beneath it. I wrote a function called ScrapeSong that transforms a song tr node into a Song object (which I’ll talk about in the next installment of this series). I use LINQ methods Select, OrderBy and ThenBy to provide me an enumeration of Song objects, ordered by date added (descending) than artist name.</p><pre class="brush: python">
def ScrapeSong(node):     
  tds = list(node.Elements(xhtml.ns+'td'))    
  anchor = list(tds[0].Elements(xhtml.ns+'a'))[0]    
      
  title = anchor.Value    
  url = anchor.Attribute('href').Value    
  artist = tds[1].Value    
  year = tds[2].Value    
  genre = tds[3].Value    
  difficulty = tds[4].Value    
  _type = tds[5].Value    
  added = DateTime.Parse(tds[6].Value)    
      
  return Song(title, artist, added, url, year, genre, difficulty, _type)    

songs = ThenBy(OrderByDesc(   
          Select(content.Elements(xhtml.ns +'tr'), ScrapeSong),    
          lambda s: s.added), lambda s: s.artist)
</pre><p>And that’s pretty much it. Next, I’ll iterate thru the list of songs and get the details I need from Zune’s catalog web services in order to write out a playlist that the Zune software will understand.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1199</wp:post_id>
		<wp:post_date>2008-11-26 17:16:51</wp:post_date>
		<wp:post_date_gmt>2008-11-26 17:16:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-linq-to-xml-part-2-screen-scraping</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[LINQ]]></category>
		<category domain="post_tag" nicename="rock-band"><![CDATA[Rock Band]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[XML]]></category>
		<category domain="post_tag" nicename="zune"><![CDATA[Zune]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[bcc253be-4491-4c1a-bc67-d9df809ce716]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+Linq+To+XML+Part+2+Screen+Scraping]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/27/IronPython+And+Linq+To+XML+Part+2+Screen+Scraping]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2150</wp:comment_id>
			<wp:comment_author><![CDATA[Ada]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://AsimplewarppertoenableLinq-likestyle</wp:comment_author_url>
			<wp:comment_author_IP>207.46.92.17</wp:comment_author_IP>
			<wp:comment_date>2008-12-04 02:48:01</wp:comment_date>
			<wp:comment_date_gmt>2008-12-04 10:48:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[import System, sys
import linq

linqs = {}
for name in dir(linq):
    if not name.startswith('__'):
        linqs[name] = getattr(linq, name)

class IpyLinq:
    def __init__(self, col):
        self.col = col
        
    def __iter__(self):
        return iter(self.col)
        
    def __str__(self):
        return '[%s]' % ', '.join( (str(v) for v in self) )
        
    def __repr__(self):
        return str(self)
        
    def __getattr__(self, name):
        def decorator(*arg, **kws):
            self.col = linqFunc(self.col, *arg, **kws)
            return self
        
        linqFunc = linqs[name]
        return decorator

if __name__ == '__main__':
    for x in IpyLinq([1, 2, 3, 4, 5]).Where(lambda x: x > 1).Where(lambda x: x < 5):
        print x]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2151</wp:comment_id>
			<wp:comment_author><![CDATA[Ada]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.46.92.19</wp:comment_author_IP>
			<wp:comment_date>2008-12-04 03:29:41</wp:comment_date>
			<wp:comment_date_gmt>2008-12-04 11:29:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My original implementation has a bug.

class IpyLinq:
    def __init__(self, col):
        self.col = col
        
    def __iter__(self):
        return iter(self.col)
        
    def __str__(self):
        return '[%s]' % ', '.join( (str(v) for v in self) )
        
    def __repr__(self):
        return str(self)
        
    def __getattr__(self, name):
        def decorator(*arg, **kws):
            result = linqs[name](self.col, *arg, **kws)
            if hasattr(result, '__iter__'):
                return IpyLinq(result)
            else:
                return result
        return decorator]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython and Linq to XML Part 3: Consuming Atom Feeds</title>
		<link>http://devhawk.net/2008/11/27/ironpython-and-linq-to-xml-part-3-consuming-atom-feeds/</link>
		<pubDate>Thu, 27 Nov 2008 10:55:12 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://50f114cb-c9bf-4e6d-b81d-f0fad2c654a9</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Now that I have <a href="http://devhawk.net/2008/11/27/IronPython+And+Linq+To+XML+Part+2+Screen+Scraping.aspx">my list of Rock Band songs</a>, I need to generate a Zune playlist. I wrote that Zune just uses the <a href="http://msdn.microsoft.com/en-us/library/bb249686.aspx">WMP playlist format</a>, but that’s not completely true. <a href="http://msdn.microsoft.com/en-us/library/bb262730(VS.85).aspx">Media elements</a> in a Zune playlist have several attributes that appear unique to Zune. </p><p>Because of Zune Pass, Zune supports the idea of <a href="http://www.mjefferson.net/2008/04/03/zune-streaming-playlists/">streaming playlists</a> where the songs are downloaded on demand instead of played from the local hard drive. In order to enable this, media elements in Zune playlists can have a serviceID attribute, a GUID that uniquely identifies the song on the Zune service. We also need the song’s album and duration – the Zune software summarily removes songs that don’t include the duration.</p><p>Of course, the Rock Band song list doesn’t include the Zune song service ID. It also doesn’t include the song’s album or duration. So we need a way, given the song’s title and artist (which we do have) to get its album, duration and service ID. Luckily, the Zune service provides a way to do exactly this, albeit an undocumented way. Via <a href="http://www.fiddler2.com/fiddler2/">Fiddler2</a>, I learned that Zune exposes a set of Atom feed web services on catalog.zune.net that the UI uses when you search the marketplace from the Zune software. There are feeds to search by artist and by album but the one we care about is the search by track. For example, here’s the track query for <a href="http://catalog.zune.net/v1.2/music/track?q=pinball+wizard+the+who">Pinball Wizard by The Who</a>.</p><p>Since these feeds are real XML, I can simply use <a href="http://msdn.microsoft.com/library/system.xml.linq.xdocument.load.aspx">XDocument.Load</a> to suck down the XML. Then I look for the first Atom entry element using similar LINQ to XML techniques I <a href="http://devhawk.net/2008/11/27/IronPython+And+Linq+To+XML+Part+2+Screen+Scraping.aspx">wrote about last time</a>. If there’s no Atom elements, that means that the search failed – either Zune doesn’t know about the song or it can’t find it via the Rock Band provided title and artist. Of the 461 songs on Rock Band right now, my script can find 417 of them on Zune automatically.</p><p>Of course, since the Zune data is in XML instead of HTML, finding the data I’m looking for is much easier that it was to find the Rock Band song data. Here’s the code pull the relevant information out of the Zune catalog feed that we need.</p><pre class="brush: python">
def ScrapeEntry(entry):   
  id = entry.Element(atomns+'id').Value  
  length = entry.Element(zunens+'length').Value  

  d = {}  
  d['trackTitle'] = entry.Element(atomns+'title').Value  
  d['albumArtist'] = entry.Element(zunens+'primaryArtist')
                       .Element(zunens+'name').Value  
  d['trackArtist'] = d['albumArtist']  
  d['albumTitle'] = entry.Element(zunens+'album')
                       .Element(zunens+'title').Value  
    
  if id.StartsWith('urn:uuid:'):  
    d['serviceId'] = "{" + id.Substring(9) + "}"  
  else:  
    d['serviceId'] = id  
    
  m = length_re.Match(length)  
  if m.Success:  
    min = int(m.Groups[1].Value)  
    sec = int(m.Groups[2].Value)  
    d['duration'] = str((min * 60 + sec) * 1000)  
  else:  
    d['duration'] = '60000'  
      
  return d  

trackurl = catalogurl + song.search_string     
trackfeed = XDocument.Load(trackurl)  
trackentry = First(trackfeed.Descendants(atomns+'entry'))  
track = ScrapeEntry(trackentry)
</pre><p>A few quick notes:</p><ul><li>The code above isn’t valid Python, I added a couple of carriage returns (albumArtist and albumTitle) to get it to read well on the blog without wrapping badly. </li><li>song.search_string returns the song title and artist as a plus delimited string. i.e. pinball+wizard+the+who. However, many Rock Band songs end in a parenthetical like (Cover Version) so I automatically strip that off for the search string</li><li>duration in the Atom feed is stored like PT3M23S, which means the song is 3:23 long. The playlist file expect the song length in milliseconds, so I use a .NET regular expression to pull out the minutes and seconds and do the conversion. It’s not exact – songs lengths usually aren’t exactly a factor of seconds, but as far as I can understand, Zune just uses that to display in the UI – it doesn’t affect playback at all.</li></ul><p>Now I have a list of songs with all the relevant metadata, next time I’ll write it out into a Zune playlist file.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1200</wp:post_id>
		<wp:post_date>2008-11-27 10:55:12</wp:post_date>
		<wp:post_date_gmt>2008-11-27 10:55:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-linq-to-xml-part-3-consuming-atom-feeds</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[LINQ]]></category>
		<category domain="post_tag" nicename="rock-band"><![CDATA[Rock Band]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[XML]]></category>
		<category domain="post_tag" nicename="zune"><![CDATA[Zune]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[50f114cb-c9bf-4e6d-b81d-f0fad2c654a9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+Linq+To+XML+Part+3+Consuming+Atom+Feeds]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/11/27/IronPython+And+Linq+To+XML+Part+3+Consuming+Atom+Feeds]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2152</wp:comment_id>
			<wp:comment_author><![CDATA[Rick]]></wp:comment_author>
			<wp:comment_author_email>rickrat@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.180.200.133</wp:comment_author_IP>
			<wp:comment_date>2008-12-20 01:12:43</wp:comment_date>
			<wp:comment_date_gmt>2008-12-20 09:12:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Can you tell me the regular expression used for parsing the duration? e.g. <a:length> of the track?

Thanks,

Rick]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython and Linq to XML Part 4: Generating XML</title>
		<link>http://devhawk.net/2008/12/01/ironpython-and-linq-to-xml-part-4-generating-xml/</link>
		<pubDate>Mon, 01 Dec 2008 23:13:39 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://ef4d7cdf-1c52-4f62-8aec-5a7e9c278a09</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Now that I have my <a href="http://devhawk.net/2008/11/27/IronPython+And+Linq+To+XML+Part+2+Screen+Scraping.aspx">list of Rock Band songs</a> and I can <a href="http://devhawk.net/2008/11/27/IronPython+And+Linq+To+XML+Part+3+Consuming+Atom+Feeds.aspx">get the right Zune metadata</a> for most of them, I just need to write out the playlist XML. This is very straight forward to do with the classes in System.Xml.Linq.</p><pre class="brush: python">
def GenMediaElement(song):
  try:
    trackurl = zune_catalog_url + song.search_string     
    trackfeed = XDocument.Load(trackurl)
    trackentry = First(trackfeed.Descendants(atomns+'entry'))
    trk = ScrapeEntry(trackentry)
    return XElement('media', (XAttribute(key, trk[key]) for key in trk))
  except:
    print "FAILED", song     
     
zpl = XElement("smil",     
  XElement("head",  
    XElement("title", "Rock Band Generated Playlist")),     
  XElement("body",     
    XElement("seq", (GenMediaElement(song) for song in songs))))

settings = XmlWriterSettings()
settings.Indent = True     
settings.Encoding = Encoding.UTF8     
with XmlWriter.Create("rockband.zpl", settings) as xtw:
  zpl.WriteTo(xtw)
</pre><p></p><p>XElement’s <a href="http://msdn.microsoft.com/en-us/library/bb302741.aspx">constructor</a> takes a name (<a href="http://msdn.microsoft.com/en-us/library/system.xml.linq.xname.aspx">XName</a> to be precise) and any number of <a href="http://msdn.microsoft.com/en-us/library/bb943882.aspx">child objects</a>. These child objects can be XML nodes (aka <a href="http://msdn.microsoft.com/en-us/library/system.xml.linq.xobject.aspx">XObjects</a>) or simple content objects like strings or numbers. If you pass an IEnumerable, the XElement constructor will iterate the collection and add all the items as children of the element. If you’ve had the displeasure of building an XML tree using the <a href="http://www.w3.org/DOM/">DOM</a>, you’ll really appreciate XElements’s fluent interface. I was worried that Python’s significant whitespace would force me to put all the nested XElements on a single line, but luckily Python doesn’t treat whitespace inside parenthesis as significant.  </p><p>Creating collections in Python is even easier than it is in C#. Python’s supports a <a href="http://www.python.org/doc/2.5.2/ref/yield.html">yield keyword</a> which is basically the equivalent of C#’s <a href="http://msdn.microsoft.com/en-us/library/9k7k7cf0(VS.80).aspx">yield return</a>. However, Python also supports list comprehensions (known as <a href="http://www.python.org/doc/2.5.2/ref/genexpr.html">generator expressions</a>), which are similar to <a href="http://research.microsoft.com/fsharp/manual/lexyacc.aspx#_Toc207785615">F#’s sequence expressions</a>. These are nice because you can specify a collection in a single line, rather than having to create a separate function, which is what you have to do to use yield. I have two generator expressions: (XAttribute(key, trk[key]) for key in trk) creates a collection of XAttributes, one for every item in the trk dictionary and (GenMediaElement(song) for song in songs) which generates a collection of XElements, one for every song in the song collection.</p><p>Once I’ve finished building the playlist XML, I need to write it out to a file. Originally, I used Python’s built in open function, but the playlist file had to be UTF-8 because of band names like Mötley Crüe. Zune’s software appears to always use UTF-8. In addition to setting the encoding, I also specify to use indentation, so the resulting file is somewhat readable by humans.</p><p>The playlist works great in the Zune software, but since it’s a <a href="http://www.mjefferson.net/2008/04/03/zune-streaming-playlists/">streaming playlist</a> there’s no easy way to automatically download all the songs and sync them to your Zune device. I expected to be able to right click on the playlist and select “download all", but there’s no such option. Zune does have a concept called <a href="http://www.zune.net/NR/rdonlyres/51AE197B-221B-4192-AC4A-7CA1CBFC8312/0/channels.wmv">Channels</a> where the songs from a regularly updated feed are downloaded locally and synced to the device. However, the Zune software appears to be hardcoded to only download channels from the catalog service so I couldn’t tap into that. If anyone knows how to sign up to become a Zune partner channel, please drop me a line. </p><p>Otherwise, that’s So there you have it. As usual, I’ve stuck the code <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/RockBandZunePass.zip">up on my SkyDrive</a>. If I can remember, I’ll try and run the script once a week and upload <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Zune/rockband.zpl">the new playlist</a> to my SkyDrive as well. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1201</wp:post_id>
		<wp:post_date>2008-12-01 23:13:39</wp:post_date>
		<wp:post_date_gmt>2008-12-01 23:13:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-linq-to-xml-part-4-generating-xml</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[LINQ]]></category>
		<category domain="post_tag" nicename="rock-band"><![CDATA[Rock Band]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[XML]]></category>
		<category domain="post_tag" nicename="zune"><![CDATA[Zune]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[ef4d7cdf-1c52-4f62-8aec-5a7e9c278a09]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+Linq+To+XML+Part+4+Generating+XML]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/02/IronPython+And+Linq+To+XML+Part+4+Generating+XML]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IPy RTW FTW!</title>
		<link>http://devhawk.net/2008/12/10/ipy-rtw-ftw/</link>
		<pubDate>Wed, 10 Dec 2008 14:57:30 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://9d513c68-87c3-4b16-a28f-ece87ad1ef65</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=8365"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; margin: 0px 5px 0px 0px; border-right-width: 0px" height="119" alt="image" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/IPyRTWFTW_C47D/image_5.png" width="186" align="left" border="0" /></a>This is a very pretty sight. It’s a screenshot from the IronPython CodePlex home page showing that 2.0 is the “current release”. Yes that’s right, dear reader, IronPython 2.0 has officially been released!</p><p><a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=8365">Get it now</a>!</p><p>This release marks the end of a very busy year for me, nine months to the day since I accepted the offer to <a href="http://devhawk.net/2008/03/11/Joining+The+Dynamic+Languages+Team.aspx">join the dynamic languages team</a>. Between helping ship IronPython 2.0 and helping manage the languages and tools PDC08 track, I’ve been swimming in the deep end of the pool all year. Feels good to <em>not </em>have any immediate deliverables for the next month or two.</p><p>Major, <em>major</em> props to <a href="http://blogs.msdn.com/dinoviehland">Dino</a>, <a href="http://blogs.msdn.com/curth">IronCurt</a>, <a href="http://knowbody.livejournal.com/">Dave</a> and <a href="http://blogs.msdn.com/srivatsn">Srivatsn</a> who have done the heavy lifting on the IPy side this release. Also major props to the DLR team, who are releasing the final 0.9 version of the DLR later today in concert with IPy 2.0. (Update: the <a href="http://www.codeplex.com/dlr/Release/ProjectReleases.aspx?ReleaseId=20378">DLR 0.9 RTW bits</a> are now available) And of course, HUGE HUGE HUGE thanks to the vibrant IPy community, many of whom are listed by name in <a href="http://www.codeplex.com/IronPython/Wiki/View.aspx?title=v2.0.0%20Release%20Notes&amp;referringTitle=Home">the release notes</a>.</p><p>Even with 2.0 finally out the door, there’s no rest for the dynamic. As per the release notes, “we’re planning on releasing IronPython 2.0.1 fairly soon” so keep those bug reports coming. Going forward, we’ve got big plans for IronPython and we rely heavily on the continued input from our community, so please keep telling us where we can improve.</p><p>On a personal note, the past nine months have been busy – very busy – but they’ve also been a blast. Frankly, I was hesitant about joining the product groups for a long time because I was worried about the grind, the culture, the overall experience. Turns out my fears were overblown, though I’m thinking that’s at least partially related to the fact that I work on a “little” project like IronPython rather than a huge project like Visual Studio. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1202</wp:post_id>
		<wp:post_date>2008-12-10 14:57:30</wp:post_date>
		<wp:post_date_gmt>2008-12-10 14:57:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ipy-rtw-ftw</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[9d513c68-87c3-4b16-a28f-ece87ad1ef65]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IPy+RTW+FTW]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/10/IPy+RTW+FTW]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2153</wp:comment_id>
			<wp:comment_author><![CDATA[srid]]></wp:comment_author>
			<wp:comment_author_email>sridhr@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2008-12-10 16:51:41</wp:comment_date>
			<wp:comment_date_gmt>2008-12-11 00:51:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[could you guys rename the installer to IronPython-2.0.msi or somesuch thing? when I tried to install it, Windows recognized it as 2.0-RC2 installer and asked me to whether repair or remove the software.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2154</wp:comment_id>
			<wp:comment_author><![CDATA[Brian Lyttle]]></wp:comment_author>
			<wp:comment_author_email>bl-nospam@sourcefoundry.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.sourcefoundry.co.uk</wp:comment_author_url>
			<wp:comment_author_IP>71.224.204.70</wp:comment_author_IP>
			<wp:comment_date>2008-12-10 19:14:46</wp:comment_date>
			<wp:comment_date_gmt>2008-12-11 03:14:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congrats on the release of IPy 2.0. You are lucky to work with such a great team!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2155</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
			<wp:comment_date>2008-12-10 19:55:52</wp:comment_date>
			<wp:comment_date_gmt>2008-12-11 03:55:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@srid, sounds like an installer bug. I'll have the team look into it.

@brian, yes I am very lucky to work on this team!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2156</wp:comment_id>
			<wp:comment_author><![CDATA[Fernando Correia]]></wp:comment_author>
			<wp:comment_author_email>fernandoacorreia@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://fernandoacorreia.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP>200.215.112.105</wp:comment_author_IP>
			<wp:comment_date>2008-12-11 04:31:33</wp:comment_date>
			<wp:comment_date_gmt>2008-12-11 12:31:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congratulations to the team! That's very nice work.

My team is already using IPy in production as a presentation-layer scripting engine for SharePoint applications. It's been very useful and it is a very important piece of our architecture.
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2157</wp:comment_id>
			<wp:comment_author><![CDATA[Nicholas Blumhardt]]></wp:comment_author>
			<wp:comment_author_email>niblumha@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/nblumhardt</wp:comment_author_url>
			<wp:comment_author_IP>75.92.142.94</wp:comment_author_IP>
			<wp:comment_date>2008-12-11 10:31:53</wp:comment_date>
			<wp:comment_date_gmt>2008-12-11 18:31:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congratulations IPy guys! Wonderful stuff.
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2158</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.107</wp:comment_author_IP>
			<wp:comment_date>2008-12-15 10:03:25</wp:comment_date>
			<wp:comment_date_gmt>2008-12-15 18:03:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@srid, turns out it's not an installer bug, it's the same installer as RC2. We made zero changes between RC2 and RTM. If you have RC2 installed, you've got the RTM version.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython RTM News Gets Around</title>
		<link>http://devhawk.net/2008/12/11/ironpython-rtm-news-gets-around/</link>
		<pubDate>Thu, 11 Dec 2008 16:49:15 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://023449f4-8755-4653-bd04-20ab9f1ef710</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I just hit the MSDN home page, and what should I see?</p><p><a href="http://blogs.msdn.com/jasonz/archive/2008/12/11/ironpython-2-0-released.aspx"><img title="msdn Home" style="border-right: 0px; border-top: 0px; display: block; float: none; margin: 0px auto 10px; border-left: 0px; border-bottom: 0px" height="124" alt="msdn Home" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/IronPythonRTMNewsGetsAround_EC8A/msdn Home_3.png" width="483" border="0" /></a>It’s cool to see JasonZ, aka my group’s general manager, <a href="http://blogs.msdn.com/jasonz/archive/2008/12/11/ironpython-2-0-released.aspx">blogging</a> about our product. </p><p>I also fired up Visual Studio, and <a href="http://codeplex.com/ironpython">IronPython</a> is the top headline there too:</p><p><img title="VS home" style="border-right: 0px; border-top: 0px; display: block; float: none; margin-left: auto; border-left: 0px; margin-right: auto; border-bottom: 0px" height="457" alt="VS home" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/IronPythonRTMNewsGetsAround_EC8A/VS home_3.png" width="621" border="0" />Not sure why the news is dated September 18th, but hey it’s really cool to see IronPython (not to mention the <a href="http://www.codeplex.com/dlr">DLR</a>, with the second headline) getting this kind of visibility. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1203</wp:post_id>
		<wp:post_date>2008-12-11 16:49:15</wp:post_date>
		<wp:post_date_gmt>2008-12-11 16:49:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-rtm-news-gets-around</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[023449f4-8755-4653-bd04-20ab9f1ef710]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+RTM+News+Gets+Around]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/12/IronPython+RTM+News+Gets+Around]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronPython and LiveFX: Accessing Profiles</title>
		<link>http://devhawk.net/2008/12/12/ironpython-and-livefx-accessing-profiles/</link>
		<pubDate>Fri, 12 Dec 2008 17:50:08 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://95b8da55-983a-4485-ae88-89c0a375e3cb</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I recently got access to both the <a href="http://www.microsoft.com/azure/windowsazure.mspx">Windows Azure</a> and <a href="http://dev.live.com/liveframework/">Live Framework</a> CTP programs. Frankly, I’m very interested in <a href="https://www.mesh.com">Live Mesh</a>, so I decided to start with a simple LiveFX program. Scott (aka <a href="http://www.liveside.net/members/ScottIsAFool/default.aspx">ScottIsAFool</a>) at <a href="http://www.liveside.net">LiveSide</a> posted a <a href="http://www.liveside.net/developer/archive/2008/11/10/a-quick-and-dirty-console-application-using-the-livefx.aspx">“quick and dirty” console app</a> that pulls info from a user’s profile via LiveFx. It’s not Mesh per se, but it does use the same framework and resource model so I decided to port it to IronPython. FYI, this app won’t run unless you’ve been received a LiveFx CTP token and provisioned yourself. </p><pre class="brush: python">
#Add LiveFX References     
import sys     
sys.path.append('C:\Program Files\Microsoft SDKs\Live Framework SDK\v0.9\Libraries\.Net Library')

import clr     
clr.AddReference('Microsoft.LiveFX.Client')
clr.AddReference('Microsoft.LiveFX.ResourceModel')

from Microsoft.LiveFX.Client import LiveOperatingEnvironment     
from Microsoft.LiveFX.ResourceModel.ProfileResource import ProfileType     
from System.Net import NetworkCredential     

from devhawk import linq     

#get username and password from the user     
uid = raw_input("Enter Windows Live ID: ")
pwd = raw_input("Enter Password: ")
creds = NetworkCredential(uid, pwd, "https://user-ctp.windows.net")

#print out user's info     
loe = LiveOperatingEnvironment()
loe.Connect(creds)

general = linq.Single(loe.Profiles.Entries,  
  lambda e: e.Resource.Type == ProfileType.General)

print loe.Mesh.ProvisionedUser.Name     
print loe.Mesh.ProvisionedUser.Email     
print general.Resource.ProfileInfo.PersonalStatusMessage     
print linq.Count(loe.Contacts.Entries)
</pre><p>I did modify the app slightly, reading the WLID and password off the console – I was *sure* I would accidently post my personal credentials if I left them embedded in the app. Otherwise, it’s a straight port. First, I add references the LiveFX dlls. Since they’re not local to my script, I add the directory where they’re installed to sys.path, which lets me call clr.AddReference directly. Then I retrieve the user’s ID and password using raw_input (Python’s equivalent to Console.ReadLine). Finally, I connect to the user’s LiveOperatingEnvironment and pull their name, email address, personal status message and the number of contacts they have. </p><p>As per the original app, I use LINQ to find the right profile as well as count the number of contacts. I was able to reuse the linq.py file I wrote for my <a href="http://devhawk.net/2008/11/27/IronPython+And+Linq+To+XML+Part+2+Screen+Scraping.aspx">Rock Band song list screen scraper</a> (though I did have to add the Count function since I hadn’t needed it previously). I’ve posted <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/LiveFxPsmDemo.zip">this script</a> on my SkyDrive, and it includes my most recent linq.py file.</p><p>BTW, it doesn’t appear that you can set the PersonalStatusMessage programmatically, at least not currently. I was thinking it would be cool to build an app that sets your PSM via Twitter, but the set method of PersonalStatusMessage is marked internal. In fact, all the set methods of all the profile properties I looked at are marked internal. If someone knows how to update LiveFX resource objects in the current CTP, I’d appreciate it if you dropped me a line or left me a comment.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1204</wp:post_id>
		<wp:post_date>2008-12-12 17:50:08</wp:post_date>
		<wp:post_date_gmt>2008-12-12 17:50:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-livefx-accessing-profiles</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="live-framework"><![CDATA[Live Framework]]></category>
		<category domain="post_tag" nicename="windows-live"><![CDATA[Windows Live]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[95b8da55-983a-4485-ae88-89c0a375e3cb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+LiveFX+Accessing+Profiles]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/13/IronPython+And+LiveFX+Accessing+Profiles]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2159</wp:comment_id>
			<wp:comment_author><![CDATA[Oran]]></wp:comment_author>
			<wp:comment_author_email>odennison@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://orand.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>209.112.216.45</wp:comment_author_IP>
			<wp:comment_date>2008-12-12 20:44:15</wp:comment_date>
			<wp:comment_date_gmt>2008-12-13 04:44:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Most resources in LiveFX can be updated but Profiles are unfortunately read-only at this point.
http://social.msdn.microsoft.com/Forums/en-US/liveframework/thread/81ab8f62-3244-4ca5-b376-2d5879f47c9f/

For another example of IronPython + LiveFX, check out this blog post from Ori Amiga, the Group PM of LiveFX.  Ori loves IronPython so if there's anything you think of that would make LiveFX more IronPython-friendly, he would be the guy to contact.
http://blogs.msdn.com/oriamiga/archive/2008/11/09/livefx-using-ironpython.aspx]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2160</wp:comment_id>
			<wp:comment_author><![CDATA[Vikas Ahuja]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/vikasahuja</wp:comment_author_url>
			<wp:comment_author_IP>71.112.104.79</wp:comment_author_IP>
			<wp:comment_date>2008-12-13 00:47:52</wp:comment_date>
			<wp:comment_date_gmt>2008-12-13 08:47:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Harry - Profiles are read only in current release as Oran pointed out. You can use forums as one of the resource at your disposal for discussion if you haven't already using it. 

I have updated one Thread with link to your post - we community members for Live Framework keep doing it as we find blog posts about Live Framework.

http://social.msdn.microsoft.com/Forums/en-US/liveframework/thread/828d9a48-239a-4af8-8239-35931e514d37

]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython and LiveFX: Ori&#039;s LiveOE.py</title>
		<link>http://devhawk.net/2008/12/16/ironpython-and-livefx-oris-liveoe-py/</link>
		<pubDate>Tue, 16 Dec 2008 10:09:54 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://ae997eb7-047f-4600-8b5d-e0f43c59bddd</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://blogs.msdn.com/oriamiga/">Ori Amiga</a> is a Group Program Manager over in the Live Framework team whom you might have seen at PDC08 delivering the <a href="http://channel9.msdn.com/pdc2008/BB04/">Lap Around LiveFX &amp; Mesh Services</a> and <a href="http://channel9.msdn.com/pdc2008/BB19/">LiveFX Programming Model Architecture and Insights</a> talks. And apparently, he’s an IronPython fan as posted a small <a href="http://blogs.msdn.com/oriamiga/archive/2008/11/09/livefx-using-ironpython.aspx">LiveFX Python module</a> to his blog. It’s pretty simple – it only wraps Connect and ConnectLocal - but it does cut about ten lines of path appending, reference adding and module importing code into a single import statement. Here’s the profile access script from <a href="http://devhawk.net/2008/12/13/IronPython+And+LiveFX+Accessing+Profiles.aspx">my last post</a> rewritten to use Ori’s LiveOE module.</p><pre class="brush: python">
import LiveOE     
from devhawk import linq     

uid = raw_input("Enter Windows Live ID: ")
pwd = raw_input("Enter Password: ")

loe = LiveOE.Connect(uid, pwd)

general = linq.Single(loe.Profiles.Entries,  
  lambda e: e.Resource.Type == LiveOE.ProfileResource.ProfileType.General)

print loe.Mesh.ProvisionedUser.Name     
print loe.Mesh.ProvisionedUser.Email     
print general.Resource.ProfileInfo.PersonalStatusMessage     
print linq.Count(loe.Contacts.Entries)
</pre><p>FYI, make sure you update the sdkLibsPath in LiveOE.py – I’m not sure where Ori has installed the LiveFX SDK, but it’s *not* in the location suggested by the read me file.</p><p>BTW, it turns out the <a href="http://social.msdn.microsoft.com/Forums/en-US/liveframework/thread/81ab8f62-3244-4ca5-b376-2d5879f47c9f/">WL Profile information is read only</a> which answers a question I had. However, reading the thread it sounds like they will eventually get around to making it read-write at some point. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1205</wp:post_id>
		<wp:post_date>2008-12-16 10:09:54</wp:post_date>
		<wp:post_date_gmt>2008-12-16 10:09:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-livefx-oris-liveoe-py</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="live-framework"><![CDATA[Live Framework]]></category>
		<category domain="post_tag" nicename="windows-live"><![CDATA[Windows Live]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[ae997eb7-047f-4600-8b5d-e0f43c59bddd]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+LiveFX+Orirsquos+LiveOEpy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/16/IronPython+And+LiveFX+Orirsquos+LiveOEpy]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronPython and LiveFX: Raw HTTP Access</title>
		<link>http://devhawk.net/2008/12/16/ironpython-and-livefx-raw-http-access/</link>
		<pubDate>Tue, 16 Dec 2008 15:36:48 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://47b36a30-e4af-42a0-8609-fbc0a83fe083</guid>
		<description></description>
		<content:encoded><![CDATA[<p>One of the cool things about the Live Framework is that while there’s a <a href="http://msdn.microsoft.com/en-us/library/dd136352.aspx">convenient .NET library available</a>, you can use the <a href="http://msdn.microsoft.com/en-us/library/dd199240.aspx">raw HTTP interface</a> from any platform. LiveFX data is served up over HTTP and is available in ATOM, RSS, JSON or POX formats. As I’ve already shown, you can easily use the .NET library from IronPython, but I wanted to try working with the raw HTTP interface to get a feel for that as well.</p><p>Unfortunately, it was harder than I expected it to be. The big issue is that the documentation on how to LiveFX authorization tokens via raw HTTP is fairly sparse and occasionally contradictory. For example, there’s a whole section on <a href="http://msdn.microsoft.com/en-us/library/dd137185.aspx">Authentication and Live Framework</a>, but it doesn’t cover this scenario. Luckily, I was able to figure it out with the help of <a href="http://msdn.microsoft.com/en-us/library/dd135995.aspx">AtomPub Project Manager LiveFX Sample</a>, a <a href="http://blog.opennetcf.com/afeinman/PermaLink,guid,80ea4a1d-fbc0-485d-a088-fb8f30efb6ab.aspx">post on Alex Feinman’s blog</a>, a <a href="http://blogs.msdn.com/emesas/archive/2008/02/13/windows-live-id-available-options-part-i.aspx">post on Emmanuel Mesas’ blog</a> and a little groveling around with Reflector. It does appear that the auth docs are in flux –Emmanuel refers to <a href="http://msdn.microsoft.com/en-us/library/bb447721.aspx">this MSDN article</a> as being about RPS Soap requests, but it’s actually about delegated authority. (Is MSDN reusing URLs? Bad idea.) Also, the sample code has a comment that reads “to be replaced by delegated authorization” so it looks like changes are coming. In other words, no promises on how long this code will work!</p><p>If you look at the AtomPub Project Manager sample, there’s a WindowsLiveIdentity.cs file that implements static GetTicket method that looks similar to both the code on Alex’s blog as well as the implementation of <a href="http://msdn.microsoft.com/en-us/library/dd157462.aspx">GetWindowsLiveAuthenticationToken</a>. The upshot is that there’s a <a href="http://en.wikipedia.org/wiki/WS-Trust">WS-Trust</a> endpoint for Windows Live at <a href="https://dev.login.live.com/wstlogin.srf">https://dev.login.live.com/wstlogin.srf</a>. You send it a RequestSecurityToken (aka RST) message (with a couple of extra WL specific extensions) and it responds with the security token you’ll need for accessing the LiveFx HTTP endpoints. </p><p>I ported the GetTicket function over to IronPython. I’m using .NET classes like WebRequest and XmlReader, but there’s nothing fancy here so I would expect it to be easy enough to port over to the standard Python library.</p><pre class="brush: python">
def get_WL_ticket(username, password, compactTicket):
    req = WebRequest.Create(_LoginEndPoint)
    req.Method = "POST"
    req.ContentType = "application/soap+xml; charset=UTF-8"
    req.Timeout = 30 * 10000
     
    rst = get_RST_message(username, password, compactTicket)
    rstbytes = Encoding.UTF8.GetBytes(rst)
    with req.GetRequestStream() as reqstm:
      reqstm.Write(rstbytes, 0, rstbytes.Length)
       
    with req.GetResponse() as resp:
      with resp.GetResponseStream() as respstm:
        with XmlReader.Create(respstm) as reader:
          if compactTicket:
            name = "BinarySecurityToken"
            namespace = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
          else:
            name = "RequestedSecurityToken"
            namespace = "http://schemas.xmlsoap.org/ws/2005/02/trust"

          if not reader.ReadToDescendant(name, namespace):
            raise "couldn't find security token element"
           
          reader.ReadStartElement(name, namespace)
          token = reader.ReadContentAsString()
          reader.ReadEndElement()
           
          return Convert.ToBase64String(Encoding.UTF8.GetBytes(token))
</pre><p>This code simply uses a WebRequest object to post the RST message to the WS-Trust enpoint then parses the result to find the token. get_RST_message uses <a href="http://www.python.org/doc/2.5.2/lib/typesseq-strings.html">standard Python string formatting</a> to generate the RST message that gets posted to the WS-Trust endpoint. I’m not exactly sure why you need to convert the token value to a byte array and then Base64 encode it, but that’s what the sample code does so I did it to.</p><p>Once you have the authentication ticket, you need to download root service endpoint document in order to get the base URL and the profiles link. Then you can download all the profiles or you can download a specific one if you know it’s <a href="http://orand.blogspot.com/2008/11/l1v3-m35h-l337-h4x0rz.html">leet-speak identifier</a>. LiveFX data can be downloaded in a variety of formats: ATOM, JSON, RSS or POX. You choose your format by setting the Accept and Content-Type headers. </p><p>I wrote the following functions, the generic boilerplate download function as well a specific versions for downloading JSON and POX:</p><pre class="brush: python">
def download(url, contentType, authToken):
  req = WebRequest.Create(url)
  req.Accept = contentType     
  req.ContentType = contentType     
  req.Headers.Add(HttpRequestHeader.Authorization, authToken)
   
  return req.GetResponse()  
   
def download_json(url, authToken):
  resp = download(url, 'application/json', authToken)
  with StreamReader(resp.GetResponseStream()) as reader:  
      data = reader.ReadToEnd()
      return eval(data)

def download_pox(url, authToken):
  resp = download(url, 'text/xml', authToken)
  return XmlReader.Create(resp.GetResponseStream())
</pre><p>Using JSON in Python is really easy, since I can simply eval the returned string and get back Python dictionary objects, similar to what you can do in Javascript. </p><p>Here’s some code that uses the get_WL_ticket and download_json functions above to retrieve the the user’s Personal Status Message</p><pre class="brush: python">
#Get user's WL ticket
uid = raw_input("enter WL ID: ")    
pwd = raw_input("enter password: ")   

authToken = livefx_http.get_WL_ticket(uid, pwd, True)   

#download root service document 
service = livefx_http.download_json(_LiveFxUri, authToken)   

#download general profile document 
url = service['BaseUri'] + service['ProfilesLink'] + "/G3N3RaL"   

genprofile = livefx_http.download_json(url, authToken)   
print genprofile['ProfileBase']['PersonalStatusMessage']
</pre><p>POX is also fairly easy, though a bit more verbose than JSON. The sample code, which I have <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/LiveFxHttp.zip">stuck on my SkyDrive</a>, includes both POX and JSON code, so you can compare and contrast the differences. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1206</wp:post_id>
		<wp:post_date>2008-12-16 15:36:48</wp:post_date>
		<wp:post_date_gmt>2008-12-16 15:36:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-livefx-raw-http-access</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="live-framework"><![CDATA[Live Framework]]></category>
		<category domain="post_tag" nicename="windows-live"><![CDATA[Windows Live]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[47b36a30-e4af-42a0-8609-fbc0a83fe083]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+LiveFX+Raw+HTTP+Access]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/16/IronPython+And+LiveFX+Raw+HTTP+Access]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PowerShell find-to-set-alias</title>
		<link>http://devhawk.net/2008/12/17/powershell-find-to-set-alias/</link>
		<pubDate>Wed, 17 Dec 2008 15:17:09 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://ae593a6d-e9b4-40ad-9a2e-fe46accd5f78</guid>
		<description></description>
		<content:encoded><![CDATA[I use Live Mesh to keep my PowerShell scripts folder synced between multiple machine. Some of those machines have different things installed on them or have things installed in different locations. For example, my laptop is x86 while my desktop is x64 so many things on the desktop get installed into c:\Program Files (x86) instead of the plain-old c:\Program Files folder. I wanted my shared profile script to be able to search a set of folders for a given executable to alias, and I came up with the following function.
<pre class="brush: powershell">function find-to-set-alias($foldersearch, $file, $alias)
{
  dir $foldersearch |
    %{dir $_ -Recurse -Filter $file} |
    %{set-alias $alias $_.FullName -scope Global; break}
}</pre>
It’s pretty simple to use. You pass in a folder search criteria – it must have a wildcard, or the function won’t work – the file you’re looking for and the alias you want to set. The function finds all the folders matching the $foldersearch criteria, then searches them recursively looking for the $file you specified. Set-alias is called for the first matching $file found – pipeline processing is halted via the break statement.

Here are the find-to-set-aliases I have in my profile:
<pre class="brush: powershell">find-to-set-alias 'c:\program files*\IronPython*' ipy.exe ipy
find-to-set-alias 'c:\program files*\IronPython*' chiron.exe chiron     

find-to-set-alias 'c:\Python*' python.exe cpy     

find-to-set-alias
    'c:program files*\Microsoft Visual Studio 9.0\Common7' devenv.exe vs
find-to-set-alias
    'c:program files*\Microsoft Visual Studio 9.0\Common7' tf.exe tf     

find-to-set-alias 'c:\program files*\FSharp*' fsi.exe fsi
find-to-set-alias
    'c:\program files*\Microsoft Repository SDK*' ipad.exe ipad
find-to-set-alias
    'c:\program files*\Microsoft Virtual PC*' 'Virtual pc.exe' vpc</pre>
Python, IronPython and F# aliases, no surprise there. Chiron is the REPL server for dynamic language Silverlight development. Typically, I use <a href="http://www.tavaresstudios.com/Blog/post/The-last-vsvars32ps1-Ill-ever-need.aspx">Chris Tavares’ vsvars script</a> to configure the command shell for development purposes, but I find it’s nice to have aliases for TF and DevEnv handy at all times.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1207</wp:post_id>
		<wp:post_date>2008-12-17 15:17:09</wp:post_date>
		<wp:post_date_gmt>2008-12-17 15:17:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>powershell-find-to-set-alias</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-geekery"><![CDATA[General Geekery]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[ae593a6d-e9b4-40ad-9a2e-fe46accd5f78]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[PowerShell+Findtosetalias]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/17/PowerShell+Findtosetalias]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2161</wp:comment_id>
			<wp:comment_author><![CDATA[Dave]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://famoushamsandwich.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>96.237.230.113</wp:comment_author_IP>
			<wp:comment_date>2008-12-17 16:34:55</wp:comment_date>
			<wp:comment_date_gmt>2008-12-18 00:34:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I do the same thing and solved it using ${env:programfiles}.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2162</wp:comment_id>
			<wp:comment_author><![CDATA[Brad Wilson]]></wp:comment_author>
			<wp:comment_author_email>dotnetguy@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://bradwilson.typepad.com/</wp:comment_author_url>
			<wp:comment_author_IP>98.203.252.139</wp:comment_author_IP>
			<wp:comment_date>2008-12-28 12:47:47</wp:comment_date>
			<wp:comment_date_gmt>2008-12-28 20:47:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for this! I posted an expanded version suitable for use as a script file, which includes optional diagnostic/debugging information:

http://bradwilson.typepad.com/blog/2008/12/find-to-set-aliasps1.html
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>The Reese&#039;s Peanut Butter Cups of Language Conferences</title>
		<link>http://devhawk.net/2008/12/18/the-reeses-peanut-butter-cups-of-language-conferences/</link>
		<pubDate>Thu, 18 Dec 2008 18:32:42 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://54b16d9e-f335-468d-9a5d-351e004fe753</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It’s been about 11 months since the last <a href="http://www.langnetsymposium.com/">Lang.NET Symposium</a> and we’ve been working on next year’s version. But then we discovered that we’re not the only ones inside Microsoft thinking about having <a href="http://www.sellsbrothers.com/news/showTopic.aspx?ixTopic=2201">a language conference</a>. A couple of meetings later, and we’ve decided to combine them, which will assuredly lead to side conversations like this:</p><blockquote><p>DSL DevCon Attendee: Hey, you got your compiler in my DSL!</p><p>Lang.NET Attendee: Hey, you got your DSL in my compiler!</p><p>[They sample the combined content]</p><p>Both Attendees: Mmmm, two great conferences that work well together!</p></blockquote><p>Well, maybe not. But seriously, it should be a great combined conference.</p><p>However, there are some logistics things we need to work out, like how many days should the combined conference run? We figure the “right” answer to these questions depends on the likely overlap between the two conferences. Frankly, we don’t know what the overlap will be so we decided to <a href="http://www.sellsbrothers.com/news/showTopic.aspx?ixTopic=2219">simply, you know, ask</a>.</p><p>If you are interested in attending Lang.NET, the DSL DevCon, or both next year, <u>please</u> head over to Chris Sells blog and <a href="http://www.sellsbrothers.com/news/showTopic.aspx?ixTopic=2219">make your voice heard</a>. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1208</wp:post_id>
		<wp:post_date>2008-12-18 18:32:42</wp:post_date>
		<wp:post_date_gmt>2008-12-18 18:32:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-reeses-peanut-butter-cups-of-language-conferences</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="domain-specific-languages"><![CDATA[Domain Specific Languages]]></category>
		<category domain="post_tag" nicename="langnet"><![CDATA[LangNET]]></category>
		<category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[54b16d9e-f335-468d-9a5d-351e004fe753]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[The+Reesersquos+Peanut+Butter+Cups+Of+Language+Conferences]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/19/The+Reesersquos+Peanut+Butter+Cups+Of+Language+Conferences]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2163</wp:comment_id>
			<wp:comment_author><![CDATA[Busby SEO Test]]></wp:comment_author>
			<wp:comment_author_email>Cruz_jayson18@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://pinayspeak.com/pinaytest/</wp:comment_author_url>
			<wp:comment_author_IP>124.106.146.254</wp:comment_author_IP>
			<wp:comment_date>2009-01-19 19:29:06</wp:comment_date>
			<wp:comment_date_gmt>2009-01-20 03:29:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[great full!!wonderful post!!thanks for sharing!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
</channel>
</rss>
