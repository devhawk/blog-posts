<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->


<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>DevHawk</title>
	<link>http://devhawk.net</link>
	<description>Passion * Technology * Ruthless Competence</description>
	<pubDate>Fri, 18 Oct 2013 06:06:50 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://devhawk.net</wp:base_site_url>
	<wp:base_blog_url>http://devhawk.net</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>devhawk</wp:author_login><wp:author_email>harry@devhawk.net</wp:author_email><wp:author_display_name><![CDATA[DevHawk]]></wp:author_display_name><wp:author_first_name><![CDATA[Harry]]></wp:author_first_name><wp:author_last_name><![CDATA[Pierson]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>dale</wp:author_login><wp:author_email>dale@microsoft.com</wp:author_email><wp:author_display_name><![CDATA[Dale Churchward]]></wp:author_display_name><wp:author_first_name><![CDATA[Dale]]></wp:author_first_name><wp:author_last_name><![CDATA[Churchward]]></wp:author_last_name></wp:author>


	

	<item>
		<title>IronPython Nightly Builds</title>
		<link>http://devhawk.net/2009/01/07/ironpython-nightly-builds/</link>
		<pubDate>Wed, 07 Jan 2009 15:18:13 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://96cf813b-cc2b-4941-8fea-7bc98b3a0db9</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=8365">IronPython 2.0</a> shipped <a href="http://devhawk.net/2008/12/10/IPy+RTW+FTW.aspx">about a month ago</a>, but we’re still chugging along with our post 2.0 work. We’ve shipped seven <a href="http://www.codeplex.com/IronPython/SourceControl/ListDownloadableCommits.aspx">source code releases</a> since we shipped 2.0 and we should be back to our normal schedule of updating the source 2-3 times a week schedule by next week. Given how often we ship source, we’re thinking of extending the the time between binary drops. Binary releases have to be signed and there’s a fairly arduous process we have to go thru in order to get each binary release out the door.</p><p>However, there’s something nice and convenient about downloading a pre-compiled binary release. So I spent my Christmas vacation building a script to download and build IronPython nightly builds. Once built, I compress the binaries and upload them to <a href="http://msdn.microsoft.com/en-us/library/dd135733.aspx">Azure blob storage</a>. Finally, I built a <a href="http://nightlybuilds.cloudapp.net/">*very* simple cloud app</a> for users to view and download available nightly builds. As an extra benefit, I’m also providing nightly builds of the <a href="http://codeplex.com/dlr">DLR</a>. </p><p>Please note, these are *NOT* official Microsoft releases of IronPython and/or DLR. They aren’t signed and they haven’t gone through the aforementioned release process. I’m just downloading the public source, building it with the publicly available tools, then making them available on a a publicly accessible website.</p><p>The website for the IronPython (and DLR) nightly builds is <a href="http://nightlybuilds.cloudapp.net">http://nightlybuilds.cloudapp.net</a>. </p><p>As usual, I welcome any feedback. Is having prebuilt unsigned binaries of IPy releases useful? Do you want IronRuby binaries as well? What about social features (rating releases, comments, etc)? Please let me know what you think. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1209</wp:post_id>
		<wp:post_date>2009-01-07 15:18:13</wp:post_date>
		<wp:post_date_gmt>2009-01-07 15:18:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-nightly-builds</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[96cf813b-cc2b-4941-8fea-7bc98b3a0db9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+Nightly+Builds]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/01/07/IronPython+Nightly+Builds]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2164</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin Hazzard, MVP]]></wp:comment_author>
			<wp:comment_author_email>kevin@gotnet.biz</wp:comment_author_email>
			<wp:comment_author_url>http://www.gotnet.biz/Blog</wp:comment_author_url>
			<wp:comment_author_IP>75.199.177.176</wp:comment_author_IP>
			<wp:comment_date>2009-01-08 11:39:49</wp:comment_date>
			<wp:comment_date_gmt>2009-01-08 19:39:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is awesome, Harry. Thanks for taking the time to put it together.

Kevin]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Nightly Builds Technical Info</title>
		<link>http://devhawk.net/2009/01/07/nightly-builds-technical-info/</link>
		<pubDate>Wed, 07 Jan 2009 15:23:26 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://9ecbf637-0b38-475e-90ad-33af18381878</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Here are some technical details on my <a href="http://devhawk.net/2009/01/07/IronPython+Nightly+Builds.aspx">Nightly Builds solution</a>. I broke them into a separate post because I figured most people are more interested in the actual service than how it’s built.</p><p>As you might expect, I built most of the solution in IronPython. All of the download, build, compress and Azure upload code was written in IPy. The one part I didn’t write in IPy was the Azure cloud web app, which I wrote in C#. Jon Udell’s been investigating <a href="http://blog.jonudell.net/2008/12/22/azure-calendar-aggregator-part-1/">getting IPy to run in Azure</a>, but I just wanted something quick and dirty (as you can see from the <a href="http://nightlybuilds.cloudapp.net/">utter lack of formatting</a>) so I decided to use C# instead. Man, were my ASP.NET skills rusty.</p><p>As for the IronPython parts, for the most part I’m using external tools for downloading, building and compressing. I use the <a href="http://www.codeplex.com/IronPython/Project/ProjectRss.aspx?ProjectRSSFeed=codeplex%3a%2f%2fsourcecontrol%2fIronPython">Source Control RSS Feed</a> to discover recent source code changesets, <a href="http://www.codeplex.com/CodePlexClient">CodePlex Client</a> to download source from CodePlex, <a href="http://msdn.microsoft.com/en-us/library/wea2sca5.aspx">MSBuild</a> to build the binaries, <a href="http://www.7-zip.org/">7-zip</a> to compress the binaries and the <a href="http://msdn.microsoft.com/en-us/library/dd135716.aspx">StorageClient library sample</a> to upload the compressed binaries up to Azure blob storage. </p><p>For building and compressing, I’m literally shelling out to MSBuild and 7-Zip via <a href="http://www.python.org/doc/2.5.2/lib/os-process.html">os.system</a>. I looked at <a href="http://www.ironpython.info/index.php/Automating_MSBuild">programmatically building</a> via the MSBuild API, but I ran into an <a href="http://blogs.microsoft.co.il/blogs/idof/archive/2008/11/24/what-does-entity-framework-has-to-do-with-msbuild.aspx">assembly binding bug</a> that I wasn’t motivated enough to work around. As for creating zip files programmatically, IronPython doesn’t have a <a href="http://www.python.org/doc/2.5.2/lib/module-zlib.html">zlib module</a> implementation yet so I just used 7-Zip’s command line utility instead.</p><p>For downloading form CodePlex, I originally started by shelling out to CodePlex Client. However, I wanted the ability to cloak folders – for example Tutorial and SrcTests – that weren’t required to build. CodePlex Client has a very useful TFS library embedded in it – the build process combines all the libraries into a single executable via <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=22914587-b4ad-4eae-87cf-b14ae6a939b0&amp;displaylang=en">ILMerge</a>. I could have compiled my own version of the TFS library, but instead I just load cpc.exe as an assembly reference via clr.AddReferenceToFileAndPath. It’s a nifty trick <a href="http://blogs.msdn.com/hugunin/">Jim Hugunin</a> showed me once. </p><p>Uploading to Azure was very straightforward because of the StorageClient library. Here’s the code to create a blob container object (creating the actual blob container if it doesn’t already exist) and to upload a file to a container.</p><pre class="brush: python">
def get_blob_container(prj):
  azure_account = StorageAccountInfo(endpoint, None, azure_name, azure_key)
  storage = BlobStorage.Create(azure_account)
  container = storage.GetBlobContainer(prj.lower())
  if not container.DoesContainerExist():
    print "Creating", prj, "Azure Blob Storage Container"
    container.CreateContainer(None, ContainerAccessControl.Public)
  return container     

def upload_to_azure(container, upload_filepath, azure_filename, metadata):
    print "Uploading", azure_filename, "to Azure"
    prop = BlobProperties(azure_filename)
    nv = NameValueCollection()
    for key in metadata:
      nv[key] = metadata[key]
    prop.Metadata = nv     
     
    with File.OpenRead(upload_filepath) as stream:
      contents = BlobContents(stream)
      if not container.CreateBlob(prop, contents, True):
        raise "Uploading " + azure_filename + " to Azure failed"
</pre><p>I’ve been working on some pure IronPython code to access the <a href="http://msdn.microsoft.com/en-us/library/dd179355.aspx">blob storage REST API</a> directly, but that’s primarily to familiarize myself with the service. At some point, I’m going to want to leverage <a href="http://msdn.microsoft.com/en-us/library/dd179423.aspx">Table Storage</a> but my brief experimentation with the StorageClient Table Storage interface makes me think that it depends on static typing too much to be useful for IPy. If that turns out to be true, the Table Storage REST API will be my only option.</p><p>As you can see in the code above, these Azure blob containers are set to be publically accessible (via ContainerAccessControl<span style="color: blue">.</span>Public argument passed to CreateContainer). So for my C# app, I’m simply using calling XDocument.Load with the <a href="http://msdn.microsoft.com/en-us/library/dd135734.aspx">List Blobs operation url</a>, shaping the results via LINQ to XML and binding them to nested ASP.NET Repeater controls. </p><p>Assuming people find this useful, I’m thinking of some additional improvements, in order of what I’m likely to get to first:</p><ul><li>Caching Project Info in the cloud app      <br />Currently, I’m hitting getting and processing the list of binary releases on every request. I’m sure caching that data to make it more efficient. </li><li>Virtual Build Environment      <br />Currently, I’m just building on my laptop. It would be nice to have a clean environment dedicated to running the build script. </li><li>Auto-Build      <br />My script uses the RSS feed to find the recent checkins, but I have to manually kick off the process. I’d like it to set it up as a service that periodically checks the source code RSS feed automatically and downloads and builds any new releases that it finds. </li><li>Table Storage for Build Metadata      <br />Today, I am simply grabbing the list of all uploaded compressed binaries for a given project, parsing their names, and displaying that as a hierarchical list on the <a href="http://nightlybuilds.cloudapp.net/Project.aspx?project=ironpython">project page</a>. If I used Table Storage, I could add additional metadata including social software features like ratings and comments. </li><li>Amazon EC2 Virtual Build Environment      <br />If I’m creating a virtual machine for my build environment, I could look at hosting it on <a href="http://aws.amazon.com/ec2/">Amazon EC2</a>. They <a href="http://aws.amazon.com/windows/">support Windows now</a> after all. Ideally, I’d use an <a href="http://msdn.microsoft.com/en-us/library/dd179341.aspx">Azure worker role</a> for compiling and compressing builds, but our build tools need access to the file system. </li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1210</wp:post_id>
		<wp:post_date>2009-01-07 15:23:26</wp:post_date>
		<wp:post_date_gmt>2009-01-07 15:23:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nightly-builds-technical-info</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[9ecbf637-0b38-475e-90ad-33af18381878]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Nightly+Builds+Technical+Info]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/01/07/Nightly+Builds+Technical+Info]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kid Programming with Kodu Coming to Xbox 360</title>
		<link>http://devhawk.net/2009/01/08/kid-programming-with-kodu-coming-to-xbox-360/</link>
		<pubDate>Thu, 08 Jan 2009 11:19:00 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://3c48c67a-69ef-43d3-a7fd-05b5fe2f8ce5</guid>
		<description></description>
		<content:encoded><![CDATA[<p>As I’ve <a href="http://devhawk.net/2005/07/06/The+Inform+Language.aspx">written before</a>, I originally got the programming bug from a desire to build my own text adventure games. with significant influence from <a href="http://cid-885df99f8fd01cd9.profile.live.com/">my dad</a>. Now that I’m a father myself, I want my kids to have a similar opportunity, even if they never choose to go into the “family business”. </p><p><a href="http://research.microsoft.com/en-us/projects/kodu/default.aspx"><img title="kodu_guy" style="border-right: 0px; border-top: 0px; display: inline; margin-left: 0px; border-left: 0px; margin-right: 0px; border-bottom: 0px" height="121" alt="kodu_guy" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/KidProgrammingwithKoduComingtoXbox360_9F23/kodu_guy_5.jpg" width="96" align="left" border="0" /></a> Of course, the technology has moved on significantly since the days of “You are in a maze of twisty little passages, all alike”. At CES yesterday, Microsoft <a href="http://www.xbox.com/en-US/community/news/2009/0107-kodu.htm">announced</a> Kodu which I’ve <a href="http://devhawk.net/2007/03/08/Morning+Coffee+41+TechFest+Edition.aspx">written about before</a> under it’s original name Boku. Kodu came out of <a href="http://research.microsoft.com/en-us/projects/kodu/default.aspx">Microsoft Research</a> as a tool for teaching kids how to program. The programming language is very visual and iconic and you use the Xbox controller exclusively for all input. Here’s a screenshot:</p><p><img style="display: block; float: none; margin-left: auto; margin-right: auto" src="http://research.microsoft.com/en-us/projects/kodu/programming_ui.jpg" /></p><p>To demo Kodu at CES, Robbie Bach brought a 12 year old girl named Sparrow up on stage to demo. I showed the video to my kids this morning and they went gaga for it. They’re a little young - Patrick turns 6 next month and Riley turns 4 later this year – but I think they’ll be able to get the hang of it (with a little help from dad). Below is the video of the CES demo, and there are more Kodu videos at On10 (<a href="http://on10.net/blogs/larry/CES-2009-Matthew-MacLaurin-on-Kodu/">Matthew MacLaurin on Kodu</a> and <a href="http://on10.net/blogs/larry/CES-2009-Watch-Kodu-in-Action/">Watch Kodu in Action</a>).</p><iframe align="center" src="http://www.microsoft.com/presspass/silverlightApps/videoplayer2/standalone.aspx?contentId=keynoteClip5&amp;src=/presspass/events/ces/channel.xml&amp;WT.cg_n=CES&amp;WT.z_convert=embed" frameborder="0" width="400" scrolling="no" height="335"></iframe><p>Personally, I think this is brilliant. I have been eagerly waiting a change to play this with my kids for over a year, so I’m very excited that they’re bringing this to market. Seriously, <a href="http://www.xbox.com/games/halowars/">Halo Wars</a> just got bumped to the #2 slot on my “Most Anticipated Xbox Games of 2009” list. </p><p>I’m most interested in how these creations will be shared online. I couldn’t find any details, but Robbie <a href="http://www.microsoft.com/presspass/exec/steve/2009/01-07ces.mspx">specifically said</a> “And on Xbox Live they can distribute and share those finished games with other people.” Will there be a charge? (“normal” Community Games <a href="http://creators.xna.com/en-US/faq#anchor_2_5">cost</a> between $2.50 and $10 a pop) How will <a href="http://creators.xna.com/en-US/faq#anchor_1_12">parental controls</a> affect shared Kodu games? I guess those details will come closer to release.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1211</wp:post_id>
		<wp:post_date>2009-01-08 11:19:00</wp:post_date>
		<wp:post_date_gmt>2009-01-08 11:19:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kid-programming-with-kodu-coming-to-xbox-360</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="kodu"><![CDATA[Kodu]]></category>
		<category domain="post_tag" nicename="xbox-360"><![CDATA[Xbox 360]]></category>
		<category domain="post_tag" nicename="xna"><![CDATA[XNA]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[3c48c67a-69ef-43d3-a7fd-05b5fe2f8ce5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Kid+Programming+With+Kodu+Coming+To+Xbox+360]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/01/08/Kid+Programming+With+Kodu+Coming+To+Xbox+360]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Thoughts from Inauguration Day</title>
		<link>http://devhawk.net/2009/01/21/thoughts-from-inauguration-day/</link>
		<pubDate>Wed, 21 Jan 2009 09:54:20 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://b49a805c-4e3b-4ddd-a18a-5beb3c014894</guid>
		<description></description>
		<content:encoded><![CDATA[<p>A few random thoughts on yesterday:</p><p>Though some in the progressive blogosphere disagree, I thought <a href="http://www.pic2009.org/blog/entry/president_obamas_inaugural_address/">Obama’s inaugural speech</a> was very good. His start, contrasting taking the oath of office “during rising tides of prosperity and the still waters of peace” (as now-former President Bush did [1]) versus taking the oath as he does “amidst gathering clouds and raging storms” really set the tone for the whole speech. With Bush sitting right there – mere feet from the podium – Obama categorically rejected almost every policy of the Bush administration. When they cut to a shot of Bush in the middle, he didn’t seem to be enjoying Obama’s speech very much. In a way, I was reminded of Steven Colbert’s <a href="http://video.google.com/videoplay?docid=-869183917758574879">epic performance</a> at the White House Correspondents Dinner a few years ago. Of course, the difference was that Colbert was speaking truth *to* power while Obama is speaking truth *from* power. </p><p>Speaking of Ex-President Bush (man, <a href="http://twitter.com/DevHawk/status/1134079689">I love writing that</a>) I can say a lot of negative things about him, but I will grudgingly commend him on handling the transition. However, it does feel like it’s grading him on a massive curve: “Sure he’s been an abysmal president, but at least he was able to peacefully hand over the reigns of power without fucking that up too.”</p><p>I felt sorry for <a href="http://www.pic2009.org/blog/entry/elizabeth_alexander_inaugural_profile/">Elizabeth Alexander</a>, the poet who had to speak after President Obama’s inaugural speech. Everyone started heading for the exits after Obama was done. I hope those early exiters could hear Reverend Lowery’s benediction, it <a href="http://usatoday.com/communities/religion/post/2009/01/61651854/1?imw=Y">was awesome</a>. I realize Reverend Warren was a controversial pick to deliver the invocation – certainly, I’m not a fan – but I respect Obama for being inclusive of all-viewpoints. And while having a quartet with the likes of Itzhak Perlman and Yo-Yo Ma was awesome, I especially liked John Williams’ inaugural piece “Air and Simple Gifts”. But wouldn’t the theme to Superman have been more appropriate? :)</p><p>Finally, I skipped the rest of the pre and post inauguration analysis and commentary other than the Countdown podcast which I listen to on my way to work most days. Frankly, I didn’t need to be reminded of what an historic day it was. Res ipsa loquitur. </p><hr /><p>[1] The Onion was disturbingly prescient with <a href="http://www.theonion.com/content/node/28784">their article</a> eight years ago “Bush: 'Our Long National Nightmare Of Peace And Prosperity Is Finally Over'”</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1212</wp:post_id>
		<wp:post_date>2009-01-21 09:54:20</wp:post_date>
		<wp:post_date_gmt>2009-01-21 09:54:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>thoughts-from-inauguration-day</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="politics"><![CDATA[Politics]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[b49a805c-4e3b-4ddd-a18a-5beb3c014894]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Thoughts+From+Inauguration+Day]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/01/21/Thoughts+From+Inauguration+Day]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2165</wp:comment_id>
			<wp:comment_author><![CDATA[Ali]]></wp:comment_author>
			<wp:comment_author_email>arsyed@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.99.87.168</wp:comment_author_IP>
			<wp:comment_date>2009-01-21 19:58:58</wp:comment_date>
			<wp:comment_date_gmt>2009-01-22 03:58:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["But wouldn’t the theme to Superman have been more appropriate?"

Yes, Williams screwed up, but the Internets are on top of it ...

<a href="http://www.youtube.com/watch?v=sI944RulJD4" rel="nofollow">http://www.youtube.com/watch?v=sI944RulJD4</a>



]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2166</wp:comment_id>
			<wp:comment_author><![CDATA[Heath]]></wp:comment_author>
			<wp:comment_author_email>jheathupton@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.168.46.132</wp:comment_author_IP>
			<wp:comment_date>2009-01-23 07:44:02</wp:comment_date>
			<wp:comment_date_gmt>2009-01-23 15:44:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You seem to be a touch misinformed there. Bush inherited a recession but when he mentioned it he got thrashed by the media. The policies of the Bush administration kept our great country safe and for that I applaud him. We were at war before Bush even took office, but we were simply to naive to realize it. He cared less about his poll numbers and appeasing a hateful media and more about doing what was right and being a man of honor and dignity. As a former soldier and current intelligence professional, I can say with all honesty that President Bush was a great president and THE president that we needed during his 8 years. This election was handed to Obama on a silver platter and he nearly managed to drop it despite that fact. However, if President Obama can be half the man that Bush was and is, he will do quite well and the country will be well served. 
-Heath]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2167</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.80</wp:comment_author_IP>
			<wp:comment_date>2009-01-29 17:10:37</wp:comment_date>
			<wp:comment_date_gmt>2009-01-30 01:10:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Heath, your willful ignorance is truely astounding. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2168</wp:comment_id>
			<wp:comment_author><![CDATA[Key]]></wp:comment_author>
			<wp:comment_author_email>keycary@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.121.170.235</wp:comment_author_IP>
			<wp:comment_date>2009-03-03 04:27:24</wp:comment_date>
			<wp:comment_date_gmt>2009-03-03 12:27:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Harry, you are an ignorant if you think Bush was a bad president. Most of the problems were caused by the fact that the Dems blocked Bush at every turn. The dems held up regulations to fix Fannie and Freddie. The dems blocked drilling for oil, and then blame Bush for high oil prices. Why is health care expensive? Because dems block tort reform, and push for government solutions rather than free market solutions.

Check out George Orwell because you are putty in the hands of the media. They said Reagan was a bad president (but now have changed their opinion), and Clinton was a great president (who did nothing). Obama has been on the cover of Time magazine 17 times in one year -- I guess you got the message like a loyal robot.

Obama's done nothing his entire career -- would you make an intern the next CEO of Microsoft?

How's the economy going? The good thing about democracy is that we get to live with the choices we make. It makes for a smarter electorate, over time.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython and CodeDOM: Dynamically Compiling C# Files</title>
		<link>http://devhawk.net/2009/01/29/ironpython-and-codedom-dynamically-compiling-c-files/</link>
		<pubDate>Thu, 29 Jan 2009 16:53:30 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://34f7ae3f-7d89-46d9-832a-981283b8df2f</guid>
		<description></description>
		<content:encoded><![CDATA[As part of my series on <a href="http://devhawk.net/2008/11/13/IronPython+And+WPF+Part+1+Introduction.aspx">using IronPython with WPF</a> [1], I built an extension method in C# that does <a href="http://devhawk.net/2008/11/14/IronPython+And+WPF+Part+2+Loading+XAML.aspx">dynamic member resolution on WPF FrameworkElements</a>. The upshot of this code is that I can write “win1.listbox1” instead of “win1.FindName(‘listbox1’)” when using WPF objects from Python or any DLR language. Convenient, right?

The problem with this approach is that the C# extension method gets compiled into an assembly that’s bound to a specific version of the DLR. I recently started experimenting with a <a href="http://nightlybuilds.cloudapp.net/Project.aspx?project=ironpython">more recent build</a> of IronPython and I couldn’t load the extension method assembly due to a conflict between the different versions of Microsoft.Scripting.dll. Of course, I could have simply re-compiled the assembly against the new bits, but that would mean every time I moved to a new version of IronPython, I’d have to recompile. Worse, it would limit my ability to run multiple versions of IronPython on my machine at once. I currently have three – count ‘em, *three* – copies of IronPython installed: <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=8365">2.0 RTM</a>, <a href="http://nbs.blob.core.windows.net/ironpython/IronPython.46242.release.zip">nightly build version 46242</a>, and an internal version <a href="http://devhawk.net/2008/09/17/DLR+Namespace+Change+Fire+Drill.aspx">without the mangled namespaces</a> of our public CodePlex releases. Having to manage multiple copies of my extension assembly would get annoying very quickly.

Instead of adding a reference to the compiled assembly, what if I could add a reference to a C# file directly? Kinda like how adding references to Python files works, but for statically compiled C#. That would let me write code like the following, which falls back to adding a reference to the C# file directly if adding a reference to the compiled assembly fails.
<pre class="brush: python">try:
  clr.AddReference('Microsoft.Scripting.Extension.Wpf.dll')
except:
  import codedom
  codedom.add_reference_cs_file('FrameworkElementExtension.cs',
    ['System', 'WindowsBase', 'PresentationFramework',
     'PresentationCore', 'Microsoft.Scripting'])</pre>
Since this technique uses <a href="http://msdn.microsoft.com/en-us/library/f1dfsbhc.aspx">CodeDOM</a>, I decided to encapsulate the code in a Python module named codedom, which is frankly pretty simple. As a shout-out to my pals on the <a href="http://blogs.msdn.com/vbteam/">VB team</a>, I broke compiling out into it’s own separate function so I could easily support adding VB as well as C# files.
<pre class="brush: python">def compile(prov, file, references):
  cp = CompilerParameters()
  cp.GenerateInMemory = True
  for ref in references:
    a = Assembly.LoadWithPartialName(ref)
    cp.ReferencedAssemblies.Add(a.Location)
  cr = prov.CompileAssemblyFromFile(cp, file)
  if cr.Errors.Count &gt; 0:
    raise Exception(cr.Errors)
  return cr.CompiledAssembly

def add_reference_cs_file(file, references):
  clr.AddReference(compile(CSharpCodeProvider(), file, references))

def add_reference_vb_file(file, references):
  clr.AddReference(compile(VBCodeProvider(), file, references))</pre>
The compile function uses a <a href="http://msdn.microsoft.com/en-us/library/system.codedom.compiler.codedomprovider.aspx">CodeDOM provider</a>, which provides a convenient function to <a href="http://msdn.microsoft.com/en-us/library/system.codedom.compiler.codedomprovider.compileassemblyfromfile.aspx">compile an assembly from a single file</a>. The only tricky part was adding the references correctly. Of the five references in this example, the only one CodeDOM can locate automatically is System.dll. For the others, it appears that CodeDOM needs the full path to the assembly in question.

Of course, hard-coding the assembly paths in my script would be too fragile, so instead I use partial names. I load each referenced assembly via <a href="http://msdn.microsoft.com/en-us/library/system.reflection.assembly.loadwithpartialname.aspx">Assembly.LoadWithPartialName</a> then pass it’s Location to the CodeDOM provider via the CompilerParameters object. I realize that loading an assembly just to find its location it kind of overkill but a) I couldn’t find another mechanism to locate an assemblies location given only a partial name and b) I’m going to be loading the referenced assemblies when I load the generated assembly anyway, so I figured it loading them to find their location wasn’t a big deal. Note, that typically you’re used to passing a string to clr.AddReference, but it also can accept an assembly object directly.

Of course, this approach isn’t what you would call “fast”. Loading the pre-compiled assembly is much, <em>much</em> faster than compiling the C# file on the fly. But I figure slow code is better than code that doesn’t work at all. Besides, the way the code is written, I only take the extra compile hit if the pre-compiled assembly won’t load.

I stuck my <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/codedom.py">codedom.py</a> file up on my SkyDrive. Feel free to leverage as you need.

<hr />

[1] I had to put that series on the back burner in part because the <a href="http://windowslivewire.spaces.live.com/blog/cns!2F7EB29B42641D59!26304.entry">December update to Windows Live</a> totally broke my WPF photo viewing app. I’ve got a new WPF app I’m working on, but I’m not quite ready to blog about it yet.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1213</wp:post_id>
		<wp:post_date>2009-01-29 16:53:30</wp:post_date>
		<wp:post_date_gmt>2009-01-29 16:53:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-codedom-dynamically-compiling-c-files</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[34f7ae3f-7d89-46d9-832a-981283b8df2f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+CodeDOM+Dynamically+Compiling+C+Files]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/01/30/IronPython+And+CodeDOM+Dynamically+Compiling+C+Files]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Register now for Lang.NET Symposium 2009</title>
		<link>http://devhawk.net/2009/02/09/register-now-for-lang-net-symposium-2009/</link>
		<pubDate>Mon, 09 Feb 2009 15:34:09 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://0c2ab8f3-03de-4fa6-9bc4-1929e13eac97</guid>
		<description></description>
		<content:encoded><![CDATA[<p>We’re now accepting registrations and talk proposals for the <a href="http://langnetsymposium.com/">2009 Lang.NET Symposium</a>, which will be held on the Microsoft campus April 14th-16th. </p><p>For those who aren’t familiar with this event, the Lang.NET Symposium is an opportunity for programming language designers and researchers from industry and academia to get together and basically geek out for two and a half days. And it’s not just Microsoft language wonks like <a href="http://langnetsymposium.com/talks/1-01 - CSharp3 - Anders Hejlsberg.html">Anders Hejlsberg</a> or platform wonks like <a title="3-07 - Modeling and Languages - Don Box" href="http://langnetsymposium.com/2008/talks/3-07%20-%20Modeling%20and%20Languages%20-%20Don%20Box.html">Don Box</a>. For example, last year we had <a href="http://langnetsymposium.com/2008/talks/1-05%20-%20Lively%20Kernel%20-%20Dan%20Ingalls%20-%20Sun.html">Dan Ingalls from Sun</a>, <a href="http://langnetsymposium.com/2008/talks/2-01%20-%20Newspeak%20-%20Gilad%20Braha%20-%20Cadence.html">Gilad Bracha from Cadence</a>, <a href="http://langnetsymposium.com/2008/talks/Slides/LangNetDVMTalk.pdf">John Rose from OpenJDK</a> and <a href="http://langnetsymposium.com/talks/2-06 - PHP - Wez Furlong.html">Wez Furlong from the PHP Project</a> among many others. </p><p>If you’re curious about the kind of talks we typically have at Lang.NET, the talks from <a href="http://langnetsymposium.com/2006/speakers.aspx">2006</a> and <a href="http://langnetsymposium.com/2008/talks.aspx">2008</a> are available online.  </p><p>I’ve attended <a href="http://devhawk.net/2006/08/01/Lang+NET+2006+Symposium.aspx">both</a><a href="http://devhawk.net/2008/01/31/Morning+Coffee+141+LangNET+08+Edition.aspx">previous</a> Lang.NET Symposiums and <a href="http://langnetsymposium.com/2008/talks/3-03%20-%20Parsing%20Expression%20Grammars%20in%20FSharp%20-%20Harry%20Pierson.html">spoke at last year’s event</a>, but this will be my first as a part of the team driving the event itself. We’ve expanded a little this year, though we’re still a small conference so the signal-to-noise ratio should still be very high. We barely fit in the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=e1846ae4-f0c7-456c-a9bb-54fcf2463ead&amp;displaylang=en">Platform Lab</a> last year, so we moved this year’s event to Microsoft Research’s <a href="http://research.microsoft.com/en-us/news/features/Building_99.aspx">sweet new building #99</a>. </p><p>This year, we’re very excited to be <a href="http://devhawk.net/2008/12/19/The+Reesersquos+Peanut+Butter+Cups+Of+Language+Conferences.aspx">joined at the hip</a> with Chris Sells’ <a href="http://sellsbrothers.com/conference/">DSL Developers Conference</a>. Those guys over in CSD are working on some <a href="http://msdn.microsoft.com/oslo/">cool language stuff of their own</a>, so it just made sense to hold the two events in the same space, one right after the other. Note, <u><strong>registration for each event is separate</strong></u>. You’re welcome to attend both – we’d love it if you did - just make sure you register for both.</p><p>As in the past, there is no cost to attend Lang.NET. You get yourself here and find place to stay and we’ll take care of the content, meals and beers in the evening. Just make sure you let us know you’re coming and what, if anything, you’re interested in getting up and talking about by registering at <a href="http://langnetsymposium.com">the Lang.NET Symposium website</a>. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1214</wp:post_id>
		<wp:post_date>2009-02-09 15:34:09</wp:post_date>
		<wp:post_date_gmt>2009-02-09 15:34:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>register-now-for-lang-net-symposium-2009</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="domain-specific-languages"><![CDATA[Domain Specific Languages]]></category>
		<category domain="post_tag" nicename="langnet"><![CDATA[LangNET]]></category>
		<category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[0c2ab8f3-03de-4fa6-9bc4-1929e13eac97]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Register+Now+For+LangNET+Symposium+2009]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/02/09/Register+Now+For+LangNET+Symposium+2009]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2169</wp:comment_id>
			<wp:comment_author><![CDATA[Barry Kelly]]></wp:comment_author>
			<wp:comment_author_email>barry.j.kelly@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://barrkel.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.97.41.252</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 16:03:03</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 00:03:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do you know if the missing talks (1-02 .. 1-04 etc.) for Lang.NET 2008 will ever get posted? Or are they lost forever?
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2170</wp:comment_id>
			<wp:comment_author><![CDATA[Barry Kelly]]></wp:comment_author>
			<wp:comment_author_email>barry.j.kelly@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://barrkel.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.97.41.252</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 16:05:03</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 00:05:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The website, http://langnetsymposium.com/2008/agenda.aspx says "video coming soon" for the missing talks. I've been waiting for these videos to "come" for what must be a year now :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2171</wp:comment_id>
			<wp:comment_author><![CDATA[Jimmy Schementi]]></wp:comment_author>
			<wp:comment_author_email>jschementi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jimmy.schementi.com</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.80</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 17:07:51</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 01:07:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ok, ok, I should have changed that text to "Coming only if someone helps". Those talks aren't lost forever, but the videos I have of them are each 7gb and I don't have the anything nearly powerful enough to compress them in a reasonable amount of time (need to get them down to approx 100mb). Expression Media decidied not to open them last time =)

If anyone wants to step up and help out, by all means let me know, but if not they will stay on this external hard-drive forever.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython 2.0.1</title>
		<link>http://devhawk.net/2009/02/15/ironpython-2-0-1/</link>
		<pubDate>Sun, 15 Feb 2009 20:20:21 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://abcc82dd-e7ba-4210-9b3d-51b360aaaedf</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’m on vacation this week, but I wanted to quickly point out that we shipped <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=12481">IronPython v2.0.1</a> last Friday. This has been a performance focused release, as you can see via our <a href="http://www.codeplex.com/IronPython/Wiki/View.aspx?title=IP201VsIP20Perf">2.0 vs. 2.0.1 benchmarks</a>. We have improved our PyStone performance by about 11.5% and our Richards performance by just over 4%. Thanks to <a href="http://blogs.msdn.com/dinoviehland/">Dino</a> for the perf improvements and <a href="http://knowbody.livejournal.com/">Dave</a> for the great performance report.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1215</wp:post_id>
		<wp:post_date>2009-02-15 20:20:21</wp:post_date>
		<wp:post_date_gmt>2009-02-15 20:20:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-2-0-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[abcc82dd-e7ba-4210-9b3d-51b360aaaedf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+201]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/02/16/IronPython+201]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2172</wp:comment_id>
			<wp:comment_author><![CDATA[Stefan Dobrev]]></wp:comment_author>
			<wp:comment_author_email>stefan.dobrev@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blogs.telerik.com/stefandobrev</wp:comment_author_url>
			<wp:comment_author_IP>78.90.67.97</wp:comment_author_IP>
			<wp:comment_date>2009-02-17 12:46:13</wp:comment_date>
			<wp:comment_date_gmt>2009-02-17 20:46:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looking at the numbers it looks like Richards performance has been degraded by 4% :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2173</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.80</wp:comment_author_IP>
			<wp:comment_date>2009-02-23 09:47:51</wp:comment_date>
			<wp:comment_date_gmt>2009-02-23 17:47:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@stefan, we had a copy and paste error - Since it's a measure of average time per iteration, lower numbers are better. So v2.0.1 is a 4% improvement over v2.0. But thanks for pointing it out! We've updated the webpage accordingly.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Caps 4, Canadians 3 (SO)</title>
		<link>http://devhawk.net/2009/02/18/caps-4-canadians-3-so/</link>
		<pubDate>Thu, 19 Feb 2009 05:27:02 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://aa56aae7-3ca1-4e9d-81d6-4cadf12eb1e2</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I don’t get the chance to see many Caps games, being as I live over 2000 miles away from Washington D.C. I got to see them tonight live and in person for the first time in like four years, and it was awesome. Awesome to be there that is, even if the Caps were less than awesome in the third period. Frankly, I think the Caps were lucky to get one, much less two points in this game. </p><p>But before I talk about bad, let’s start with the amazing. Ovechkin’s goal was the most amazing a goal I’ve ever seen live. He leaves Hamrlik in the dust by banking the puck off the boards to himself while he does a 180 to reverse direction. Then he gets knocked down by Chipchura but still manages to slide the puck into the net under Price while lying on his side on the ice before Chipchura’s momentum knocks the net off it’s moorings. You’ve got to see it to believe it.</p><p><iframe height="289" src="http://www.nhl.tv/team/embed.jsp?hlg=20082009,2,856&amp;event=WSH47" frameborder="0" width="480" align="center"></iframe></p><p><a href="http://twitpic.com/1k73u"><img style="border-right-width: 0px; margin: 0px 0px 0px 5px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="Crosby Sucks Caps Jersey" border="0" alt="Crosby Sucks Caps Jersey" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/Caps4Canadians3SO_655/1k73u-34dd2010d2b88ae59d73e34440148648.499ce477[1]_3.jpg" width="244" height="184" /></a>Honestly, I think this is even better than “<a href="http://www.youtube.com/watch?v=TqCgwpkOpUo">The Goal</a>” from Ovechkin’s rookie season. The goal itself maybe wasn’t quite as amazing, but the bank pass to himself while reversing direction that set up the goal was literally jaw-dropping. That with the knocked down goal in succession was truly a work of art. They showed it about a dozen times on the jumbo-tron, several times on the NHL network highlight show and I’ve watched the embedded video maybe a dozen times while writing this post. Anyone who thinks Ovechkin isn’t the best player in the league is frakking crazy. </p><p>Backstom’s <a href="http://www.nhl.tv/team/console.jsp?hlg=20082009,2,856&amp;event=WSH212">give and go with Federov</a> for the second goal wasn’t bad either. </p><p>But here’s the stat of the game that should give Caps fans nightmares: All three of Montreal’s goals came on the powerplay. Caps did fairly well in the penalty taking department – only taking four penalties on the night. But going 25% on the penalty kill? There’s no way to spin how ugly that is. To add insult to injury, two of the three goals came less than ten seconds into the penalty – Montreal scored before the Caps could even get their kill set up. Ugh. The first was had two Caps getting tied up in the faceoff circle, leaving Higgins open to score. The second I think went off Erskine’s stick and over Theodore. And the third looked like one Theodore should have had. </p><p>The third period, the Caps looked totally flat until Steckel’s nice tip in to tie the game. They didn’t seem to be winning any one-on-one battles for the puck. I know the Caps have talent to spare, but they need to win on the boards if they’re going to win on the scoreboard. They picked it up for the last three minutes of the third and Overtime (except for very scary giveaway by I think Nylander near the end of OT that the Habs couldn’t capitalize on). </p><p>Giveaways were a problem – Caps had 12 to Montreal’s 6 – and Backstrom got slapped around in the faceoff circle, winning only 6 of 18. Nylander had a bad night on the dot, going 2 of 8. On the plus side, Caps had 17 takeaways to Montreal’s 7 and Gordon, Steckel and Laich and Federov all were over 50% on the faceoffs (team as a whole won 27 of 58, or 47%.)</p><p>As I said, I don’t get to see the Caps often, but I hear they aren’t that good in the shootout, which is kinda surprising given the surplus of offensive talent on the team. They were 2-3 in the shootout going into tonight, while the Habs were 7-4. But the Caps were perfect, Semin and Backstrom scoring while Theodore stoned Plekanec and Markov.</p><p>In the end, it’s two points which puts us a full game up on the Devils for 2nd in the East and seven games up on Florida who’s technically chasing us for the SouthEast division crown. Not quite in the bag, but making up that much ground in the 24 games remaining is pretty daunting. The Caps trail Boston by four and a half games for the top seed in the east, which is also a daunting task given the amount of season remaining. I’d love to be in first, but I’m pretty happy with where the Caps are right now – except maybe for the PK.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1216</wp:post_id>
		<wp:post_date>2009-02-18 21:27:02</wp:post_date>
		<wp:post_date_gmt>2009-02-19 05:27:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>caps-4-canadians-3-so</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[aa56aae7-3ca1-4e9d-81d6-4cadf12eb1e2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Caps+4+Canadians+3+SO]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/02/19/Caps+4+Canadians+3+SO]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Avalanche 4, Caps 1</title>
		<link>http://devhawk.net/2009/02/21/avalanche-4-caps-1/</link>
		<pubDate>Sat, 21 Feb 2009 21:11:12 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://bea39eb1-11d7-4a20-8f44-e0217424e559</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><p>"We had nothing; we were horrible out there," Boudreau snapped. "Everybody had their bad game at the same time. You win a lot of games in a row, you're going to have a stinker. Today was it."     <br /><a href="http://voices.washingtonpost.com/capitalsinsider/2009/02/avs_4_caps_1.html">Capitals Insider</a></p></blockquote><p>Boy, it’s much more fun to write a Caps wrapup <a href="http://devhawk.net/2009/02/19/Caps+4+Canadians+3+SO.aspx">when they win</a>.</p><p>Honestly, the less said about this game, the better. I said at both intermissions that the Caps were lucky to be tied/down by only one, and the third period proved me right. Honestly, if I didn’t know the players and the teams, I wouldn’t have been able to tell which team was #2 in the East and which team was #15 in the West. </p><p>The only good things I can say about this game are:</p><ol><li>Perfect on the penalty kill, including 43 seconds of 5-on-3</li><li><a href="http://www.nhl.tv/team/console.jsp?hlg=20082009,2,871&amp;event=WSH208">Backstrom’s goal</a> was nice</li><li>Much better on faceoffs – as a team, we won 60% of them. Only Nylander was below 50%. Steckel won 9 of 10</li><li>Err, did I mention the Caps were perfect on the PK?</li></ol><p><a href="http://www.japersrink.com/2009/2/20/766648/recap-avs-4-caps-1">Japers pointed out</a> that “the frequency with which these "efforts" are happening that is more than a little disconcerting.” After last night’s effort plus the 3rd period effort against Montreal, “more than a little disconcerting” is spot on.</p><p>Next up, Caps play the Penguins tomorrow. The Pens just beat the Flyers 5-4. I didn’t see the whole game but Biron totally botched the play that lead to the Pens game winning goal. So we have the Pens riding a big win and the Caps coming off a lackluster performance on national TV. Should be interesting to say the least. Unfortunately, I’ve got a morning flight home to Seattle tomorrow, so I’m going to miss it.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1217</wp:post_id>
		<wp:post_date>2009-02-21 13:11:12</wp:post_date>
		<wp:post_date_gmt>2009-02-21 21:11:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>avalanche-4-caps-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[bea39eb1-11d7-4a20-8f44-e0217424e559]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Avalanche+4+Caps+1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/02/21/Avalanche+4+Caps+1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Introduction</title>
		<link>http://devhawk.net/2009/02/27/writing-an-ironpython-debugger-introduction/</link>
		<pubDate>Fri, 27 Feb 2009 14:21:22 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://54503f67-9452-4f6b-aa28-a9978416ce5b</guid>
		<description></description>
		<content:encoded><![CDATA[<p>A while back I <a href="http://devhawk.net/2008/05/08/Debugging+IronPython+Code+In+Visual+Studio.aspx">showed how</a> you can use Visual Studio to debug IronPython scripts. While that works great, it’s lots of steps and lots of mouse work. I yearned for something lighter weight and that I could drive from the command line. </p><p>The .NET framework includes a command line debugger called <a href="http://msdn.microsoft.com/en-us/library/ms229861.aspx">MDbg</a>, but after using it for a bit, I found it didn’t like it very much for IronPython debugging. Mdbg automatically sets a breakpoint on the main entrypoint function, but only if it can find the debugging symbols. So when you use Mdbg with the released version of IPy, the breakpoint never gets set. Instead, you have to trap the module load event, set a breakpoint in the python file you’re debugging, then stop trapping the module load event. Every Time. That gets tedious.</p><p>Another problem with MDbg is that it’s not <a href="http://blogs.msdn.com/jmstall/archive/2004/12/31/344832.aspx">Just-My-Code</a> (aka JMC) aware. JMC is this awesome debugging feature that was introduced in .NET 2.0 that lets the debugger “paint” the parts of the code that you want to step thru (aka “My Code”). By default, Visual Studio marks code with symbols as “my code” and code without symbols as “not my code”. [1] We don’t ship symbols with IronPython releases, so Visual Studio does only steps thru the python code. MDbg doesn’t support JMC, so I often found myself stepping into random parts of the IronPython implementation. That’s even more tedious.</p><p>Luckily, the <a href="http://www.microsoft.com/downloads/details.aspx?familyid=38449a42-6b7a-4e28-80ce-c55645ab1310&amp;displaylang=en">source code</a> to MDbg is available. So I got the wacky idea to build a debugger specifically for IronPython. CPython includes <a href="http://docs.python.org/library/pdb.html">pdb</a> (aka Python Debugger, not <a href="http://msdn.microsoft.com/en-us/library/yd4f8bd1.aspx">Program Database</a>) but we don’t support it because we <a href="http://ironpython.codeplex.com/WorkItem/View.aspx?WorkItemId=1042">haven’t implemented</a><a href="http://docs.python.org/library/sys.html#sys.settrace">settrace</a>. Thus, ipydbg was born.</p><p>Over the course of this series of blog posts, I’m going to build out ipydbg. I have built out a series of prototypes so I fairly confident that I know <em>how</em> to build it. However, I’m not sure what it will look like at the end. If you’ve got any strong opinions on it one way or the other, be sure to email me or leave me comments. </p><p>BTW, major thanks to my VSL teammate <a href="http://blogs.msdn.com/jmstall">Mike Stall</a> (of Mike Stall's .NET Debugging Blog). Without his help, I would probably still be trying to make heads or tails of the MDbg source.</p><hr /><p>[1] VS uses the <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.debuggernonusercodeattribute.aspx">DebuggerNonUserCode</a> attribute to provide fine grained control of what is considered “my code” and should be stepped thru. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1218</wp:post_id>
		<wp:post_date>2009-02-27 14:21:22</wp:post_date>
		<wp:post_date_gmt>2009-02-27 14:21:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-introduction</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[54503f67-9452-4f6b-aa28-a9978416ce5b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Introduction]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/02/27/Writing+An+IronPython+Debugger+Introduction]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing an IronPython Debugger: MDbg 101</title>
		<link>http://devhawk.net/2009/02/27/writing-an-ironpython-debugger-mdbg-101/</link>
		<pubDate>Fri, 27 Feb 2009 15:33:06 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://c122a8ee-102f-4478-a33b-cc0864b82d83</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Before I start writing any debugger code, I thought it would help to quickly review the .NET debugger infrastructure that is available as well as the design of the MDbg command line debugger. Please note, my understanding of this stuff is fairly rudimentary – <a href="http://blogs.msdn.com/jmstall/default.aspx">Mike Stall</a> is “da man” if you’re looking for a .NET debugger blogger to read.</p><p>The CLR provides a series of unmanaged APIs for things like <a href="http://msdn.microsoft.com/en-us/library/ms404385.aspx">hosting the CLR</a>, <a href="http://msdn.microsoft.com/en-us/library/ms404384.aspx">reading and writing CLR metadata</a> and – more relevant to our current discussion – <a href="http://msdn.microsoft.com/en-us/library/ms404520.aspx">debugging</a> as well as <a href="http://msdn.microsoft.com/en-us/library/ms404519.aspx">reading and writing debugger symbols</a>. These APIs are exposed as COM objects. The CLR Debugging API allows you to do those all the things you would expect to be able to do in a debugger: <a href="http://msdn.microsoft.com/en-us/library/ms230107.aspx">attach to processes</a> (actually, app domains), <a href="http://msdn.microsoft.com/en-us/library/ms233573.aspx">create breakpoints</a>, <a href="http://msdn.microsoft.com/en-us/library/ms233136.aspx">step thru code</a>, etc. Of course, being an unmanaged API, it’s pretty much unavailable to be used from IronPython. Luckily, MDbg wraps this unmanaged API for us, making it available to any managed language, including IronPython. </p><p>The basic design of MDbg looks like this:</p><p><img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="image" border="0" alt="image" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerMDbg101_DAA3/image_5.png" width="517" height="237" /></p><p>At the bottom is the “raw” assembly, which contains the C# definitions of the unmanaged debugger API – basically anything that starts with <a href="http://msdn.microsoft.com/en-us/library/ms230588.aspx">ICorDebug</a> and <a href="http://msdn.microsoft.com/en-us/library/ms231592.aspx">ICorPublish</a>. Raw also defines some of the metadata API, since that’s how type information is exposed to the debugger. </p><p>The next level up is the “corapi” assembly, which I refer to as the low-level managed debugger API. This is a fairly thin layer that translates the unmanaged paradigm into something more palatable to managed code developers. For example, COM enumerators such as <a href="http://msdn.microsoft.com/en-us/library/ms233115.aspx">ICorDebugAppDomainEnum</a> are exposed as IEnumerable types. Also, the <a href="http://msdn.microsoft.com/en-us/library/ms232496.aspx">managed callback interface</a> gets exposed as .NET events. It’s not perfect – the code is written in C# 1.0 style so there are no generics or yields. </p><p>Where corapi is the low-level API, “mdbgeng” is the high-level managed debugger API. As you would expect, it wraps the low-level API and provides automatic implementations of common operations. For example, this layer maintains a list of breakpoints so you can create them before the relevant assembly has been loaded. Then when assemblies are loaded, it goes thru the list of unbound breakpoints to see if any can be bound. It’s also this layer that automatically creates the main entrypoint breakpoint. </p><p>Finally, at the top we have the MDbg application itself, as well as any MDbg extensions (represented by the … in the diagram above). The mdbgext assembly defines the types shared between MDbg.exe and the extension assemblies. MDbg has some cool extensions – including an <a href="http://blogs.msdn.com/jmstall/archive/2005/08/31/Mdbg_Python_ext.aspx">IronPython extension</a> – but for now I’m focused on building something as lightweight as possible, so I’m going to forgo an extensibility mechanism, at least for now.</p><p>My initial prototype was written against the high-level API. There were two problems with this approach. The first is that there’s no support for Just My Code in the high-level API. As I mentioned in <a href="http://devhawk.net/2009/02/27/Writing+An+IronPython+Debugger+Introduction.aspx">my last post</a>, JMC support is critical for this project. Adding JMC support isn’t hard, but I’m trying to make as few changes as possible to the MDbg source, since I’m not interested in forking and maintaining that code. Second, while the low-level API provides an event-based API (OnModuleLoad, OnBreakpoint, OnStepComplete, etc), the high-level API provides a more console-oriented looping API. I found the event-driven API to be cleaner to work with and I’m thinking it will work better if I ever build a GUI version of ipydbg. So I’ve decided to work against the low-level API (aka corapi).</p><p>I mentioned above that I didn’t want to change the MDbg source, but I did make one small change. The separation of corapi and raw into two separate assemblies is an outdated artifact of an earlier version of MDbg. So I decided to combine these two into a single assembly called CorDebug. Other than some simple cleanup to assembly level attributes to make a single assembly possible, I haven’t changed the source code at all. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1219</wp:post_id>
		<wp:post_date>2009-02-27 15:33:06</wp:post_date>
		<wp:post_date_gmt>2009-02-27 15:33:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-mdbg-101</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[c122a8ee-102f-4478-a33b-cc0864b82d83]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+MDbg+101]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/02/27/Writing+An+IronPython+Debugger+MDbg+101]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2174</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Shaw]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2009-04-11 21:27:15</wp:comment_date>
			<wp:comment_date_gmt>2009-04-12 04:27:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Harry,

Thank you for writing these posts. I recently started some experiments on Mdbg, and wasn't getting very far due to scarcity of documentation. Examining what you did has been my best source of information so far. Scary thought, huh  ;P

~Steve]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>CodeHTMLer Language Definition for Python</title>
		<link>http://devhawk.net/2009/02/28/codehtmler-language-definition-for-python/</link>
		<pubDate>Sat, 28 Feb 2009 08:26:16 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://6f52146e-2967-4102-ac38-e992b2460da0</guid>
		<description></description>
		<content:encoded><![CDATA[<p>As I’ve blogged before, I use <a href="http://www.codeplex.com/CodeHtmler">CodeHTMLer</a> to post code snippets on my blog. I hear <a href="http://code.google.com/p/syntaxhighlighter/">SyntaxHighlighter</a> is the new hotness, but since it relies on CSS the syntax highlighting only appears on the website and not in the RSS reader. </p><p>The problem with CodeHTMLer is that it only supports a handful of languages out of the box. But the language definition file is simple enough – just an XML file with a bunch of regular expressions. When I was doing a lot of F# work, I wrote an <a href="http://devhawk.net/2007/12/07/Blogging+F+Code.aspx">F# language definition</a>. Now that I’m on the IronPython team, go figure I’m writing a lot of code in Python. I *know* I’ve written a Python language definition for CodeHTMLer more than once, but I would forget to post it and then lose it when I paved my laptop hard drive. So after doing this three or four times, I’ve finally remembered to <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Python%20CodeHTMLer.xml">put it up on my SkyDrive</a>.</p><p>If you want to install this yourself to colorize Python code snippets with CodeHTMLer, follow the directions I posted earlier with the <a href="http://devhawk.net/2007/12/07/Blogging+F+Code.aspx">F# language definition</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1220</wp:post_id>
		<wp:post_date>2009-02-28 08:26:16</wp:post_date>
		<wp:post_date_gmt>2009-02-28 08:26:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>codehtmler-language-definition-for-python</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[6f52146e-2967-4102-ac38-e992b2460da0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[CodeHTMLer+Language+Definition+For+Python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/02/28/CodeHTMLer+Language+Definition+For+Python]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2175</wp:comment_id>
			<wp:comment_author><![CDATA[Wes]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://weblogs.asp.net/whaggard</wp:comment_author_url>
			<wp:comment_author_IP>98.247.76.71</wp:comment_author_IP>
			<wp:comment_date>2009-02-28 18:12:46</wp:comment_date>
			<wp:comment_date_gmt>2009-03-01 02:12:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Feel free to post the defintion on the codeplex site as well. That's what is there for.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Hello, Debugger!</title>
		<link>http://devhawk.net/2009/02/27/writing-an-ironpython-debugger-hello-debugger/</link>
		<pubDate>Fri, 27 Feb 2009 17:41:21 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://f7cea3aa-460b-4f8d-a76e-a24df4543e38</guid>
		<description></description>
		<content:encoded><![CDATA[Since I’m guessing most of my readers have never build a debugger before (I certainly hadn’t), let’s start with the debugger equivalent of Hello, World!
<pre class="brush: python">import clr
clr.AddReference('CorDebug')   

import sys
from System.Reflection import Assembly
from System.Threading import AutoResetEvent
from Microsoft.Samples.Debugging.CorDebug import CorDebugger   

ipy = Assembly.GetEntryAssembly().Location
py_file = sys.argv[1]
cmd_line = ""%s" -D "%s"" % (ipy, py_file)   

evt = AutoResetEvent(False)   

def OnCreateAppDomain(s,e):
  print "OnCreateAppDomain", e.AppDomain.Name
  e.AppDomain.Attach()   

def OnProcessExit(s,e):
  print "OnProcessExit"
  evt.Set()   

debugger = CorDebugger(CorDebugger.GetDefaultDebuggerVersion())
process = debugger.CreateProcess(ipy, cmd_line)   

process.OnCreateAppDomain += OnCreateAppDomain
process.OnProcessExit += OnProcessExit   

process.Continue(False)   

evt.WaitOne()</pre>
I start by adding a reference to the CorDebug library I discussed at the end of <a href="http://devhawk.net/2009/02/27/Writing+An+IronPython+Debugger+MDbg+101.aspx">my last post</a> (that’s the low level managed debugger API plus the C# definitions of the various COM APIs). Then I need both the path to the IPy executable as well as the script to be run, which is passed in on the command line (sys.argv). For now, I just use Reflection to find the path to the current ipy.exe and use that. I use those to build a command line – you’ll notice I’m adding the –D on the command line to generate debugger symbols.

Next, I define two event handlers: OnCreateAppDomain and OnProcessExit. When the AppDomain is created, the debugger needs to explicitly attach to it. When the process exits, we signal an AutoResetEvent to indicate our program can exit.

Then it’s a simple process of creating the CorDebugger object, creating a process, setting up the process event handlers and then running the process via the call to Continue. We then wait on the AutoResetEvent for the debugged process to exit. And voila, you have the worlds simplest debugger in about 30 lines of code.

To run it, you run the ipy.exe interpreter and pass in the ipydbg script above and the python script to be debugged. You also have to pass –X:MTA on the command line, as the ICorDebug objects only work from a multi-threaded apartment. When you run it, you get something that looks like this:
<pre class="brush:plain">» ipy -X:MTA ipydbg.py simpletest.py 
OnCreateAppDomain DefaultDomain 
35 
OnProcessExit</pre>
Simpletest.py is a very simple script that prints the results of adding two numbers together. Here, you see the event handlers fire by writing text out to the console.

For those of you who’d like to see this code actually run on your machine, I’ve created an ipydbg project <a href="http://github.com/devhawk/ipydbg/tree/master">up on GitHub</a>. The tree version that goes with this blog post <a href="http://github.com/devhawk/ipydbg/tree/5858695ff85ed4740ad06466d4f54394e7f00f9b">is here</a>. If you’re not running <a href="http://git-scm.com/">Git</a>, you can download a tar or zip of the project via the “download” button at the top of the page. It includes both the CorDebug source as well as the ipydbg.py file (shown above) and the simpletest.py file. It also has a compiled version of CorDebug.dll, so you don’t have to compile it yourself (for those IPy only coders who don’t have VS on their machine).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1221</wp:post_id>
		<wp:post_date>2009-02-27 17:41:21</wp:post_date>
		<wp:post_date_gmt>2009-02-27 17:41:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-hello-debugger</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[f7cea3aa-460b-4f8d-a76e-a24df4543e38]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Hello+Debugger]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/02/28/Writing+An+IronPython+Debugger+Hello+Debugger]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2176</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Shaw]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2009-04-11 21:07:57</wp:comment_date>
			<wp:comment_date_gmt>2009-04-12 04:07:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Harry,

Very cool. One question: I called this by writing a .bat file as follows:

cd ... -- (the place I installed the git-downloaded files).
"C:IronPython 2.0.1ipy.exe" -X:MTA ipydbg.py samplessimpletest.py

When I run the .bat file from VS 2008 Command Prompt window,
it stops at a prompt "ipydbg>>" from which I was able to hit 'o' to step out, in order to get the rest of the output.

It was cool to find myself in a place where I could enter commands, but if I want it to run straight thru, what do I need to change?

Thanks for your useful posts,
Steve]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2177</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Shaw]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2009-04-11 21:13:12</wp:comment_date>
			<wp:comment_date_gmt>2009-04-12 04:13:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[NM, I found the next post in this series, which explained how to add an auto-breakpoint; the code I downloaded has that breakpoint set, LOL!
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Setting a Breakpoint</title>
		<link>http://devhawk.net/2009/03/02/writing-an-ironpython-debugger-setting-a-breakpoint/</link>
		<pubDate>Mon, 02 Mar 2009 15:59:04 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://08c13b80-ad18-43f8-955d-6fa5fd5d9714</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Now that we have a debugger process <a href="http://devhawk.net/2009/02/28/Writing+An+IronPython+Debugger+Hello+Debugger.aspx">up and running</a>, let start adding some actual features. First up, we want to be able to set breakpoints. One of the nice things MDbg does is auto-set a breakpoint on the entrypoint function. For ipydbg, we’re going to auto-set a breakpoint on the first line of the python file being debugged.</p><p>In order to set a breakpoint, we need debugger symbols. They allow us to translate between “line one of simpletest.py” and the actual location in the code and back. We’re all used to seeing the PDB files that are produced when we compile a C# assembly. Unsurprisingly, the <a href="http://msdn.microsoft.com/en-us/library/ms232451.aspx">symbol store binder</a> provides a method to <a href="http://msdn.microsoft.com/en-us/library/ms230866.aspx">load these PDB files from disk</a>. But where do IronPython debug symbols come from? I know from my extensive reading of the ipy.exe command line parameters that you pass –D to enable application debugging, but since all the IL is being generated in memory, how does the debugger get access to the PDB files?</p><p>It turns out the debugger API includes a <a href="http://msdn.microsoft.com/en-us/library/ms230148.aspx">UpdateModuleSymbols callback method</a> that the runtime uses to notify the debugger when the symbols change. The debugger symbols are provided in an IStream, and then you <a href="http://msdn.microsoft.com/en-us/library/ms232101.aspx">use the symbol binder</a> to get a <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.symbolstore.isymbolreader.aspx">symbol reader</a>. The .NET Framework already provides a <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.symbolstore.aspx">managed API</a> for reading and writing debug symbols. However, that API doesn’t support loading symbols from a stream, so the MDbg code includes it’s own <a href="http://github.com/devhawk/ipydbg/blob/5858695ff85ed4740ad06466d4f54394e7f00f9b/CorDebug/CorSymbolStore/symbinder.cs">wrapper</a> around the symbol binder API to include that functionality. Here’s some code to get the debug symbol reader for an updated module and iterate through the associated files:</p><pre class="brush: python">
sym_binder = SymbolBinder()   
     
def OnUpdateModuleSymbols(s,e):   
  print "OnUpdateModuleSymbols"   
     
  metadata_import = e.Module.GetMetaDataInterface[IMetadataImport]()   
  reader = sym_binder.GetReaderFromStream(metadata_import, e.Stream)   

  for doc in reader.GetDocuments():    
    print "t", doc.URL     

process.OnUpdateModuleSymbols += OnUpdateModuleSymbols
</pre><p>If we run <a href="http://github.com/devhawk/ipydbg/blob/965e2fbf4834177cb7aa7816dd5d0d729672dec6/ipydbg.py">this version of ipydbg</a> on simpletest.py with the <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=12481">IPy 2.0.1 release</a> and the Python standard library installed, OnUpdatedModuleSymbols gets called six times, once for each python file that gets loaded when simpletest runs. (site.py, os.py, ntpath.py, stat.py, UserDict.py and simpletest.py). BTW, I tried running this code on the <a href="http://nbs.blob.core.windows.net/ironpython/IronPython.47624.release.zip">latest build of IPy</a> (<a href="http://www.codeplex.com/IronPython/SourceControl/changeset/view/47624">changeset 47624</a>) and I’m getting a COM Interop exception. So for now, stick with 2.0.1.</p><p>Now that we can get these dynamically generated debug symbols, we can use them to create a breakpoint on the first line of the script being debugged. Everytime OnUpdateModuleSympols is called, I try to bind the initial breakpoint (unless it’s already been bound of course) by calling the following create_breakpoint function.</p><pre class="brush: python">
def create_breakpoint(doc, line, module, reader):     
  line = doc.FindClosestLine(line)     
  method = reader.GetMethodFromDocumentPosition(doc, line, 0)     
  function = module.GetFunctionFromToken(method.Token.GetToken())     
   
  for sp in get_sequence_points(method):     
    if sp.doc.URL == doc.URL and sp.start_line == line:     
      bp = function.ILCode.CreateBreakpoint(sp.offset)     
      bp.Activate(True)     
      return bp     
       
  bp = function.CreateBreakpoint()     
  bp.Activate(True)     
  return bp
</pre><p>This code translates a given document/line into a function/offset where we can set a breakpoint. To do this, we use sequence points which <a href="http://blogs.msdn.com/rmbyers/archive/2005/09/08/debuggingmodes-ignoresymbolstoresequencepoints.aspx">as per Rick Byers</a> are “used to mark a spot in the IL code that corresponds to a specific location in the original source”. So once we find the function that corresponds to a given line of code, we iterate over the sequence points until we find the one that matches the line we want to break on. If we find a matching sequence point, we set the breakpoint there. If we don’t, we set the breakpoint on the function itself. get_sequence_points is a simple wrapper around <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.symbolstore.isymbolmethod.getsequencepoints.aspx">ISymbolMethod GetSequencePoints</a>. The original API is pretty ugly to use – managing six separate arrays of information – so get_sequence_points turns it into a generator function you can iterate over.</p><p>Now that the breakpoint is set, we want to trap the breakpoint event as well. That’s easy enough, we create an event handler for process.OnBreakpoint similar to the OnUpdateModuleSymbols event above. Eventually, we’ll have the ability to step when we break, but for now I’m just going to print out the current location when the breakpoint is hit. This is kind of the reverse of the operation above. Setting a breakpoint means going from a source location to an IL offset within a function. Printing the current location means going from an IL offset in a function back to the source location. Here’s the function to do that:</p><pre class="brush: python">
def get_location(reader, thread):  
  frame = thread.ActiveFrame  
  function = frame.Function  
    
  offset, mapping_result = frame.GetIP()  
  method = reader.GetMethod(SymbolToken(frame.Function.Token))  
    
  real_sp = None  
  for sp in get_sequence_points(method):  
    if sp.offset &gt; offset:   
      break  
    if sp.start_line != 0xfeefee:   
      real_sp = sp  
        
  if real_sp == None:  
    return "Location (offset %d)" % (offset)  
    
  return "Location %s:%d (offset %d)" % (  
    Path.GetFileName(real_sp.doc.URL), real_sp.start_line, offset)  

def OnBreakpoint(s,e):     
  print "OnBreakpoint", get_location(     
    symbol_readers[e.Thread.ActiveFrame.Function.Module], e.Thread)
</pre><p></p><p>Given a symbol reader and a debug thread, get_location returns a location string. It loops thru the sequence points, similar to create_breakpoint, in order to find the closest corresponding line of python code to the current offset (check out Mike Stall’s blog as for <a href="http://blogs.msdn.com/jmstall/archive/2005/06/19/FeeFee_SequencePoints.aspx">why I’m checking for 0xfeefee</a>). In order to make this work, I need the symbol reader for the module that I retrieved in OnUpdateModuleSymbols. For now, I’m stashing the reader in a global dictionary keyed by the module named symbol_readers where OnBreakpoint can access it. </p><p>Ipydbg isn’t interactive yet, but it is now running, setting a breakpoint and successfully breaking at that breakpoint. As usual, the <a href="http://github.com/devhawk/ipydbg/commit/92521a59c3d6a4679a30bb019bda26a4eff8c894#diff-0">latest version of ipydbg</a> is up on GitHub.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1222</wp:post_id>
		<wp:post_date>2009-03-02 15:59:04</wp:post_date>
		<wp:post_date_gmt>2009-03-02 15:59:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-setting-a-breakpoint</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[08c13b80-ad18-43f8-955d-6fa5fd5d9714]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Setting+A+Breakpoint]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/02/Writing+An+IronPython+Debugger+Setting+A+Breakpoint]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing and IronPython Debugger: Adding Interactivity</title>
		<link>http://devhawk.net/2009/03/04/writing-and-ironpython-debugger-adding-interactivity/</link>
		<pubDate>Wed, 04 Mar 2009 14:06:27 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://69b55d54-3aed-4ec4-bb36-09eb7e9ec02d</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Now that ipydbg can <a href="http://devhawk.net/2009/03/02/Writing+An+IronPython+Debugger+Setting+A+Breakpoint.aspx">set a breakpoint</a>, it’s time to add some interactivity to the app. MDbg supports <a href="http://msdn.microsoft.com/en-us/library/ms229861.aspx">dozens of commands</a> and currently ipydbg supports none. I’d love for ipydbg to support a wide range of commands like MDbg does, but for now let’s keep it simple and start with two: Continue and Quit. These aren’t very interesting as commands go, but that lets me focus this blog post on adding basic interactivity and future posts on specific commands. </p><p>First off, we have to understand how the CorDebug managed API supports interactivity. <a href="http://devhawk.net/2009/02/28/Writing+An+IronPython+Debugger+Hello+Debugger.aspx">As we’ve seen</a>, callbacks into the debugger are surfaced as managed events. If we look at the <a href="http://github.com/devhawk/ipydbg/blob/5858695ff85ed4740ad06466d4f54394e7f00f9b/CorDebug/CorDebug/Debugger.cs#L524">base class</a> for all the debugger event arguments, we see that it exposes a <a href="http://github.com/devhawk/ipydbg/blob/5858695ff85ed4740ad06466d4f54394e7f00f9b/CorDebug/CorDebug/Debugger.cs#L561">Continue property</a>. If you want the debugger to automatically continue after the event handler finishes running, you set the Continue property to true (which is the default). If you want the debugger to stay paused while you provide the developer a chance to poke around, you set Continue to false. In that case, the debugger stays paused until call process.Continue explicitly.</p><p>Once we set the Continue property to false, we need a mechanism to signal the main thread of execution that it’s time to wake up and ask the user what they want to do next. Of course, that’s what <a href="http://msdn.microsoft.com/en-us/library/system.threading.waithandle.aspx">WaitHandle</a> and it’s descendents are for. In fact, <a href="http://devhawk.net/2009/02/28/Writing+An+IronPython+Debugger+Hello+Debugger.aspx">we’re already using</a> an AutoResetEvent in OnProcessExit to signal that the debugged app has exited so we should exit the debugger. However, now we have two different signals that we want to send: exit the debugger or enter the input loop. I decided to differentiate by using two separate AutoResetEvents:</p><pre class="brush: python">
terminate_event = AutoResetEvent(False)  
break_event = AutoResetEvent(False)  

def OnProcessExit(s,e):  
  print "OnProcessExit"  
  terminate_event.Set()  

def OnBreakpoint(s,e):  
  print "OnBreakpoint", get_location(  
    symbol_readers[e.Thread.ActiveFrame.Function.Module], e.Thread)  
  e.Continue = False  
  break_event.Set()  

#code to create debugger and process omitted for clarity

handles = Array.CreateInstance(WaitHandle, 2)  
handles[0] = terminate_event  
handles[1] = break_event  

while True:  
  process.Continue(False)  

  i = WaitHandle.WaitAny(handles)  
  if i == 0:  
    break  

  input()
</pre><p>Instead of a single call to process.Continue I had before, I’ve created an infinite “while True” loop that calls Continue, waits for one of the events to signal, then either exits the loop of enters the input loop (via the input function). Since there are two AutoResetEvents, I need to use the <a href="http://msdn.microsoft.com/en-us/library/tdykks7z.aspx">WaitAny method</a> to wait for one of them to signal. WaitAny takes an array, which is kind of clunky to use from IronPython since the array has to be strongly typed. It would be much more pythonic if I could call WaitHandle.WaitAny([terminate_event, break_event]). WaitAny then returns an index into the array indicating which one received the signal. If it was the terminate_event that signaled, I exit the loop (and the application). Otherwise, I enter the input loop. Notice, by the way, in OnBreakpoint that I’m both setting Continue to false and signaling the break_event. </p><p>The “input loop” needs to be a loop because the user may want to type in multiple commands before letting the debugged app continue to execute. This means that the input function is implemented as another “while True” loop. When the user does chooses a command that implies the process should continue, I simply exit out of the input function and the outer “while True” loop above executes the continue and waits for a signal. </p><p>Here’s what the input function looks like right now with our two basic commands:</p><pre class="brush: python">
def input():     
  while True:     
    Console.Write("» ")     
    k = Console.ReadKey()     
     
    if k.Key == ConsoleKey.Spacebar:     
      Console.WriteLine("nContinuing")     
      return  
    elif k.Key == ConsoleKey.Q:     
      Console.WriteLine("nQuitting")     
      process.Stop(0)     
      process.Terminate(255)     
      return
    else:     
      Console.WriteLine("n Please enter a valid command")
</pre><p>I’ve mapped “q” to quit the debugger and spacebar to continue. Since I’m using Console ReadKey, you only have to type the key in question – no return needed. For continue, we don’t do anything but exit the input loop by returning. Continue gets called as part of the other loop and since we haven’t/can’t add additional breakpoints the debugged app will run until it ends. For quit, I call the <a href="http://msdn.microsoft.com/en-us/library/ms230796.aspx">Terminate method</a> on process, hard coding the return value to 255. However, Terminate implicitly continues the debugged process. Since you can’t continue a running process, the call to Continue in the outer loop throws an exception. I avoid this exception by adding the call to Stop before Terminate. As per the <a href="http://msdn.microsoft.com/en-us/library/ms232533.aspx">Stop docs</a>, the debugger maintains a “stop counter” and only resumes the debugged process when the counter reaches zero.  Calling Stop increases the stop counter by one, calling Terminate decreases it by one, then the outer loop Continue  call decreases it to zero and the process continues, terminates and fires the OnProcessExit event handler as usual.</p><p>Now that we have a basic interactive loop, I’ll be able to add more interesting commands. I’m guessing at some point, I’ll need to refactor input a bit – I’m guessing a huge if/elif/else statement is going to get ugly fast, but I’ll worry about that when it gets out of hand. As usual, the <a href="http://github.com/devhawk/ipydbg/tree/112c3acdcf726c3ad89ce2def8258ecc2fb55513">latest ipydbg source</a> is up on GitHub.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1223</wp:post_id>
		<wp:post_date>2009-03-04 14:06:27</wp:post_date>
		<wp:post_date_gmt>2009-03-04 14:06:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-and-ironpython-debugger-adding-interactivity</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[69b55d54-3aed-4ec4-bb36-09eb7e9ec02d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+And+IronPython+Debugger+Adding+Interactivity]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/04/Writing+And+IronPython+Debugger+Adding+Interactivity]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Dynamic Stack Trace</title>
		<link>http://devhawk.net/2009/03/09/writing-an-ironpython-debugger-dynamic-stack-trace/</link>
		<pubDate>Mon, 09 Mar 2009 15:10:02 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://48c4a70d-e243-43e5-9709-85d2119c592b</guid>
		<description></description>
		<content:encoded><![CDATA[Now that I can <a href="http://devhawk.net/2009/03/04/Writing+And+IronPython+Debugger+Adding+Interactivity.aspx">interact with my debugger</a>, it’s time to add a command. I decided to start with something simple – or at least something I thought would be simple - printing a stack trace.

In the <a href="http://msdn.microsoft.com/en-us/library/ms404520.aspx">unmanaged debugger API</a>, threads have the concept of both <a href="http://msdn.microsoft.com/en-us/library/ms233401.aspx">stack chains</a> and <a href="http://msdn.microsoft.com/en-us/library/ms230151.aspx">stack frames</a>. A stack chain represents a segment of the physical stack. In a typical managed app, you’ll have at least two stack chains: the unmanaged stack chain and the managed stack chain. You can interate through the stack chains for a given thread via the Chains property. However, ipydbg is a managed only debugger, so I can ignore the unmanaged stack chain. Instead, I just retrieve the current (managed) chain via the thread’s ActiveChain property.

Within a managed stack chain, there is a collection of stack frames. This is the call stack that managed developers are typically used to working with. It turns out that printing a raw stack trace is very easy to do. Here was my first stab at it:
<pre class="brush: python">elif k.Key == ConsoleKey.T:     
  print "nManaged Stack Trace"
  for f in active_thread.ActiveChain.Frames:     
    offset, sp = get_location(f)     
    metadata_import = CorMetadataImport(f.Function.Module)     
    method_info = metadata_import.GetMethodInfo(f.FunctionToken)     
    print "  ",      
      "%s::%s --" % (method_info.DeclaringType.Name, method_info.Name),      
      sp if sp != None else "(offset %d)" % offset</pre>
This elif block is part of the input method I showed last time. It loops thru the frames in the Active Chain of the active thread and prints some data to the console. As I said, pretty easy. Of course, the devil is in the details.

First detail I should call out is that active_thread variable. <a href="http://blogs.msdn.com/jmstall/archive/2006/03/21/attach_asyncbreak.aspx">As per Mike Stall</a>, “there is no notion of "active thread" in the underlying debug APIs. It's purely a construct in a debugger UI to make it easier for end-users.” My console based UI may be rudimentary, but it’s still a UI. Events like OnBreakpoint include the active thread as a event argument, so I stash that away in a variable so it’ll be available to the input loop.

Second detail is the call to get_location. When we <a href="http://github.com/devhawk/ipydbg/blob/112c3acdcf726c3ad89ce2def8258ecc2fb55513/ipydbg.py#L50">last saw get_location</a>, it was returning a formatted string. Since my last post, I’ve refactored the code so it returns the raw location data – a tuple of the raw IP offset and the associated sequence point, if available. I’ve also added a __str__ method to my sequence point object, so when I print it to the console, I get the filename and line nicely formatted.

Finally, there’s all CorMetadataImport code. In addition to wrapping the unmanaged debugger API, CorDebug also wraps the <a href="http://msdn.microsoft.com/en-us/library/ms404384.aspx">unmanaged metadata API</a>. This code lets me get <a href="http://msdn.microsoft.com/en-us/library/system.reflection.methodinfo.aspx">MethodInfo</a> compatible view of the function metadata for a given stack frame. I use it here to get the type and function name for each frame on the stack.

The end result looks something like this. Note, I’ve replaced “Microsoft.Scripting” with “MS.Scripting” to avoid word wrapping.
<pre class="brush:plain">OnBreakpoint Initialize Location: simpletest.py:1 (offset: 84) 
» t 
Managed Stack Trace 
   S$2::Initialize simpletest.py:1 (offset: 84) 
   MS.Scripting.Runtime.OptimizedScriptCode::InvokeTarget (offset 72) 
   MS.Scripting.ScriptCode::Run (offset 0) 
   IronPython.Hosting.PythonCommandLine::RunFileWorker (offset 77) 
   IronPython.Hosting.PythonCommandLine::RunFile (offset 15) 
   MS.Scripting.Hosting.Shell.CommandLine::Run (offset 46) 
   IronPython.Hosting.PythonCommandLine::Run (offset 240) 
   MS.Scripting.Hosting.Shell.CommandLine::Run (offset 74) 
   MS.Scripting.Hosting.Shell.ConsoleHost::RunCommandLine (offset 158) 
   MS.Scripting.Hosting.Shell.ConsoleHost::ExecuteInternal (offset 32) 
   MS.Scripting.Hosting.Shell.ConsoleHost::Execute (offset 63) 
   MS.Scripting.Hosting.Shell.ConsoleHost::Run (offset 390) 
   PythonConsoleHost::Main — (offset 125)</pre>
As we can see, we may be on the first line of the python script, but we’ve got a pretty deep stack trace already. Everything but the top-most frame are from the underlying IronPython implementation. Those extra frames obscure the stack frames I actually care about, so it would be nice to hide any stack frames from IronPython or the DLR. It’s easy enough to write a python generator function that filters out frames that from the DLR or IronPython namespaces. In order to get the type name, we need the method_info like we did above. I’ve factored that code into a separate function in order to avoid code duplication.
<pre class="brush: python">def get_method_info_for_frame(frame)     
    if frame.FrameType != CorFrameType.ILFrame:     
      return None
    metadata_import = CorMetadataImport(frame.Function.Module)     
    return metadata_import.GetMethodInfo(frame.FunctionToken)     

def get_dynamic_frames(chain):     
  for f in chain.Frames:     
    method_info = get_method_info_for_frame(f)     
    if method_info == None:     
      continue
    typename = method_info.DeclaringType.Name     
    if typename.startswith("Microsoft.Scripting.")      
      or typename.startswith("IronPython.")      
      or typename == "PythonConsoleHost":     
        continue
    yield f</pre>
You’ll notice I’ve added a guard to get_method_info_for_frame in order to ensure that the frame argument is an IL Frame. There are <a href="http://github.com/devhawk/ipydbg/blob/dab527c9bb39e61cc4a464d840db8ee6a2aef753/CorDebug/CorDebug/Thread.cs#L272">three types of stack frames</a> in the debugger API: <a href="http://msdn.microsoft.com/en-us/library/ms232990.aspx">IL</a>, native and <a href="http://msdn.microsoft.com/en-us/library/ms232469.aspx">internal</a>. Most of the frames we’re dealing with are IL frames, but you do run into the occasional <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.dynamicmethod.aspx">lightweight function</a> (i.e. <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.dynamicmethod.aspx">DynamicMethod</a>) frame when debugging IronPython code. Typically, IronPython generates DynamicMethods for all python code except for a few cases related to .NET interop. However, you can’t debug DynamicMethods, so when you run with –D, we generate normal non-dynamic methods instead. However, even when running with –D, we still use DynamicMethods for call site dispatch. Since they’re an implementation detail, we want to filter those out in get_dynamic_frames too.

This gives us a much more manageable stack trace:
<pre class="brush:plain">OnBreakpoint Initialize Location: simpletest.py:1 (offset: 84) 
» t 
Stack Trace 
   S$2::Initialize -- simpletest.py:1 (offset: 84)</pre>
As usual, the <a href="http://github.com/devhawk/ipydbg/blob/c33cf75c4e9273a21ada00abe2403c392e4ca0a0/ipydbg.py">latest ipydbg source</a> is up on GitHub.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1224</wp:post_id>
		<wp:post_date>2009-03-09 15:10:02</wp:post_date>
		<wp:post_date_gmt>2009-03-09 15:10:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-dynamic-stack-trace</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[48c4a70d-e243-43e5-9709-85d2119c592b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Dynamic+Stack+Trace]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/09/Writing+An+IronPython+Debugger+Dynamic+Stack+Trace]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>devhawk_ipy</title>
		<link>http://devhawk.net/2009/03/11/devhawk_ipy/</link>
		<pubDate>Wed, 11 Mar 2009 15:44:24 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://ba63a23c-bc53-4a8c-a940-884fff35b91c</guid>
		<description></description>
		<content:encoded><![CDATA[<p>As I write various python modules (many of which get blogged about), I dump them into a special folder on my machine(s). In my powershell profile script, I set the <a href="http://www.ironpython.info/index.php/Using_the_Python_Standard_Library">IRONPYTHONPATH environment variable</a> so that these modules are available to the IPy interpreter (i.e. ipy.exe). To date, I’ve been pretty haphazard about this. But I decided to get a little more structured and put that folder under source control and make it available as “<a href="http://github.com/devhawk/devhawk_ipy/tree">devhawk_ipy</a>”.</p><p>So far, I’ve only got three scripts (plus an empty __init__.py) in devhawk_ipy. </p><ul><li>codedom.py (from <a href="http://devhawk.net/2009/01/30/IronPython+And+CodeDOM+Dynamically+Compiling+C+Files.aspx">IronPython and CodeDOM: Dynamically Compiling C# Files</a>)</li><li>ipypulldom.py (from <a href="http://devhawk.net/2008/05/06/Stream+Processing+XML+In+IronPython.aspx">Stream Processing XML in IronPython</a>)</li><li>xml2py.py (from <a href="http://devhawk.net/2008/05/07/Deserializing+XML+With+IronPython.aspx">Deserializing XML with IronPython</a>)</li></ul><p>Eventually I’ll put my code for working with <a href="http://devhawk.net/2008/11/13/IronPython+And+WPF+Part+1+Introduction.aspx">WPF</a>, <a href="http://devhawk.net/2008/12/13/IronPython+And+LiveFX+Accessing+Profiles.aspx">LiveFX</a> and <a href="http://devhawk.net/2009/01/07/Nightly+Builds+Technical+Info.aspx">Azure</a> into this package, but I’m not happy with where they are yet. </p><p>Like ipydbg, devhawk_ipy is up on <a href="http://github.com/">GitHub</a>. For those non-Git users, I’m will continue to these files up on <a href="http://cid-0d9bc809858885a4.skydrive.live.com/browse.aspx/DevHawk%20Content/IronPython%20Stuff">my SkyDrive</a>. I kind of see SkyDrive as a dumping ground for random content while devhawk_ipy is where stuff goes when it’s a little more polished. </p><p>Like IronPython, devhawk_ipy is licensed under the <a href="http://www.microsoft.com/opensource/licenses.mspx#Ms-PL">MS-PL</a>. If you’re interested in contributing, feel free to fork and send me patches.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1225</wp:post_id>
		<wp:post_date>2009-03-11 15:44:24</wp:post_date>
		<wp:post_date_gmt>2009-03-11 15:44:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devhawk_ipy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[ba63a23c-bc53-4a8c-a940-884fff35b91c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[devhawkipy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/11/devhawkipy]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronPython at PyCon</title>
		<link>http://devhawk.net/2009/03/11/ironpython-at-pycon/</link>
		<pubDate>Wed, 11 Mar 2009 16:22:31 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://51071c10-46be-4ed0-bf4b-ba671aa7e4de</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Here’s a quick quiz. Which of these tasks is harder to accomplish:</p><ol><li>Getting $6,000 from a variety of groups within Microsoft to pay for a Gold <a href="http://us.pycon.org/2009/">PyCon 2009</a> sponsorship.</li><li>Sending <a href="http://www.python.org/psf/">PSF</a> a check</li></ol><p>If you guessed #2, you’d be right. It’s amazing how difficult the seemly trivial task of “give those PSF folks money” turned out to be. But it’s done now, and you can see the MS logo there on the side of all the PyCon pages.</p><p>In addition to the sponsorship, there are some great looking IronPython sessions at PyCon. </p><ul><li><a href="http://www.voidspace.org.uk/python/weblog/index.shtml">Michael Foord</a> and <a href="http://www.tartley.com">Jonathan Hartley</a> are running a <a href="http://us.pycon.org/2009/tutorials/schedule/1AM3/">Developing with IronPython</a> tutorial. Michael is also delivering a talk <a href="http://us.pycon.org/2009/conference/schedule/event/P1/">Functional Testing of Desktop Applications</a>.</li><li>Jim Hugunin is delivering an invited talk <a href="http://us.pycon.org/2009/conference/schedule/event/P117/">IronPython: Directions, Data and Demos </a></li><li>Dino Viehland is sitting on the <a href="http://us.pycon.org/2009/conference/schedule/event/21/">Python VMs panel</a> and doing a talk <a href="http://us.pycon.org/2009/conference/schedule/event/86/">IronPython Implementation</a></li><li><a href="http://www.codinggeekette.com/">Sarah Dutkiewicz</a> (aka Coding Geekette) is doing a talk <a href="http://us.pycon.org/2009/conference/schedule/event/P12/">Pumping Iron into Python: Intro to FePy </a></li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1226</wp:post_id>
		<wp:post_date>2009-03-11 16:22:31</wp:post_date>
		<wp:post_date_gmt>2009-03-11 16:22:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-at-pycon</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[51071c10-46be-4ed0-bf4b-ba671aa7e4de]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+At+PyCon]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/11/IronPython+At+PyCon]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>VB Dev Lead Position Open</title>
		<link>http://devhawk.net/2009/03/12/vb-dev-lead-position-open/</link>
		<pubDate>Thu, 12 Mar 2009 10:37:54 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://b5d73740-3d35-44de-b8aa-ffdcf4f558dd</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In case you’re job hunting, the <a href="http://blogs.msdn.com/vbteam/">VB team</a> has a <a href="http://members.microsoft.com/careers/search/details.aspx?JobID=99F8412E-85F6-4745-8F97-A3A17AC90CC1">position open for a dev lead</a>:</p><blockquote><p>The Visual Basic team has a long history of delivering great value to our customers, and we are continuing that in the Dev10 release of Visual Studio. We’re looking for a Development Lead to help guide these efforts as well as shape future versions of the compiler. </p><p>The Visual Studio Languages group (VSL) develops VB, C#, F#, IronPython and IronRuby. As a member of this product unit, you’ll have the opportunity to work with others developing compilers and IDEs targeting the .NET runtime. You’ll benefit from their experience and contribute best practices and methodologies of your own. In VSL, developers work closely with their QA team, and we are committed to delivering the best value for our customers at very high quality.</p><p>As a Development Lead on the Visual Basic compiler, you’ll be the hand at the tiller of VB.NET compiler development. Specifically, you will:</p><ul><li>Manage the day-to-day duties of the compiler and runtime development team, ensuring on-schedule delivery of high quality components.</li><li>Help chart the direction the compiler team takes by prioritizing efforts in coordination with your counterparts in QA and PM.</li><li>Contribute to the design of the Visual Basic programming language.</li><li>Mentor your team of developers to continue their career growth.</li><li>Help shape the engineering environment and procedures in Visual Studio Languages.</li><li>Work closely with the IDE team to help them provide a top notch editing and debugging experience.</li></ul><p>To be successful, you’ll need the following:</p><ul><li>A demonstrated aptitude for managing a team of high-caliber developers.</li><li>Excellent communication, collaboration and negotiation skills and the ability to drive open issues to closure.</li><li>Strong architectural sense and a working knowledge of the fundamentals of compiler design.</li><li>Passion for delivering customer solutions and quality software in general.</li><li>Working knowledge of the managed runtime environment is a strong plus. </li></ul></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1227</wp:post_id>
		<wp:post_date>2009-03-12 10:37:54</wp:post_date>
		<wp:post_date_gmt>2009-03-12 10:37:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vb-dev-lead-position-open</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
		<category domain="post_tag" nicename="visual-basic"><![CDATA[Visual Basic]]></category>
		<category domain="post_tag" nicename="working-at-msft"><![CDATA[Working at MSFT]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[b5d73740-3d35-44de-b8aa-ffdcf4f558dd]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[VB+Dev+Lead+Position+Open]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/12/VB+Dev+Lead+Position+Open]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Refactoring</title>
		<link>http://devhawk.net/2009/03/11/writing-an-ironpython-debugger-refactoring/</link>
		<pubDate>Wed, 11 Mar 2009 20:42:22 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://c1a4f587-9497-48b8-b958-fc95c8127e73</guid>
		<description></description>
		<content:encoded><![CDATA[<p>When we <a href="http://github.com/devhawk/ipydbg/blob/c33cf75c4e9273a21ada00abe2403c392e4ca0a0/ipydbg.py">last left</a> ipydbg, it was up to about 200 lines of code. Not bad in terms of overall length, but I started to detect some <a href="http://en.wikipedia.org/wiki/Code_smell">code smell</a>. I was relying pretty heavily on global variables and the structure of my code made it difficult to control how the debugger was run. I wanted to change ipydbg so it would automatically spin up an MTA thread if I forgot to add the –X:MTA command line parameter. But since by debugger and process objects were global, they’d get created on the main thread of ipydbg, regardless if it was STA or MTA. So for this “<a href="http://github.com/devhawk/ipydbg/tree/117cdce71a5ee8880e8bc991813534b6fba0a6d5">release</a>” (I’d say I’m almost to version 0.0.0.1), I decided on focusing on enginering and refactoring rather than new features. </p><p>The big new addition is the <a href="http://github.com/devhawk/ipydbg/blob/117cdce71a5ee8880e8bc991813534b6fba0a6d5/ipydbg.py#L90">IPyDebugProcess class</a>, which is clearly the workhorse of the application. All of the previously global variables are now class instance variables on IPyDebugProcess. Input and run along with all the event handlers as well as do_break_event and get_location are now class methods, as they need to access instance variables (setting the break event, accessing the symbol reader dictionary, etc.). Functions that didn’t need to access instance variables (get_sequence_points, create_breakpoint, get_dynamic_frames and get_method_info_for_frame) I left as top-level functions. If they get more complex, I may break them out into their own modules, but for now I left them in ipydbg.py.</p><p>The conversion process was fairly trivial. I had to add “self.” lots of places and change the indention level all over but that was pretty much it. Once I finished the conversion, I was able to add the run_debugger function to handle the thread creation, if necessary. </p><pre class="brush: python">
def run_debugger(py_file):     
    if Thread.CurrentThread.GetApartmentState() == ApartmentState.STA:     
        t = Thread(ParameterizedThreadStart(run_debugger))     
        t.SetApartmentState(ApartmentState.MTA)     
        t.Start(py_file)     
        t.Join()    
    else:     
        p = IPyDebugProcess()     
        p.run(py_file)     

if __name__ == "__main__":         
    run_debugger(sys.argv[1])
</pre><p>Originally, I tried to put this logic in IPyDebugProcess.run. However, since I’m <a href="http://github.com/devhawk/ipydbg/blob/117cdce71a5ee8880e8bc991813534b6fba0a6d5/ipydbg.py#L92">creating the debugger object</a> in the __init__ function, that meant it would be created on the wrong thread. I could have moved the debugger creation to the run method or move the thread management code to __init__, but I decided to factor that logic into a separate function completely. Felt cleaner that way.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1228</wp:post_id>
		<wp:post_date>2009-03-11 20:42:22</wp:post_date>
		<wp:post_date_gmt>2009-03-11 20:42:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-refactoring</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[c1a4f587-9497-48b8-b958-fc95c8127e73]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Refactoring]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/12/Writing+An+IronPython+Debugger+Refactoring]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Debugging Just My Code</title>
		<link>http://devhawk.net/2009/03/13/writing-an-ironpython-debugger-debugging-just-my-code/</link>
		<pubDate>Fri, 13 Mar 2009 16:43:36 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://7a36bcc8-a7cd-4d41-a6f8-7b600699c35e</guid>
		<description></description>
		<content:encoded><![CDATA[<p>As I wrote last time, in order to make debug stepping actually useful in ipydbg I need to avoid stepping into frames that are part of the IronPython infrastructure. I did something similar when I <a href="http://devhawk.net/2009/03/09/Writing+An+IronPython+Debugger+Dynamic+Stack+Trace.aspx">hide infrastructure frames in the stack trace</a>. Originally, I had planned to automatically stepping again if we ended up on a frame that didn’t correspond to a python file. However, <a href="http://blogs.msdn.com/jmstall/default.aspx">Mike Stall</a> showed me a much cleaner and better performing solution: Just My Code. As I mentioned at the <a href="http://devhawk.net/2009/02/27/Writing+An+IronPython+Debugger+Introduction.aspx">start of this series</a>, support for JMC is one of the main reasons I wanted to build my own debugger rather than use MDbg.</p><p>Enabling JMC in the stepper object is trivial:</p><pre class="brush: python">
def create_stepper(thread, JMC = True):     
  stepper = thread.ActiveFrame.CreateStepper()     
  stepper.SetUnmappedStopMask(CorDebugUnmappedStop.STOP_NONE)     
  stepper.SetJmcStatus(JMC)  
  return stepper
</pre><p>If I make that single change and run ipydbg, any step effectively turns into a full continue since none of the code has been marked as “My Code” yet. As you see, the tricky part of JMC isn’t enabling it on the stepper, it’s “painting” the parts of the code where you want JMC stepping to work. You can set JMC status at the <a href="http://msdn.microsoft.com/en-us/library/ms231586.aspx">module</a>, <a href="http://msdn.microsoft.com/en-us/library/ms230160.aspx">class</a> or the <a href="http://msdn.microsoft.com/en-us/library/ms230220.aspx">method</a> level. In the case of ipdbg, it’s easiest to work at the class level:</p><pre class="brush: python">
infrastructure_methods =  ['TryGetExtraValue',      
    'TrySetExtraValue',      
    '.cctor',      
    '.ctor',      
    'CustomSymbolDictionary.GetExtraKeys',      
    'IModuleDictionaryInitialization.InitializeModuleDictionary']     

def OnClassLoad(self, sender, e):     
    cmi = CorMetadataImport(e.Class.Module)     
    mt = cmi.GetType(e.Class.Token)     
    print "OnClassLoad", mt.Name     

    if not e.Class.Module.IsDynamic:     
      e.Class.JMCStatus = False
    elif mt.Name.startswith('IronPython.NewTypes'):     
      e.Class.JMCStatus = False
    else:     
      e.Class.JMCStatus = True
      for mmi in mt.GetMethods():     
        if mmi.Name in infrastructure_methods:     
          f = e.Class.Module.GetFunctionFromToken(mmi.MetadataToken)     
          f.JMCStatus = False
</pre><p>OnClassLoad is where the action is. This event handler is responsible for enabling JMC for all class methods that map to python code. To understand how the logic in OnClassLoad works, you need to understand a little about the .NET types and code that IronPython generates. Note, the following description is for the IronPython 2.0 branch. Code generation evolves from release to release and I know for a fact there are changes in the upcoming 2.6 version. I assume that I’ll eventually have to sniff the IronPython version in order to set JMC correctly.</p><p>Today, IronPython generates all code into dynamic modules and methods. Since I want to limit stepping to python code only, I automatically disable JMC for non-dynamic modules. I can imagine a scenario where I want to step into non-dynamically generated code, but I think the best way to handle that would be to disable JMC at the stepper rather than widening the amount of code marked as JMC enabled.</p><p>For every module that gets loaded, IronPython generates a type. At a minimum you’re going to load two modules: site.py and whatever python script you ran. If you have the python standard library installed, site.py loads a bunch of other modules as well. Each of these module types have a bunch of standard methods that always get generated. For example, the global scope code in the module is placed in a static method on the module type called Initialize. Any python functions you define get generated static methods with mangled names on the module type [1]. All these methods have corresponding python code and should be JMC enabled. The other standard methods on a module type should not be JMC enabled. So in my debugger, I mark the class as JMC enabled but then iterate over the list of methods and mark any in the list of standard methods (except for Initialize) as JMC disabled.</p><p>Of course, you can also <a href="http://docs.python.org/reference/compound_stmts.html#class-definitions">create classes</a> in Python. As you might expect, classes in Python are generated as .NET types. However, the semantics of Python classes are very different than .NET types. For example, you can change the inheritance hierarchy of python classes at runtime. That’s obviously not allowed for .NET types. So the .NET types we generate have all the logic to implement Python class semantics. As it turns out, these .NET types *only* have the logic to implement Python class semantics, which is to say they have *none* of Python class methods code. This makes sense when you think about it – since Python can add and remove methods from a class at runtime, IronPython can’t put the method code in the .NET type itself. Instead, Python class methods are generated as static methods on the module type, just like top-level functions are. Since Python class types only contain Python class semantics logic, we never want to enable JMC for Python class types. Python class types get generated in the IronPython.NewTypes namespace, so it’s fairly easy to check the class name in OnClassLoad and automatically disable JMC for classes any in that namespace.</p><p>Adding JMC support makes ipydbg significantly more usable. It’s almost like a real tool now, isn’t it? <a href="http://github.com/devhawk/ipydbg/tree/39eb5ea81b8a493d9605d4cce4b3ef75fec4f327">Latest bits</a> are up on GitHub. </p><hr /><p>[1] FYI, IronPython generates python functions as <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.dynamicmethod.aspx">dynamic methods</a> in release mode and static module class methods in debug mode since you can’t step into dynamic methods. The description above is specific to debug mode since ipydbg exclusively runs in debug mode.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1229</wp:post_id>
		<wp:post_date>2009-03-13 16:43:36</wp:post_date>
		<wp:post_date_gmt>2009-03-13 16:43:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-debugging-just-my-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[7a36bcc8-a7cd-4d41-a6f8-7b600699c35e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Debugging+Just+My+Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/13/Writing+An+IronPython+Debugger+Debugging+Just+My+Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2178</wp:comment_id>
			<wp:comment_author><![CDATA[David Lawler]]></wp:comment_author>
			<wp:comment_author_email>djlawler@aol.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.155.111.140</wp:comment_author_IP>
			<wp:comment_date>2009-03-19 05:29:22</wp:comment_date>
			<wp:comment_date_gmt>2009-03-19 12:29:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very nice!  I'm looking forward to when you get to being able to set a breakpoint and view locals.  I played with Mdbg a while back and even was able to get it working in an IP project...but using the 'higher level' interface, not CorDebug.  This looks like it will be much faster/better.  I look forward to your updates.

Regards,

David L.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2179</wp:comment_id>
			<wp:comment_author><![CDATA[David Lawler]]></wp:comment_author>
			<wp:comment_author_email>djlawler@aol.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.155.111.140</wp:comment_author_IP>
			<wp:comment_date>2009-03-19 11:40:17</wp:comment_date>
			<wp:comment_date_gmt>2009-03-19 18:40:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hehe - or I could do an ugly version myself:

add         self.breakpoints = {}   to the run method of IPyDebugProcess

add new method:
    def update_breakpoints(self):
        for key, active in self.breakpoints.items():
            docname, line = key
            if not(active):                  
                for module, reader in self.symbol_readers.items():
                    for doc in reader.GetDocuments():
                        if doc.URL.endswith(docname):
                            create_breakpoint(doc, line, module, reader)
                            self.breakpoints[key] = True
                            return

and add this to your _input method:
            elif k.Key == ConsoleKey.B:
                ri = raw_input("nenter breakpoint (doc line): ")
                raw = ri.split(" ")
                key = (raw[0], int(raw[1]))
                if not key in self.breakpoints.keys():
                    self.breakpoints[key] = False
                self.update_breakpoints()

lastly add         self.update_breakpoints()
in the OnUpdateModuleSymbols method right after self.symbol_readers[e.Module] = reader line and it works!  Probably very ugly...but who cares for now.  Now I need to allow for breakpoint deletion...

Oh it's killing the formatting in my message!  Too bad.  Thanks for a fun little project!

David]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2180</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
			<wp:comment_date>2009-03-21 18:21:37</wp:comment_date>
			<wp:comment_date_gmt>2009-03-22 01:21:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wasted formatting or not, I like your code David! Breakpoints and viewing locals are definitely on my radar, so keep watching this space.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Stepping Thru Code</title>
		<link>http://devhawk.net/2009/03/13/writing-an-ironpython-debugger-stepping-thru-code/</link>
		<pubDate>Fri, 13 Mar 2009 10:31:17 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://be843f79-26c2-4593-95ae-b271fe4442b3</guid>
		<description></description>
		<content:encoded><![CDATA[<p>So far, I’ve written seven posts about my IronPython debugger, but frankly it isn’t very functional yet. It <a href="http://devhawk.net/2009/02/28/Writing+An+IronPython+Debugger+Hello+Debugger.aspx">runs</a>, <a href="http://devhawk.net/2009/03/02/Writing+An+IronPython+Debugger+Setting+A+Breakpoint.aspx">breaks on the first line</a> and can <a href="http://devhawk.net/2009/03/09/Writing+An+IronPython+Debugger+Dynamic+Stack+Trace.aspx">show a stack trace</a>. Not exactly <a href="http://www.joltawards.com/">Jolt award</a> material. In this post, I’m going to add one of the core functions of any debugger: stepping. Where previously I’ve written a bunch of code but had little to show in terms of features, now I’m getting three new features (basic step, step in and step out) at once!</p><pre class="brush: python">
def _input(self):     
  #remaining _input code omitted for clarity
  elif k.Key == ConsoleKey.S:     
      print "nStepping"
      self._do_step(False)     
      return
  elif k.Key == ConsoleKey.I:     
      print "nStepping In"
      self._do_step(True)     
      return                 
  elif k.Key == ConsoleKey.O:     
      print "nStepping Out"
      stepper = create_stepper(self.active_thread)     
      stepper.StepOut()     

def _do_step(self, step_in):     
  stepper = create_stepper(self.active_thread)     
  mod = self.active_thread.ActiveFrame.Function.Module     
  if mod not in self.symbol_readers:     
      stepper.Step(step_in)     
  else:     
    range = get_step_ranges(self.active_thread, self.symbol_readers[mod])     
    stepper.StepRange(step_in, range)
</pre><p>Here you can see the _input clauses for step, step in and step out. Of the three, step out is the simplest to implement: create the stepper object and call StepOut. For step and step in, I could simply call Step (the boolean argument indicates if you want to step into or over functions) but that only steps a single IL statement. The vast majority of the time there are multiple IL instructions for every line of source code, so IL statement stepping is very tedious. As we learned when <a href="http://devhawk.net/2009/03/02/Writing+An+IronPython+Debugger+Setting+A+Breakpoint.aspx">setting a breakpoint</a>, debug symbols contain sequence points that map between source and IL locations. If they’re available, I use the sequence points to determine the range of IL statements to step over so that I can step single source statements instead. </p><p>The stepping code above depends on three helper functions defined at global scope.</p><pre class="brush: python">
def create_stepper(thread):     
  stepper = thread.ActiveFrame.CreateStepper()     
  stepper.SetUnmappedStopMask(CorDebugUnmappedStop.STOP_NONE)     
  return stepper  
   
def create_step_range(start, end):     
  range = Array.CreateInstance(COR_DEBUG_STEP_RANGE, 1)     
  range[0] = COR_DEBUG_STEP_RANGE(startOffset = UInt32(start),     
                                  endOffset = UInt32(end))     
  return range     
   
def get_step_ranges(thread, reader):     
    frame = thread.ActiveFrame     
    offset, mapResult = frame.GetIP()     
    method = reader.GetMethod(SymbolToken(frame.FunctionToken))     
    for sp in get_sequence_points(method):     
        if sp.offset &gt; offset:     
            return create_step_range(offset, sp.offset)     
    return create_step_range(offset, frame.Function.ILCode.Size)
</pre><p>The first function, create_stepper, simply constructs and configures the stepper object. The call to SetUnmappedStopMask tells the debugger not to stop if it encounters code that can’t be mapped to IL. If you need to debug at that level, ipydbg is *not* for you.</p><p>Next is create_step_range, which exists purely for .NET interop purposes. There are three interop warts hidden in this function. First is creating a .NET array of COR_DEBUG_STEP_RANGE structs. Every time I write Array code like this, I wish for a CreateFromCollection static method on Array. However, in this case it isn’t that big a deal since it’s a one element array. Second wart is having to set the values of COR_DEBUG_STEP_RANGE via constructor keyword arguments. It turns out that IronPython disallows direct updates to value type fields (<a href="http://ironpython.codeplex.com/Wiki/View.aspx?title=Value%20Types">read this for the reason why</a>). Instead, I pass in the field values into the constructor as keyword arguments. Finally, you have to explicitly convert the start and end offsets to a unsigned int in order to set the offset fields in the COR_DEBUG_STEP_RANGE struct constructor.</p><p>Finally is get_step_ranges, which iterates thru the list of sequence points in the current method looking for the one with the smallest offset that is larger than the current offset position. If it can’t find a matching sequence point, it sets the range to the end of the current function. The start range offset is always the current offset. I did make a significant change to get_sequence_points – it no longer yields sequence points that have a start line of 0xfeefee. <a href="http://blogs.msdn.com/jmstall/archive/2005/06/19/FeeFee_SequencePoints.aspx">By convention</a>, that indicates a sequence point to be skipped. Originally, the logic to ignore 0xfeefee sequence points was in get_location. But when I originally wrote get_step_ranges, it had essentially the same sequence point skipping logic, so I moved it to get_location instead.</p><p>Technically, I’ve built three new features but the reality is that if you end up in IronPython infrastructure code it’s really hard to find your way back to python code. Step in is particularly useless right now. Luckily, the .NET debugger API supports a feature called “<a href="http://blogs.msdn.com/jmstall/archive/2004/12/31/344832.aspx">Just My Code</a>” that will make stepping much more useful. In the meantime, the <a href="http://github.com/devhawk/ipydbg/tree/0840b8cf3918feb70311bc0d0a8e0cb0f06fc37c">latest version of ipydbg</a> is up on GitHub as usual.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1230</wp:post_id>
		<wp:post_date>2009-03-13 10:31:17</wp:post_date>
		<wp:post_date_gmt>2009-03-13 10:31:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-stepping-thru-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[be843f79-26c2-4593-95ae-b271fe4442b3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Stepping+Thru+Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/13/Writing+An+IronPython+Debugger+Stepping+Thru+Code]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronPython ConsoleColorMgr</title>
		<link>http://devhawk.net/2009/03/19/ironpython-consolecolormgr/</link>
		<pubDate>Thu, 19 Mar 2009 16:43:51 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://30e6352e-6825-4364-905c-aac5b56964e3</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I really liked the ConsoleColorMgr class from my <a href="http://devhawk.net/2009/03/19/Writing+An+IronPython+Debugger+Colorful+Console.aspx">last ipydbg post</a> so I took a few minutes to yank it out into its own seperate module. I also took the opportunity to make a few improvements.</p><p>First off, I added support for background colors as well as foreground colors. Furthermore, both colors default to “None” which ConsoleColorMgr takes to mean leave that color unchanged. </p><pre class="brush: python">
from System import Console as _Console     

class ConsoleColorMgr(object):     
  def __init__(self, foreground = None, background = None):     
    self.foreground = foreground     
    self.background = background     

  def __enter__(self):   
    self._tempFG = _Console.ForegroundColor   
    self._tempBG = _Console.BackgroundColor  
    if self.foreground: _Console.ForegroundColor = self.foreground   
    if self.background: _Console.BackgroundColor = self.background     
       
  def __exit__(self, t, v, tr):   
    _Console.ForegroundColor = self._tempFG  
    _Console.BackgroundColor = self._tempBG
</pre><p>The other change I made was to build a set of default ConsoleColorMgr instances in the consolecolor module, one for each of the values in <a href="http://msdn.microsoft.com/en-us/library/system.consolecolor.aspx">ConsoleColor</a>. </p><pre class="brush: python">
import sys   
from System import ConsoleColor, Enum     
   
_curmodule = sys.modules[__name__]     

for n in Enum.GetNames(ConsoleColor):     
    setattr(_curmodule, n, ConsoleColorMgr(Enum.Parse(ConsoleColor, n)))
</pre><p>Note that for this set of default ConsoleColorMgr instances, I’m only setting the foreground color. If you want to set the background color, you have to create your own ConsoleColorMgr instances. This allows me to write the following:</p><pre class="brush: python">
from __future__ import with_statement     
import consolecolor    

with consolecolor.Red:     
    print "Open the pod bay doors, HAL"    
with consolecolor.ConsoleColorMgr(ConsoleColor.Black, ConsoleColor.Red):  
    print "I'm sorry Dave, I'm afraid I can't do that."
</pre><p>If you want it, I’ve put consolecolor.py up <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/consolecolor.py">on my skydrive</a> or it’s available as part of my <a href="http://github.com/devhawk/devhawk_ipy/tree/master">devhawk_ipy project</a> on GitHub. </p><p><strong>Update</strong> - <a href="http://bermingham.blogspot.com">Christopher Bermingham</a> pointed out that my sample snippet at the end doesn’t work unless you add “from <a href="http://docs.python.org/library/__future__.html">__future__</a> import with_statement” to the top of your python file. I updated my code snippet to include this. Thanks Christopher!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1231</wp:post_id>
		<wp:post_date>2009-03-19 16:43:51</wp:post_date>
		<wp:post_date_gmt>2009-03-19 16:43:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-consolecolormgr</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[30e6352e-6825-4364-905c-aac5b56964e3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+ConsoleColorMgr]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/19/IronPython+ConsoleColorMgr]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2181</wp:comment_id>
			<wp:comment_author><![CDATA[Christopher Bermingham]]></wp:comment_author>
			<wp:comment_author_email>christopher.bermingham@us.bosch.com</wp:comment_author_email>
			<wp:comment_author_url>http://bermingham.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>209.221.240.193</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 09:07:08</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 16:07:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello-  I am trying to get your consolecolor sample running...  What version of IronPython is that?  I am running the latest release 2.0.0.0 (which is really 2.0.1 file version 2.0.20209.00).  I believe the CPython 2.5 'with' statement doesn't seem to be recognized.

>>> with consolecolor.Red:
  File "<stdin>", line 1
    with consolecolor.Red

         ^
SyntaxError: unexpected token 'consolecolor']]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2182</wp:comment_id>
			<wp:comment_author><![CDATA[Christopher Bermingham]]></wp:comment_author>
			<wp:comment_author_email>christopher.bermingham@us.bosch.com</wp:comment_author_email>
			<wp:comment_author_url>http://bermingham.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>209.221.240.193</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 12:26:33</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 19:26:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Me again-
I found it in an article that it looks like you have bookmarked :)
from __future__ import with_statement

http://langexplr.blogspot.com/2009/02/writing-xml-with-ironpython-xmlwriter.html

Your sample looks great.  Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2183</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.80</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 13:45:26</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 20:45:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Woops, thanks for pointing out my mistake Christoper. I've updated the code to include the __future__ import.

As for that xmlwriter article, that was the inspiration for this approach!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Colorful Console</title>
		<link>http://devhawk.net/2009/03/19/writing-an-ironpython-debugger-colorful-console/</link>
		<pubDate>Thu, 19 Mar 2009 15:48:43 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://7a543ffb-0771-4124-9d94-08a29bb588ea</guid>
		<description></description>
		<content:encoded><![CDATA[Now that I’ve added the <a href="http://devhawk.net/2009/03/19/Writing+An+IronPython+Debugger+Showing+Source+Code.aspx">current source code line</a> to the console output, I wanted to start using color in order to make it clearer to understand the various pieces of data that gets output. Now, the various event handler messages get output in dark grey while the current line of source is in yellow. Here’s what it looks like on my machine (note, the top line with the green [11] is PowerShell and ipy2 is a PowerShell alias to ipy.exe v2.0.1)

<a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerColorfulConso_D87F/image_4.png"><img style="display: block; float: none; margin-left: auto; margin-right: auto; border-width: 0px;" title="ipydbg on the console" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerColorfulConso_D87F/image_thumb_1.png" border="0" alt="ipydbg on the console" width="684" height="251" /></a>

Writing color to the windows console is a hassle because of the <a href="http://msdn.microsoft.com/en-us/library/system.console.foregroundcolor.aspx">stateful API</a> it uses. The problem is that I always want to return to the default color after I’ve written out a line of colored text. I wish there was an overload of Console.Write and WriteLine that took the foreground and background colors as arguments.

Of course, I could easily implement my own write and writeline methods that took color parameters. However, I was loath to do that as Python’s print statement is so convenient. So instead, I build a console color <a href="http://docs.python.org/reference/datamodel.html#context-managers">context manager</a>. I got the idea from Luis Fallas’ <a href="http://langexplr.blogspot.com/2009/02/writing-xml-with-ironpython-xmlwriter.html">XmlWriter context manager</a>.
<pre class="brush: python">class ConsoleColorMgr(object):  
  def __init__(self, color):  
    self.color = color  

  def __enter__(self):  
    self.temp = Console.ForegroundColor  
    Console.ForegroundColor = self.color  

  def __exit__(self, t, v, tr):  
    Console.ForegroundColor = self.temp  

CCDarkGray = ConsoleColorMgr(ConsoleColor.DarkGray)     
CCGray     = ConsoleColorMgr(ConsoleColor.Gray)     
CCYellow   = ConsoleColorMgr(ConsoleColor.Yellow)

def OnCreateAppDomain(self, sender,e):  
    with CCDarkGray:  
      print "OnCreateAppDomain", e.AppDomain.Name  
    e.AppDomain.Attach()</pre>
Python’s <a href="http://docs.python.org/reference/compound_stmts.html#the-with-statement">with statement</a> is similar to C#’s <a href="http://msdn.microsoft.com/en-us/library/yh598w02.aspx">using statement</a>. However, unlike IDisposable object, Python context managers support both an enter and exit method. This means I don’t have to construct an object in order to get a context (in this case, the console colors) managed. So far, I’ve got three console color context managers defined – Grey, DarkGrey and Yellow. I’m thinking that ConsoleColorMgr is a candidate for my <a href="http://github.com/devhawk/devhawk_ipy/tree/master">assorted module collection</a> at some point.

Now that I can print in color, I wanted to modify my <a href="http://devhawk.net/2009/03/19/Writing+An+IronPython+Debugger+Showing+Source+Code.aspx">line printer</a> to use color. Usually, the current sequence point corresponds to an entire line of python source. But as we see below, sometimes only part of a given line of source text is associated with a given sequence point.

<a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerColorfulConso_D87F/image_6.png"><img style="display: block; float: none; margin-left: auto; margin-right: auto; border-width: 0px;" title="image" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerColorfulConso_D87F/image_thumb_2.png" border="0" alt="image" width="684" height="115" /></a>

The other issue I ran into is that there’s a always a sequence point at the very end of a function. Unlike the break at the start of the function I wrote about in my last post, this one I didn’t want to automatically step over. This is the last breakpoint for a given scope, so I should give the user one last chance to inspect the scope (once I add the ability to do that, at any rate) before we step out of it. However, I wanted a way of showing that we’re about to step out in the source code line view. I decided on writing a series of carets ^^^ to indicate that we’re at the end of a function.

<a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerColorfulConso_D87F/image_8.png"><img style="display: block; float: none; margin-left: auto; margin-right: auto; border-width: 0px;" title="image" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerColorfulConso_D87F/image_thumb_3.png" border="0" alt="image" width="684" height="60" /></a>

As you can see in the dark grey line in the screenshot above, the current sequence point starts and ends at line 4 column 23. Column 23 is beyond the end of line 4, so that’s what I look for in order to draw the three carets. Here’s the final version of _print_source_line:
<pre class="brush: python">def _print_source_line(self, sp, lines):     
  line = lines[sp.start_line-1]     
  with CCGray:     
    Console.Write("%d: " % sp.start_line)     
    Console.Write(line.Substring(0, sp.start_col-1))     
    with CCYellow:     
      if sp.start_col &gt; len(line):     
        Console.Write(" ^^^")     
      else:     
        Console.Write(line.Substring(sp.start_col-1,     
                                     sp.end_col - sp.start_col))     
    Console.WriteLine(line.Substring(sp.end_col-1))</pre>
So colorizing the current line of source code turned out to be a little harder than I had expected. But hey, I got a start of a reusable module out of it. That’s pretty cool. Anyway, the <a href="http://github.com/devhawk/ipydbg/tree/ec6520e32cf3214ade646696a0d52448754daf07">latest bits</a> are, as always, up on GitHub.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1232</wp:post_id>
		<wp:post_date>2009-03-19 15:48:43</wp:post_date>
		<wp:post_date_gmt>2009-03-19 15:48:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-colorful-console</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[7a543ffb-0771-4124-9d94-08a29bb588ea]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Colorful+Console]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/19/Writing+An+IronPython+Debugger+Colorful+Console]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Showing Source Code</title>
		<link>http://devhawk.net/2009/03/19/writing-an-ironpython-debugger-showing-source-code/</link>
		<pubDate>Thu, 19 Mar 2009 14:58:25 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://b77d89ec-e843-428a-824f-2719f11b88ee</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It’s been almost a week since my <a href="http://devhawk.net/2009/03/13/Writing+An+IronPython+Debugger+Debugging+Just+My+Code.aspx">last ipydbg post</a>. I’m not done, I just needed to catch my breath for a few days and get some other work done. Contrary to popular believe, my day job revolves around more than just ipydbg! :)</p><p>Actually, I’ve made ten commit since my last post, but it’s been a mostly minor changes. For example, I was hacking around with breakpoints and restored a bunch of <a href="http://github.com/devhawk/ipydbg/commit/4ca5f2af90b73950f85cadfed7f3ca07cb783bba">commented out code in BreakpointEnumerator</a>. Since I was changing the original C# CorDebug wrapper source, I decided to add a <a href="http://github.com/devhawk/ipydbg/commit/0b50760d522c71be78839d3c38bc9f3e2ee2a168">few helper functions</a> to return metadata for functions and classes as well as cleaning up some C# filenames. On the Python side, I <a href="http://github.com/devhawk/ipydbg/commit/0cc6f38db56f4b6cc35acc75f8a28aae070c615a">added an active_appdomain field</a> to IPyDebugProcess to go along with active_thread. </p><p>Today, I added what started as a fairly minor feature – showing the current line of source code at the start of the input loop. The <a href="http://github.com/devhawk/ipydbg/commit/2e7681966be3aebbcfb7cefd6488d34fc62427cd">initial code</a> for this was cake, simply getting the sequence point for the current location and mapping that to a source file. In order to avoid hitting the file system over and over, I cache source files the first time they are accessed.</p><pre class="brush: python">
def _get_file(self,filename):     
    filename = Path.GetFileName(filename)     
    if not filename in self.source_files:     
      self.source_files[filename] = File.ReadAllLines(filename)     
    return self.source_files[filename]  

def _input(self):     
    offset, sp = self._get_location(self.active_thread.ActiveFrame)     
    lines = self._get_file(sp.doc.URL)     
    print "%d:" % sp.start_line, lines[sp.start_line-1]     
    #input loop ommited for clarity
</pre><p>However, when I did this, I discovered a slight issue. When you step into a Python function, the CLR debugger breaks at the very beginning of the function being stepped into. In C#, the function start is mapped to the opening curly brace of the function. IronPython, on the other hand, doesn’t map the start of the function to anything since there’s a bunch of infrastructure code at the start of every function that has no correlation to the python source. This means _get_location return a null sequence point when I first step into a function and thus I wouldn’t be able to show any source code.</p><p>I could make the argument that start of the function should be mapped to the colon that starts the function block. However, I’m not in a position to make changes to how the shipping version of IronPython emits debug symbols. So instead, I decided to insert an automatic step whenever I step into a function by modifying OnStepComplete:</p><pre class="brush: python">
def OnStepComplete(self, sender,e):     
    offset, sp = self._get_location(e.Thread.ActiveFrame)     
    print "OnStepComplete Reason:", e.StepReason,      
           "Location:", sp if sp != None else "offset %d" % offset     
    if e.StepReason == CorDebugStepReason.STEP_CALL:     
      self._do_step(e.Thread, False)     
    else:     
      self._do_break_event(e)
</pre><p>I have this nagging feeling that a simple step won’t suffice and I’ll need to add logic to ensure that I’m only auto-stepping when the start of the function doesn’t have a matching sequence point. But I have tested this with a few different python scripts and it appears to work fine. If I need something more sophisticated, I can always add it later. BTW, notice I modified the signature of _do_step so that it takes the thread as an argument rather than picking it up as an IPyDebugProcess field.</p><p>As usual, <a href="http://github.com/devhawk/ipydbg/tree/2e7681966be3aebbcfb7cefd6488d34fc62427cd">latest ipydbg</a> (including new compiled version of CorDebug.dll) is available at GitHub.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1233</wp:post_id>
		<wp:post_date>2009-03-19 14:58:25</wp:post_date>
		<wp:post_date_gmt>2009-03-19 14:58:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-showing-source-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[b77d89ec-e843-428a-824f-2719f11b88ee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Showing+Source+Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/19/Writing+An+IronPython+Debugger+Showing+Source+Code]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing an IronPython Debugger: A Little Hack...err...Cleanup</title>
		<link>http://devhawk.net/2009/03/21/writing-an-ironpython-debugger-a-little-hack-err-cleanup/</link>
		<pubDate>Sat, 21 Mar 2009 16:27:18 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://aa1b0968-0c35-4e95-86f7-62b943d3474a</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Yesterday, I pushed out two commits to <a href="http://github.com/devhawk/ipydbg/">ipydbg</a>. <a href="http://github.com/devhawk/ipydbg/commit/41285e5c6a639708b9ae9e4886f2f8f4ae159540">The first</a> was simple, I removed all of the embedded ConsoleColorMgr code in favor of the separate <a href="http://devhawk.net/2009/03/19/IronPython+ConsoleColorMgr.aspx">consolecolor.py module</a> I blogged about Thursday. The <a href="http://github.com/devhawk/ipydbg/commit/b53ac99f95e0018db782abd52efea8e1fa56abd8">second commit</a>…well, let’s just say it’s not quite so simple.</p><p>Last weekend, I was experimenting with breakpoints when I discovered that the <a href="http://github.com/devhawk/ipydbg/blob/5858695ff85ed4740ad06466d4f54394e7f00f9b/CorDebug/CorDebug/BreakpointEnumerator.cs#L53">MoveNext method</a> of BreakpointEnumerator was throwing a NotImplementedException. Up to that point, I hadn’t modified any of the MDbg C# source code except to merge the <a href="http://devhawk.net/2009/02/27/Writing+An+IronPython+Debugger+MDbg+101.aspx">corapi and raw assemblies</a> into a single assembly. But since I had to <a href="http://github.com/devhawk/ipydbg/commit/4ca5f2af90b73950f85cadfed7f3ca07cb783bba">fix BreakpointEnumerator</a>, I figured I should make some improvements to the C# code as well. For example, I <a href="http://github.com/devhawk/ipydbg/commit/0b50760d522c71be78839d3c38bc9f3e2ee2a168">added helper functions</a> to easily retrieve the metadata for a <a href="http://github.com/devhawk/ipydbg/blob/0b50760d522c71be78839d3c38bc9f3e2ee2a168/CorDebug/CorDebug/Class.cs#L79">class</a> or <a href="http://github.com/devhawk/ipydbg/blob/0b50760d522c71be78839d3c38bc9f3e2ee2a168/CorDebug/CorDebug/Thread.cs#L1102">function</a>. </p><p>In my latest commit, I’ve added a <a href="http://github.com/devhawk/ipydbg/blob/b53ac99f95e0018db782abd52efea8e1fa56abd8/CorDebug/CorDebug/Module.cs#L132">SymbolReader property to CorModule</a>. Previously, I managed the mapping from CorModules to SymbolReaders in my IPyDebugProcess class via the symbol_readers field. However, since mapping CorModules to SymbolReaders is something pretty much any debugger app would have to do, it made more sense to have that be a part of CorModule directly. So now, you can set and retrieve the SymbolReader directly on the module. Furthermore, I moved the logic to retrieve a SymbolReader from the IStream provided in the OnUpdateModuleSymbols event into the CorModule class as well.</p><p>I wouldn’t have bothered to blog this change at all, except that if you look at how the SymbolReader property is implemented under the hood, it’s not what you would expect. Instead of having SymbolReader as an instance variable on CorModule – as you might expect -CorModule has a static dictionary mapping CorModules to SymbolReaders. The instance SymbolReader property simply then access to the underlying static dictionary. </p><pre class="brush: csharp">
//code taken from CorModule class in CorModule.cs 
private static Dictionary&lt;CorModule, ISymbolReader&gt; _symbolsMap =    
                             new Dictionary&lt;CorModule, ISymbolReader&gt;();    

public ISymbolReader SymbolReader     
{    
    get    
    {    
        if (_symbolsMap.ContainsKey(this))    
            return _symbolsMap[this];    
        else    
            return null;    
    }    
    set    
    {    
        _symbolsMap[this] = value;    
    }    
}
</pre><p>Now obviously, this the way you typically implement properties. However, the problem is that there isn’t a 1-to-1 mapping between the underlying debugger COM object instances and the managed objects instances that wrap them. For example, if you look at the <a href="http://github.com/devhawk/ipydbg/blob/b53ac99f95e0018db782abd52efea8e1fa56abd8/CorDebug/CorDebug/Class.cs#L25">CorClass:Module</a> property, it constructs a new managed wrapper for the COM interface it gets back from <a href="http://github.com/devhawk/ipydbg/blob/b53ac99f95e0018db782abd52efea8e1fa56abd8/CorDebug/CorDebug/NativeApi/ICorDebugWrappers.cs#L727">ICorDebugClass.GetModule</a>. That means that I can’t store the symbol reader as an instance field in the managed wrapper since I probably will never see a given managed wrapper module instance ever again.</p><p>All of the debugger API wrapper classes including CorModule inherit from a class named <a href="http://github.com/devhawk/ipydbg/blob/b53ac99f95e0018db782abd52efea8e1fa56abd8/CorDebug/CorDebug/WrapperBase.cs">WrapperBase</a> which overrides Equals and GetHashCode. The overridden implementations defer to the wrapped COM interface, which means that two separate managed wrapper instances of the same COM interface will have the same hash code and will evaluate as equal. The upshot is that object uniqueness is determined by the wrapped COM object rather that the managed object instance itself. </p><p>Using a static dictionary to store a module instance property provides the necessary “it doesn’t matter what managed object instance you use as long as they all wrap the same COM object underneath” semantics. If I create multiple instances CorModule that all wrap the same underlying COM interface pointer, they’ll all share the same SymbolReader instance from the dictionary. </p><p>Yeah, it’s feels kinda hacky, but it works.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1234</wp:post_id>
		<wp:post_date>2009-03-21 16:27:18</wp:post_date>
		<wp:post_date_gmt>2009-03-21 16:27:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-a-little-hack-err-cleanup</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[aa1b0968-0c35-4e95-86f7-62b943d3474a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+A+Little+HackhelliperrhellipCleanup]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/21/Writing+An+IronPython+Debugger+A+Little+HackhelliperrhellipCleanup]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronRuby 0.3</title>
		<link>http://devhawk.net/2009/03/23/ironruby-0-3/</link>
		<pubDate>Mon, 23 Mar 2009 17:42:28 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://9f1f0602-c737-4ae8-8004-c122c433d254</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Last week was <a href="http://live.visitmix.com/">Mix09</a>, Microsoft’s annual conference for web development and design. There were some big announcements – <a href="http://silverlight.net/getstarted/silverlight3/default.aspx">Silverlight 3 Beta</a>, <a href="http://haacked.com/archive/2009/03/18/aspnet-mvc-rtw.aspx">ASP.NET MVC RTM</a>, <a href="http://blogs.msdn.com/ssds/archive/2009/03/10/9469228.aspx">TDS support for SQL Data Services</a>, new drops of <a href="http://blogs.msdn.com/windowsazure/archive/2009/03/18/windows-azure-delivers-new-ctp-capabilities.aspx">Azure</a> and <a href="http://blogs.msdn.com/liveframework/archive/2009/03/11/live-framework-updated.aspx">LiveFX</a> SDKs and I’m sure a bunch of other things that I’ve forgotten. </p><p>Of course, by far the most important thing that shipped at Mix09 was <a href="http://rubyforge.org/frs/download.php/53552/ironruby-0.3.0.zip">IronRuby 0.3</a>. </p><p>Jimmy has <a href="http://feedproxy.google.com/~r/jimmy-thinking/~3/ygbSDcv9_AU/ironruby-03-released.html">the details</a> on the new release and John Lam <a href="sessions.visitmix.com/MIX09/T22F">did a talk at Mix</a> on dynamic languages in Silverlight. I haven’t seen an announcement, but it also looks like there’s a new version of <a href="http://github.com/jschementi/agdlr/">AgDLR</a> - aka the <a href="http://sdlsdk.codeplex.com/">Silverlight Dynamic Languages SDK</a> – as well.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1235</wp:post_id>
		<wp:post_date>2009-03-23 10:42:28</wp:post_date>
		<wp:post_date_gmt>2009-03-23 17:42:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironruby-0-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[9f1f0602-c737-4ae8-8004-c122c433d254]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronRuby+03]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/23/IronRuby+03]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>AgDLR 0.5</title>
		<link>http://devhawk.net/2009/03/24/agdlr-0-5/</link>
		<pubDate>Wed, 25 Mar 2009 06:25:42 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://cbfe07b7-55ff-497a-9edb-154fd819e1ed</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://github.com/jschementi/agdlr"><img style="display: inline; margin-left: 0px; margin-right: 0px; border: 0px;" title="agdlr-400" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/AgDLR0.5_1433D/agdlr-400_3.png" border="0" alt="agdlr-400" width="240" height="98" align="right" /></a> I <a href="http://devhawk.net/2009/03/23/IronRuby+03.aspx">mentioned yesterday</a> that it looked like a new release of <a href="http://github.com/jschementi/agdlr">AgDLR</a> was eminent and sure enough <a href="http://sdlsdk.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25120">here it is</a>. There are some really cool new features including Silverlight 3 Transparent Platform Extension support, In-Browser REPL and In-Browser testing of Silverlight apps. As with IronRuby 0.3, Jimmy <a href="http://feedproxy.google.com/~r/jimmy-thinking/~3/MB3l79dtHsM/silverlight-dynamic-languages-sdk-05.html">has the a summary</a> of the new AgDLR release.

One feature of the new release I did want to highlight was <a href="http://github.com/jschementi/agdlr/blob/8a5693bb19d08f09b509d61d14733e0a7411b593/src/Chiron/XapHttpHandler.cs">XapHttpHandler</a> because I’m the one who wrote it! :)

The Silverlight versions of IronPython and IronRuby ship with a tool called <a href="http://www.codeplex.com/sdlsdk/Wiki/View.aspx?title=Chiron&amp;referringTitle=Getting%20Started">Chiron</a> that provides a REPL-esque experience for building dynamic language Silverlight apps. John Lam had <a href="http://www.iunknown.com/2008/03/dynamic-silverl.html">a good write-up on Chiron</a> when we first released it last year, but basically the idea is that Chiron is a local web server that will auto-generate a <a href="http://blogs.msdn.com/katriend/archive/2008/03/16/silverlight-2-structure-of-the-new-xap-file-silverlight-packaged-application.aspx">Silverlight XAP</a> from a directory of Python and/or Ruby files on demand. For example, if your HTML page requests a Silverlight app named app.xap, Chiron automatically creates the app.xap file from the files in the app directory. This lets you simply edit your Python and/or Ruby files directly then refresh your browser to get the new version without needing an explicit build step.

The problem is that, unlike IIS and the ASP.NET Development Server, Chiron doesn’t integrate with ASP.NET. So it’s fine for building Silverlight apps that stand alone or talk to 3rd party services. But if you want to build a Silverlight app that talks back to it’s ASP.NET host, you’re out of luck. That’s where XapHttpHandler comes in. XapHttpHandler does the same exact on-demand XAP packaging for dynamic language Silverlight applications that Chiron does, but it’s implemented as an <a href="http://msdn.microsoft.com/en-us/library/system.web.ihttphandler.aspx">IHttpHandler</a> so it plugs into the standard ASP.NET pipeline. All you have to do is put the Chiron.exe in your web application’s bin directory and <a href="http://github.com/jschementi/agdlr/blob/63a5ea3cf94068b87273531b5c96d84d8de983d2/utilities/chiron-http-handler/ChironHttpHandler.SampleSite/web.config#L86">add XapHttpHandler to your web.config</a> like so:
<pre class="brush:xml">&lt;configuration&gt;
  &lt;!--remaining web.config content ommitted for clarity--&gt;
  &lt;system.web&gt;
    &lt;httpHandlers&gt;
      &lt;add verb="*" path="*.xap" validate="false" 
           type="Chiron.XapHttpHandler,Chiron"/&gt;
    &lt;/httpHandlers&gt;
  &lt;system.web&gt;
&lt;/configuration&gt;</pre>
The new AgDLR drop includes <a href="http://github.com/jschementi/agdlr/tree/63a5ea3cf94068b87273531b5c96d84d8de983d2/utilities/chiron-http-handler/ChironHttpHandler.SampleSite">a sample website</a> that shows XapHttpHandler in action.

Quick note of caution: by design, XapHttpHandler does not cache the XAP file - it’s generated anew on every request. So I would highly recommend <span style="text-decoration: underline;">against</span> using XapHttpHandler on a production web server. You’re much better off using Chiron to build a physical XAP file that you then deploy to your production web server.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1236</wp:post_id>
		<wp:post_date>2009-03-24 23:25:42</wp:post_date>
		<wp:post_date_gmt>2009-03-25 06:25:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>agdlr-0-5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[cbfe07b7-55ff-497a-9edb-154fd819e1ed]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[AgDLR+05]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/25/AgDLR+05]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2184</wp:comment_id>
			<wp:comment_author><![CDATA[Chris Cavanagh]]></wp:comment_author>
			<wp:comment_author_email>blog@chriscavanagh.com</wp:comment_author_email>
			<wp:comment_author_url>http://chriscavanagh.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>65.166.200.179</wp:comment_author_IP>
			<wp:comment_date>2009-03-25 10:42:06</wp:comment_date>
			<wp:comment_date_gmt>2009-03-25 17:42:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Harry - A few questions :) ...

1) Is Chiron restricted to IronRuby/Python or is it extensible somehow? (saw it in DLR sources but ignored so far)
2) When the XapHttpHandler references it, is it forced to go out of process?  Is that the only way to build Silverlight assemblies from within a .NET process, or are there alternatives? (separate appdomain maybe).
3) Related to (2), what kind of performance overhead is there?  Caching or not, I'm curious about any out-of-process hit...

For some projects I'm working on, I've been kicking around the idea of dynamic server-compiled DLR assemblies (but using custom stuff instead of IronRuby/Python).  It'd be interesting to know what options I have :o)

Any suggestions / ideas appreciated!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2185</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.80</wp:comment_author_IP>
			<wp:comment_date>2009-03-25 13:34:18</wp:comment_date>
			<wp:comment_date_gmt>2009-03-25 20:34:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Chris:

1. Chrion is extensible in that you can add dynamic languages and change the default AppManifest.xaml file that gets generated. Check out Chiron.exe.config for more information.

2. No, when you use XapHttpHandler you're loading Chiron as a library - yes, even though Chiron's an EXE. It's kinda wierd, but the only difference between a managed DLL and EXE is the inclusion of an entrypoint in the EXE. 

3. Given that it's only recommended for use in your dev environment, I haven't done any perf testing on it at all. If you needed something faster, you could always take the source code and make your own improvements.

Good luck with your project. I'd love to hear more about it when you get a chance. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Getting Local Variables</title>
		<link>http://devhawk.net/2009/03/25/writing-an-ironpython-debugger-getting-local-variables/</link>
		<pubDate>Wed, 25 Mar 2009 16:27:51 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://c693512a-3698-478f-a95e-20d1be919b67</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I just pushed out a new drop of ipydbg that includes the first cut of support for showing local variables. Getting the value for a local variable is actually pretty simple. The CorFrame object (which hangs off active_thread) includes a method to <a href="http://github.com/devhawk/ipydbg/blob/442527b0aed3ac2f7ecf6ab8f5f7e93ad03090f2/CorDebug/CorDebug/Thread.cs#L448">get a local variable by index</a> as well getting a <a href="http://github.com/devhawk/ipydbg/blob/442527b0aed3ac2f7ecf6ab8f5f7e93ad03090f2/CorDebug/CorDebug/Thread.cs#L475">count of all local variables</a>. The problem with these functions is that they don’t provide the name of the variable. For that, you’ve got to look in debug symbols. </p><p>From a CorFrame, you can retrieve the associated CorFunction. Since I added <a href="http://devhawk.net/2009/03/21/Writing+An+IronPython+Debugger+A+Little+HackhelliperrhellipCleanup.aspx">symbol reader support to CorModule</a>, I <a href="http://github.com/devhawk/ipydbg/commit/fc6dd0684f6b299db2eabcfe1803cab6231ea93f#diff-2">added support for directly retrieving</a> the ISymbolMethod for a CorFunction. From the method symbols, I can get the <a href="http://github.com/devhawk/ipydbg/blob/442527b0aed3ac2f7ecf6ab8f5f7e93ad03090f2/CorDebug/CorSymbolStore/symmethod.cs#L167">root lexical scope</a> of the method. And from the symbol scope, I can <a href="http://github.com/devhawk/ipydbg/blob/442527b0aed3ac2f7ecf6ab8f5f7e93ad03090f2/CorDebug/CorSymbolStore/SymScope.cs#L156">get the locals</a>. Scopes can be nested, so to get all the locals for a given function, you need to iterate thru all the <a href="http://github.com/devhawk/ipydbg/blob/442527b0aed3ac2f7ecf6ab8f5f7e93ad03090f2/CorDebug/CorSymbolStore/SymScope.cs#L119">child scopes</a> as well.</p><p>So here’s my get_locals function:</p><pre class="brush: python">
def get_locals(frame, scope=None, offset=None, show_hidden=False):  
    #if the scope is unspecified, try and get it from the frame 
    if scope == None:  
        symmethod = frame.Function.GetSymbolMethod()  
        if symmethod != None:  
            scope = symmethod.RootScope  
        #if scope still not available, yield the local variables 
        #from the frame, with auto-gen'ed names (local_1, etc) 
        else:  
          for i in range(frame.GetLocalVariablesCount()):  
            yield "local_%d" % i, frame.GetLocalVariable(i)  
          return  

    #if we have a scope, get the locals from the scope  
    #and their values from the frame 
    for lv in scope.GetLocals():  
        #always skip $site locals - they are cached callsites and  
        #not relevant to the ironpython developer 
        if lv.Name == "$site": continue  
        if not lv.Name.startswith("$") or show_hidden:  
          v = frame.GetLocalVariable(lv.AddressField1)  
          yield lv.Name, v  

    if offset == None: offset = frame.GetIP()[0]  

    #recusively call get_locals for all the child scopes 
    for s in scope.GetChildren():  
      if s.StartOffset &lt;= offset and s.EndOffset &gt;= offset:  
        for ret in get_locals(frame, s, offset, show_hidden):  
          yield ret
</pre><p>The function is designed to automatically retrieve the scope and offset, if they’re available. That way, I can simply call get_locals with the frame argument and it does the right thing. For example, if you don’t pass in a symbol scope explicitly get_locals will attempt to retrieve the debug symbols. If debug symbols aren’t available, iterates over the locals in the frame and yields each with a fake name (local_0, local_1, etc). If the debug symbols are available, then it iterates over the locals in the scope, then calls itself for each of the child scopes (skipping child scopes who’s offset range doesn’t overlap with the current offset).</p><p>The other feature of get_locals is deciding which locals to include. As you might expect, IronPython emits some local variables that are for internal runtime use. These variables get prefixed with a dollar sign. The dollar sign is not a legal identifier character in C# or Python, but IL has no problem with it. If you pass in False for show_hidden (or use the default value), then get_locals skips over any local variables who’s name starts with the dollar sign.</p><p>Even if you pass in True for show_hidden, get_locals still skips over any variable named “$site”. $site variables are <a href="http://msdn.microsoft.com/en-us/magazine/cc163344.aspx#S7">dynamic call site caches</a>, a DLR feature that are used to efficiently dispatch dynamic calls by caching the results of previous invocations. Martin Maly’s blog <a href="http://blogs.msdn.com/mmaly/archive/2008/04/22/dlr-caches.aspx">has more details</a> on these caches. As they are part of method dispatch, I never want to show them to the ipydbg user, so they get skipped regardless of the value of show_hidden.</p><p>Now that I can get the local variables for a given frame, we need to convert those variables to something you can print on the screen. That turns out to be more complicated that you might expect, so it’ll have to wait for the next post (which may be a while, given that <a href="http://devhawk.net/2009/03/11/IronPython+At+PyCon.aspx">PyCon</a> is this weekend). In the meantime, you can get the <a href="http://github.com/devhawk/ipydbg/tree/442527b0aed3ac2f7ecf6ab8f5f7e93ad03090f2">latest version of ipydbg</a> from GitHub.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1237</wp:post_id>
		<wp:post_date>2009-03-25 16:27:51</wp:post_date>
		<wp:post_date_gmt>2009-03-25 16:27:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-getting-local-variables</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[c693512a-3698-478f-a95e-20d1be919b67]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Getting+Local+Variables]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/25/Writing+An+IronPython+Debugger+Getting+Local+Variables]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2186</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Shaw]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2009-04-11 23:39:13</wp:comment_date>
			<wp:comment_date_gmt>2009-04-12 06:39:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Re: "Getting the value for a local variable is actually pretty simple."

I'm glad SOMEONE finds this stuff simple  8D

I'm even more glad I didn't try learning how to do this a month ago, before you wrote this post!

Thanks again,
Steve]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython 2.6 Alpha 1</title>
		<link>http://devhawk.net/2009/03/27/ironpython-2-6-alpha-1/</link>
		<pubDate>Fri, 27 Mar 2009 10:20:57 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://fa874be2-1db6-4672-9b70-1198bb8d8ddd</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Just in type for <a href="http://us.pycon.org/2009/about/">PyCon</a>, we just shipped the <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=22982">first alpha of IronPython 2.6</a>. As you can guess from the version number, the main feature of this version of IronPython will be the <a href="http://docs.python.org/whatsnew/2.6.html">new features introduced in Python 2.6</a>. As you can see, we’ve synced version numbers between IronPython and Python. No more explaining which version of IPy goes with which version of Python.</p><p>In addition to the start of 2.6 support, the other big feature of IronPython 2.6 is something called Adaptive Compilation. IronPython’s performance <a href="http://ironpython.codeplex.com/Wiki/View.aspx?title=IP201VsCPy25Perf&amp;referringTitle=IronPython%20Performance">is pretty good</a> compared to CPython. We’re about 28% faster than CPython (IPy 2.0.1 vs. CPy 2.5) on PyStone and about 10% faster on PyBench <em>if you exclude the TryRaiseExcept test</em>. [1] However, our startup time is not very good. These two facts are related: it takes a long time on startup to compile to Python code to IL (and then JITted from IL to native code), but once that’s done the code runs really fast. However, if you’re only going to execute a function a few times, it typically isn’t worth the overhead to compile the function to IL. The Adaptive Compilation feature is an <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/48484#706048">interpreter</a> for DLR trees. The first few times you run a given Python function, it gets interpreted. At some point, after you’ve called the function enough times, IronPython 2.6 decides to take the hit and compile the function. If you want to go back to the old “always compile to IL” model, you can pass –O on the command line.</p><p>This is our first alpha of 2.6, and some things are kinda broken. In particular, there was a change to collections.py that breaks much of the Python Standard Library under IronPython. Dave <a href="http://knowbody.livejournal.com/13271.html">has the details</a> and the workaround. Rest assured, this will get fixed before we release. Dino is hard at work making <a href="http://docs.python.org/library/sys.html#sys._getframe">_getframe</a> work for depths greater than zero. Because it will have some perf impact, it won’t be enabled by default – you’ll have to pass a command-line parameter to enable it. But if you have to opt-in to _getframe support for depth &gt; 0, it makes sense to opt-into _getframe support entirely and do away with the current _getframe(0) only support. What’s nice about this approach is that it will work with collections.py regardless if you opt-in to _getframe or not.</p><p>As stated in the release notes, the release cycle on 2.6 will be much shorter than 2.0. There was only seven months between 1.0 and 1.1, and we’re shooting for a slightly longer timeframe for 2.6. Certainly not like the twenty months that passed between 1.1 and 2.0. So please start trying it out as soon as you can and give us your feedback.</p><hr /><p>[1] IPy is <em>over 4000% slower</em> than CPy on TryRaiseExcept, 58,234 ms vs. 1,286ms. This one test represents 44% of our overall test run time and causes IPy to run PyBench 57% slower than CPy instead of 10% faster. Python has a different philosophy on exceptions than CLR does. Several Python exceptions like <a href="http://docs.python.org/library/exceptions.html#exceptions.GeneratorExit">GeneratorExit</a> and <a href="http://docs.python.org/library/exceptions.html#exceptions.StopIteration">StopIteration</a> are explicitly documented as “not considered an error”. This is a very different approach to <a href="http://blogs.msdn.com/ricom/archive/2003/12/19/44697.aspx">CLR’s approach</a>. At some point, we’re going to have to look at improving exception performance, but it’s not really a priority for the 2.6 release.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1238</wp:post_id>
		<wp:post_date>2009-03-27 10:20:57</wp:post_date>
		<wp:post_date_gmt>2009-03-27 10:20:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-2-6-alpha-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[fa874be2-1db6-4672-9b70-1198bb8d8ddd]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+26+Alpha+1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/27/IronPython+26+Alpha+1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DevHawk on CodeCast</title>
		<link>http://devhawk.net/2009/03/31/devhawk-on-codecast/</link>
		<pubDate>Tue, 31 Mar 2009 11:36:27 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d4a7ad46-c8e7-44f1-9de0-85ba5c867850</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://mashupx.com/blog/">Ken Levy</a> used to work around the corner from my office, <a href="http://blogs.msdn.com/klevy/archive/2008/07/11/moving-on-to-something-new-but-staying-close.aspx">back in his days</a> on the <a href="http://blogs.msdn.com/vsxteam">VSX team</a>. These days, he’s hosting the <a href="http://www.code-magazine.com/codecast/">CodeCast</a> (among other things) and he dropped my my office a while back to <a href="http://www.code-magazine.com/codecast/index.aspx?messageid=84d9aac0-e390-4177-9941-1dcab6aaa441">chat about IronPython</a> for his podcast. </p><p><a href="http://www.code-magazine.com/codecast/index.aspx?messageid=84d9aac0-e390-4177-9941-1dcab6aaa441">Check it out</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1239</wp:post_id>
		<wp:post_date>2009-03-31 11:36:27</wp:post_date>
		<wp:post_date_gmt>2009-03-31 11:36:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devhawk-on-codecast</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d4a7ad46-c8e7-44f1-9de0-85ba5c867850]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[DevHawk+On+CodeCast]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/31/DevHawk+On+CodeCast]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Displaying Values</title>
		<link>http://devhawk.net/2009/03/31/writing-an-ironpython-debugger-displaying-values/</link>
		<pubDate>Tue, 31 Mar 2009 09:35:16 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d0ef8942-3312-4d91-bd1e-63c80de51433</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Now that I can <a href="http://devhawk.net/2009/03/25/Writing+An+IronPython+Debugger+Getting+Local+Variables.aspx">get the local variables</a> for a given frame, I need to display them in the console. Eventually, I’d like to provide the ability to update the local variables as well, but you gotta crawl before you can run. Luckily, the debugger API is consistent about using same COM interfaces – wrapped by the managed <a href="http://github.com/devhawk/ipydbg/blob/b53ac99f95e0018db782abd52efea8e1fa56abd8/CorDebug/CorDebug/Value.cs#L17">CorValue</a> class – to represent all data values, including local variables, function arguments and object fields. So the work I do now to display CorValues in the console will be reusable in other contexts down the road.</p><p>While the debugger API is consistent about how it represents values in the target process, the API it uses is very complicated. The primary COM interface for accessing values is <a href="http://msdn.microsoft.com/en-us/library/ms232466.aspx">ICorDebugValue</a>, but it has <em>eight</em> siblings: <a href="http://msdn.microsoft.com/en-us/library/ms230256.aspx">ICorDebugReferenceValue</a>, <a href="http://msdn.microsoft.com/en-us/library/ms231264.aspx">ICorDebugHandleValue</a>, <a href="http://msdn.microsoft.com/en-us/library/ms232482.aspx">ICorDebugStringValue</a>, <a href="http://msdn.microsoft.com/en-us/library/ms231878.aspx">ICorDebugObjectValue</a>, <a href="http://msdn.microsoft.com/en-us/library/ms232458.aspx">ICorDebugGenericValue</a>, <a href="http://msdn.microsoft.com/en-us/library/ms230800.aspx">ICorDebugBoxValue</a>, <a href="http://msdn.microsoft.com/en-us/library/ms232916.aspx">ICorDebugArrayValue</a>, <a href="http://msdn.microsoft.com/en-us/library/ms230290.aspx">ICorDebugHeapValue</a>. All those COM interfaces are represented in managed code by CorValue and it’s subclasses. </p><p>Furthermore, confusingly ICorDebugValues have both a <a href="http://github.com/devhawk/ipydbg/blob/9dd12dadb79469ceac57b84b8adb1b0b531337c4/CorDebug/CorDebug/Value.cs#L26">Type</a> and an <a href="http://github.com/devhawk/ipydbg/blob/9dd12dadb79469ceac57b84b8adb1b0b531337c4/CorDebug/CorDebug/Value.cs#L37">ExactType</a>. ExactType is what .NET developers typically think of as the type, aka the CLR type. Well, the <a href="http://msdn.microsoft.com/en-us/library/ms231926.aspx">debugger API’s representation</a> of the CLR type at any rate. You can retrieve the value’s metadata as a <a href="http://msdn.microsoft.com/library/system.type.aspx">System.Type</a> compatible object via value.ExactType.Class.GetTypeInfo().CorValue’s Type property, on the other hand, represents the object’s primitive or <a href="http://github.com/devhawk/ipydbg/blob/9dd12dadb79469ceac57b84b8adb1b0b531337c4/CorDebug/CorDebug/NativeApi/ICorDebugWrappers.cs#L161">element type</a>. For example, instances of .NET classes have an element Type of ELEMENT_TYPE_CLASS. There are a collection of primitive types (boolean, char, ints of various signage and size, floats of various size) as well as types you wouldn’t call primitive but that the runtime has specific knowledge of (string, array and value types - aka structs in C# terminology).</p><p>If you’re confused by all that, don’t worry so am I. Honestly, I’ve re-written this code several times, each time understanding the API just a bit better. Whatever the *right* way to use the interfaces, I’m sure I don’t know it. For my first cut at this, I essentially ported MDbg’s high level CorValue API – aka MDbgValue::InternalGetValue if you’re looking at the MDbg source code – over to Python. Along the way, I’ve improved on that code as I’ll describe below. </p><p>A given CorValue may be a primitive value like an int or it may be a reference to or a boxed version of some other CorValue object. So in order to print the CorValue, you have to go thru a series of attempts to dereference and unbox until you get to the “real” underlying CorValue object. From there, converting the value to a string I can print depends on the value’s element type. For primitive types like ints and floats, you can call <a href="http://github.com/devhawk/ipydbg/blob/b53ac99f95e0018db782abd52efea8e1fa56abd8/CorDebug/CorDebug/Value.cs#L105">CastToGenericValue</a> to get a <a href="http://github.com/devhawk/ipydbg/blob/b53ac99f95e0018db782abd52efea8e1fa56abd8/CorDebug/CorDebug/Value.cs#L320">CorGenericValue</a> “view” of the same CorValue object [1]. A CorGenericValue can read and write the raw bytes from memory in the target process of the value. The <a href="http://github.com/devhawk/ipydbg/blob/b53ac99f95e0018db782abd52efea8e1fa56abd8/CorDebug/CorDebug/Value.cs#L473">GetValue</a> method reads the data from target process then does an unsafe cast to appropriate managed type. For example, an ELEMENT_TYPE_R4 CorValue gets cast into a <a href="http://msdn.microsoft.com/library/system.single.aspx">System.Single</a>. For CorValue strings, I call <a href="http://github.com/devhawk/ipydbg/blob/b53ac99f95e0018db782abd52efea8e1fa56abd8/CorDebug/CorDebug/Value.cs#L95">CastToStringValue</a> and then access the <a href="http://github.com/devhawk/ipydbg/blob/b53ac99f95e0018db782abd52efea8e1fa56abd8/CorDebug/CorDebug/Value.cs#L244">String property</a>. For classes, value types and objects, there’s no simple or standard approach to retrieving the data, so for now I return the result of calling <a href="http://github.com/devhawk/ipydbg/blob/b53ac99f95e0018db782abd52efea8e1fa56abd8/CorDebug/CorDebug/Value.cs#L100">CastToObjectValue</a>. Eventually, I’ll want to provide a mechanism to read the specific fields of a class or value type.</p><p>Unfortunately, the mechanism above to read primitive types doesn’t work with IronPython. GetValue needs to know the correct element type in order to do the unsafe cast. For value types (aka any struct other than the basic primitives), GetValue will return a data as a byte array. The problem is that when you box a primitive, the original element types gets overwritten by ELEMENT_TYPE_VALUETYPE. You can’t get the original element type back, even after unboxing. So for boxed primitives, you can only retrieve the data as a raw byte array or as a CorObjectValue, neither of which is very useful.</p><p>Luckily, I was able to work around this. Under the hood, GetValue calls <a href="http://github.com/devhawk/ipydbg/blob/b53ac99f95e0018db782abd52efea8e1fa56abd8/CorDebug/CorDebug/Value.cs#L497">UnsafeGetValueAsType</a> to do the actual work of reading the data from the target process and casting it to the right managed type. UnsafeGetValueAsType It accepts the an element type value as a method parameter. If your know the right element type value, you could call UnsafeGetValueAsType directly if instead of going thru GetValue. While boxing overwrites the original element type value, an unboxed CorValue still has the CLR type metadata available. So I was able to map CLR Types to element types (e.g. System.Single –&gt; ELEMENT_TYPE_R4) in order to retrieve the underlying value of boxed primitive types.</p><pre class="brush: python">
_type_map = { 'System.Boolean': ELEMENT_TYPE_BOOLEAN,    
  'System.SByte'  : ELEMENT_TYPE_I1, 'System.Byte'   : ELEMENT_TYPE_U1,    
  'System.Int16'  : ELEMENT_TYPE_I2, 'System.UInt16' : ELEMENT_TYPE_U2,    
  'System.Int32'  : ELEMENT_TYPE_I4, 'System.UInt32' : ELEMENT_TYPE_U4,    
  'System.IntPtr' : ELEMENT_TYPE_I,  'System.UIntPtr': ELEMENT_TYPE_U,   
  'System.Int64'  : ELEMENT_TYPE_I8, 'System.UInt64' : ELEMENT_TYPE_U8,    
  'System.Single' : ELEMENT_TYPE_R4, 'System.Double' : ELEMENT_TYPE_R8,    
  'System.Char'   : ELEMENT_TYPE_CHAR, }    
      
_generic_element_types = _type_map.values()    

class NullCorValue(object):   
  def __init__(self, typename):   
    self.typename = typename   

def extract_value(value):   
    rv = value.CastToReferenceValue()   
    if rv != None:   
      if rv.IsNull:    
        typename = rv.ExactType.Class.GetTypeInfo().Name   
        return NullCorValue(typename)   
      return extract_value(rv.Dereference())   
    bv = value.CastToBoxValue()   
    if bv != None:   
      return extract_value(bv.GetObject())    

    if value.Type in _generic_element_types:   
      return value.CastToGenericValue().GetValue()   
    elif value.Type == ELEMENT_TYPE_STRING:   
      return value.CastToStringValue().String   
    elif value.Type == ELEMENT_TYPE_VALUETYPE:   
      typename = value.ExactType.Class.GetTypeInfo().Name    
      if typename in _type_map:   
        gv = value.CastToGenericValue()   
        return gv.UnsafeGetValueAsType(_type_map[typename])   
      else:   
        return value.CastToObjectValue()   
    elif value.Type in [ELEMENT_TYPE_CLASS, ELEMENT_TYPE_OBJECT]:   
      return value.CastToObjectValue()   
    else:   
      msg = "CorValue type %s not supported" % str(value.Type)     
      raise (Exception, msg)
</pre><p>It’s kinda ugly code and I’m thinking that at least some of really belongs in the CorValue C# classes rather than in ipydbg. However, I’m not that interested in doing the significant refactoring it would take to make the CorValue API developer-friendly, so I did it here.</p><p>One thing to note that I didn’t cover earlier is the NullCorValue object. For reference values, there’s a IsNull property that may be set. If it is set, I need a mechanism to indicate the null value, but also includes the type information. So I created a custom type that can store the type name to represent null. Again, something that should be a part of the CorValue API.</p><p>Once I have my extracted value, I need to display it in the console. This is much simpler than the extracting the value. As I wrote above, I’m not making any attempt to print a real representation for CorObjectValues. I could look at making a call ToString call to get something useful, but that requires invoking a function in the target process and I haven’t gotten that far with ipydbg yet. So I just print “&lt;…&gt;” if it isn’t a string, primitive or null value.</p><pre class="brush: python">
def display_value(value):     
  if type(value) == str:     
    return (('"%s"' % value), 'System.String')     
  elif type(value) == CorObjectValue:     
    return ("&lt;...&gt;", value.ExactType.Class.GetTypeInfo().FullName)     
  elif type(value) == NullCorValue:     
    return ("&lt;None&gt;", value.typename)     
  else:     
    return (str(value), value.GetType().FullName)
</pre><p>Now all I need is to iterate thru the list of local variables and call extract_value and display_value on each in turn and print the results. I won’t reproduce that code here, but you <a href="http://github.com/devhawk/ipydbg/blob/9dd12dadb79469ceac57b84b8adb1b0b531337c4/ipydbg.py#L325">can see it</a> in the <a href="http://github.com/devhawk/ipydbg/tree/9dd12dadb79469ceac57b84b8adb1b0b531337c4">ipydbg project source on GitHub</a>.</p><p>I’m happy with what I’ve gotten working (it took several days of banging my head against the proverbial wall to get it this far) but there’s still room for improvement. First, I’d like to be able to call ToString to get a class-specific generic representation as I described above. Second, I need a way to display the fields of a CorObejctValue object. It’s just a combination of metadata reading and CorObjectValue::<a href="http://github.com/devhawk/ipydbg/blob/9dd12dadb79469ceac57b84b8adb1b0b531337c4/CorDebug/CorDebug/Value.cs#L292">GetFieldValue</a>, but that code won’t write itself. Finally, there are other Python primitives - like list, dictionary and tuple – that ipydbg should have specific knowledge of and be able to display without requiring the user to drill into the member variables and the like.</p><hr /><p>[1] While the CorValue API does certain things very well, I wish it did a better job abstracting away the existence of the various ICorDebugValue interfaces. Hence the need for all the calls to CastToWhatever().</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1240</wp:post_id>
		<wp:post_date>2009-03-31 09:35:16</wp:post_date>
		<wp:post_date_gmt>2009-03-31 09:35:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-displaying-values</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d0ef8942-3312-4d91-bd1e-63c80de51433]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Displaying+Values]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/31/Writing+An+IronPython+Debugger+Displaying+Values]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2187</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Shaw]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2009-04-11 23:50:43</wp:comment_date>
			<wp:comment_date_gmt>2009-04-12 06:50:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hmm, starting to look like you're having to deal with a lot of complexity by working directly with CorAPI. (I know you decided in your first post to go that route...)

I'm thinking that MdbgEng / MdbgValue might be a lot simpler to use.
Not that I know anything about it yet...

Based on what you've learned by all your poking around, any thoughts on what it might be like to duplicate ipydbg, but building on MdbgEng classes instead of CorAPI?

~Steve]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Command Routing</title>
		<link>http://devhawk.net/2009/04/01/writing-an-ironpython-debugger-command-routing/</link>
		<pubDate>Wed, 01 Apr 2009 14:55:22 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://456c99c2-0438-4403-ab21-ed2f937cacfb</guid>
		<description></description>
		<content:encoded><![CDATA[<p>At this point, ipydbg support seven commands: Continue, Quit, Show Stack Trace, Show Locals, Step Over, Step In, and Step Out. All these commands are invoked by a single keystroke. I’m using <a href="http://msdn.microsoft.com/en-us/library/system.console.readkey.aspx">Console.ReadKey</a> in an attempt to cut down on the number of keystrokes needed for interacting with the debugger. If I only type ‘s’ instead of ‘s &lt;enter&gt;’ to step, I figure I’ll be twice as productive! :)</p><p>If I was writing ipydbg in C#, I could use switch statement to dispatch commands in the _input method based on user keystrokes. However, Python doesn’t have a switch statement so I’ve been using a cascading set of if/elif/else statements instead. When you get up to seven if/elif clauses plus an else clause, the code smell is pretty overwhelming.</p><pre class="brush: python">
# Only has three if/elif clauses,but it's already a little smelly
val = Console.ReadKey()    
if val.Key == 'a':  
  result = 'a'  
elif val.Key == 'b'  
  result = 'b'  
elif val.Key == 'c'  
  result = 'c'  
else:  
  print "unknown key"
</pre><p>Python might not have a switch statement, but it does have first-order functions so you can get the effects of a switch by using a dictionary.</p><pre class="brush: python">
def do_a():     
  return 'a'    
def do_b():     
  return 'b'    
def do_c():     
  return 'c'    
_switch = {'a':do_a, 'b':do_b, 'c':do_c}     

val = Console.ReadKey()     
if val in _switch:     
  result = _switch[val.Key]()     
else:     
  print "unknown key"
</pre><p>I like this approach much better. Individual if/elif blocks are now broken out into separate functions, which smells better than embedding them in one big function. Also, I like that my pseduo-switch statement is completely separate from the how the _switch dictionary is initialized. However, this approach also separates the pseudo-case statement functions from the _switch dictionary as well. That’s not a good thing. You can easily imagine screwing up by adding a new function but forgetting to manually update the _switch dictionary. </p><p>What I need is a way to declaratively associate the switch function with the dictionary lookup key that’s associated with it. Luckily, Python Decorators provides a very clean way to do this.</p><pre class="brush: python">
_switch = {}        

@inputcmd(_switch, 'a')     
def do_a():      
  return 'a'     
@inputcmd(_switch, 'b')     
def do_b():      
  return 'b'     
@inputcmd(_switch, 'c')     
def do_c():      
  return 'c'     

val = Console.ReadKey()      
if val in _switch:  
  result = _switch[val.Key]()  
else:  
  print "unknown key"
</pre><p>I’ve <a href="http://devhawk.net/2008/11/19/IronPython+And+WPF+Part+4+Background+Processing.aspx">blogged about decorators before</a> when I wanted to automatically invoke operations on the right thread in my WPF photo viewing app. The @inputcmd decorator is a bit more complicated than the @BGThread and @UIThread decorators since @inputcmd decorator accepts arguments. Each of the @input command decorators in the code above is the equivalent to this code:</p><pre class="brush: python">
def do_a():       
  return 'a'
</pre><pre class="brush: python">
_tmp = inputcmd(_switch, 'a')     
do_a = _tmp(do_a)
</pre><p></p><p></p><p>As you can see, the inputcmd function returns the decorator that wraps do_a, rather than being the decorator itself. This function that returns a function that returns a function is kinda confusing at first. But this approach allows you to configure the decorator for a specific purpose via the arguments – in this case, specifying which dictionary and which console key this function is associated with.</p><p>Also unlike @BGThread and @UIThread, I don’t actually want to modify the behavior of the methods decorated with @inputcmd. I only want to store a reference to them in the passed in dictionary. So implementing this decorator is very easy:</p><pre class="brush: python">
def inputcmd(cmddict, key):     
    def deco(f):     
        cmddict[key] = f     
        return f  
    return deco
</pre><p>The decorator simply inserts the function into the passed-in dictionary using the passed in key. It then returns the function as is, so it’s not really rebinding the symbol to a new method (technically, it’s rebinding the symbol to the same function it’s currently bound to). If I wanted also wrap the passed in function to provide additional functionality, I could do that with a second locally defined function inside the deco function.</p><p>The <a href="http://github.com/devhawk/ipydbg/tree/9dd12dadb79469ceac57b84b8adb1b0b531337c4">latest version of ipydbg</a> as been refactored to use @inputcmd instead of set of a cascading if/elif statement blocks. Now that that’s done, I can start working on multi-key commands.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1241</wp:post_id>
		<wp:post_date>2009-04-01 14:55:22</wp:post_date>
		<wp:post_date_gmt>2009-04-01 14:55:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-command-routing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[456c99c2-0438-4403-ab21-ed2f937cacfb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Command+Routing]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/01/Writing+An+IronPython+Debugger+Command+Routing]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2188</wp:comment_id>
			<wp:comment_author><![CDATA[Raven]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>218.94.9.35</wp:comment_author_IP>
			<wp:comment_date>2009-04-02 06:00:46</wp:comment_date>
			<wp:comment_date_gmt>2009-04-02 13:00:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What would be the tradeoffs if that _switch were built with lambdas instead of named functions, like this:

_switch = {
  'a': lambda: 'A'
  'b': lambda: 'B'
  'c': lambda: 'C'
}

# I can't get the indents right...whitespace got snipped]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2189</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2009-04-02 15:15:19</wp:comment_date>
			<wp:comment_date_gmt>2009-04-02 22:15:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Lambdas would work just fine, but they are limited to be expressions only. If you can do everything you need in a single expression, using a lambda would be fine. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2190</wp:comment_id>
			<wp:comment_author><![CDATA[Raven]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>121.229.145.64</wp:comment_author_IP>
			<wp:comment_date>2009-04-04 06:53:45</wp:comment_date>
			<wp:comment_date_gmt>2009-04-04 13:53:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oops, I forgot about the expression limitation...was having too much fun with Y combinators in Python :p

Thanks for the answer]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2191</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Shaw]]></wp:comment_author>
			<wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
			<wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
			<wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
			<wp:comment_date>2009-04-12 00:13:41</wp:comment_date>
			<wp:comment_date_gmt>2009-04-12 07:13:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Seeing this use of decorators in IPy was most interesting.

But reading this blog, I found myself thinking "I'll stick to F#". I realize it isn't aimed at the same language design space, but so far I'm willing to do more up-front work to prepare the functionality I want, in exchange for language depth.

I can see that if I took the time to learn IPy, it would be handy for interactive scripting.

Just sharing...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Pygments for Windows Live Writer</title>
		<link>http://devhawk.net/2009/04/05/pygments-for-windows-live-writer/</link>
		<pubDate>Sun, 05 Apr 2009 12:28:51 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://ac85783f-50b0-4b88-9daf-ced4546104f0</guid>
		<description></description>
		<content:encoded><![CDATA[<p>For the past few years, I’ve used the <a href="http://codehtmler.codeplex.com/">CodeHTMLer plugin</a> for Windows Live Writer for the code snippets in my blog. However, recently I discovered the <a href="http://pygments.org/">Pygments</a> Python syntax highlighter package which supports scores more languages than CodeHTMLer does. It also support multiple color schemes and was easily extensible so I could build an HTML formatter that didn’t use &lt;pre&gt; tags (which <a href="http://devhawk.net/2007/12/07/Blogging+F+Code.aspx">I’ve found DasBlog has issues with</a> in the RSS feed, though honestly I’m running three minor releases behind the latest DasBlog release). IronPython supports Pygments just fine – at least, the one IPy bug that Pygments exposes has a simple workaround – so I set about building a Windows Live Writer plugin that uses it.</p><p>If you’re simply interested in the plugin itself, you can <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Pygments%20for%20WL%20Writer/Pygments.WLWriter.msi">get it from my skydrive</a>. The <a href="http://github.com/devhawk/pygments.wlwriter">source is up on GitHub</a>. For now, if you find any bugs, please leave a comment on this post. If there’s enough interest I’ll setup a site somewhere (CodePlex perhaps) where I can track bugs and feature requests.</p><p>Pygments for WL Writer is a <a href="http://msdn.microsoft.com/en-us/library/aa702799.aspx">smart content source</a>. In WL Writer’s terminology, that means when you click inserted text in the editor window, it is treated as an atomic entity which you can then edit by using the Edit Code button in the Pygments for WL Writer sidebar editor. I I often found that I would edit my code multiple times – usually to shorten lines so they’d fit on my blog without wrapping. CodeHTMLer for WL Writer is a standard content source, so it just spews the formatted code as HTML onto the page.</p><p>From an IronPython perspective, there’s some interesting stuff there. I decided to compile the pygments library into a DLL for easier distribution. If you look in the source, there’s a <a href="http://github.com/devhawk/pygments.wlwriter/tree/5684d8e936921e9f79ab3e3f08bd1570e48a8a51/pygments_package">folder</a> for the Pygments source as well as the <a href="http://github.com/devhawk/pygments.wlwriter/tree/5684d8e936921e9f79ab3e3f08bd1570e48a8a51/pygments_package/pygments_dependencies">parts of the standard Python library</a> that Pygments depends on and my <a href="http://github.com/devhawk/pygments.wlwriter/blob/5684d8e936921e9f79ab3e3f08bd1570e48a8a51/pygments_package/devhawk_formatter.py">custom HTML formatter</a>. Those all get compiled <a href="http://github.com/devhawk/pygments.wlwriter/blob/5684d8e936921e9f79ab3e3f08bd1570e48a8a51/pygments_package/build_pygments.py">via a custom script</a> which can be called by the <a href="http://github.com/devhawk/pygments.wlwriter/blob/5684d8e936921e9f79ab3e3f08bd1570e48a8a51/build.bat">build.bat file</a> in the project root. </p><p>Some features I’m thinking about adding:</p><ul><li>An extensibility model so that you can add new languages by dropping new <a href="http://pygments.org/docs/lexerdevelopment/">Pygments lexers</a> into the same folder the plugin is installed to. Pygments supports lots of languages, but not all of them – notably it’s missing Powershell and F#. </li><li>Support for new HTML formatters and color schemes using the same extensibility mechanism described above.</li><li>Support for selecting an HTML formatter.</li><li>Improving the code editor window. Currently, I’m using a standard WinForms multi-line TextBox, but that leaves a lot to be desired. With the Python work I do, I often need to be able to select a bunch of text and change it’s indenting via tab and shift-tab. If anyone has a suggestion for a good WinForms text editing control, <a href="mailto:harry@devhawk.net">let me know</a>.</li><li>Being able to specify the font and size of the Pygmented code.</li><li>Storing user preferences – remembering the most recent syntax and color scheme the user used.</li></ul><p>Feedback, as always is appreciated. I’ll probably write a few posts about the project when I get a chance, so let me know if there’s anything you’re dying to hear about.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1242</wp:post_id>
		<wp:post_date>2009-04-05 12:28:51</wp:post_date>
		<wp:post_date_gmt>2009-04-05 12:28:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pygments-for-windows-live-writer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="windows-live"><![CDATA[Windows Live]]></category>
		<category domain="post_tag" nicename="windows-live-writer"><![CDATA[Windows Live Writer]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[ac85783f-50b0-4b88-9daf-ced4546104f0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Pygments+For+Windows+Live+Writer]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/05/Pygments+For+Windows+Live+Writer]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2192</wp:comment_id>
			<wp:comment_author><![CDATA[Julian Birch]]></wp:comment_author>
			<wp:comment_author_email>julian.birch@colourcoding.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.colourcoding.net/</wp:comment_author_url>
			<wp:comment_author_IP>62.189.114.10</wp:comment_author_IP>
			<wp:comment_date>2009-04-22 08:34:28</wp:comment_date>
			<wp:comment_date_gmt>2009-04-22 15:34:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, maybe I'm doing something stupid, but the install doesn't seem to registered the plug-in.

Looking forward to trying it out.

Julian.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Pygments for WL Writer v1.0.1</title>
		<link>http://devhawk.net/2009/04/06/pygments-for-wl-writer-v1-0-1/</link>
		<pubDate>Mon, 06 Apr 2009 12:57:53 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d0fc7420-bb6d-4721-94a3-70fb3f39f735</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I just replaced the original v1.0.0 Pygments for WL Writer installer with a new and improved v1.0.1. The <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Pygments%20for%20WL%20Writer/Pygments.WLWriter.msi">original URL</a> still works – I archived the old version off with a new name. <a href="http://github.com/devhawk/pygments.wlwriter/tree/v1.0.1">Updated source</a> is available on on GitHub.</p><p>The only change is that I now override <a href="http://msdn.microsoft.com/en-us/library/aa738912.aspx">OnSelectedContentChanged</a> in the sidebar control. That way, if I have multiple blocks of pygmented code in a given post, the sidebar UI updates with the correct language and color scheme of the currently selected code block. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1243</wp:post_id>
		<wp:post_date>2009-04-06 12:57:53</wp:post_date>
		<wp:post_date_gmt>2009-04-06 12:57:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pygments-for-wl-writer-v1-0-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="windows-live"><![CDATA[Windows Live]]></category>
		<category domain="post_tag" nicename="windows-live-writer"><![CDATA[Windows Live Writer]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d0fc7420-bb6d-4721-94a3-70fb3f39f735]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Pygments+For+WL+Writer+V101]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/06/Pygments+For+WL+Writer+V101]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Getting Arguments</title>
		<link>http://devhawk.net/2009/04/06/writing-an-ironpython-debugger-getting-arguments/</link>
		<pubDate>Mon, 06 Apr 2009 09:46:01 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://635ad93b-7f23-4c66-9226-f7449f8229d6</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It’s a small update, but I added support for displaying method arguments along side <a href="http://devhawk.net/2009/03/31/Writing+An+IronPython+Debugger+Displaying+Values.aspx">the local variables</a>. As I mentioned in that post, breaking out the CorValue extraction and display code into a shared function was a good idea – adding support for getting arguments was trivial since I could reuse that code.</p><p>Because there’s no hierarchy of scopes to deal with and the names are in the metadata instead of debug symbols, getting arguments is much easier than getting local variables. </p><pre class="brush: python">
def get_arguments(frame): 
    mi = frame.GetMethodInfo() 
    for pi in mi.GetParameters(): 
      if pi.Position == 0: continue 
      arg = frame.GetArgument(pi.Position - 1) 
      yield pi.Name, arg
</pre><p>You’ll notice that I’m yielding the arguments as a tuple of the name and value, the same as get_locals yields. I did refactor <a href="http://github.com/devhawk/ipydbg/blob/4495bbcd48e9593dd3a148d0dafb82646cf091c0/ipydbg.py#L146">get_locals</a> a bit – there’s no longer an argument to skip hidden variables anymore (though get_locals still <a href="http://devhawk.net/2009/03/25/Writing+An+IronPython+Debugger+Getting+Local+Variables.aspx">skips dynamic call sites caches</a> as it did before). Now, it’s up to the the caller of get_arguments and get_locals to filter hidden variables as they see fit. </p><p>Because get_locals and get_arguments yield the same types, I was able to factor the code to print a value and loop through the collection of values into separate local functions.</p><pre class="brush: python">
@inputcmd(_inputcmds, ConsoleKey.L)  
def _input_locals_cmd(self, keyinfo):  
  def print_value(name, value):  
    display, type_name = display_value(extract_value(value))  
    with CC.Magenta: print "  ", name,   
    print display,  
    with CC.Green: print type_name  
      
  def print_all_values(f, show_hidden):  
      count = 0  
      for name,value in f(self.active_thread.ActiveFrame):  
        if name.startswith("$") and not show_hidden:  
          continue  
        print_value(name, value)  
        count+=1          
      return count  
        
  print "nLocals"  
  show_hidden =  
    (keyinfo.Modifiers &amp; ConsoleModifiers.Alt) == ConsoleModifiers.Alt  
  count = print_all_values(get_locals, show_hidden)  
  count += print_all_values(get_arguments, show_hidden)  

  if count == 0:  
      with CC.Magenta: print "  No Locals Found"
</pre><p>I really like the local functions feature of Python. In C#, you can define an anonymous delegate using the lambda syntax. But for a scenario like this, I like local functions better. However, I do like C#’s support for statement lambdas – Python only supports expression lambdas. So while I like local functions better in this scenario (because I’m using the method more than once) in something like an event handler, I like the statement lambda syntax better. </p><p>As usual, the <a href="http://github.com/devhawk/ipydbg/commit/4495bbcd48e9593dd3a148d0dafb82646cf091c0">latest version of ipydbg</a> is up on GitHub.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1244</wp:post_id>
		<wp:post_date>2009-04-06 09:46:01</wp:post_date>
		<wp:post_date_gmt>2009-04-06 09:46:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-getting-arguments</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[635ad93b-7f23-4c66-9226-f7449f8229d6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Getting+Arguments]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/06/Writing+An+IronPython+Debugger+Getting+Arguments]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing an IronPython Debugger: REPL Console</title>
		<link>http://devhawk.net/2009/04/06/writing-an-ironpython-debugger-repl-console/</link>
		<pubDate>Mon, 06 Apr 2009 12:07:39 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://6f889e12-fbf8-483a-92de-b6776cc7fd30</guid>
		<description></description>
		<content:encoded><![CDATA[<p>While I was <strike>banging my head against a wall</strike> experimenting with understanding how <a href="http://devhawk.net/2009/03/31/Writing+An+IronPython+Debugger+Displaying+Values.aspx">CorValue extraction worked</a>, I found myself wanting to dink around with the debugger objects in a REPL console. One of IronPython’s core strengths is support for “exploratory programming” via the REPL. It turned out bringing a REPL to ipydbg was quite simple.</p><p>Python includes two built-in features that making DIY REPL quite easy: compile and exec (though technically, exec is a statement, not a function). As you might assume from their names, compile converts a string into what Python calls a code object while exec executes a code object in a given scope. Technically, exec can accept a string so I could get by without using compile. However, if you’re compiling a single interactive statement compile can automatically insert a print statement if you’ve passed in a an expression. In other words, if you type in “2+2” on the console it will print “4”, which is the behavior I wanted.</p><p>Here’s what my REPL console code look like. I love that it’s only 20 lines of code.</p><pre class="brush: python">
@inputcmd(_inputcmds, ConsoleKey.R)
def _input_repl_cmd(self, keyinfo):
  with CC.Gray:
    print "nREPL ConsolenPress Ctl-Z to Exit"
    cmd = ""
    _locals = {'self': self}

    while True:
      Console.Write("&gt;&gt;&gt;" if not cmd else "...")
      
      line = Console.ReadLine()
      if line == None:
        break
      
      if line:
        cmd = cmd + line + "n"
      else:
        try:
          if len(cmd) &gt; 0:
            exec compile(cmd, "&lt;input&gt;", "single") in globals(),_locals
        except Exception, ex:
          with CC.Red: print type(ex), ex
        cmd = ""
</pre><p>It’s pretty straightforward. I set up a dictionary to act as the local variable scope for the code that gets executed. I’m just reusing the current global scope, but I want the local scope to start with only the reference to the current IPyDebugProcess instance which is passed into _input_repl_cmd as “self”. All the other local variables like cmd and line won’t be available to the REPL code. Then I drop into a loop where I read lines from the console and execute them.</p><p>In order to support multi-line statements, I build up the cmd variable over multiple line inputs and I don’t execute it until the user inputs an empty line. In the standard Python console, it can recognize single line statements and execute them immediately. Dino showed me how to use the IronPython parser to do the same thing, but I haven’t implemented that in ipydbg yet. To exit the REPL loop, you type Ctl-Z, which returns None (aka null) from ReadLine instead of the empty string.</p><p>Since I never execute the code more than once, I have my exec and compile statements together on a single line. Compile takes the string to be compiled, the name of the file it came from (I’m using &lt;input&gt; for this) and the kind of code. Passing in “single” for the kind of code adds the auto-expression-print functionality I mentioned above. Then I exec the code object that’s returned in specified scope I’m managing for this instance of the REPL loop. If you exit out of the REPL and re-enter it, you get a fresh new copy of the local scope so any functions or variables you define in the last REPL are gone.</p><p>Runtime execution of code into a given scope is a hallmark of dynamic languages, but I’m still fairly green when it comes to Python so it took me a while to figure this out. Python code executes in a given scope, a combination of global and local variables. When you’re in the ipy.exe REPL, you’re at top level scope anyway, so global and local scope are the same – if you add something to global scope, it shows up in local scope and vis-versa. Inside a function, you’ll have the same global scope, but the local scope will be different and changes to one won’t be reflected in the other. The ipydbg REPL isn’t a function per-se, but it does provide an explicit local scope that gets disposed when you exit the REPL.</p><p>While having a debugger REPL is really convenient for prototyping new ipydbg commands, it’ll really shine once I get function evaluation working. Then I’ll be able to open a REPL console where the commands are executed in the <em>target</em> process instead of the <em>debugger</em> process as they are now. That will be very cool. Until then, the <a href="http://github.com/devhawk/ipydbg/commit/1993f263d31af5442f84d2139d3002a001a64fd8">latest code</a> is – as always – up on GitHub.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1245</wp:post_id>
		<wp:post_date>2009-04-06 12:07:39</wp:post_date>
		<wp:post_date_gmt>2009-04-06 12:07:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-repl-console</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[6f889e12-fbf8-483a-92de-b6776cc7fd30]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+REPL+Console]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/06/Writing+An+IronPython+Debugger+REPL+Console]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2193</wp:comment_id>
			<wp:comment_author><![CDATA[Twitchell]]></wp:comment_author>
			<wp:comment_author_email>hanmamax@Angelfire.com</wp:comment_author_email>
			<wp:comment_author_url>http://nazaraliev.com/</wp:comment_author_url>
			<wp:comment_author_IP>193.227.170.13</wp:comment_author_IP>
			<wp:comment_date>2009-05-20 08:07:35</wp:comment_date>
			<wp:comment_date_gmt>2009-05-20 15:07:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good Day. Reality is that which, when you stop believing in it, doesn't go away. Help me! I find sites on the topic: drug addiction center. I found only this - <a href="http://design.ru-deluxe.ru/" rel="nofollow">photoshop dizain saitov</a>. Adolescent drug treatment provided in a safe, caring environment by medical professionals who specialize in youth drug abuse. This page features content from the farthest reaches of the blogosphere that authors have tagged. Thanks :confused:. Twitchell from Darussalam.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Writing an IronPython Debugger: Breakpoint Management</title>
		<link>http://devhawk.net/2009/04/08/writing-an-ironpython-debugger-breakpoint-management/</link>
		<pubDate>Wed, 08 Apr 2009 14:45:44 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://871d10b6-2dd2-4b8f-9dc8-b5aee43d8983</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://devhawk.net/2009/03/02/Writing+An+IronPython+Debugger+Setting+A+Breakpoint.aspx">Setting a breakpoint</a> was the second feature I implemented in ipydbg. While setting a breakpoint on the first line of the Python file being run is convenient, it was obviously necessary to provide the user a mechanism to create their own breakpoints, as well as enable and disable existing breakpoints.</p><p>First thing I had to do was to refactor the create_breakpoint method. Originally, I was searching thru the symbol documents looking for the one that matched the filename in OnUpdateModuleSymbols. However, since I wanted to specify by new breakpoints via the same filename/line number combination, it made more sense to move symbol document logic into create_breakpoint:</p><pre class="brush: python">
def create_breakpoint(module, filename, linenum):
    reader = module.SymbolReader
    if reader == None:
      return None
    
    # currently, I'm only comparing filenames. This algorithm may need
    # to get more sophisticated to support differntiating files with the 
    # same name in different paths
    filename = Path.GetFileName(filename)
    for doc in reader.GetDocuments():
      if str.Compare(filename, Path.GetFileName(doc.URL), True) == 0:
        linenum = doc.FindClosestLine(linenum)
        method = reader.GetMethodFromDocumentPosition(doc, linenum, 0)
        function = module.GetFunctionFromToken(method.Token.GetToken())
        
        for sp in get_sequence_points(method):
          if sp.doc.URL == doc.URL and sp.start_line == linenum:
            return function.ILCode.CreateBreakpoint(sp.offset)
        
        return function.CreateBreakpoint()
</pre><p>The new version isn’t much different than the old. It loops thru the symbol documents looking for one that matches the filename argument. Then it creates the breakpoint the same way it did before. Eventually, I’m going to need a better algorithm than “only compare filenames”, but it works for now. </p><p>Once I made this change, it was trivial to implement a breakpoint add command. What was harder was deciding on the right user experience for this. I decided that breakpoint management was going to be the first multi-key command in ipydbg. so all the debug commands are prefixed with a “b”. I use the same <a href="http://devhawk.net/2009/04/01/Writing+An+IronPython+Debugger+Command+Routing.aspx">command routing decorator</a> I used for input commands. As you can see, my breakpoint command looks a lot like my top level input method – read a key from the console then dispatch it via a commands dictionary that gets populated by @inputcmd decorators.</p><pre class="brush: python">
@inputcmd(_inputcmds, ConsoleKey.B)
def _input_breakpoint(self, keyinfo):
    keyinfo2 = Console.ReadKey()
    if keyinfo2.Key in IPyDebugProcess._breakpointcmds:
        return IPyDebugProcess._breakpointcmds[keyinfo2.Key](self, keyinfo2)
    else:
        print "nInvalid breakpoint command", str(keyinfo2.Key)
        return False
</pre><p>Currently, there are four breakpoint commands: “a” for add, “l” for list, “e” for enable and “d” for disable. List is by far the simplest.</p><pre class="brush: python">
@inputcmd(_breakpointcmds, ConsoleKey.L)
def _bp_list(self, keyinfo):
  print "nList Breakpoints"   
  for i, bp in enumerate(self.breakpoints): 
    sp = get_location(bp.Function, bp.Offset)
    state = "Active" if bp.IsActive else "Inactive"
    print "  %d. %s:%d %s" % (i+1, sp.doc.URL, sp.start_line, state)
  return False
</pre><p>As you can see, I’m keeping a list of breakpoints in my IPyDebugProcess class. Originally, I used <a href="http://github.com/devhawk/ipydbg/blob/9dd12dadb79469ceac57b84b8adb1b0b531337c4/CorDebug/CorDebug/AppDomain.cs#L52">AppDomain.Breakpoints</a> list, but that only returns enabled breakpoints so I was forced to store my own list. Note also that I’m using the <a href="http://docs.python.org/library/functions.html#enumerate">enumerate function</a>, which returns a tuple of the collection count and item. I do this so I can refer to breakpoints by number when enabling or disabling them:</p><pre class="brush: python">
@inputcmd(_breakpointcmds, ConsoleKey.E)
def _bp_enable(self, keyinfo):
  self._set_bp_status(True)
  
@inputcmd(_breakpointcmds, ConsoleKey.D)
def _bp_disable(self, keyinfo):
  self._set_bp_status(False)

def _set_bp_status(self, activate):
  stat = "Enable" if activate else "Disable"
  try:
    bp_num = int(Console.ReadLine())
    for i, bp in enumerate(self.breakpoints): 
      if i+1 == bp_num:
        bp.Activate(activate)
        print "nBreakpoint %d %sd" % (bp_num, stat)
        return False
    raise Exception, "Breakpoint %d not found" % bp_num
    
  except Exception, msg:
    with CC.Red: print "&amp;s breakpoint Failed %s" % (stat, msg)
</pre><p>Since the code was identical, except for the value passed to bp.Activate, I factored the code into a separate _set_bp_status method. After the user presses ‘b’ and then either ‘e’ or ‘d’, they then type the number of the breakpoint provided by the breakpoint list command. _set_bp_status then simply iterates thru the list until it finds the matching breakpoint and calls Activate. Note that since it’s possible to have 10 or more breakpoints, I’m using ReadLine instead of ReadKey, meaning you have to hit return after you type in the breakpoint number.</p><p>Finally, I need a way to create new breakpoints. With the refactoring of create_breakpoint, this is pretty straightforward</p><pre class="brush: python">
@inputcmd(_breakpointcmds, ConsoleKey.A) 
def _bp_add(self, keyinfo): 
  try: 
    args = Console.ReadLine().Trim().split(':') 
    if len(args) != 2: raise Exception, "Only pass two arguments"  
    linenum = int(args[1]) 
     
    for assm in self.active_appdomain.Assemblies: 
      for mod in assm.Modules: 
          bp = create_breakpoint(mod, args[0], linenum) 
          if bp != None: 
            self.breakpoints.append(bp) 
            bp.Activate(True) 
            Console.WriteLine( "Breakpoint set") 
            return False 
    raise Exception, "Couldn't find %s:%d" % (args[0], linenum)     

  except Exception, msg: 
    with CC.Red: 
      print "Add breakpoint failed", msg
</pre><p>Most of _bp_add is processing the input arguments, looping through the modules and then storing the breakpoint that gets returned. When I set the initial breakpoint inside OnUpdateModuleSymbols, I have the module with updated symbols as an event argument. However, in the more general case we’ve got no way of knowing which module of the current app domain contains the filename in question. So we loop thru all the modules, calling create_breakpoint on each until one returns a non-null value. Of course, “all the modules” will include the IronPython implementation, but assuming you’re running against released bits the call to create_breakpoint will return right away if debug symbols aren’t available.</p><p>As usual, the <a href="http://github.com/devhawk/ipydbg/tree/b0caaf24c515f6153063cefd2bec80481c7917d5">latest version</a> is up on GitHub. This will be the latest update to ipydbg for a little while. I worked on it quite a bit while I was at PyCon and have been busy with other things since I got home. Don’t worry, I’ll come back to it soon enough. As I <a href="http://devhawk.net/2009/04/06/Writing+An+IronPython+Debugger+REPL+Console.aspx">mentioned Monday</a>, I want to get function evaluation working so I can have a REPL console running in the target process instead of the one I’ve got currently running in the debugger process. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1246</wp:post_id>
		<wp:post_date>2009-04-08 14:45:44</wp:post_date>
		<wp:post_date_gmt>2009-04-08 14:45:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-ironpython-debugger-breakpoint-management</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[871d10b6-2dd2-4b8f-9dc8-b5aee43d8983]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Breakpoint+Management]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/08/Writing+An+IronPython+Debugger+Breakpoint+Management]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Joining the Lounge Advertising Network</title>
		<link>http://devhawk.net/2009/04/13/joining-the-lounge-advertising-network/</link>
		<pubDate>Mon, 13 Apr 2009 15:21:03 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://46874371-fd87-47ad-8ed1-7a966918102e</guid>
		<description></description>
		<content:encoded><![CDATA[For those of you who read this blog primarily via my RSS feed, I made a change to my homepage over the weekend. Goodbye adSense, hello <a href="http://theloungenet.com/">The Lounge</a>. <a href="http://theloungenet.com">The Lounge</a> is an ad network run by <a href="http://infozerk.com/averyblog/">James Avery’s</a> company <a href="http://infozerk.com/">InfoZerk</a>. I’ve known James for a while – he included my now-obsolete <a href="http://devhawk.net/2003/07/03/SccSwitch.aspx">SccSwitch tool</a> in his book <a href="http://www.amazon.com/Visual-Studio-Hacks-Tools-Turbocharging/dp/0596008473/">Visual Studio Hacks</a>.

From a financial perspective, I’m not really sure how much of a difference this will make. I guess I’ll see when I get my first check. Given how little I was making with adSense, I’ve got nowhere to go but up. Regardless, I feel much better working with a smaller ad network run by someone I respect and that is focused on the .NET platform.

Thanks for having me in the Lounge ad network, James.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1247</wp:post_id>
		<wp:post_date>2009-04-13 15:21:03</wp:post_date>
		<wp:post_date_gmt>2009-04-13 15:21:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>joining-the-lounge-advertising-network</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="category" nicename="general-geekery"><![CDATA[General Geekery]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[46874371-fd87-47ad-8ed1-7a966918102e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Joining+The+Lounge+Advertising+Network]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/13/Joining+The+Lounge+Advertising+Network]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Issue Tracking for my GitHub Projects</title>
		<link>http://devhawk.net/2009/04/16/issue-tracking-for-my-github-projects/</link>
		<pubDate>Thu, 16 Apr 2009 15:48:17 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://368adb28-b1a9-4b61-a4da-09c70e7dc10e</guid>
		<description></description>
		<content:encoded><![CDATA[<p>FYI, anyone using <a href="http://github.com/devhawk/ipydbg/">ipydbg</a>, <a href="http://github.com/devhawk/devhawk_ipy">devhawk_ipy</a> or <a href="http://github.com/devhawk/pygments.wlwriter">Pygments for WL Writer</a> can now submit issues, bugs and feature requests other the associated GitHub project page. Head to the associated GitHub project page and click the “Issues” tab at the top. There’s a short video of introducing the <a href="http://github.com/blog/411-github-issue-tracker">GitHub Issues</a> feature you can check out.</p><p>BTW, thanks to <a href="http://github.com/defunkt">defunkt</a> @ GitHub for the <a href="http://github.com/blog/405-debugging-ironpython">ipydbg shoutout</a>. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1248</wp:post_id>
		<wp:post_date>2009-04-16 15:48:17</wp:post_date>
		<wp:post_date_gmt>2009-04-16 15:48:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>issue-tracking-for-my-github-projects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[368adb28-b1a9-4b61-a4da-09c70e7dc10e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Issue+Tracking+For+My+GitHub+Projects]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/16/Issue+Tracking+For+My+GitHub+Projects]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introducing __clrtype__ Metaclasses</title>
		<link>http://devhawk.net/2009/04/20/introducing-__clrtype__-metaclasses/</link>
		<pubDate>Mon, 20 Apr 2009 10:17:14 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://22f9ffee-74be-4b8c-8ea6-c95e75508344</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Everyone knows <a href="http://channel9.msdn.com/pdc2008/TL16/">Anders announced at PDC08</a> that <a href="http://code.msdn.microsoft.com/csharpfuture/Release/ProjectReleases.aspx?ReleaseId=1686">C# 4.0</a> will include new features (aka the dynamic keyword + the DLR) that makes it much easier for C# to call into dynamically typed code. What you probably don’t know is that IronPython 2.6 includes a new feature that makes it easier for IronPython code to be called by statically typed code. </p><p>While the vast majority of .NET is available to IronPython, there are certain APIs that just don’t work with dynamic code. In particular, any code that uses Reflection over an object’s CLR type metadata won’t work with IronPython. For example, while <a href="http://devhawk.net/2008/11/18/IronPython+And+WPF+Part+3+Data+Binding.aspx">WPF supports</a><a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.icustomtypedescriptor.aspx">ICustomTypeDescriptor</a>, Silverlight only supports data binding against reflectable properties. Furthermore, any code that uses custom attributes inherently uses Reflection. For example, Darrel Hawley recently blogged a <a href="http://www.darrellhawley.com/2009/03/writing-ironpython-wcf-host.html">WCF host he wrote in IronPython</a>, but he wrote the WCF service in C#. You can’t write WCF services in IronPython because WCF expects service classes <a href="http://msdn.microsoft.com/en-us/library/ms731835.aspx">to be adorned</a> with <a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.servicecontractattribute.aspx">ServiceContract</a> and <a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.operationcontractattribute.aspx">OperationContract</a> attributes (among <em>many</em> others). IronPython users want access to use these APIs. Support for custom attributes is one of the most <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2008-July/007733.html">common requests</a> we get - it’s currently the <a href="http://ironpython.codeplex.com/WorkItem/View.aspx?WorkItemId=20489">5th highest vote getter among open issues</a>. </p><p>In IronPython 2.6, we’re adding the ability to customize the CLR type of Python classes. This means you can add custom attributes, emit properties, whatever you want. For those of you who’ve been dreaming of implementing WCF services or databinding in Silverlight purely in IronPython, then this is the feature for you. </p><p>In a nutshell, IronPython 2.6 extends Python’s <a href="http://docs.python.org/reference/datamodel.html#customizing-class-creation">metaclass</a> feature that lets you to customize the creation of classes. In the metaclass, you can implement an IronPython-specific method __clrtype__ which returns a custom <a href="http://msdn.microsoft.com/library/system.type.aspx">System.Type</a> of your own creation that IronPython will then use as the underlying CLR type of the Python class. Implementing __clrtype__ gives you the chance to implement whatever reflectable metadata you need: constructors, fields, properties, methods, events, custom attributes, nested classes, whatever. </p><p>Over a series of posts, I’ll be demonstrating this new feature and implement some common scenario requests – including Silverlight databinding and WCF services – purely in Python. Quick warning: __clrtype__ uses low level features like Python metaclasses, <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.aspx">Reflection.Emit</a> and <a href="javascript:window.location.href='http://dlr.codeplex.com/Project/Download/FileDownload.aspx?DownloadId=51534';">DLR Binders</a> so these posts will be deeper technically than usual. Don’t worry – this isn’t the API interface we expect everyone to use. Eventually, we want to have an easy to use API that will sit on top of the low-level __clrtype__ hook. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1249</wp:post_id>
		<wp:post_date>2009-04-20 10:17:14</wp:post_date>
		<wp:post_date_gmt>2009-04-20 10:17:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-__clrtype__-metaclasses</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="__clrtype__"><![CDATA[__clrtype__]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[22f9ffee-74be-4b8c-8ea6-c95e75508344]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Introducing+Clrtype+Metaclasses]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/20/Introducing+Clrtype+Metaclasses]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Lounge Survey</title>
		<link>http://devhawk.net/2009/04/20/the-lounge-survey/</link>
		<pubDate>Mon, 20 Apr 2009 10:31:13 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://6f953716-0611-4ddd-b5fc-7895dd21e68a</guid>
		<description></description>
		<content:encoded><![CDATA[I just <a href="http://devhawk.net/2009/04/13/Joining+The+Lounge+Advertising+Network.aspx">joined The Lounge advertising network</a> so I wanted to pass along an opportunity to win a bunch of great technical books.

The Lounge is asking the readers of the blogs in their network to <a href="http://www.surveymonkey.com/s.aspx?sm=Ijt7Q6LlWPxKcq2yflG_2bdg_3d_3d">fill out a survey</a> in order for them to improve how they target their advertising. It’s pretty much what you would expect from an advertising network focused on the .NET development platform: what language(s) do you use, what framework(s), what testing tool(s), etc, etc, etc. Takes like three minutes to fill out at most.

We all know that filling out surveys isn’t what most people consider “exciting” or “fun”. In order to incent you, dear Reader, to take a few minutes of your valuable time to fill out the survey, The Lounge is giving away all forty one of Manning’s “In Action” books, including <a href="http://www.manning.com/foord/">IronPython In Action</a>. Even if you don’t win, you still get 40% discount off any purchase from Manning.

So it’s up to you, a scant few minutes of your time in exchange for a chance to win enough technical books to keep you busy for months.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1250</wp:post_id>
		<wp:post_date>2009-04-20 10:31:13</wp:post_date>
		<wp:post_date_gmt>2009-04-20 10:31:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-lounge-survey</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="category" nicename="general-geekery"><![CDATA[General Geekery]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[6f953716-0611-4ddd-b5fc-7895dd21e68a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[The+Lounge+Survey]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/20/The+Lounge+Survey]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2196</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
			<wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
			<wp:comment_date>2009-04-20 11:39:01</wp:comment_date>
			<wp:comment_date_gmt>2009-04-20 18:39:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'll fill out the survey. It would be slightly ironic if I won the books. :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2197</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2009-04-20 12:19:51</wp:comment_date>
			<wp:comment_date_gmt>2009-04-20 19:19:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It would only be 2.44% ironic (1/41)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>__clrtype__ Metaclasses: IronPython Classes Under the Hood</title>
		<link>http://devhawk.net/2009/04/21/__clrtype__-metaclasses-ironpython-classes-under-the-hood/</link>
		<pubDate>Tue, 21 Apr 2009 10:59:35 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://2a805bcd-c55b-4251-9149-935b06a019ac</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Before we start using <a href="http://devhawk.net/2009/04/20/Introducing+Clrtype+Metaclasses.aspx">__clrtype__ metaclasses</a>, we need to understand a bit about how IronPython maps between CLR types and Python classes. IronPython doesn’t support Reflection based APIs or custom attributes today because IronPython doesn’t emit a custom CLR types for every Python class. Instead, it typically shares a single CLR type across many Python classes. For example, all three of these Python classes share a single underlying CLR type. </p><p></p><pre class="brush: python">
class shop(object):
  pass 

class cheese_shop(shop):
  def have_cheese(self, cheese_type):
    return False

class argument_clinic(object):
  def is_right_room(self, room=12):
    return "I've told you once"

import clr
print clr.GetClrType(shop).FullName
print clr.GetClrType(cheese_shop).FullName
print clr.GetClrType(argument_clinic).FullName
</pre><p></p><p>Even though cheese_shop inherits from shop and argument_clinic inherits from object, all three classes share the same underlying CLR type. On my machine, running <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=22982">IronPython 2.6 Alpha 1</a>, that type is named “IronPython.NewTypes.System.Object_1$1”. </p><p>IronPython can share the CLR type across multiple Python classes because that CLR type has no code specific to a given Python class. CLR types are immutable – once you build a CLR type, you can’t do things like add new methods, remove existing method or change the inheritance hierarchy. But all those things are legal to do in Python. Here, I’m creating an instance of the cheese_shop class, but then changing that instance to be an argument_clinic instance instead. </p><pre class="brush: text">
&gt;&gt;&gt; cs = cheese_shop()

&gt;&gt;&gt; cs.have_cheese("Venezuelan Beaver Cheese") 
False
&gt;&gt;&gt; cs.is_right_room(12) 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'cheese_shop' object has no attribute 'is_right_room'

&gt;&gt;&gt; # Change the object's class at runtime
&gt;&gt;&gt; cs.__class__ = argument_clinic # don't try this in C#!

&gt;&gt;&gt; cs.have_cheese("Venezuelan Beaver Cheese") 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'argument_clinic' object has no attribute 'have_cheese'
&gt;&gt;&gt; cs.is_right_room(12) 
"I've told you once"
</pre><p>When you call a method on a Python object, the name is resolved by walking a series of dictionaries. First, the dictionary of the object itself is searched for the method name. Assuming the name isn’t in the object dictionary, Python then looks in the __class__ dictionary. If it’s not there, Python recursively looks through the base classes stored in the __bases__ tuple until it finds the method or the name fails to resolve. If we re-assign __class__ at run time, we change the dictionary Python uses to resolve method names.</p><p>There are cases where IronPython generates a new underlying CLR type. For example, if you build a Python class that inherits from a CLR type, then IronPython will have to generate a new underlying CLR type that inherits from the CLR type in order to remain compatible. IronPython automatically overrides all the virtual methods of the base type, implementing the same dynamic method dispatch that I described above. This lets you pass the IronPython class wherever the base CLR type is expected. </p><p>The ability to swap Python classes at runtime depends on having the same underlying CLR type. If the underlying CLR type doesn’t match, then assigning a new value to the __class__ field of an object will fail. This applies both to IronPython classes that inherit from CLR types as well as __clrtype__ metaclass types. In the code I’ll be blogging, I always generate a unique CLR type for every Python class, which means that I can’t dynamically retype the object. Given that the point of __clrtype__ metaclasses is to generate static type information, this hardly seems like a limitation. However, it’s something to be aware of as we explore the __clrtypes__ feature.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1251</wp:post_id>
		<wp:post_date>2009-04-21 10:59:35</wp:post_date>
		<wp:post_date_gmt>2009-04-21 10:59:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>__clrtype__-metaclasses-ironpython-classes-under-the-hood</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="__clrtype__"><![CDATA[__clrtype__]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[2a805bcd-c55b-4251-9149-935b06a019ac]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[clrtype+Metaclasses+IronPython+Classes+Under+The+Hood]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/21/clrtype+Metaclasses+IronPython+Classes+Under+The+Hood]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>__clrtype__ Metaclasses: Customizing the Type Name</title>
		<link>http://devhawk.net/2009/04/22/__clrtype__-metaclasses-customizing-the-type-name/</link>
		<pubDate>Wed, 22 Apr 2009 12:51:03 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://ef846228-b0b7-4130-aac8-54dd631f4e89</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Now that we know a <a href="http://devhawk.net/2009/04/21/clrtype+Metaclasses+IronPython+Classes+Under+The+Hood.aspx">little about how IronPython uses CLR types under the hood</a>, let’s start customizing those types. In a nutshell, __clrtype__ metaclasses are metaclasses that implement a function named __clrtype__ that takes the Python class definition as a parameter and returns a <a href="http://msdn.microsoft.com/library/system.type.aspx">System.Type</a>. IronPython will then use the returned Type  as the underlying CLR type whenever you create an instance of the Python class. </p><p>Technically, you could emit whatever custom CLR Type you want to in the __clrtype__, but typically you’ll want to emit a class that both implements whatever static CLR metadata you need as well as the dynamic binding infrastructure that IronPython expects. The easiest way to do this is to ask IronPython emit a type that handles all the dynamic typing and then inherit from that type to add the custom CLR metadata you want.</p><p>Let’s start simple and hello-worldly by just customizing the name of the generated CLR type that’s associated with the Python class. There’s a fair amount of boilerplate code that is needed even for this simple scenario, and I can build on that as we add features that actually do stuff. If you want to follow along at home, you’ll need <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=22982">IronPython 2.6 Alpha 1</a> (or later) and you can get this code <a href="http://cid-0d9bc809858885a4.skydrive.live.com/browse.aspx/DevHawk%20Content/IronPython%20Stuff/%7C_%7C_clrtype%7C_%7C_">from my SkyDrive</a>. </p><pre class="brush: python">
class ClrTypeMetaclass(type):
  def __clrtype__(cls):
    baseType = super(ClrTypeMetaclass, cls).__clrtype__()
    typename = cls._clrnamespace + "." + cls.__name__ 
                 if hasattr(cls, "_clrnamespace") 
                 else cls.__name__
                 
    typegen = Snippets.Shared.DefineType(typename, baseType, True, False)
    typebld = typegen.TypeBuilder

    for ctor in baseType.GetConstructors(): 
      ctorparams = ctor.GetParameters()
      ctorbld = typebld.DefineConstructor(
                  ctor.Attributes,
                  ctor.CallingConvention,
                  tuple([p.ParameterType for p in ctorparams]))
      ilgen = ctorbld.GetILGenerator()
      ilgen.Emit(OpCodes.Ldarg, 0)
      for index in range(len(ctorparams)):
        ilgen.Emit(OpCodes.Ldarg, index + 1)
      ilgen.Emit(OpCodes.Call, ctor)
      ilgen.Emit(OpCodes.Ret)

    return typebld.CreateType()
</pre><p>Like all Python metaclasses, ClrTypeMetaclass inherits from the <a href="http://docs.python.org/library/stdtypes.html#type-objects">built-in Python type object</a>. If I wanted to <a href="http://docs.python.org/reference/datamodel.html#customizing-class-creation">customize the Python class</a> as well, I could implement __new__ on ClrTypeMetaclass , but I only care about customizing the CLR type so it only implements __clrtype__. If you want to know more about what you can do with Python metaclasses, check out Michael Foord’s <a href="http://www.voidspace.org.uk/python/articles/five-minutes.shtml">Metaclasses in Five Minutes</a>.</p><p>First off, I want to get IronPython to generate the base class that will implement all the typical Pythonic stuff like name resolution and dynamic method dispatch. To do that, I call __clrtype__ on the <a href="http://docs.python.org/library/functions.html#super">supertype</a> of ClrTypeMetaclass – aka the built-in type object. That function returns the System.Type that IronPython would have used as the underlying CLR type for the Python class if we weren’t using __clrtype__ metaclasses.</p><p>Once I have the base class, next I figure out what the name of the generated CLR type will be. This is pretty simple, I just use the name of the Python class. To make this logic a little more interesting, I added support for a custom namespace. If the Python class has a _clrnamespace field, I append that as the custom namespace for the name. I should probably be using a double underscore – i.e. __clrnamespace – but I didn’t want to wrestle with <a href="http://docs.python.org/tutorial/classes.html#private-variables">name mangling</a> in this prototype code.</p><p>Now that I have a name and a base class, I can generate the class I’m going to use. I’m using the DefineType method in <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/49291#760277">Microsoft.Scripting.Generation.Snippets</a> DLR class for three reasons. First, there’s a <a href="http://www.mail-archive.com/users@lists.ironpython.com/msg08702.html">CLR bug</a> that doesn’t let you create a dynamic assembly from a dynamic method. Second, reusing the snippets assembly avoids the overhead of generating a new assembly. Finally, the types in Snippets.Shared get saved to disk if you run with the -X:SaveAssemblies flag, so you can inspect custom CLR type that gets generated. The DefineType function takes four parameters, the type name, the base class, a preserve name flag and a generate debug symbols flag. If you pass false for preserve name, you get a name like foobar$1 instead of just foobar. As for debug symbols, since I don’t have any source code that I’m generating IL from, emitting debug symbols doesn’t make a lot of sense. DefineType returns a <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/49291#760661">TypeGen</a>, but I only need the <a href="http://msdn.microsoft.com/library/system.reflection.emit.typebuilder.aspx">TypeBuilder</a>.</p><p>The last thing I need to do is implement the custom CLR type constructor(s). IronPython CLR types will always have at least one parameter – the <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/49291#384570">PythonType</a> (PythonType == IronPython’s implementation of Python’s built-in type object) that’s used for dynamic name resolution. I don’t want to add any custom functionality in my custom CLR type constructors, so I simply iterate thru the list of constructors on the base class and generate a constructor on the custom CLR type with a matching parameter list and that calls the base class constructor.  </p><p>Generating the IL to emit the constructor and the base class is straightforward, if tedious. I define the constructor with the same attributes, calling convention and parameters as the base class constructor. Then I emit IL to load the local instance (i.e. ldarg 0) and all the parameters onto the stack, call the base constructor and finally return. Once all the constructors are defined, I can create the type and return.</p><p>Using the ClrTypeMetaclass is very easy - simply specify the __metaclass__ field in a class. If you want to customize the namespace, specify the _clrnamespace field as well. Here’s an example:</p><pre class="brush: python">
class Product(object):
  __metaclass__ = ClrTypeMetaclass
  _clrnamespace = "DevHawk.IronPython.ClrTypeSeries"   
  
  def __init__(self, name, cost, quantity):
    self.name = name
    self.cost = cost
    self.quantity = quantity
  
  def calc_total(self):
    return self.cost * self.quantity
</pre><p>You can verify this code has custom CLR metadata by calling GetType on a Product instance and inspecting the result via standard reflection techniques.</p><p></p><pre class="brush: text">
&gt;&gt;&gt; m = Product('Crunchy Frog', 10, 20)
&gt;&gt;&gt; m.GetType().Name
'Product'
&gt;&gt;&gt; m.GetType().FullName
'DevHawk.IronPython.ClrTypeSeries.Product'
</pre><p>Great, so now I have a custom CLR type for my Python class. Unfortunately, at this point it’s pretty useless. Next, I’m going to add instance fields to the CLR type.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1252</wp:post_id>
		<wp:post_date>2009-04-22 12:51:03</wp:post_date>
		<wp:post_date_gmt>2009-04-22 12:51:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>__clrtype__-metaclasses-customizing-the-type-name</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="__clrtype__"><![CDATA[__clrtype__]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[ef846228-b0b7-4130-aac8-54dd631f4e89]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[clrtype+Metaclasses+Customizing+The+Type+Name]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/22/clrtype+Metaclasses+Customizing+The+Type+Name]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>__clrtype__ Metaclasses: Adding CLR Fields</title>
		<link>http://devhawk.net/2009/04/23/__clrtype__-metaclasses-adding-clr-fields/</link>
		<pubDate>Thu, 23 Apr 2009 11:30:07 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://81b7f1ae-7663-4f84-88b7-4dc9de78102f</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Now that we have the <a href="http://devhawk.net/2009/04/22/clrtype+Metaclasses+Customizing+The+Type+Name.aspx">basic __clrtype__ metaclass infrastructure</a> in place, let’s enhance it to add support for CLR fields. To do this, we’re going to need to add two things to our custom CLR type. First, we need to define the fields themselves. Second, we need to make sure that Python code will read and writes to the statically typed fields for the specified names rather than the storing them in the object dictionary as usual. Here’s the updated version of ClrTypeMetaclass (or you can get it <a href="http://cid-0d9bc809858885a4.skydrive.live.com/browse.aspx/DevHawk%20Content/IronPython%20Stuff/%7C_%7C_clrtype%7C_%7C_">from my skydrive</a>)</p><pre class="brush: python">
class ClrTypeMetaclass(type):
  def __clrtype__(cls):
    baseType = super(ClrTypeMetaclass, cls).__clrtype__()
    typename = cls._clrnamespace + "." + cls.__name__ 
                 if hasattr(cls, "_clrnamespace") 
                 else cls.__name__
                 
    typegen = Snippets.Shared.DefineType(typename, baseType, True, False)
    typebld = typegen.TypeBuilder

    for ctor in baseType.GetConstructors(): 
      ctorparams = ctor.GetParameters()
      ctorbld = typebld.DefineConstructor(
                  ctor.Attributes,
                  ctor.CallingConvention,
                  tuple([p.ParameterType for p in ctorparams]))
      ilgen = ctorbld.GetILGenerator()
      ilgen.Emit(OpCodes.Ldarg, 0)
      for index in range(len(ctorparams)):
        ilgen.Emit(OpCodes.Ldarg, index + 1)
      ilgen.Emit(OpCodes.Call, ctor)
      ilgen.Emit(OpCodes.Ret)

    if hasattr(cls, "_clrfields"):
      for fldname in cls._clrfields: 
        typebld.DefineField(
          fldname, 
          clr.GetClrType(cls._clrfields[fldname]), 
          FieldAttributes.Public)
          
    new_type = typebld.CreateType()
    
    if hasattr(cls, "_clrfields"):
      for fldname in cls._clrfields: 
        fldinfo = new_type.GetField(fldname)
        setattr(cls, fldname, ReflectedField(fldinfo))
        
    return new_type
</pre><p>All the base type, type name, type builder and constructor code in the first half of the __clrtype__ method is the same as last time, so we’ll focus on the second half. After emitting the constructor(s), next we iterate thru a dictionary named _clrfields (if it exists in the class) that maps field names to types. For each of these dictionary entries, we emit a public field on the CLR type with the specified name and type. </p><p>The first time I tried this, I simply added the custom field generation code I just described and left it at that. Didn’t work. Python doesn’t look to store information in fields defined by the static type metadata unless explicitly instructed to. That’s why I need to iterate over the declared list of fields a second time after the type has been created. The first time creates the CLR fields, the second time inserts a <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/49291#384587">ReflectedField</a> instance into the class dictionary. ReflectedField is a <a href="http://docs.python.org/reference/datamodel.html#implementing-descriptors">Python descriptor</a> that reads and writes the field value by calling <a href="http://msdn.microsoft.com/library/system.reflection.fieldinfo.getvalue.aspx">GetValue</a> and <a href="http://msdn.microsoft.com/library/system.reflection.fieldinfo.setvalue.aspx">SetValue</a> on the contained <a href="http://msdn.microsoft.com/library/system.reflection.fieldinfo.aspx">FieldInfo object</a>. Python uses the same name resolution for fields as it does for method (In Python, methods are fields that store callable objects) so when IronPython discovers the ReflectedField descriptor in the class instance, it uses that to get or store the value rather than sticking it in the local dictionary.</p><p>Now here’s the new version of the Product class, this time with CLR fields as well as a custom type name:</p><pre class="brush: python">
class Product(object):
  __metaclass__ = ClrTypeMetaclass
  _clrnamespace = "DevHawk.IronPython.ClrTypeSeries"   
  _clrfields = {
    "name":str,
    "cost":float,
    "quantity":int,
    }
    
  def __init__(self, name, cost, quantity):
    self.name = name
    self.cost = cost
    self.quantity = quantity
    
  def calc_total(self):
    return self.cost * self.quantity
</pre><p>As you can see, the only thing that’s changed is the addition of the _clrfields dictionary. But now, we can use reflection to get and set the Product fields, like so:</p><pre class="brush: text">
&gt;&gt;&gt; p = Product("Crunchy Frog", 5.99, 10)
&gt;&gt;&gt; t = p.GetType()
&gt;&gt;&gt; p.name
'Crunchy Frog'
&gt;&gt;&gt; namefi = t.GetField("name")
&gt;&gt;&gt; namefi.GetValue(p)
'Crunchy Frog'
&gt;&gt;&gt; namefi.SetValue(p, "Spring Surprise")
&gt;&gt;&gt; p.name
'Spring Surprise'
</pre><p>This is great progress, but not enough to get us to our first “real” scenario: data binding in Silverlight. Silverlight only supports data binding against public properties, so I’ll need to wrap all these CLR fields in CLR properties in my next post.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1253</wp:post_id>
		<wp:post_date>2009-04-23 11:30:07</wp:post_date>
		<wp:post_date_gmt>2009-04-23 11:30:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>__clrtype__-metaclasses-adding-clr-fields</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="__clrtype__"><![CDATA[__clrtype__]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[81b7f1ae-7663-4f84-88b7-4dc9de78102f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[clrtype+Metaclasses+Adding+CLR+Fields]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/23/clrtype+Metaclasses+Adding+CLR+Fields]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2199</wp:comment_id>
			<wp:comment_author><![CDATA[Mark]]></wp:comment_author>
			<wp:comment_author_email>mwatts42@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>65.199.215.3</wp:comment_author_IP>
			<wp:comment_date>2009-04-23 12:36:10</wp:comment_date>
			<wp:comment_date_gmt>2009-04-23 19:36:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Does the DLR cache the type or will each new instance of the "Product" class that is created, also result in the overhead of the ClrTypeMetaclass being executed?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2200</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.80</wp:comment_author_IP>
			<wp:comment_date>2009-04-24 13:55:42</wp:comment_date>
			<wp:comment_date_gmt>2009-04-24 20:55:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The CLR type only gets created once, when the associated Python class is created. We don't have the overhead of type creation for every Python class instance that gets created.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>__clrtype__ Metaclasses: Adding CLR Properties</title>
		<link>http://devhawk.net/2009/04/24/__clrtype__-metaclasses-adding-clr-properties/</link>
		<pubDate>Fri, 24 Apr 2009 13:47:30 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://5d800133-200d-40ec-a7b1-956d49ffaaac</guid>
		<description></description>
		<content:encoded><![CDATA[<p>When I was first experimenting with __clrtype__, I got to the point of making CLR fields work and then immediately tried to do some data binding with Silverlight. Didn’t work. Turns out Silverlight can only data bind against properties – fields aren’t supported. So now let’s add basic property support to ClrTypeMetaclass. Python has a <a href="http://docs.python.org/library/functions.html#property">rich mechanism</a> for defining properties, but hooking that up requires DLR binders so for now I’m going to generate properties that are simple wrappers around the associated fields.</p><p>There’s enough code involved in defining a property to break it out into it’s own method:</p><p></p><pre class="brush: python">
@staticmethod
  def define_prop(typebld, name, fieldtype, fieldbld):
    attribs = ( MethodAttributes.Public 
              | MethodAttributes.SpecialName 
              | MethodAttributes.HideBySig)
    clrtype = clr.GetClrType(fieldtype)
    
    getbld = typebld.DefineMethod("get_" + name, attribs, clrtype, None)
    getilgen = getbld.GetILGenerator()
    getilgen.Emit(OpCodes.Ldarg_0)
    getilgen.Emit(OpCodes.Ldfld, fieldbld)
    getilgen.Emit(OpCodes.Ret)

    setbld = typebld.DefineMethod("set_" + name, attribs, None, (clrtype,))
    setilgen = setbld.GetILGenerator()
    setilgen.Emit(OpCodes.Ldarg_0)
    setilgen.Emit(OpCodes.Ldarg_1)
    setilgen.Emit(OpCodes.Stfld, fieldbld)
    setilgen.Emit(OpCodes.Ret)

    prpbld = typebld.DefineProperty(name, 
      PropertyAttributes.None, clrtype, None)
    prpbld.SetGetMethod(getbld)
    prpbld.SetSetMethod(setbld)
</pre><p></p><p>You provide define_prop the TypeBuilder for the Type being constructed, the name and type of the property as well as the FieldBuilder that gets returned from the call to DefineField. In the <a href="http://devhawk.net/2009/04/23/clrtype+Metaclasses+Adding+CLR+Fields.aspx">previous installment</a>, I wasn’t bothering to save the FieldBuilder to a variable since I never used it again. Now, I’m stashing it away for the call to define_prop as I’ll show below.</p><p>For each field, we define a get method, a set method and a property. The get function first executes <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.ldarg_0.aspx">ldarg_0</a> to load the current object reference onto the execution stack, then it executes <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.ldfld.aspx">ldfld</a> to load the specified field from the object onto the stack, then it returns. The set function executes <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.ldarg_0.aspx">ldarg_0</a> to load the current object reference and <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.ldarg_1.aspx">ldarg_1</a> to load the value passed as the first argument onto the execution stack, then it executes <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.stfld.aspx">stfld</a> to store the value in the specified field of the object. Once I have the two methods, I call DefineProperty to create the PropertyBuilder and then associate the get and set methods with that property. </p><p>As I said before, Reflection.Emit is straightforward though tedious. Honestly, I didn’t go thru the Emit docs to figure out what the methods should look like. Instead, I wrote a basic wrapper property in C# and looked at the generated IL in Reflector. </p><p>The only other change here is adding the call to define_prop on our first iteration thru list of _clrfields. Since the rest of __clrtype__ is the same, here’s just that code snippet:</p><pre class="brush: python">
if hasattr(cls, "_clrfields"):
      for fldname in cls._clrfields: 
        fieldtype = clr.GetClrType(cls._clrfields[fldname])
        fieldbld = typebld.DefineField(fldname, fieldtype, 
                             FieldAttributes.Public)
        ClrTypeMetaclass.define_prop(typebld, fldname, fieldtype, fieldbld)
</pre><p>As I said above, I simply save off the result of calling DefineField so I can pass it to define_prop. I also save off the field type in a variable since I use it more than once. Avoids the second dictionary lookup and is clearer to understand what the function does.</p><p>Accessing the CLR properties via reflection is pretty straightforward – not very different than reflecting over CLR fields. The only significant difference between them is that CLR properties can be indexable and fields can’t, so you have to pass an index parameter to <a href="http://msdn.microsoft.com/en-us/library/b05d59ty.aspx">GetValue</a> and <a href="http://msdn.microsoft.com/en-us/library/xb5dd1f1.aspx">SetValue</a>. These aren’t indexed properties, so I pass in None for the index parameter.</p><pre class="brush: text">
&gt;&gt;&gt; p = Product("Crunchy Frog", 10, 12)
&gt;&gt;&gt; pi = p.GetType().GetProperty("name")
&gt;&gt;&gt; pi.GetValue(p, None)
'Crunchy Frog'
&gt;&gt;&gt; pi.SetValue(p, "Spring Surprise", None)
&gt;&gt;&gt; pi.GetValue(p, None)
'Spring Surprise'
&gt;&gt;&gt; p.name
'Spring Surprise'
</pre><p></p><p>One quick aside about the CLR type I’m generating here. I’m fairly certain this reflected object wouldn’t pass muster with the C# compiler. I’m defining a field and a property with the same name. It clearly works at the IL level, but I’m not sure what the C# compiler would do if you tried to refer to a CLR type like this. I should probably be prepending an underscore or something on the field name, but then I wonder if the field should also be private. There’s a whole API design discussion down that road, but I’m not quite ready to have that yet so I’m just leaving the fields public and having fields and properties with the same name. Luckily, I’m never generating a CLR type on disk so you can’t build a C# project that refers to it anyway.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1254</wp:post_id>
		<wp:post_date>2009-04-24 13:47:30</wp:post_date>
		<wp:post_date_gmt>2009-04-24 13:47:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>__clrtype__-metaclasses-adding-clr-properties</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="__clrtype__"><![CDATA[__clrtype__]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[5d800133-200d-40ec-a7b1-956d49ffaaac]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[clrtype+Metaclasses+Adding+CLR+Properties]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/24/clrtype+Metaclasses+Adding+CLR+Properties]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>__clrtype__ Metaclasses Demo: Silverlight Databinding</title>
		<link>http://devhawk.net/2009/04/24/__clrtype__-metaclasses-demo-silverlight-databinding/</link>
		<pubDate>Fri, 24 Apr 2009 14:27:46 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://cef44285-b9e7-47c3-84b6-d79833c76875</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’ve gotten to the point where I can actually demo something interesting with __clrtype__ metaclasses: Silverlight Databinding. This is a trivial sample, data binding a list of Products (aka the sample class I’ve been using all week) to a list box. But according to <a href="http://blog.jimmy.schementi.com/">Jimmy</a>, this is something he gets asked about on a regular basis and there’s a <a href="http://www.codeplex.com/sdlsdk/WorkItem/View.aspx?WorkItemId=11844">AgDLR bug open for this</a>. The __clrtype__ feature is specific to IronPython but I bet the IronRuby guys could implement something similar if they wanted to.</p><p>When you install IronPython 2.6 (or 2.0.1 for that matter), it comes with the AgDLR bits in the Silverlight subfolder. This includes Silverlight compatible versions of the DLR and IronPython as well as the Silverlight DLR host and the development web server <a href="http://www.codeplex.com/sdlsdk/Wiki/View.aspx?title=Chiron">Chiron</a> in the Silverlightbin directory. There is also a script in the Silverlightscript directory that will generate a dynamic Silverlight application from a template. I ran “sl.bat python sldemo” in order to build the skeleton project.</p><p>In the generated app.xaml file, I removed the default text box and replaced it with this XAML code that I stole nearly-verbatim from my blog post on <a href="http://devhawk.net/2008/11/18/IronPython+And+WPF+Part+3+Data+Binding.aspx">data binding in WPF with IronPython</a>. The only thing I changed was the binding path for the text block (title became name).</p><pre class="brush: xml">
&lt;ListBox x:Name="listbox1" &gt; 
      &lt;ListBox.ItemTemplate&gt; 
        &lt;DataTemplate&gt; 
          &lt;TextBlock Text="{Binding Path=name}" /&gt; 
        &lt;/DataTemplate&gt; 
      &lt;/ListBox.ItemTemplate&gt; 
    &lt;/ListBox&gt;
</pre><p>Then in the App class, I set the ItemsSource of the ListBox to a hand-built a list of Products.</p><pre class="brush: python">
class App:
  def __init__(self):
    root = Application.Current.LoadRootVisual(UserControl(), "app.xaml")
    root.listbox1.ItemsSource = [
      Product("Crunchy Frog", 10, 12),
      Product("Rams Bladder Cup", 10, 12),
      Product("Cockroach Cluster", 10, 12),
      Product("Anthrax Ripple", 10, 12),
      Product("Spring Suprise", 10, 12)]
</pre><p>And that’s pretty much it. I used Chiron’s /z command to create a Silverlight XAP file, uploaded it to <a href="http://www.microsoft.com/silverlight/resources/streaming.aspx">Silverlight Streaming</a> and embedded it right here in this post. Code is <a href="http://cid-0d9bc809858885a4.skydrive.live.com/browse.aspx/DevHawk%20Content/IronPython%20Stuff/%7C_%7C_clrtype%7C_%7C_">up on my skydrive</a> as well. Uusing Silverlight Streaming for this app was very easy - basically upload the XAP file to their server and embed some iframe code in this post via the source view and that was it. I’m not sure I would use it for a production app, but it rocked for hosting this demo.</p><iframe style="width: 500px; height: 115px" src="http://silverlight.services.live.com/invoke/19454/SL%20Databinding%20Demo/iframe.html" frameborder="0" scrolling="no"></iframe><p>The XAP is a big download for such a trivial app - about 1.3MB. The vast majority of that is the DLR and IronPython assemblies. The XAP would only be 2.9kB if it was just the Python, XAML and manifest files. This kinda stinks, but there’s a new <a href="http://sdlsdk.codeplex.com/Wiki/View.aspx?title=Extensions">transparent platform extensions feature</a> in Silverlight 3 so we can at least break the DLR and IronPython DLLs out into their own separate XAPs. That way they only get downloaded once and cached in the browser instead of being included in every single IronPython Silverlight application anyone creates.</p><p>So that’s one scenario down, one to go. In order to be able to build WCF services in IronPython, I have to add a lot more infrastructure – notably emitting CLR methods that can invoke dynamic methods as well as emitting custom attributes. Invoking dynamic methods means understanding <a href="javascript:window.location.href='http://dlr.codeplex.com/Project/Download/FileDownload.aspx?DownloadId=51534';">DLR binders</a>, so look for more posts on __clrtype__ next week.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1255</wp:post_id>
		<wp:post_date>2009-04-24 14:27:46</wp:post_date>
		<wp:post_date_gmt>2009-04-24 14:27:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>__clrtype__-metaclasses-demo-silverlight-databinding</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
		<category domain="post_tag" nicename="__clrtype__"><![CDATA[__clrtype__]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[cef44285-b9e7-47c3-84b6-d79833c76875]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[clrtype+Metaclasses+Demo+Silverlight+Databinding]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/24/clrtype+Metaclasses+Demo+Silverlight+Databinding]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Updated Powershell Scripts</title>
		<link>http://devhawk.net/2009/04/29/updated-powershell-scripts/</link>
		<pubDate>Wed, 29 Apr 2009 12:25:27 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://2ca56559-8e23-46d4-bd05-3d89e3823545</guid>
		<description></description>
		<content:encoded><![CDATA[For those who are interested, I just uploaded a bunch of changes to the <a href="http://cid-0d9bc809858885a4.skydrive.live.com/browse.aspx/DevHawk%20Content/Powershell">PowerShell Scripts folder</a> on my SkyDrive. Feel free to download them and use them as you need.
<ul>
	<li><a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/find-to-set-alias.ps1">find-to-set-alias</a> – Brad Wilson <a href="http://bradwilson.typepad.com/blog/2008/12/find-to-set-aliasps1.html">enhanced this function significantly</a> and broke it out into it’s own script. I had a small issue with his version where the folder search may only return a single value, so you can’t treat it like collection. My version wraps that command in @(…) so that you can always treat it like a collection.</li>
	<li><a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/find-in-path.ps1">find-in-path</a> – searches all the folders in your path for a given file name (wildcards supported. Very useful for “where is this app actually installed” kind of debugging.</li>
	<li><a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/get-git-branch.ps1">get-git-branch</a> – returns the current git branch of a given folder. Got the idea for this originally from <a href="http://flanders.co.nz/2009/03/19/pimp-your-command-line-for-git/">Ivan Porto Carrero</a>.</li>
	<li><a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/prompt.ps1">prompt</a> – my powershell prompt. Pretty basic, but it now shows current git branch.</li>
	<li><a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/elevate-process.ps1">elevate-process</a> – create a new PowerShell window or run an app as an administrator. I alias this to su on my machine. I recently reworked the “run an app” part of this script, so it will search the current folder and then the path to run the app you specify.</li>
	<li><a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/%7C_profile.ps1">_profile</a> – this is my main profile script, which I share across multiple machines via Mesh. I reworked all my alias setting to use the new find-to-set-alias and moved setting the color of the command window to the top of the script.</li>
</ul>
<strong>Update</strong> – I just updated elevate-process again, adding a special clause to handle .bat and .cmd files. cmd.exe seems to ignore the working directory setting, so if your batch file relies on being run from the folder it’s in, it’ll break with elevate-process. That’s annoying. So if you elevate a batch file, the script runs cmd.exe directly and executes the specified batch file after first changing to the current directory. Ugly, but it seems to work.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1256</wp:post_id>
		<wp:post_date>2009-04-29 12:25:27</wp:post_date>
		<wp:post_date_gmt>2009-04-29 12:25:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>updated-powershell-scripts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[2ca56559-8e23-46d4-bd05-3d89e3823545]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Updated+Powershell+Scripts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/29/Updated+Powershell+Scripts]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2201</wp:comment_id>
			<wp:comment_author><![CDATA[David Mohundro]]></wp:comment_author>
			<wp:comment_author_email>drmohundro@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.mohundro.com/blog/</wp:comment_author_url>
			<wp:comment_author_IP>70.178.86.27</wp:comment_author_IP>
			<wp:comment_date>2009-05-11 15:26:14</wp:comment_date>
			<wp:comment_date_gmt>2009-05-11 22:26:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice - I like the cleanness of your usage of find-to-set-alias in your prompt. Definitely makes working with versioned folders nicer.

I'm curious, is there something your find-in-path does that the get-command cmdlet doesn't do?

Thanks for sharing!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>&quot;The Save&quot;</title>
		<link>http://devhawk.net/2009/05/03/the-save/</link>
		<pubDate>Sun, 03 May 2009 16:52:30 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://01ceb911-9a14-41de-ab22-9e4269fd97eb</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://www.flickr.com/photos/clydeorama/3495284608/"><img style="border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px" title="3495284608_79fb1c569d_o" border="0" alt="3495284608_79fb1c569d_o" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheSave_8ADC/3495284608_79fb1c569d_o_3.jpg" width="644" height="432" /></a></p><p>This is an amazing picture of an amazing save in yesterday’s <a href="http://espn.go.com/nhl/recap?gameId=290502023">Capitals/Penguins 3-2 nail biting victory</a>. (<a href="http://www.youtube.com/watch?v=01Ow7Kxaqb4">video on YouTube</a>) The goalie is Simeon Varlamov who played most of the season at Hershey for the Capital’s minor league team. But he got the call in game two of the Caps opening round series against the Rangers and has posted a 1.5 Goals Against Average since, including two shutouts. </p><p>Photo by <a href="http://www.flickr.com/photos/clydeorama/">Clyde Caplan</a>. Used under a <a href="http://creativecommons.org/licenses/by-nc/2.0/deed.en">Creative Commons license</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1257</wp:post_id>
		<wp:post_date>2009-05-03 09:52:30</wp:post_date>
		<wp:post_date_gmt>2009-05-03 16:52:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-save</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[01ceb911-9a14-41de-ab22-9e4269fd97eb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[ldquoThe+Saverdquo]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/05/03/ldquoThe+Saverdquo]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2202</wp:comment_id>
			<wp:comment_author><![CDATA[David Lawler]]></wp:comment_author>
			<wp:comment_author_email>djlawler@aol.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.155.111.140</wp:comment_author_IP>
			<wp:comment_date>2009-05-05 08:55:16</wp:comment_date>
			<wp:comment_date_gmt>2009-05-05 15:55:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No sports or fun future Ironpython stuff for you!  Get back to work on ipydbg - NOW!  ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2203</wp:comment_id>
			<wp:comment_author><![CDATA[jdn]]></wp:comment_author>
			<wp:comment_author_email>kingcrim@earthlink.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.blogcoward.com</wp:comment_author_url>
			<wp:comment_author_IP>66.92.132.209</wp:comment_author_IP>
			<wp:comment_date>2009-05-05 17:14:16</wp:comment_date>
			<wp:comment_date_gmt>2009-05-06 00:14:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Before the playoffs started, I thought if 'we' (the Pens) met you, we'd have the upper hand because of Huet.

No fair having the second coming of Ken Dryden and/or Patrick Roy.  Hats off to you/him.  Even if I hate you...LOL.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2204</wp:comment_id>
			<wp:comment_author><![CDATA[David Ing]]></wp:comment_author>
			<wp:comment_author_email>david.ing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://david.ing.name</wp:comment_author_url>
			<wp:comment_author_IP>174.7.70.215</wp:comment_author_IP>
			<wp:comment_date>2009-05-05 20:33:37</wp:comment_date>
			<wp:comment_date_gmt>2009-05-06 03:33:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[
Ahem - http://www.youtube.com/watch?v=DvyqkYmJWHg

See you in the final... ;-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2205</wp:comment_id>
			<wp:comment_author><![CDATA[Florida Web Design]]></wp:comment_author>
			<wp:comment_author_email>info@webheadz1.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.webheadz1.com</wp:comment_author_url>
			<wp:comment_author_IP>216.255.247.13</wp:comment_author_IP>
			<wp:comment_date>2009-05-18 13:07:22</wp:comment_date>
			<wp:comment_date_gmt>2009-05-18 20:07:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That is an incredible shot. As an action sports photographer myself, I am impressed. Great job, and great save. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Happy Birthday Riley!</title>
		<link>http://devhawk.net/2009/05/05/happy-birthday-riley/</link>
		<pubDate>Wed, 06 May 2009 03:29:12 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://1c82ad37-d471-4444-b906-0c93c9fbadff</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/HappyBirthdayRiley_11F3F/P4260161.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="P4260161" border="0" alt="P4260161" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/HappyBirthdayRiley_11F3F/P4260161_thumb.jpg" width="244" height="244" /></a>Today is my daughter Rileyanne’s fourth birthday. She was born on 5-5-05 (at 5:25pm no less!). </p><p><a href="http://techiewife.spaces.live.com/">Jules</a> and I were picking out pictures for Riley’s “birthday ribbon” and we came across this one from her birthday party weekend before last. We had it a week early because my mother-in-law had surgery on her foot last week. It was a girls-only princess tea party, so I didn’t get to see her chasing bubbles in person. I loved this picture, but we ended up using one where you could see her face better. Still, I thought it was just too good not to share.</p><p>Happy Birthday big girl!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1258</wp:post_id>
		<wp:post_date>2009-05-05 20:29:12</wp:post_date>
		<wp:post_date_gmt>2009-05-06 03:29:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>happy-birthday-riley</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="family"><![CDATA[Family]]></category>
		<category domain="category" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[1c82ad37-d471-4444-b906-0c93c9fbadff]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Happy+Birthday+Riley]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/05/06/Happy+Birthday+Riley]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2206</wp:comment_id>
			<wp:comment_author><![CDATA[Johnny Alex]]></wp:comment_author>
			<wp:comment_author_email>johnnyalex22@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.forging-company.com/</wp:comment_author_url>
			<wp:comment_author_IP>65.49.14.11</wp:comment_author_IP>
			<wp:comment_date>2009-05-10 20:44:52</wp:comment_date>
			<wp:comment_date_gmt>2009-05-11 03:44:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, harry, congratulations. You have a pretty daughter.  Happy birthday to her. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2207</wp:comment_id>
			<wp:comment_author><![CDATA[Baseball Pins]]></wp:comment_author>
			<wp:comment_author_email>pins@direct-tradingpins.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.direct-tradingpins.com</wp:comment_author_url>
			<wp:comment_author_IP>216.255.247.13</wp:comment_author_IP>
			<wp:comment_date>2009-05-18 13:05:35</wp:comment_date>
			<wp:comment_date_gmt>2009-05-18 20:05:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Happy belated Birthday. Nothing nicer to see than a little girl celebrating her birthday and enjoying the simple things in life. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Checkin Comments for IronPython Source</title>
		<link>http://devhawk.net/2009/05/07/checkin-comments-for-ironpython-source/</link>
		<pubDate>Thu, 07 May 2009 11:19:38 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://9d828751-7047-4ba0-96dd-7caba92eb59f</guid>
		<description></description>
		<content:encoded><![CDATA[<p>We’ve been slowly but surely increasing the frequency of IronPython source drops. When I joined the team last April, we we only pushing the source about twice a month (sometimes only once a month). By last July, we were pushing source about once a week. Since mid-January, we’ve pushed out the latest source 131 times, which comes to about once a day on average since the start of the year. Big kudos to <a href="http://knowbody.livejournal.com/">Dave Fugate</a>, who’s primarily responsible for improving the frequency of our source code drops.</p><p>However, while we’ve been good about source code drop frequency, we haven’t been good about transparency. All those source drops have the same less-than-useful checkin comment “Latest IP sources migrated to CodePlex TFS”. If you wanted to know what was changed in a given changeset, you had to do the diff yourself.</p><p>But all that opaque code changes is a thing of the past now. Dave upgraded out source push script so that it emails a list of changes as well as the checkin comments whenever we update the source on CodePlex. For example, check out the <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2009-May/010275.html">source push announcement</a> for our <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/49849">latest source drop</a>.  Now we publish added, deleted and modified sources as well as the comments for any checkins included in the source drop. </p><p>As Dave <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2009-May/010245.html">said on the mailing list</a>, please let us know if you have any feedback on these source update emails. I think they’re awesome (though I did have <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2009-May/010277.html">one small suggestion</a>) but we want to know what you think. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1259</wp:post_id>
		<wp:post_date>2009-05-07 11:19:38</wp:post_date>
		<wp:post_date_gmt>2009-05-07 11:19:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>checkin-comments-for-ironpython-source</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[9d828751-7047-4ba0-96dd-7caba92eb59f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Checkin+Comments+For+IronPython+Source]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/05/07/Checkin+Comments+For+IronPython+Source]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft and Open Source</title>
		<link>http://devhawk.net/2009/05/18/microsoft-and-open-source/</link>
		<pubDate>Mon, 18 May 2009 14:23:28 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://45a06ea2-5414-452e-9e0b-c18ec6519b60</guid>
		<description></description>
		<content:encoded><![CDATA[<div><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/af4c4ff204c4_C655/clip_image001_2.jpg"><img style="display: inline; margin-left: 0px; margin-right: 0px; border-width: 0px;" title="clip_image001" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/af4c4ff204c4_C655/clip_image001_thumb.jpg" border="0" alt="clip_image001" width="240" height="144" align="right" /></a>In a couple of weeks, I‘m participating in an internal “Presentation Idol”competition. It’s a contest of presentation skills against impressive competition (I can’t name names, but rest assured it’s a strong group) being judged by Microsoft executives (again, I can’t name names, but this time it’s because I don’t know who’s judging) in front of what I assume will be a large technical internal Microsoft audience. To top it off, we each only get three minutes and thirty three seconds each to deliver our presentations.</div>
<div>So yeah, no pressure.</div>
<div>The topic we’re all presenting is “What is the one thing we should do to improve Microsoft?” For those who know me, it should come as little surprise that I picked a variant of “more open source” for my presentation. More specifically, I’m planning to present the following:</div>
<ol>
	<li>Any product Microsoft gives away for free should also be Open Source.</li>
	<li>Open Source Microsoft products should accept contributions from the community.</li>
</ol>
<div>I realize that many people consider this separation between “source availability” and “community contributions” completely artificial. Sure, the <a href="http://opensource.org/docs/osd">accepted definition of Open Source</a> only addresses the availability and distribution of source code, but most Open Source advocates consider the ability to collaborate and contribute – what Wikipedia calls “<a href="http://en.wikipedia.org/wiki/Commons-based_peer_production">Commons-based peer production</a>” - a critical aspect of Open Source. For example, with respect to the <a href="http://weblogs.asp.net/scottgu/archive/2009/04/01/asp-net-mvc-1-0.aspx">announcement</a> that ASP.NET MVC would be released under the <a href="http://opensource.org/licenses/ms-pl.html">Ms-PL</a>, Keith Elder <a href="http://twitter.com/keithelder/status/1438253992">tweeted</a>:</div>
<blockquote>
<div>“Giving someone your source code is NOT open source. So although Asp.Net MVC's source code is out there for download, not open source.”</div></blockquote>
<div><a title="DevHawk on DFB" href="http://deepfriedbytes.com/podcast/episode-32-being-dynamic-about-ironpython-with-harry-pierson-ndash-part-2/"><img style="display: inline; margin-left: 0px; margin-right: 0px; border-width: 0px;" title="image" src="http://deepfriedbytes.com/files/media/image/WindowsLiveWriter/Media_8AE9/image_thumb_4.png" border="0" alt="image" width="240" height="98" align="right" /></a>In what now seems like a huge coincidence, Keith and his co-host <a href="http://twitter.com/cwoodruff">Chris “Woody” Woodruff</a> interviewed me later that day for their podcast <a href="http://deepfriedbytes.com/">Deep Fried Bytes</a>. As you might imagine, while we started with <a href="http://deepfriedbytes.com/podcast/episode-31-being-dynamic-about-ironpython-with-harry-pierson-ndash-part-1/">talking about IronPython</a>, we eventually started discussing <a href="http://deepfriedbytes.com/podcast/episode-32-being-dynamic-about-ironpython-with-harry-pierson-ndash-part-2/">open source at Microsoft</a> more generally. It was a great conversation, and we found lots of common ground.</div>
<div>Personally, I think Microsoft is making small steps in the right direction when it comes to Open Source. Not only have some high profile Microsoft projects go Open Source like ASP.NET MVC and <a href="http://codebetter.com/blogs/glenn.block/archive/2008/10/02/mef-going-ms-pl-the-little-engine-that-could.aspx">MEF</a>, but we’ve even started taking baby steps for including external intellectual property. Releasing ASP.NET MVC under Ms-PL is a big deal, but I think <a href="http://weblogs.asp.net/scottgu/archive/2008/09/28/jquery-and-microsoft.aspx">including jQuery “in the box”</a> is a much, <em>much</em> bigger deal. It remains to be seen if it’s a one-time-only deal or if it’s a new trend inside Microsoft.</div>
<div>Obviously, I hope it’s a trend. Going from “include jQuery in ASP.NET” to “accept community contributions in ASP.NET” seems like a relatively achievable goal.</div>
<div>Now, here’s where I need <span style="text-decoration: underline;"><strong>your</strong></span> help.</div>
<div>I can easily fill three and a half minutes talking about Open Source community collaboration. But since my presentation is about taking contributions from the community, I decided to put my money where my mouth is and crowdsource it:</div>
<div><span style="font-size: medium;"><strong>What is the elevator pitch *you* would make for including community contributions in Microsoft Open Source products?</strong></span></div>
<div>Leave me a comment, send me an email, tweet it, whatever – I’ll be keeping an eye out for responses. Please remember that I only have three and a half minutes to present, so keep your ideas short and sweet.</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1260</wp:post_id>
		<wp:post_date>2009-05-18 14:23:28</wp:post_date>
		<wp:post_date_gmt>2009-05-18 14:23:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-and-open-source</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-geekery"><![CDATA[General Geekery]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[Open Source]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[45a06ea2-5414-452e-9e0b-c18ec6519b60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Microsoft+And+Open+Source]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/05/18/Microsoft+And+Open+Source]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2208</wp:comment_id>
			<wp:comment_author><![CDATA[Greg Leonardo]]></wp:comment_author>
			<wp:comment_author_email>gleonardo@laacware.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.devenvy.com/</wp:comment_author_url>
			<wp:comment_author_IP>173.78.10.70</wp:comment_author_IP>
			<wp:comment_date>2009-05-18 15:20:31</wp:comment_date>
			<wp:comment_date_gmt>2009-05-18 22:20:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In the simplest of terms many of the good ideas are overlooked or understated simply because I company is too tied up in maintaining its propriety code and updating it for the community.  I have found the biggest enhancements come from the simplest ideas and from those that don't look at the code or products everyday.  The biggest point behind open source is the ability to contribute and become a part of the process - empower the user empower the change.  Look though-out technologies history and you will see how empowering the user has create vast advancements in technology as a whole.  Most of Microsoft's community have had a say in the "direction" of Microsoft products, now you will just give them the stirring wheel and allow them to fix their own car.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2209</wp:comment_id>
			<wp:comment_author><![CDATA[Greg Leonardo]]></wp:comment_author>
			<wp:comment_author_email>gleonardo@laacware.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.devenvy.com/</wp:comment_author_url>
			<wp:comment_author_IP>173.78.10.70</wp:comment_author_IP>
			<wp:comment_date>2009-05-18 15:24:21</wp:comment_date>
			<wp:comment_date_gmt>2009-05-18 22:24:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In the simplest of terms many of the good ideas are overlooked or understated simply because the company is too tied up in maintaining its propriety code and updating it for the community. I have found the biggest enhancements come from the simplest ideas and from those that don't look at the code or products everyday. The biggest point behind open source is the ability to contribute and become a part of the process - empower the user empower the change. Look thoughout technologies history and you will see how empowering the user has created vast advancements in technology as a whole. Most of Microsoft's community have had a say in the "direction" of Microsoft products, now you will just give them the stirring wheel and allow them to fix their own car.

Sorry the post above had some mistakes that I corrected but did not get posted - sorry for the repost.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2210</wp:comment_id>
			<wp:comment_author><![CDATA[Ruiyi Zhang]]></wp:comment_author>
			<wp:comment_author_email>ruiyizhang@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>158.106.48.10</wp:comment_author_IP>
			<wp:comment_date>2009-05-18 19:52:00</wp:comment_date>
			<wp:comment_date_gmt>2009-05-19 02:52:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You may want to listen to the latest Herding Code episode interviewing DotNetNuke co-founder Joe Brinkman (http://herdingcode.com/?p=183). Even though the main topic is about webforms vs asp.net mvc. Towards the end of the show, he did address his experiences and thoughts on maintaining a large-scale open source project.

To summarize his ideas around the issues of accepting community contributions in large scale open source projects backed by commercial companies:

* Community contributions are generally welcomed, or even begged, when a project is small.
* When project grows bigger, the cost and risk of accepting community contributions become prohibitively high.
* A community contributor usually doesn't have the big picture of the project in mind when he/she contributes his/her patches.

This is really a poor summary (mainly due to my broken English) of the things discussed in the show. So be sure to listen to the original podcast.

To make your presentation more interesting than political rallies, I believe it will do more impact if you could focus the presentation on proposing some constructive resolutions to the many known hurdles a commercial company backed open source project faces in accepting community contributions. After all, the Internet doesn't lack blank arguments of urging Microsoft to be more open.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2211</wp:comment_id>
			<wp:comment_author><![CDATA[stacy]]></wp:comment_author>
			<wp:comment_author_email>stacy@uncall.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.uncall.com</wp:comment_author_url>
			<wp:comment_author_IP>68.25.164.154</wp:comment_author_IP>
			<wp:comment_date>2009-05-18 20:14:05</wp:comment_date>
			<wp:comment_date_gmt>2009-05-19 03:14:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is not a time to be elegant with words. Push it to them VERY hard. Either Microsft stops being an island, or lose developers to open source, probably forever. It's just that simple. The steps they have taken to date may seem like a big deal to Microsoft, but it's no more a bigger-deal than spitting in the ocean. The entire massive growth of the Internet is due to community involvement, not a single company. 

Microsoft has defined open source as its enemy. Everybody feels that. Balmer projects that often. So even though high-profile MVC is released, developers know deep down that there's not one ounce of "corporate" passion behind those bits. Let them know that we know that. Let them know we are looking at open source stacks right now. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2212</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin Gregg]]></wp:comment_author>
			<wp:comment_author_email>kevin@infination.com</wp:comment_author_email>
			<wp:comment_author_url>http://infination.info/contacts</wp:comment_author_url>
			<wp:comment_author_IP>70.157.7.197</wp:comment_author_IP>
			<wp:comment_date>2009-05-19 02:53:32</wp:comment_date>
			<wp:comment_date_gmt>2009-05-19 09:53:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[After 30 years of profit, making (at one point) Bill Gates not only the richest man in America, but also personally owning 40% of the US GDP.  I'd say it's time to give back in a big, big way.  Not to the stockholders.  It's time to go back to grassroots, streamlined, security-minded coding--pure interoperability--where the focus is not on how much profit can be milked out of a proprietary sale of a technology solution, but rather everyone on the same page and working together to solve the issues that IT faces today.  No arguments; a good product will make the developer profit from his hard work.  It's time to take the venom out of the proprietary code and ensure that all pieces of code written work seamlessly on all platforms.  The days of narrow-minded, one-dimensional operating system software should have already been behind us as an IT community. Let's embrace the opportunities we have to collaborate and make software work for our nations, our states, and our cities.  The future has been now for over a decade and a half, and yet another development of a new OS is a tired idea.  Let's improve the ones we have, all work to make our days go by better, and a sense of pride and honor and integrity will increase the morale of the IT community at-large.  

KG
Network Security Research Analyst
Infination Technology Research
kevin@infination.com
662.497.2890
http://infination.info/contacts]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2213</wp:comment_id>
			<wp:comment_author><![CDATA[Anthony Tarlano]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>212.119.9.178</wp:comment_author_IP>
			<wp:comment_date>2009-05-19 08:49:57</wp:comment_date>
			<wp:comment_date_gmt>2009-05-19 15:49:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I recommend reading Pip Coburn's book "The Change Function" 

But the elevator pitch is simple.. present the change function; i.e.

f(perceived crises vs. total perceived pain of adoption)

You should clearly state that by reducing the TPPA (which includes more than cost, such as system requirements, fear of control, etc) by releasing under Ms-PL you are more likely to have more user-oriented adoption. 

And if you can only get one more thing out the door, please put on you slides to release Powershell as Ms-PL for Mono!

Thanks,

Anthony]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython 2.6 CTP for .NET 4.0 Beta 1</title>
		<link>http://devhawk.net/2009/05/20/ironpython-2-6-ctp-for-net-4-0-beta-1/</link>
		<pubDate>Wed, 20 May 2009 11:54:30 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://892c4513-9a42-440c-9971-b28b231f8bcf</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The .NET Framework 4.0 and Visual Studio 2010 Beta 1 is now <a href="http://go.microsoft.com/fwlink/?LinkID=151797">generally available</a> for download. Jason Zander has a very thorough rundown on <a href="http://blogs.msdn.com/jasonz/archive/2009/05/18/announcing-vs2010-net-framework-4-0-beta-1.aspx">some of the new features</a> in this release. Of course, my favorite new features in VS2010 is the new dynamic language support in <a href="http://msdn.microsoft.com/en-us/library/dd264736(VS.100).aspx">C#</a> and <a href="http://msdn.microsoft.com/en-us/library/dd537660(VS.100).aspx">Visual Basic</a>, which let’s you easily call out to IronPython code from those languages. </p><p>For anyone who wants to experiment with interoperating C# or VB with IronPython, we released <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=27320">IronPython 2.6 CTP for .NET 4.0 Beta 1</a> today. There’s also a <a href="http://msdn.microsoft.com/en-us/library/dd867744.aspx">walkthru</a> showing how you can use the standard Python library module <a href="http://docs.python.org/library/random.html">random</a> from both C# and VB. <strike>Note, there’s currently a URL bug in that walkthru – it links to IronPython 2.6 Alpha 1 rather than the .NET 4.0 Beta 1 IronPython CTP. Make sure you pick up the right version of IronPython if you want to try out the walkthru.</strike> Looks like they fixed the redirect in the walkthru.</p><p>FYI, this is a CTP quality release with about the same functionality as IronPython 2.6 Alpha 1.  Essentially, this is the version of IronPython that was in the source tree when the VS team branched for Beta 1. </p><p>If you’ve got any feedback, please drop us a line on the <a href="http://lists.ironpython.com/listinfo.cgi/users-ironpython.com">mailing list</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1261</wp:post_id>
		<wp:post_date>2009-05-20 11:54:30</wp:post_date>
		<wp:post_date_gmt>2009-05-20 11:54:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-2-6-ctp-for-net-4-0-beta-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[892c4513-9a42-440c-9971-b28b231f8bcf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+26+CTP+For+NET+40+Beta+1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/05/20/IronPython+26+CTP+For+NET+40+Beta+1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronPython 2.6 Beta 1</title>
		<link>http://devhawk.net/2009/05/20/ironpython-2-6-beta-1/</link>
		<pubDate>Wed, 20 May 2009 17:30:57 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://6af3ecd9-fef5-4181-9f8f-762b3ecdd575</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In addition to the <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=27320">IronPython CTP for .NET Framework 4.0 Beta 1</a> I <a href="http://devhawk.net/2009/05/20/IronPython+26+CTP+For+NET+40+Beta+1.aspx">blogged about earlier</a>, we also released the <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25126">first beta of IronPython 2.6</a> today. How about that – two IronPython releases in one day! This is our second preview release as we work towards our 2.6 RTM in September. 2.6 Alpha 1 was <a href="http://devhawk.net/2009/03/27/IronPython+26+Alpha+1.aspx">released</a> back in March. </p><p>There are two big new features in this release. The first is our implementation of the <a href="http://docs.python.org/library/ctypes.html">ctypes module</a>. The ctypes module is like P/Invoke for Python. It allows Python code to call into unmanaged DLL functions. Here, for example, I’m calling into the standard <a href="http://msdn.microsoft.com/en-us/library/wc7014hz.aspx">wprintf function</a> from msvcrt.dll</p><pre class="brush: text">
IronPython 2.6 Beta 1 (2.6.0.10) on .NET 2.0.50727.4918
&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; libc = ctypes.cdll.msvcrt
&gt;&gt;&gt; ret = libc.wprintf("%sn", "hello")
hello
</pre><p>Between ctypes and <a href="http://code.google.com/p/ironclad/">Ironclad</a>, I think we’ll eventually be able to load most native Python extensions in IronPython. Woot!</p><p>The other big new feature in this release is a real implementation of <a href="http://docs.python.org/library/sys.html#sys._getframe">sys._getframe</a>. _getframe lets you write code that inspects the Python callstack. Previously, we supported _getframe only with a depth of zero which is to say you could inspect the current frame, but no others. Now, by default we don’t implement _getframe at all unless you pass in –X:Frames or –X:FullFrames on the command line. Removing the version of _getframe that only worked for depth zero fixes <a href="http://knowbody.livejournal.com/13271.html">an issue with collections.py</a> that broke much of the 2.6 standard library in IronPython 2.6 Alpha 1. </p><p></p><p>The difference between Frames and FullFrames is in what is returned by frame.f_locals member. If you’re running with FullFrames, we hoist all local variables into the heap so they can be accessed by our frame walker. If you’re running with Frames, our ability to access locals up the stack is limited. Sometimes they are available - If you called <a href="http://docs.python.org/library/functions.html#locals">locals()</a> in a frame up the stack for example, then f_locals will be available – but usually not. There’s a performance difference between the default (i.e. no Frames), –X:Frames and –X:FullFrames, hence why we provide the user fine grained control over the Frame support. </p><p>Our <a href="http://ironpython.codeplex.com/Wiki/View.aspx?title=IP26B1VsCPy26Perf&amp;referringTitle=Home">performance</a> has gotten better <a href="http://ironpython.codeplex.com/Wiki/View.aspx?title=IP26A1VsCPy26Perf&amp;referringTitle=Home">relative</a> to 2.6 Alpha 1. Our PyStone numbers have improved 80% from Alpha 1, similar to where we were in IronPython 2.0.1. We’ve also been able to cut our startup time about 25% from 2.0.1. We’re still an order of magnitude slower than CPython on startup, but we’re getting better. We’re significantly worse on PyBench than we were in 2.6 Alpha 1, but that’s primarily because there’s now a second exception test. As I <a href="http://devhawk.net/2009/03/27/IronPython+26+Alpha+1.aspx">described back in March</a>, we get killed on the exceptions benchmarks – the two combine to consume nearly 62% of our total run time. Ouch!</p><p>Finally, there are bug fixes. Of particular relevance to readers of this blog are a series of fixes that allow me to continue on with my <a href="http://devhawk.net/CategoryView,category,__clrtype__.aspx">__clrtype__ series</a>. Watch for that soon.</p><p>As I said back when we released Alpha 1, the <a href="http://ironpython.codeplex.com/Wiki/View.aspx?title=2.6%20Release%20Plan">release cycle on 2.6</a> will be much shorter than it was for 2.0. 2.0 had eight alphas, five betas and two release candidates over the course of around twenty months. We expect 2.6 to have one alpha, two betas and a release candidate over eight months. So please start trying <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25126">using the beta</a> as soon as you can so you can give us your feedback and we can fix your bugs!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1262</wp:post_id>
		<wp:post_date>2009-05-20 17:30:57</wp:post_date>
		<wp:post_date_gmt>2009-05-20 17:30:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-2-6-beta-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[6af3ecd9-fef5-4181-9f8f-762b3ecdd575]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+26+Beta+1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/05/21/IronPython+26+Beta+1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Somewhat Scary Birthday</title>
		<link>http://devhawk.net/2009/05/22/a-somewhat-scary-birthday/</link>
		<pubDate>Fri, 22 May 2009 20:23:07 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://9720afea-0387-4ee7-85b6-914d26a40ec7</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Yesterday was my 39th birthday. Among other things I got a <a href="http://www.mayoclinic.com/health/vasovagal-syncope/DS00806">vasovagal syncope</a> (aka I fainted), a trip to the hospital and an MRI. </p><p>Yeah, I’ve had better birthdays. But I’m feeling much better now.</p><p>Since Monday, I’ve been having weird numbness and tingling in my hands, feet and midsection. Ever have your foot fall asleep? You know how it feels when your foot wakes up again? It’s kinda like that. After three days of that, I decided it was time to go see the doctor. My doctor is right by my daughter’s school, so I try and schedule my appointments so I can drop her off and save my wife the trip. But the only appointment they had yesterday was thirty minutes before my daughter’s school starts, so I ended up going alone. That turned out to be a very good thing.</p><p>Diabetes is one of the things that can cause this numbness and tingling, so my wife and I figured that I shouldn’t eat anything in case the doctor wanted to check my blood sugar. Sure enough, they wanted to run a few blood tests. My wife called as they were drawing my blood – she had dropped off our daughter and wanted to know if I wanted her to stop by.  I told her to stop by if she wanted, hung up, and promptly fainted. Luckily, Jules had decided she wanted to stop by so she was there when I came to.</p><p>Apparently, vasovagal syncope is the most common cause of fainting and having your blood drawn is a common trigger. I’ve never had that reaction to having my blood drawn, though I can’t remember ever having my blood drawn while fasting. But I tell you what, I don’t ever want to go thru that again. All I really remember was trying to get my brain to focus, and it wouldn’t. Pretty scary.</p><p>Playing it better safe than sorry, I was sent off to the hospital to spend two hours crammed in the MRI machine to get an scan of my brain and spine done. Also not a pleasant experience, but much better than fainting. There was much more ominous talk like “admitting for observation” and “lumbar puncture”, but apparently the MRI didn’t show anything requiring all that so I was sent home. </p><p>I still have the numbness and tingling, though it’s somewhat better today than yesterday. The good news is that it’s not diabetes or my thyroid or anything like that and they don’t think the fainting was related at all. Since the tingling and numbness is a little better today, I’m thinking it’s something like a pinched nerve. My doctor wants me to go see a specialist, so I’ve got an appointment with a neurologist in a couple of weeks. We’ll see how it feels by then - in the meantime, I’m taking it easy. I even skipped work again today – five day weekend FTW! </p><p>As for my birthday, we did decide to postpone my “<a href="http://twitter.com/JuliannePierson/status/1851811876">FANTASTIC surprise</a>”. Jules had arranged for us to go camping on Orcas island over the weekend. I’m really excited for the trip – it’ll be our first real camping trip outside of the back yard - but I’m not sure if I’ll be up for it this weekend. My parents sent me a bunch of Capitals gear as well as some money for new hockey equipment – I really need a new helmet and elbow pads. My kids both made me awesome cards – Patrick’s new thing is to make pop-up cards. He also made me a paper “cake” crown.</p><p>So even though that whole tingling/vasovagal/hospital/MRI thing was a less than fun way to spend the day, I still ended up having a pretty decent birthday. I’m especially thankful for my awesome wife, who does an amazing job taking care of me when I’m sick – much better than I am able to do for her when she’s sick I’m afraid. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1263</wp:post_id>
		<wp:post_date>2009-05-22 13:23:07</wp:post_date>
		<wp:post_date_gmt>2009-05-22 20:23:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-somewhat-scary-birthday</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="family"><![CDATA[Family]]></category>
		<category domain="post_tag" nicename="health"><![CDATA[Health]]></category>
		<category domain="category" nicename="personal"><![CDATA[Personal]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[9720afea-0387-4ee7-85b6-914d26a40ec7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[A+Somewhat+Scary+Birthday]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/05/22/A+Somewhat+Scary+Birthday]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2214</wp:comment_id>
			<wp:comment_author><![CDATA[Marc Brooks]]></wp:comment_author>
			<wp:comment_author_email>IDisposable@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://musingmarc.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>70.248.133.95</wp:comment_author_IP>
			<wp:comment_date>2009-05-24 23:04:15</wp:comment_date>
			<wp:comment_date_gmt>2009-05-25 06:04:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I had a very similar bout of continuous nerve pain (as you've described it) which was finally handled (not cured) by vastly increasing my liquid intake and taking Gabapentin which is an antidepressant, technically, but works awesomely to kill the tingles.

Good luck, and don't take "we'll see" for an answer... I struggled for 5 years before I got a good doctor.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Strengthening the Microsoft Ecosystem with Source Code</title>
		<link>http://devhawk.net/2009/06/03/strengthening-the-microsoft-ecosystem-with-source-code/</link>
		<pubDate>Wed, 03 Jun 2009 16:17:31 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://7e78d36c-d176-40b2-bdee-da2a49630948</guid>
		<description></description>
		<content:encoded><![CDATA[<div><img style="display: inline; margin-left: 0px; margin-right: 0px;" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/af4c4ff204c4_C655/clip_image001_thumb.jpg" alt="clip_image001" align="right" />Today was the Presentation Idol competition <a href="http://devhawk.net/2009/05/18/Microsoft+And+Open+Source.aspx">I blogged about</a> a couple of weeks ago. Unfortunately, I didn’t win - but believe me when I say I was up against some <em>serious</em> competition. I think I was about in the middle of the pack – better than some but clearly not as good as others.</div>
<div>Since I made a big deal about asking for people ideas on how to present my topic of choice – external contributions to Microsoft Open Source projects – I decided I’d post my deck and my script. Yes, I said script. Usually, I don’t script what I’m going to say word for word like this. But with only three and a half minutes to present, I thought I’d be as precise as possible. You’ll notice some lines near the end are in italics – those are ones I planned on cutting if I was in danger of going over the time limit.</div>
<div>Feedback, as usual, is most welcome.</div>

<hr />

<div><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/StrengtheningourSoftwareEcosystemwithSou_E1A2/Slide1.png"><img style="margin: 0px 5px 0px 0px; display: inline; border-width: 0px;" title="Slide1" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/StrengtheningourSoftwareEcosystemwithSou_E1A2/Slide1_thumb.png" border="0" alt="Slide1" width="244" height="139" align="left" /></a> Hello, my name is Harry Pierson. I’m a program manager in the Visual Studio Languages group and I’m here to talk about what I would most like to do to improve Microsoft.</div>
<div>At Microsoft, we care an awful lot about the software ecosystem. Searching for the word “ecosystem” on Microsoft.com returns nearly eight thousand results. We talk about the ecosystem in our marketing and in our press releases.</div>
<div><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/StrengtheningourSoftwareEcosystemwithSou_E1A2/Slide2.png"><img style="display: inline; margin-left: 0px; margin-right: 0px; border-width: 0px;" title="Slide2" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/StrengtheningourSoftwareEcosystemwithSou_E1A2/Slide2_thumb.png" border="0" alt="Slide2" width="244" height="139" align="right" /></a> In 2007, we commissioned a <a href="http://www.microsoft.com/about/corporatecitizenship/citizenship/economicimpact">study of the global economic impact</a> of the Microsoft ecosystem. In a word, it’s massive. It’s responsible for nearly 15 million jobs and drives over half a trillion dollars a year in tax revenue worldwide.</div>
<div>No wonder we care about the ecosystem so much.</div>
<div><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/StrengtheningourSoftwareEcosystemwithSou_E1A2/Slide3.png"><img style="margin: 0px 5px 0px 0px; display: inline; border-width: 0px;" title="Slide3" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/StrengtheningourSoftwareEcosystemwithSou_E1A2/Slide3_thumb.png" border="0" alt="Slide3" width="244" height="139" align="left" /></a> But clearly, we’re not the only ones who care. Microsoft represents a fairly small percentage of the overall ecosystem. We earn just over 11% of the total revenue and account for half of one percent of the total employment within the ecosystem.</div>
<div>That means there are an awfully large number of people with a vested interest in the continuing success of the Microsoft platform.</div>
<div><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/StrengtheningourSoftwareEcosystemwithSou_E1A2/Slide4.png"><img style="display: inline; margin-left: 0px; margin-right: 0px; border-width: 0px;" title="Slide4" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/StrengtheningourSoftwareEcosystemwithSou_E1A2/Slide4_thumb.png" border="0" alt="Slide4" width="244" height="139" align="right" /></a> With this vast ecosystem in mind, I want to talk about Open Source. Microsoft and Open Source are often portrayed as enemies. But in DevDiv, we have several high profile Open Source projects. I work on IronPython, which has been Open Source for over four years. More recently, the ASP.NET and Extensibility Framework teams have decided to release some projects as Open Source.</div>
<div>I believe we should have more Open Source projects at Microsoft. But more importantly, I feel that we need to go beyond the textbook definition of Open Source. Our Open Source projects are typically closed to external contributions. But for the ecosystem at large, Open Source isn’t just about the availability <em>and distribution terms</em> of the source code. It also implies a collaborative development model <em>- parties working together across organizational boundaries, contributing directly to projects in question. </em></div>
<div>The thing I would most like to change about Microsoft would be to let members of our ecosystem contribute code to our Open Source projects.</div>
<div><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/StrengtheningourSoftwareEcosystemwithSou_E1A2/Slide5.png"><img style="margin: 0px 5px 0px 0px; display: inline; border-width: 0px;" title="Slide5" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/StrengtheningourSoftwareEcosystemwithSou_E1A2/Slide5_thumb.png" border="0" alt="Slide5" width="244" height="139" align="left" /></a> I can tell you from personal experience, there are members of the IronPython community who would leap at the opportunity to contribute code. And their engineering prowess and real world would benefit the IronPython project tremendously. But the legal process for getting permission to take contributions is onerous. Worse, the legal stigma attached to code that isn’t 100% pure Microsoft intellectual property makes it nearly impossible for any other group inside Microsoft to build on it.</div>
<div>I realize the onerous legal process is there for a reason: to protect Microsoft’s interests. But improving IronPython and Open Source projects like it isn’t just in Microsoft’s best interest; it’s in the best interest of our ecosystem as well. We need a legal framework that protects Microsoft while allowing for code contributions. <em>Developing such a framework will be a challenge. But competitors like Sun, Google and IBM have already demonstrated that it’s not insurmountable.</em></div>
<div><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/StrengtheningourSoftwareEcosystemwithSou_E1A2/Slide6.png"><img style="display: inline; margin-left: 0px; margin-right: 0px; border-width: 0px;" title="Slide6" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/StrengtheningourSoftwareEcosystemwithSou_E1A2/Slide6_thumb.png" border="0" alt="Slide6" width="244" height="139" align="right" /></a> Half a trillion dollars annually. 15 Million jobs. 42% of the IT workforce. The Microsoft ecosystem is the envy of the industry. And Microsoft is in a unique position to harness the collective experience and engineering prowess of that ecosystem while simultaneously dispelling the myth that we are an enemy of Open Source.</div>
<div><em>It’s time we make this change.</em></div>
<div>Thank you very much.</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1264</wp:post_id>
		<wp:post_date>2009-06-03 16:17:31</wp:post_date>
		<wp:post_date_gmt>2009-06-03 16:17:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>strengthening-the-microsoft-ecosystem-with-source-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-geekery"><![CDATA[General Geekery]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[Open Source]]></category>
		<category domain="post_tag" nicename="working-at-msft"><![CDATA[Working at MSFT]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[7e78d36c-d176-40b2-bdee-da2a49630948]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Strengthening+The+Microsoft+Ecosystem+With+Source+Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/06/03/Strengthening+The+Microsoft+Ecosystem+With+Source+Code]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2215</wp:comment_id>
			<wp:comment_author><![CDATA[lawch]]></wp:comment_author>
			<wp:comment_author_email>wschae@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://kldp.org/blog/10621</wp:comment_author_url>
			<wp:comment_author_IP>128.135.8.90</wp:comment_author_IP>
			<wp:comment_date>2009-06-10 15:25:46</wp:comment_date>
			<wp:comment_date_gmt>2009-06-10 22:25:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for sharing this. Your presentation is really impressive and I would like to share it with my friends in Korea. Do you mind if I translate your script into Korean and post it on my blog? Thank you again. -lawch]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2216</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.80</wp:comment_author_IP>
			<wp:comment_date>2009-06-12 10:33:44</wp:comment_date>
			<wp:comment_date_gmt>2009-06-12 17:33:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@lawch, That would be great! please drop me a note when it's done - I'd love to see it and blog about it as well.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2217</wp:comment_id>
			<wp:comment_author><![CDATA[lawch]]></wp:comment_author>
			<wp:comment_author_email>wschae@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://kldp.org/node/106276</wp:comment_author_url>
			<wp:comment_author_IP>128.135.8.90</wp:comment_author_IP>
			<wp:comment_date>2009-06-15 14:01:23</wp:comment_date>
			<wp:comment_date_gmt>2009-06-15 21:01:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for your permission. I just post my translation at http://kldp.org/node/106276. If there are any useful comments on it, I will let you know. Thanks. -lawch]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2218</wp:comment_id>
			<wp:comment_author><![CDATA[Bruce Pierson]]></wp:comment_author>
			<wp:comment_author_email>bpierson@connexatools.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.connexatools.com</wp:comment_author_url>
			<wp:comment_author_IP>64.79.41.154</wp:comment_author_IP>
			<wp:comment_date>2009-07-08 10:41:19</wp:comment_date>
			<wp:comment_date_gmt>2009-07-08 17:41:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good stuff, as always. It cracks me up that the "Open Source" logo itself has a "TM" on it :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2220</wp:comment_id>
			<wp:comment_author><![CDATA[Arvindra Sehmi]]></wp:comment_author>
			<wp:comment_author_email>asehmi@onalytica.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.onalytica.com</wp:comment_author_url>
			<wp:comment_author_IP>82.71.16.70</wp:comment_author_IP>
			<wp:comment_date>2009-07-24 07:52:12</wp:comment_date>
			<wp:comment_date_gmt>2009-07-24 14:52:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Harry,

One of the things I did before I left MS was to write a ThinkWeek paper, co-authored with Mauricio Ulargui. It was entitled: "Capturing Community Innovation - A call to move research and development to the next level through communities, collaboration and customers". After reading this post I could see our thoughts are very much aligned.

All the best - Arvindra
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>__clrtype__ Metaclasses: Simple Custom Attributes</title>
		<link>http://devhawk.net/2009/06/15/__clrtype__-metaclasses-simple-custom-attributes/</link>
		<pubDate>Mon, 15 Jun 2009 10:34:18 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://6cf6cd60-25ce-4704-8a55-305e1f0a2544</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I know it’s been a while since my <a href="http://devhawk.net/2009/04/24/clrtype+Metaclasses+Demo+Silverlight+Databinding.aspx">last __clrtype__ post</a>, but I was blocked on some bug fixes that shipped as part of <a href="http://devhawk.net/2009/05/21/IronPython+26+Beta+1.aspx">IronPython 2.6 Beta 1</a>. So now let’s start looking at one of the <a href="http://ironpython.codeplex.com/WorkItem/View.aspx?WorkItemId=20489">most requested IronPython features</a> – custom attributes!</p><p>Over the course of the next three blog posts, I’m going to build out a mechanism for specifying custom attributes on the CLR type we’re generating via __clrtype__. All the various Builder classes in <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.aspx">System.Reflection.Emit</a> support a <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.typebuilder.setcustomattribute.aspx">SetCustomAttribute</a> method that works basically the same way. There are two overloads – the <a href="http://msdn.microsoft.com/en-us/library/sd003w15.aspx">one I’m going to use</a> takes a single <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.customattributebuilder.aspx">CustomAttributeBuilder</a> as a parameter.</p><p>For this first post, I’m going to focus on the basic custom attribute infrastructure, so we’re going to use the extremely simple <a href="http://msdn.microsoft.com/en-us/library/system.obsoleteattribute.aspx">ObsoleteAttribute</a>. While you can pass some arguments to the constructor, for this first post I’m going to use the <a href="http://msdn.microsoft.com/en-us/library/0xwcsd3h.aspx">parameterless constructor</a>. To keep things less confusing, I’m going back to the <a href="http://devhawk.net/2009/04/22/clrtype+Metaclasses+Customizing+The+Type+Name.aspx">original version</a> of the Product class, before I introduced CLR <a href="http://devhawk.net/2009/04/23/clrtype+Metaclasses+Adding+CLR+Fields.aspx">fields</a> and <a href="http://devhawk.net/2009/04/24/clrtype+Metaclasses+Adding+CLR+Properties.aspx">properties</a>. The one change I’m making is that I’m adding a list of attributes I want to add to the class.</p><pre class="brush: python">
from System import ObsoleteAttribute 

class Product(object):
  __metaclass__ = ClrTypeMetaclass
  _clrnamespace = "DevHawk.IronPython.ClrTypeSeries"   
  _clrclassattribs = [ObsoleteAttribute]
  
  # remainder of class omitted for clarity
</pre><p>Python <a href="http://docs.python.org/reference/expressions.html#list-displays">list comprehensions</a> use the same square bracket syntax as C# properties, so it kinda looks right to someone with a C# eye – though having the attribute specifications inside the class, rather than above it, is totally different. I wish I could use Python’s <a href="http://docs.python.org/whatsnew/2.6.html#pep-3129-class-decorators">class decorators</a> for custom class attributes, but class decorators run after metaclasses so unfortunately that doesn’t work. Also, I can’t leave off the “Attribute” suffix like you can in C#. If I really wanted to, I could provide a new type name in the import statement (“from System import ObsoleteAttribute as Obsolete”) but I thought spelling it out was clearer for this post.</p><p>Now that I have specified the class attributes, I can update the metaclass __clrtype__ method to set the attribute on the generated CLR class:</p><pre class="brush: python">
if hasattr(cls, '_clrclassattribs'):
      for attribtype in cls._clrclassattribs:
        ci = clr.GetClrType(attribtype).GetConstructor(())
        cab = CustomAttributeBuilder(ci, ())
        typebld.SetCustomAttribute(cab)
</pre><p>I’m simply iterating over the list of _clrclassattribs (if it exists), getting the default parameterless constructor for each attribute type, creating a CustomAttributeBuilder instance from that constructor and then calling SetCustomAttribute. Of course, this is very simple because we’re not supporting any custom arguments or setting of named properties. We’ll get to that in the next post. In the mean time, you can get the full code for this post <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/%7C_%7C_clrtype%7C_%7C_/simple%7C_custom%7C_attributes.py">from my skydrive</a>.</p><p>There is one significant issue with this custom attribute code. Attributes are typically marked with the <a href="http://msdn.microsoft.com/en-us/library/system.attributeusageattribute.aspx">AttributeUsage attribute</a> that specifies a set of constraints, such as the kind of targets a given attribute can be attached to and if it can be specified multiple times. For example, the <a href="http://msdn.microsoft.com/en-us/library/system.mtathreadattribute.aspx">MTAThread attribute</a> can’t be specified multiple times and it can only be attached to methods. However, those attribute constraints are validated by the compiler, not the runtime. I haven’t written any code yet to validate those constraints, so you can specify invalid combinations like multiple MTAThread attributes on a class. For now, I’m just going to leave it to the developer <em>not</em> to specify invalid attribute combinations. Custom attributes are passive anyway so I’m figure no one will come looking for a MTAThread attribute on a class or other such scenarios. </p><p>However, I’m interested in your opinion: When we get to actually productizing a higher-level API for __clrtype__, what kinds of attribute validation should we do, if any? </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1265</wp:post_id>
		<wp:post_date>2009-06-15 10:34:18</wp:post_date>
		<wp:post_date_gmt>2009-06-15 10:34:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>__clrtype__-metaclasses-simple-custom-attributes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="__clrtype__"><![CDATA[__clrtype__]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[6cf6cd60-25ce-4704-8a55-305e1f0a2544]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[clrtype+Metaclasses+Simple+Custom+Attributes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/06/15/clrtype+Metaclasses+Simple+Custom+Attributes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>__clrtype__ Metaclasses: Positional Attribute Parameters</title>
		<link>http://devhawk.net/2009/06/17/__clrtype__-metaclasses-positional-attribute-parameters/</link>
		<pubDate>Wed, 17 Jun 2009 11:02:38 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://2687c504-afe1-44a9-a261-fc36de5ac8d8</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The <a href="http://devhawk.net/2009/06/15/clrtype+Metaclasses+Simple+Custom+Attributes.aspx">basic infrastructure</a> for custom attributes in IronPython is in place, but it’s woefully limited. Specifically, it only works for custom attributes that don’t have parameters. Of course, most of the custom attributes that you’d really want to use require additional parameters, both the positional or named variety. Since positional parameters are easier, let’s start with them.</p><p>Positional parameters get passed to the custom attribute’s constructor. As we saw in the previous post, you need a <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.customattributebuilder.aspx">CustomAttributeBuilder</a> to attach a custom attribute to an attribute target (like a class). Previously, I just needed to know the attribute type since I was hard coding the positional parameters. But now, I need to know both the attribute type as well as the desired positional parameters. I could have built a custom Python class to track this information, but it made much more sense just to use CustomAttributeBuilder instances. I built a utility function make_cab to construct the CustomAttributeBuilder instances.</p><pre class="brush: python">
def make_cab(attrib_type, *args):
  argtypes = tuple(map(lambda x:clr.GetClrType(type(x)), args))
  ci = clr.GetClrType(attrib_type).GetConstructor(argtypes)
  return CustomAttributeBuilder(ci, args)

from System import ObsoleteAttribute 

class Product(object):
  __metaclass__ = ClrTypeMetaclass
  _clrnamespace = "DevHawk.IronPython.ClrTypeSeries"   
  _clrclassattribs = [make_cab(ObsoleteAttribute , "Warning Lark's Vomit")]

  # remaining Product class definition omited for clarity
</pre><p>In make_cab, I build a tuple of CLR types from the list of positional arguments that was passed in. If you haven’t seed the *args syntax before, it works like C#’s params keyword – any extra arguments are passed into the function as a tuple names args. I use Python’s built in map function (FP FTW!) to build a tuple of CLR types of the provided arguments, which I then pass to GetConstructor. Previously, I passed an empty tuple to GetConstructor because I wanted the default constructor. If you don’t pass any positional arguments, you still get the default constructor. Once I’ve found the right constructor, I pass it and the original tuple of arguments to the CustomAttributeBuilder constructor.</p><p>One major benefit of this approach is that it simplifies the metaclass code. Since _clrclassattribs is now a list of CustomAttributeBuilders, now I just need to iterate over that list and call SetCustomAttribute for each.</p><pre class="brush: python">
if hasattr(cls, '_clrclassattribs'):
      for cab in cls._clrclassattribs:
        typebld.SetCustomAttribute(cab)
</pre><p>The only problem with this approach is that specifying the list of custom attributes is now extremely verbose. Not only am I specifying the full attribute class name as well as the positional arguments, I’m also having to insert a call to make_cab. Previously, it kinda looked like a C# custom attribute, albeit in the wrong place. Not anymore. So I decided to write a function called cab_builder to generates less verbose calls to make_cab:</p><pre class="brush: python">
def cab_builder(attrib_type):
  return lambda *args:make_cab(attrib_type, *args)

from System import ObsoleteAttribute 
Obsolete = cab_builder(ObsoleteAttribute)

class Product(object):
  __metaclass__ = ClrTypeMetaclass
  _clrnamespace = "DevHawk.IronPython.ClrTypeSeries"   
  _clrclassattribs = [Obsolete("Warning Lark's Vomit")]

  # remaining Product class definition omited for clarity
</pre><p>The cab_builder function returns an anonymous lambda function that closes over the attrib_type variable. Python lambdas are just like C# lambdas, except that they only support expressions [1]. The results of calling the lambda returned from cab_builder is exactly the same as calling make_cab directly, but less verbose. And since I named the function returned from cab_builder Obsolete, now my list of class custom attributes looks <em>exactly </em>like it does in C# (though still in a different place). As usual, the code is <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/%7C_%7C_clrtype%7C_%7C_/custom%7C_attrib%7C_with%7C_positional%7C_args.py">up on my skydrive</a>.</p><p>If you’re only using the attribute once like this, it is kind of annoying to first declare the cab_builder function. If you wanted to you could iterate over the types in a given assembly, looking for ones that inherit from Attribute and generate the cab_builder call dynamically. However, I’m not sure how performant that would be. Another possibility would be to iterate over the types in a given assembly and generate a Python module on disk with the calls to cab_builder. Then, you’d just have to import this module of common attributes but still be able to include additional calls to cab_builder as needed.</p><p></p><p>[1] The lack of statement lambdas in Python is one of my few issues with the language. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1266</wp:post_id>
		<wp:post_date>2009-06-17 11:02:38</wp:post_date>
		<wp:post_date_gmt>2009-06-17 11:02:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>__clrtype__-metaclasses-positional-attribute-parameters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="__clrtype__"><![CDATA[__clrtype__]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[2687c504-afe1-44a9-a261-fc36de5ac8d8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[clrtype+Metaclasses+Positional+Attribute+Parameters]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/06/17/clrtype+Metaclasses+Positional+Attribute+Parameters]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Add-Bcd-Vhd.ps1</title>
		<link>http://devhawk.net/2009/06/18/add-bcd-vhd-ps1/</link>
		<pubDate>Thu, 18 Jun 2009 13:39:57 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://17cd359b-7a77-47ad-a06d-9ba7d2621021</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I *LOVE* the new boot from VHD feature in Win7. I am primarily using it for doing some <a href="http://www.microsoft.com/visualstudio/en-us/products/2010/default.mspx">VS 2010</a> dogfooding without messing up my primary drive partition. But man, the process for setting up a VHD for booting is brutal. Scott Hanselman did a great job <a href="http://www.hanselman.com/blog/LessVirtualMoreMachineWindows7AndTheMagicOfBootToVHD.aspx">laying out the steps</a>, but I wanted something a bit more productive.</p><p>First, I created a clean Win7 RC VHD and zipped it up for easy storage. The basic Win7 RC VHD is just under 5GB, but compresses down to about 1.5GB with <a href="http://www.7-zip.org/">7-zip</a>. I used the <a href="http://blogs.technet.com/aviraj/archive/2009/01/18/windows-7-boot-from-vhd-first-impression-part-2.aspx">ImageX process</a> Aviraj described though in the future I’ll use the <a href="http://code.msdn.microsoft.com/InstallWindowsImage">Install-WindowsImage</a> script. Install-WindowsImage is more convenient to use because it will list the indexes within a given .wim file instead of making you grovel thru an XML file like ImageX does. Also Install-WindowsImage is 27k download while ImageX is part of the 1.4 <em>gigabyte </em><a href="http://www.microsoft.com/downloads/details.aspx?familyid=60A07E71-0ACB-453A-8035-D30EAD27EF72&amp;displaylang=en">Windows Automated Installation Kit</a>. Look, I’m not hurting for bandwidth, but I don’t see the point of downloading 54442 times more data for a utility that isn’t as useful.</p><p>Once you’ve created the VHD, you need to update your Boot Configuration Data, or BCD for short, using the appropriately named <a href="http://technet.microsoft.com/en-us/library/cc709667.aspx">BCDEdit utility</a>. The process is fairly straight forward, if tedious. You have to run BCDEdit four times, copy the configuration GUID to the clipboard and type out the path to the VHD in a slightly funky syntax. Blech. So I built a PowerShell script to automate updating the BCD, called <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/add-bcd-vhd.ps1">add-bcd-vhd</a>. You can get it from <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/add-bcd-vhd.ps1">my skydrive</a>. Pass in the name of the BCD entry and the path to the VHD and add-bcd-vhd will do the rest.</p><p>I was <a href="http://twitter.com/DevHawk/status/2202944230">whining on Twitter</a> yesterday that there’s no PowerShell specific tools for managing the BCD data. Add-bcd-vhd just runs bcdedit behind the scenes and processes the text output with regular expressions. Ugly, but effective. I decided to spend some time trying accessing the BCD data from its <a href="http://msdn.microsoft.com/en-us/library/bb986746.aspx">WMI provider</a>, but that turned out to be way too much of a hassle to be effective. If someone else out there knows how to use the BCD WMI provider from PowerShell, I’d appreciate some sample code.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1267</wp:post_id>
		<wp:post_date>2009-06-18 13:39:57</wp:post_date>
		<wp:post_date_gmt>2009-06-18 13:39:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>add-bcd-vhd-ps1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[17cd359b-7a77-47ad-a06d-9ba7d2621021]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[AddBcdVhdps1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/06/18/AddBcdVhdps1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2221</wp:comment_id>
			<wp:comment_author><![CDATA[Barry Kelly]]></wp:comment_author>
			<wp:comment_author_email>bkelly.ie@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://barrkel.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.97.41.252</wp:comment_author_IP>
			<wp:comment_date>2009-06-18 15:34:08</wp:comment_date>
			<wp:comment_date_gmt>2009-06-18 22:34:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How about a return to tried and trusted technology from the 70s? Why the hell was boot.ini gotten rid of?

Oh I know, "too vulnerable to malicious attacks". That makes no sense at all; if the OS can't protect boot.ini with permissions, why the hell does anyone think an obfuscated format will do better?

It's crap like this which have meant I haven't moved on (I can't say "upgraded") to Vista, and is only one of many reasons why I won't move to Win7 either, not for a good few years, or at least until I can replace the shell with an XP-alike - most especially the Start Menu, the Explorer items pane, and getting rid of the Mac-alike task bar. (I hate Macs more.) Sigh.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>__clrtype__ Metaclasses: Named Attribute Parameters</title>
		<link>http://devhawk.net/2009/06/18/__clrtype__-metaclasses-named-attribute-parameters/</link>
		<pubDate>Thu, 18 Jun 2009 10:09:02 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://6a3ede80-2a01-4f51-b49f-c90b262d71e5</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In <a href="http://devhawk.net/2009/06/17/clrtype+Metaclasses+Positional+Attribute+Parameters.aspx">my last post</a>, I added support for custom attribute positional parameters . To finish things off, I need to add support for named parameters as well. Custom attributes support named parameters for public fields and settable properties. It works kind of like C# 3.0’s <a href="http://msdn.microsoft.com/en-us/library/bb384062.aspx">object initalizers</a>. However, unlike object initalizers, the specific fields and properties to be set on a custom attribute as well as their values are passed to the <a href="http://msdn.microsoft.com/en-us/library/ex9y2dsf.aspx">CustomAttributeBuilder constructor</a>. With six arguments – five of which are arrays – it’s kind of an ugly constructor. But luckily, we can hide it away in the make_cab function by using Python’s <a href="http://docs.python.org/tutorial/controlflow.html#keyword-arguments">keyword arguments feature</a>.</p><p></p><pre class="brush: python">
def make_cab(attrib_type, *args, **kwds):
  clrtype = clr.GetClrType(attrib_type)
  argtypes = tuple(map(lambda x:clr.GetClrType(type(x)), args))
  ci = clrtype.GetConstructor(argtypes)

  props = ([],[])
  fields = ([],[])
  
  for kwd in kwds:
    pi = clrtype.GetProperty(kwd)
    if pi is not None:
      props[0].append(pi)
      props[1].append(kwds[kwd])
    else:
      fi = clrtype.GetField(kwd)
      if fi is not None:
        fields[0].append(fi)
        fields[1].append(kwds[kwd])
      else:
        raise Exception, "No %s Member found on %s" % (kwd, clrtype.Name)
  
  return CustomAttributeBuilder(ci, args, 
    tuple(props[0]), tuple(props[1]), 
    tuple(fields[0]), tuple(fields[1]))

def cab_builder(attrib_type):
  return lambda *args, **kwds:make_cab(attrib_type, *args, **kwds)
</pre><p>You’ll notice that make_cab now takes a third parameter: the attribute type and the tuple of positional arguments we saw last post. This third parameter “**kwds” is a dictionary of named parameters. Python supports both positional and named parameter passing, like VB has for a while and C# will in 4.0. However, this **kwds parameter contains all the extra or leftover named parameters that were passed in but didn’t match any existing function arguments. Think of it like the <a href="http://msdn.microsoft.com/en-us/library/w5zay9db.aspx">params</a> of named parameters.</p><p>As I wrote earlier, custom attributes support setting named values of both fields and properties. We don’t want the developer to have to know if given named parameter is a field or property, so make_cab iterates over all the named parameters, checking first to see if it’s a property then if it’s a field. It keeps a list of all the field / property infos as well as their associated values. Assuming all the named parameters are found, those lists are converted to tuples and passed into the <a href="http://msdn.microsoft.com/en-us/library/ex9y2dsf.aspx">CustomAttributeBuilder constructor</a>.</p><p>In addition to the change to make_cab, I also updated cab_builder slightly in order to pass the **kwds parameter on thru to the make_cab function. No big deal. So now, I can add an attribute with named parameters to my IronPython class and it still looks a lot like a C# attribute specification.</p><pre class="brush: python">
clr.AddReference("System.Xml")
from System.Xml.Serialization import XmlRootAttribute 
from System import ObsoleteAttribute, CLSCompliantAttribute
Obsolete = cab_builder(ObsoleteAttribute)
CLSCompliant = cab_builder(CLSCompliantAttribute)
XmlRoot = cab_builder(XmlRootAttribute)

class Product(object):
  __metaclass__ = ClrTypeMetaclass
  _clrnamespace = "DevHawk.IronPython.ClrTypeSeries" 
  _clrclassattribs = [
    Obsolete("Warning Lark's Vomit"), 
    CLSCompliant(False),
    XmlRoot("product", Namespace="http://samples.devhawk.net")]

  # remainder of Product class omitted for clarity
</pre><p>As usual, sample code is <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/IronPython%20Stuff/%7C_%7C_clrtype%7C_%7C_/custom%7C_attrib%7C_with%7C_named%7C_args.py">up on my skydrive</a>.</p><p>Now that I can support custom attributes on classes, it would be fairly straightforward to add them to methods, properties, etc as well. The hardest part at this point is coming up with a well designed API that works within the Python syntax. If you’ve got any opinions on that, feel free to share them in the comments, via <a href="mailto:harry@devhawk.net">email</a>, or on the <a href="http://lists.ironpython.com/listinfo.cgi/users-ironpython.com">IronPython mailing list</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1268</wp:post_id>
		<wp:post_date>2009-06-18 10:09:02</wp:post_date>
		<wp:post_date_gmt>2009-06-18 10:09:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>__clrtype__-metaclasses-named-attribute-parameters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="__clrtype__"><![CDATA[__clrtype__]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[6a3ede80-2a01-4f51-b49f-c90b262d71e5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[clrtype+Metaclasses+Named+Attribute+Parameters]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/06/18/clrtype+Metaclasses+Named+Attribute+Parameters]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft.Scripting.Debugging</title>
		<link>http://devhawk.net/2009/07/08/microsoft-scripting-debugging/</link>
		<pubDate>Wed, 08 Jul 2009 14:42:36 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d6791f97-1e11-4a64-959e-0fa0cb1bbb31</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If you’ve compiled IronPython from source recently, you may have noticed a new DLL: <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/56115#908451">Microsoft.Scripting.Debugging</a>. This DLL contains a lightweight, non-blocking debugger for DLR based languages that is going to enable both new scenarios as well as better compatibility with CPython. Needless to say, we’re very excited about it.</p><p>When I was actively working on my <a href="http://devhawk.net/CategoryView,category,Debugger.aspx">ipydbg series</a>, I got several emails asking about using it in an embedded scripting scenario. Unfortunately, the ipydbg approach doesn’t work very well in the embedded scripting scenario. ipydbg uses <a href="http://msdn.microsoft.com/en-us/library/ms230588.aspx">ICorDebug</a> and friends, which completely blocks the application being debugged. This means, your debugger <em>has</em> to run in a separate process. So either you run your debugger in your host app process and your scripts in a separate process or you run your debugger in a separate process debugging both the scripts and the host app. Neither option is very appealing. </p><p>Now with the DLR Debugger, you can run all three components in the same process. I think of the DLR debugger as a “cooperative” debugger in much the same way that Windows 3.x supported <a href="http://en.wikipedia.org/wiki/Cooperative_multitasking#Cooperative_multitasking.2Ftime-sharing">cooperative multitasking</a>. It’s also known as trace or traceback debugging. Code being debugged yields to the debugger at set points during its execution. The debugger then does whatever it wants, including showing UI and/or letting the developer inspect or modify program state. When the debugger returns, execution of the original code continues until the next set point wherein the process repeats itself.</p><p>The primary point of entry for the DLR Debugger is the <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/56115#908446">DebugContext class</a>. Notable there is the TransformLambda method, which takes a normal DLR LambdaExpression and transforms it into a cooperatively debugged LambdaExpression. LambdaExpressions can contain DebugInfoExpressions – typically we insert them at the start of every Python code line as well as one at the end of the function. When we run IronPython in debug mode (i.e. –D), those get turned into sequence points <a href="http://devhawk.net/2009/03/02/Writing+An+IronPython+Debugger+Setting+A+Breakpoint.aspx">as we saw</a> back when I was working on ipydbg. When using the DLR Debugger, those DebugInfoExpressions are transformed into calls out to <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/56115#908429">IDebugCallback</a>.OnDebugEvent. The DLR Debugger implements the IDebugCallback interface on the <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/56115#908413">TracePipeline</a> class which also implements <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/56115#908414">ITracePipeline</a>. In OnDebugEvent, TracePipeline calls out to an <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/56115#908415">ITraceCallback</a> instance you provide. The extra layer of indirection means you can change your traceback handler without having to regenerate the debuggable version of your functions. </p><p>Of course, we hide all this DLR Debugger goo from you in IronPython. Python already has a mechanism for doing traceback debugging – <a href="http://docs.python.org/library/sys.html#sys.settrace">sys.settrace</a>. Our ITraceCallback, <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/56115#922366">PythonTracebackListener</a>, wrapps the DLR Debugger API to expose the sys.settrace API. That makes this feature a twofer – new capability for IronPython + better compatibility with CPython. Instead of needing a custom tool (i.e. ipydbg) you can now use <a href="http://docs.python.org/library/pdb.html">PDB</a> from the standard Python library (modulo bugs in our implementation). I haven’t been working on ipydbg recently since you’ll be able to use PDB soon enough.</p><p>For those hosting IronPython, we also have a couple of static extension methods in our hosting API (look for the SetTrace functions in <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/56115#490056">IronPythonHostingPython.cs</a>). These are simply wrappers around sys.settrace, so it has the same API regardless if you access it from inside IronPython or from the hosting API. But if you’re hosting IronPython in a C# application, those extension methods are very convenient to use.</p><p>This debugger will be in our regular releases of IronPython as of 2.6 beta 2 which is <a href="http://ironpython.codeplex.com/Wiki/View.aspx?title=2.6%20Release%20Plan">scheduled</a> to drop at the end of this month. For those who just can’t wait, it’s available as source code starting with <a href="This code is in our daily source drops as of yesterday. ">yesterday’s changeset</a>. Please let us know what you think!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1269</wp:post_id>
		<wp:post_date>2009-07-08 14:42:36</wp:post_date>
		<wp:post_date_gmt>2009-07-08 14:42:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-scripting-debugging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d6791f97-1e11-4a64-959e-0fa0cb1bbb31]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[MicrosoftScriptingDebugging]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/07/08/MicrosoftScriptingDebugging]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2222</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin Hazzard]]></wp:comment_author>
			<wp:comment_author_email>kevin@gotnet.biz</wp:comment_author_email>
			<wp:comment_author_url>http://www,gotnet.biz/Blog</wp:comment_author_url>
			<wp:comment_author_IP>75.199.100.123</wp:comment_author_IP>
			<wp:comment_date>2009-07-08 16:11:56</wp:comment_date>
			<wp:comment_date_gmt>2009-07-08 23:11:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is awesome, Harry. I've been wanting this is a long time. I do script embedding for my applications most of the time. This will be a great help. You folks on the DLR team are the best and brightest inside Microsoft. Keep it up!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2223</wp:comment_id>
			<wp:comment_author><![CDATA[Lukas]]></wp:comment_author>
			<wp:comment_author_email>cenovsky@bakalari.cz</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>213.211.41.223</wp:comment_author_IP>
			<wp:comment_date>2009-07-09 01:29:55</wp:comment_date>
			<wp:comment_date_gmt>2009-07-09 08:29:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2224</wp:comment_id>
			<wp:comment_author><![CDATA[Jeff Brown]]></wp:comment_author>
			<wp:comment_author_email>jeff.brown@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.bits-in-motion.com/</wp:comment_author_url>
			<wp:comment_author_IP>24.4.150.25</wp:comment_author_IP>
			<wp:comment_date>2009-07-18 22:46:43</wp:comment_date>
			<wp:comment_date_gmt>2009-07-19 05:46:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very cool!

I was just adding support to Gallio for running RSpec tests with IronRuby and was wondering what the DLR debugging story was eventually going to look like.

BTW, I'm quite happy integrating one or more IronPython supported testing frameworks too, if you have some to recommend.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Syntax Highlighting TextBoxes in WPF - A Sad Story</title>
		<link>http://devhawk.net/2009/07/09/syntax-highlighting-textboxes-in-wpf-a-sad-story/</link>
		<pubDate>Thu, 09 Jul 2009 15:18:38 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d1f69023-194b-4721-9293-855f6143b6de</guid>
		<description></description>
		<content:encoded><![CDATA[One of the big new features in <a href="http://www.microsoft.com/visualstudio/en-us/products/2010/default.mspx">VS 2010</a> is the <a href="http://msdn.microsoft.com/en-us/library/dd885242(VS.100).aspx">WPF based editor</a>. With it, you can build all sorts of cool stuff like <a href="http://blogs.msdn.com/vseditor/archive/2009/05/13/visualizing-xml-doc-comments.aspx">control the visualization of XML doc comments</a>, <a href="http://editorsamples.codeplex.com/Wiki/View.aspx?title=IntelliSense%20Presenter">change how intellisense looks</a>, even <a href="http://code.msdn.microsoft.com/caretfisheye">scale the size of text based on the location of the caret</a>. Huzzah for the WPF Visual Studio editor!

However, as wicked awesome as the new editor is, AFAIK it’s not going to be released as a separate component. So while the <a href="http://blogs.msdn.com/powershell/archive/2008/10/31/powershell-ise-and-visual-studio.aspx">PowerShell</a>, <a href="http://blogs.msdn.com/intellipad/archive/2009/03/25/font-sizes-in-intellipad.aspx">Intellipad</a> and other teams inside Microsoft can reuse the VS editor bits, nobody else can. So if you want to do something like <a href="http://www.iunknown.com/2009/05/dynamic-languages-at-teched-2009.html">embed a colorizing REPL in your WPF app</a>, you’ll have to use something else.

I’ve <a href="http://devhawk.net/2009/02/27/Writing+An+IronPython+Debugger+MDbg+101.aspx">thought about</a> putting a WPF based UI on top of ipydbg (though now I’d probably use the new <a href="http://devhawk.net/2009/07/08/MicrosoftScriptingDebugging.aspx">lightweight debugger</a> instead). So I downloaded <a href="http://github.com/jflam/repl-lib/tree/master">John’s repl-lib code</a> to see how he was doing it. Turns out his <a href="http://github.com/jflam/repl-lib/blob/5b597ab4b92a6d85f3e7f22d3ae9af271444b1d4/Core/Repl.xaml">REPL control</a> is essentially a wrapper around WPF’s <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.richtextbox.aspx">RichTextBox control</a>. It works, but it seems kinda kludgy. For example, the RichTextBox supports bold, italics and underline hotkeys, so John’s REPL does too. Though it is possible to <a href="http://blogs.msdn.com/prajakta/archive/2006/10/12/customize-richtextbox-to-allow-only-plain-text-input.aspx">turn off these formatting commands</a>, I decided to take a look at modifying how the plain-old TextBox renders. After all, WPF controls are supposed to be <a href="http://www.drwpf.com/blog/Home/tabid/36/EntryID/53/Default.aspx">lookless</a>, right?

Well, apparently not all the WPF controls are lookless. In particular to this post, the TextBox is definitely NOT lookless. It looks like the text editing capabilities of TextBox are provided by the Sys.Win.Documents.TextEditor class while the text rendering is provided by the Sys.Win.Controls.TextBoxView class. Both of those classes are internal, so don’t even think about trying to customize or reuse them.

The best (and I use that term loosely) way I found for customizing the TextBox rendering was a <a href="http://www.codeproject.com/KB/WPF/CodeBox.aspx">couple</a> of <a href="http://www.codeproject.com/KB/WPF/CodeBox2.aspx">articles</a> on CodeProject by <a href="http://www.codeproject.com/Members/KenJohnson">Ken Johnson</a>. Ken’s CodeBox control inherits from TextBox and sets the Foreground and Background to transparent (to hide the result of TextBoxView) and then overloads OnRender to render the text with colorization. Rendering the text twice – once transparently and once correctly – seems like a better solution than using the RichTextBox, but it’s still pretty kludgy. (Note, I’m calling the TextBox design kludgy – Ken’s code is a pretty good work around).

So if you want a colorized text box in WPF, your choices are:
<ul>
	<li>Build your own class that inherits from RichTextBox, disabling all the formatting commands and handling the TextChanged event to do colorization</li>
	<li>Build your own class that inherits from TextBox, but set Foreground an Background colors to transparent and overload OnRender to do the visible text rendering.</li>
	<li>Use a 3rd party control. The only one I found was the <a href="http://www.aqistar.com">AqiStar TextBox</a>. No idea how good it is, but <a href="http://www.aqistar.com/FeaturesVisualization.aspx">they claim</a> to be a true lookless control. Any other syntax highlighting WPF controls around that I don’t know about?</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1270</wp:post_id>
		<wp:post_date>2009-07-09 15:18:38</wp:post_date>
		<wp:post_date_gmt>2009-07-09 15:18:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>syntax-highlighting-textboxes-in-wpf-a-sad-story</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="wpf"><![CDATA[WPF]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d1f69023-194b-4721-9293-855f6143b6de]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Syntax+Highlighting+TextBoxes+In+WPF+Ndash+A+Sad+Story]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/07/09/Syntax+Highlighting+TextBoxes+In+WPF+Ndash+A+Sad+Story]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2225</wp:comment_id>
			<wp:comment_author><![CDATA[Matthew Wilson]]></wp:comment_author>
			<wp:comment_author_email>diakopter@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://diakopter.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>129.237.222.1</wp:comment_author_IP>
			<wp:comment_date>2009-07-09 15:49:08</wp:comment_date>
			<wp:comment_date_gmt>2009-07-09 22:49:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorta related: my strategy for my Silverlight mimic of Intellipad is basically the same as Ken's transparent overlay, except I'm writing my own RichTextBlock on top of TextBlock, and then FixedWidthRichTextBox on top of RichTextBlock (using the overlaid transparent TextBox for text selection and caret placement).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2226</wp:comment_id>
			<wp:comment_author><![CDATA[Brad]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.45.17.194</wp:comment_author_IP>
			<wp:comment_date>2009-07-09 16:54:27</wp:comment_date>
			<wp:comment_date_gmt>2009-07-09 23:54:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Actipro have recently released a WPF SyntaxEditor:
http://www.actiprosoftware.com/Products/DotNet/WPF/SyntaxEditor/Default.aspx]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2227</wp:comment_id>
			<wp:comment_author><![CDATA[Jesse Ezell]]></wp:comment_author>
			<wp:comment_author_email>jezell@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.iserviceoriented.com</wp:comment_author_url>
			<wp:comment_author_IP>98.173.13.58</wp:comment_author_IP>
			<wp:comment_date>2009-07-10 09:53:27</wp:comment_date>
			<wp:comment_date_gmt>2009-07-10 16:53:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Microsoft is great at providing frameworks, but horrible at providing tools for their frameworks. For example, WCF has almost zero quality tools from MS to work with. The WF editor blows goats. They are trying to foster all this language development with M and the DLR and the .NET framework itself, yet they don't make it easy for anyone to do anything other than build a language. If you actually want to build your own tools that don't ship inside of VS, all you will get is a big fuck you. The Java community is light years ahead on this front...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2228</wp:comment_id>
			<wp:comment_author><![CDATA[Mark]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.24.82.42</wp:comment_author_IP>
			<wp:comment_date>2009-07-10 16:52:12</wp:comment_date>
			<wp:comment_date_gmt>2009-07-10 23:52:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[SharpDevelop has a WPF based editor called AvalonEdit.

http://wiki.sharpdevelop.net/Default.aspx?Page=AvalonEdit&AspxAutoDetectCookieSupport=1

Its still in development but the source is available from subversion and it was pretty easy to get built and working, including python highlighting.  I have a basic Python console working using and and so far it is working very well.
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2229</wp:comment_id>
			<wp:comment_author><![CDATA[jeff]]></wp:comment_author>
			<wp:comment_author_email>jeff.jarrell@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.172.36.183</wp:comment_author_IP>
			<wp:comment_date>2009-07-13 14:53:09</wp:comment_date>
			<wp:comment_date_gmt>2009-07-13 21:53:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Actipro has a WPF based Syntax editor.  We are looking at it for simple Python scripts.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2230</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
			<wp:comment_date>2009-07-14 22:17:03</wp:comment_date>
			<wp:comment_date_gmt>2009-07-15 05:17:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mark, my understanding is that SharpDevelop is GPL licensed. Is AvalonEdit also GPL?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Probably Wrong Info Is Worse Than No Info At All</title>
		<link>http://devhawk.net/2009/07/13/probably-wrong-info-is-worse-than-no-info-at-all/</link>
		<pubDate>Mon, 13 Jul 2009 10:37:06 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://cf59d65d-af8c-41c5-9562-a26969d76a5d</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Like many geeks, I love <a href="http://dilbert.com/">Dilbert</a>. However, I rarely identify with it as well as I did Sunday.</p><p><a title="Dilbert.com" href="http://dilbert.com/strips/comic/2009-07-12/"><img style="display: block; float: none; margin-left: auto; margin-right: auto" border="0" alt="Dilbert.com" src="http://dilbert.com/dyn/str_strip/000000000/00000000/0000000/000000/60000/0000/300/60359/60359.strip.sunday.gif" /></a></p><p>I kid you not, I’ve had almost exactly this conversation back when I worked in MS IT. They have this big repository of information about deployed applications. Technically, you’re not supposed to deploy an application without listing it in the application repository. Like Dilbert, I never really understood what people were going to do with this information, but the projects I was on dutifully collected the relevant information and put it into the repository.</p><p>And never thought of it again. Ever. </p><p>And therein lies the problem. Populating the application repository was an artificial step on the critical path of the deployment process. Writing the software, acquiring the physical hardware to run it on, stuff like that really is on the critical path. Populating the application repository was extra busy work legislated by someone (I forget if it was the central architecture team or management) that didn’t benefit the project in the slightest. As such, it was given the minimal about of attention and effort, meaning there was little quality or consistency in the data. Worse yet, when the application changed or was decommissioned , updating the application repository just didn’t happen. I mean, it was supposed to, but rarely did.</p><p>So you ended up with a repository of information that was worse than useless. I had a colleague who insisted that the repository had some value because “not all of the data was wrong”. Of course, he couldn’t tell me with any consistency which data was accurate and therefore valuable and which was not. Hence, my argument that it was “worse than useless”.</p><p>The only way an application repository is going to be of any value at all is if you can collect the data automatically. My old teammate Buzz coined a phrase we used often: “The Truth Is On The Edge”. You should always regard any central repository of information with a very critical eye since it’s rarely going to be the truth. </p><p>(Ed. Note – Man, it’s been a long time since I’ve written about Architecture. My last Architecture post was <a href="http://devhawk.net/2008/07/25/Morning+Coffee+171.aspx">almost a year ago</a>. I don’t miss the job but I do miss my old teammates – in particular Buzz, Rick, Dale and of course <a href="http://blogs.msdn.com/nickmalik">Nick Malik</a>.)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1271</wp:post_id>
		<wp:post_date>2009-07-13 10:37:06</wp:post_date>
		<wp:post_date_gmt>2009-07-13 10:37:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>probably-wrong-info-is-worse-than-no-info-at-all</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[cf59d65d-af8c-41c5-9562-a26969d76a5d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Probably+Wrong+Info+Is+Worse+Than+No+Info+At+All]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/07/13/Probably+Wrong+Info+Is+Worse+Than+No+Info+At+All]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2231</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
			<wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
			<wp:comment_date>2009-07-13 10:40:00</wp:comment_date>
			<wp:comment_date_gmt>2009-07-13 17:40:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Has your view on architecture as a discipline separate from coding changed since working with dynamic languages?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2232</wp:comment_id>
			<wp:comment_author><![CDATA[Seo Sanghyeon]]></wp:comment_author>
			<wp:comment_author_email>sanxiyn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>118.219.169.203</wp:comment_author_IP>
			<wp:comment_date>2009-07-14 04:37:45</wp:comment_date>
			<wp:comment_date_gmt>2009-07-14 11:37:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The Truth Is On The Edge, so true. On the other hand, automatically collected central repository of information in the large scale can be very valuable, e.g. Ohloh.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2233</wp:comment_id>
			<wp:comment_author><![CDATA[Nick Malik]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/nickmalik</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.80</wp:comment_author_IP>
			<wp:comment_date>2009-07-14 09:56:39</wp:comment_date>
			<wp:comment_date_gmt>2009-07-14 16:56:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Harry,

Great Dilbert.  It is funny partly because it is painfully true.  We do have that repository, and it does contain "partly valid" information, and it is expensive and painful to update.

Traditionally, in organizations that want to perform an unpopular activity, they will put that activity into a small team of people who are responsible for doing that activity over and over, in different places.  This is a "business support function" and occurs variously in everything from financial audits to investigations for sexual harassment.  Unfortunately, in IT, we didn't develop a single team that had to maintain the repository... we distributed the function, figuring it would be so much more efficient.

As a result, the pain is distributed.  That means that it never reaches the level of annoyance that someone will invest to fix the pain.  It is also distributed to people who pay the costs of doing the work but, as you noted, reap few of the benefits of the data.  As a result, data quality suffers.  

There are uses for data such as this, if the data is accurate.  As Dilbert points out, if the person who has to collect the data is NOT the person who benefits from its collection, then you will get mistakes, quality issues, and delays in delivery.

This is not a data issue.  It is an issue of IT not running like a business.  We do a good job of security in IT, because we have people directly accountable for security who own the teams responsible for delivering security.  

Automated data collection is a potential solution to a poorly described problem.  Unfortunately, without the team responsibility in place to make the problem visible, and to demonstrate the value of fixing it, no one will invest in that automated data collection.  I cannot even tell you if it is GOOD solution to the problem, because there is no person who can provide a consistent view on what the actual problem is (yet... this is changing).

I believe that MS IT is typical in many of these problems.  

We are investing to replace that particularly onerous solution with something a bit better, with better support for the actual value-add activites that occur downstream, and with organizational alignment to insure that someone can answer the question "what are you going to do with the data."

That said, your observation is salient.  Manual data collection is rarely a good long term solution.

Good to chat with you again.
--- Nick]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Dynamic Languages in Architecture</title>
		<link>http://devhawk.net/2009/07/14/dynamic-languages-in-architecture/</link>
		<pubDate>Tue, 14 Jul 2009 11:28:47 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://94b98f0d-d884-4557-8df0-8f0dca3b72e7</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In the comments from <a href="http://devhawk.net/CommentView,guid,cf59d65d-af8c-41c5-9562-a26969d76a5d.aspx#commentstart">yesterday’s post</a>, IronPython MVP and <a href="http://www.ironpythoninaction.com/">author extraordinaire</a><a href="http://www.voidspace.org.uk/">Michael Foord</a> asked:</p><blockquote><p>Has your view on architecture as a discipline separate from coding changed since working with dynamic languages?</p></blockquote><p>In a word:“No” (though as always, I reserve the right to be wrong and/or convinced otherwise.)</p><p>When I was an architect, I tried very hard to treat it as a “discipline separate from coding”. To use my last post as an example, building a central repository of system audit information is an architectural decision. A bad one IMHO - at least the way Dilbert’s <a href="http://en.wikipedia.org/wiki/Pointy-Haired_Boss">PHB</a> described it - but an architectural decision all the same. It was a decision about what kind of system to build, part of an overall application portfolio, as opposed to a decision about how to build the system.</p><p>I’ve held this opinion of architecture for a long time. Four years (and three jobs) ago, I wrote <a href="http://devhawk.net/2005/08/29/What+Is+Architecture.aspx">the following</a>:</p><blockquote><p>IMO, building a system that has a set of functional requirements (track customers, process orders, etc) and non-functional constraints (sub-second response time, support 10,000 concurrent users, use Microsoft Windows platform, etc) is an engineering problem. Coming up with the lists of functional requirements and non-functional constraints is the architecture problem.</p></blockquote><p>Working with dynamic languages has dramatically changed my view of engineering and design of individual systems. But from the pure architecture perspective, I want to be able to treat individual systems as black boxes as much as possible. That means the programming language is an implementation detail that shouldn’t matter to the architect.</p><p>Note the significant bet-hedging language in the paragraph above. I’m using phrases like “shouldn’t matter” and “as much as possible” because we all know that there’s no such thing as a “pure architecture perspective”. Unlike building architecture, software architecture is in constant flux at every level. At the enterprise level, there are always new regulatory obligations, new competitors and new partners to consider. At the end-to-end process level, there are always new systems or new version of existing systems coming on line. And at the individual system level, there are always new – or at least new versions - of tools, frameworks and languages being released. </p><p>Once you introduce time into your architecture perspective, individual system engineering will affect the overall architecture, since system engineering affects the rate of change. Language choice will certainly have some engineering impact. However, in my experience language choice is rarely high on the list of concerns relative to things like project scope and team experience. </p><p>So my “No” answer to Michael’s question is predicated on the following:</p><ul><li>As an architect, I want to consider individual systems as black boxes where implementation details like language choice are completely irrelevant. </li><li>As a practical architect, I realize that some system implementation details are relevant – especially over time - but in my experience language choice isn’t one of them. </li></ul><p>On the other hand, most IT shops try to standardize on one programming language – certainly MS IT did – so maybe language choice would be more architecturally relevant in a mixed language shop. I’d love to hear from folks who have multiple standard languages in their IT shop – especially if you have both static and dynamic languages on your standards list.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1272</wp:post_id>
		<wp:post_date>2009-07-14 11:28:47</wp:post_date>
		<wp:post_date_gmt>2009-07-14 11:28:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dynamic-languages-in-architecture</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<category domain="post_tag" nicename="dynamic-languages"><![CDATA[Dynamic Languages]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[94b98f0d-d884-4557-8df0-8f0dca3b72e7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Dynamic+Languages+In+Architecture]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/07/14/Dynamic+Languages+In+Architecture]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2235</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
			<wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
			<wp:comment_date>2009-07-14 13:37:34</wp:comment_date>
			<wp:comment_date_gmt>2009-07-14 20:37:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting response (thanks). I'll have to think about the subject. Architectural thinking is a necessary (and very important) part of software development - but beyond the systems level (which is systems administration and not software architecture) I have a hard time seeing divorcing architectural thinking from the actual development as anything but a terrible thing.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2236</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
			<wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
			<wp:comment_date>2009-07-14 14:02:56</wp:comment_date>
			<wp:comment_date_gmt>2009-07-14 21:02:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hmmm... although I see that your definition of architecture (at the functional level) does not match my caricature of the 'architecture astronauts' which I do think can be endemic in languages that encourage additional layers of architecture. I do think there are cultural differences between dynamically and statically typed communities, at least I've noticed them being closer to the .NET community these days.

As I said, requires some thinking about - perhaps I'll blog about it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2237</wp:comment_id>
			<wp:comment_author><![CDATA[Ryan Riley]]></wp:comment_author>
			<wp:comment_author_email>ryan.riley@panesofglass.org</wp:comment_author_email>
			<wp:comment_author_url>http://wizardsofsmart.net/author/riles/</wp:comment_author_url>
			<wp:comment_author_IP>66.193.255.227</wp:comment_author_IP>
			<wp:comment_date>2009-07-15 09:51:59</wp:comment_date>
			<wp:comment_date_gmt>2009-07-15 16:51:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So based on the definition of architecture I'm reading into your post, you wouldn't consider the choice of object-oriented versus functional programming styles from an architectural perspective? I'm trying to understand what level of architecture you mean here. Like Michael, I usually think of architecture even down into the implementation patterns level (hence the architecture astronauts), but that seems to be included in what you might be calling an engineering concern.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Architecture Astronauts and Over Engineers</title>
		<link>http://devhawk.net/2009/07/15/architecture-astronauts-and-over-engineers/</link>
		<pubDate>Wed, 15 Jul 2009 17:12:32 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://9dbbe690-a32a-41c8-996b-d3f1af8ed69c</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Since it’s apparently Architecture Week™ [1] here at DevHawk, here’s another of my favorite Dilbert cartoons of all time – relevant to the discussion at hand.</p><p><a title="Dilbert.com" href="http://dilbert.com/strips/comic/2008-03-04/"><img style="display: block; float: none; margin-left: auto; margin-right: auto" border="0" alt="Dilbert.com" src="http://dilbert.com/dyn/str_strip/000000000/00000000/0000000/000000/00000/1000/800/1890/1890.strip.gif" /></a></p><p>Two interesting <a href="http://devhawk.net/CommentView,guid,94b98f0d-d884-4557-8df0-8f0dca3b72e7.aspx#commentstart">comments</a> on yesterday’s post:</p><blockquote><p>Architectural thinking is a necessary (and very important) part of software development - but beyond the systems level (which is systems administration and not software architecture) I have a hard time seeing divorcing architectural thinking from the actual development as anything but a terrible thing. Although I see that your definition of architecture (at the functional level) does not match my caricature of the 'architecture astronauts' which I do think can be endemic in languages that encourage additional layers of architecture. [<a href="http://www.voidspace.org.uk/">Michael Foord</a>]</p></blockquote><blockquote><p>So based on the definition of architecture I'm reading into your post, you wouldn't consider the choice of object-oriented versus functional programming styles from an architectural perspective? I'm trying to understand what level of architecture you mean here. Like Michael, I usually think of architecture even down into the implementation patterns level (hence the architecture astronauts), but that seems to be included in what you might be calling an engineering concern. [<a href="http://wizardsofsmart.net/">Ryan Riley</a>]</p></blockquote><p>Let me be very clear. Using my definition, there is no such thing “architecture even down into the implementation patterns level”. I’d argue that the implementation patterns level is engineering, not architecture. From what I’ve seen, the terms “architecture” and “engineering” tend to be used interchangeably in the software industry, and frankly I think that’s a mistake. I said as much in <a href="http://devhawk.net/2005/08/31/Architecture+At+The+Intersection.aspx">yet another post</a> I wrote four years ago:</p><blockquote><p>Architecture is the intersection between business and IT.</p><p>If a decision doesn't effect a business person, it's not an architecture decision. I'm not saying it's not important - I think the role of the software engineer is critical in large-scale enterprise system design and construction. And I will readily admit that often a single person is responsible for both architecture and engineering. But that doesn't make them the same activity. As long as we continue to confuse the two disciplines, we hold them both back.</p></blockquote><p>Michael and Ryan (or anyone else for that matter) are welcome to disagree with my definition of architecture. I often joke that if you asked ten architects to define “architecture”, you’d get twelve answers. But that’s my definition and I’m sticking to it. </p><p>But what of the Architecture Astronauts? Both Michael and Ryan mentioned them. Unsurprisingly, I think that term is used too broadly as well. If you go back and read Joel’s <a href="http://www.joelonsoftware.com/articles/fog0000000018.html">original post</a> of Architecture Astronauts, there wasn’t much reference, if any, to the implementation layer at all. </p><blockquote><p>The Architecture Astronauts will say things like: "Can you imagine a program like<i></i>Napster where you can download <i>anything,</i> not just songs?" Then they'll build applications like Groove that they think are <i>more</i> general than Napster, but which seem to have neglected that wee little feature that lets you type the name of a song and then listen to it -- the feature we wanted in the first place. Talk about missing the point. If Napster <i>wasn't</i> peer-to-peer but it <i>did</i> let you type the name of a song and then listen to it, it would have been just as popular</p><p></p><p>[Joel on Software, <a href="http://www.joelonsoftware.com/articles/fog0000000018.html">Don't Let Architecture Astronauts Scare You</a>]</p></blockquote><p>I feel that my definition fits very well with the way Joel writes about architecture in this paragraph. The Architect Astronaut is trying to solve a real business problem - people need access to information besides music. But the mistake they make is thinking they can solve multiple problems with a single solution. So they abstract higher and higher until they’ve lost sight of the original problem and can only focus on the abstractions. If you look at what Joel has to say about technologies like Hailstorm and Jini, you see the same pattern emerge. </p><p>This isn’t to say that similar problems of over-abstraction don’t happen at the implementation layer – they do. But they happen for very different reasons. Astronaut Architects are trying to solve multiple problems with a single solution. But when over-abstraction happens at the implementation level, it because someone thought they could predict the future.</p><p>We’ve all seen our fair share of over-engineered systems that introduce significant unneeded complexity on the off chance that the development team can successfully predict the kind of change likely to come in the next version of the product. Invariably, the team’s precognitive abilities are revealed to be as poor as everyone else's, so they’re left with a bunch of extra layers of software cruft that has to be maintained but provides zero additional value to the system. I’ve blogged about that problem before as well: <a href="http://devhawk.net/2008/03/05/Kitchen+Sink+Variability.aspx">Kitchen Sink Variability</a>.</p><p>Since I’m big on keeping the terminology of architecture and engineering separate, then I’d argue that we need a different term than Architecture Astronaut for people who want to introduce additional layers of abstraction at the implementation layer on the off chance that they don’t suck at precognition. Since we call such systems over-engineered, wouldn’t that make the people who build them “Over Engineers”?</p><p></p><hr /><p>[1] It’s like <a href="http://en.wikipedia.org/wiki/Shark_Week">Shark Week</a>, but with white boards and even more terrifying.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1273</wp:post_id>
		<wp:post_date>2009-07-15 17:12:32</wp:post_date>
		<wp:post_date_gmt>2009-07-15 17:12:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>architecture-astronauts-and-over-engineers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[9dbbe690-a32a-41c8-996b-d3f1af8ed69c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Architecture+Astronauts+And+Over+Engineers]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/07/16/Architecture+Astronauts+And+Over+Engineers]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2238</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>michael@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
			<wp:comment_author_IP>88.96.188.137</wp:comment_author_IP>
			<wp:comment_date>2009-07-17 03:28:09</wp:comment_date>
			<wp:comment_date_gmt>2009-07-17 10:28:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree that over-engineered is definitely the correct term for software that has too many layers of abstraction (interfaces for everything - yay! internal, private, protected, public - yay! never use fields but always properties - yay! dependency injection or you can't test - yay!).

However, when developers work on the structure of an application it is hard not to call it 'architecture', and the analogy is appropriate. (Architects *do* specify the details, often down to specific materials, of buildings they design.) It seems inevitable that these two meanings of the word will be conflated.

Nice discussion by the way,

]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2239</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Smith]]></wp:comment_author>
			<wp:comment_author_email>eric@smithster.com</wp:comment_author_email>
			<wp:comment_author_url>http://thelimberlambda.com/</wp:comment_author_url>
			<wp:comment_author_IP>196.6.141.26</wp:comment_author_IP>
			<wp:comment_date>2009-07-17 06:44:28</wp:comment_date>
			<wp:comment_date_gmt>2009-07-17 13:44:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm a little concerned with the intimation that use of interfaces, respect for visibility of type members and use of dependency injection equates to "over-engineering".  As with everything, it depends on what you're trying to achieve, and generalisations in this regard, especially when junior people who may not understand what's at stake are reading, can be damaging.

I find it an uphill battle to engender a constructive mindset in developers who have established bad habits and whose pride lies in the way of addressing those habits.

Anti-"process" talk by Joel Spolsky and the "pragmatism brigade" makes it harder.  A while ago I had a new developer refuse to write unit tests despite it being an established practice in our team because "... Jeff and Joel said they were bad in the StackOverflow podcast ...".  Yikes.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2240</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
			<wp:comment_date>2009-07-17 07:24:34</wp:comment_date>
			<wp:comment_date_gmt>2009-07-17 14:24:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Michael, as I've said above "I will readily admit that often a single person is responsible for both architecture and engineering. But that doesn't make them the same activity."

@Eric, I never intimated that "that use of interfaces, respect for visibility of type members and use of dependency injection" == over-engineering. There are good reasons to use those techniques that has exactly zero to do with thinking you can predict the future. There's good engineering and then there's over engineering. I guess that's will be the subject of my next Architecture post!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2241</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Smith]]></wp:comment_author>
			<wp:comment_author_email>eric@smithster.com</wp:comment_author_email>
			<wp:comment_author_url>http://thelimberlambda.com/</wp:comment_author_url>
			<wp:comment_author_IP>196.6.141.26</wp:comment_author_IP>
			<wp:comment_date>2009-07-17 08:42:59</wp:comment_date>
			<wp:comment_date_gmt>2009-07-17 15:42:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@DevHawk - I was making a reference to the first paragraph of @Michael's response--I guess I should have indicated as much.  I do agree with the whole over-engineering argument--looking forward to your explanation of where "good" crosses over into "over".]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>The Texas Dependency Injection Massacre</title>
		<link>http://devhawk.net/2009/07/17/the-texas-dependency-injection-massacre/</link>
		<pubDate>Fri, 17 Jul 2009 16:55:40 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d425eb36-8a14-4877-ba44-cfb9aa87a4ef</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Since I think I’ve beaten the “I think what most people call architecture is really engineering” meme to death, let’s move on to something else. Eric Smith of <a href="http://thelimberlambda.com/">The Limber Lambda</a> blog (love that name!) <a href="http://www.lyricsdepot.com/david-lee-roth/experience.html">commented</a>:</p><blockquote><p>I'm a little concerned with the intimation that use of interfaces, respect for visibility of type members and use of dependency injection equates to "over-engineering". As with everything, it depends on what you're trying to achieve, and generalisations in this regard, especially when junior people who may not understand what's at stake are reading, can be damaging.</p><p>I find it an uphill battle to engender a constructive mindset in developers who have established bad habits and whose pride lies in the way of addressing those habits.</p><p>Anti-"process" talk by Joel Spolsky and the "pragmatism brigade" makes it harder. A while ago I had a new developer refuse to write unit tests despite it being an established practice in our team because "... Jeff and Joel said they were bad in the StackOverflow podcast ...". Yikes.</p></blockquote><p>Let me be very clear. I <em>never </em>suggested that techniques such as interfaces and dependency injection are over engineering. These are good engineering practices, and every software engineer should understand them. And if Joel and Jeff really said unit tests were bad, well that would be about the dumbest thing I’d have every heard either of those two say. Yikes indeed.</p><p>But as Eric writes, “it depends on what you're trying to achieve”. Engineering techniques like dependency injection, polymorphism, encapsulation are tools, and there are many good reasons to use them. But like many tools, they can also be used <a href="http://en.wikipedia.org/wiki/The_Texas_Chain_Saw_Massacre">for evil</a>.</p><p>In other words, the tools themselves are always innocent – you have to look at how and why they are being used by the people who are using them.</p><p>Let’s take <a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a> as an example. Externalizing a software component’s dependencies enables you to test it isolation from the rest of your system. For example, it’s very common to inject a dependency that writes to a durable store, such as a logger or a data access component. In your unit tests, you inject a mock durable store instead of the real dependency. The mock will be faster (no need to actually write to disk), cleaner (no need to clean up the files on disk between test runs) and will behave exactly to the spec (bugs in the dependency component won’t create false failures in the component you’re testing). Those are all good engineering arguments for using DI, full stop.</p><p>Furthermore, DI helps insulate a software component against changes in its dependencies. I may not be able to predict specific changes with any precision, but it’s probably safe to assume that there a given component’s dependencies aren’t going to remain completely static. DI doesn’t insulate you 100% from possible changes – in particular, it doesn’t help if the dependency’s interface changes.</p><p>But I would argue that you can go too far with DI. Let’s go back to the logger component example I described above. Maybe, the over engineer thinks, we’ll want the logger to write to the database instead of the file system in the future. Or maybe we’ll want the logger to write to a different database. And if it’s supporting a different database, then maybe the logger should support different back end databases. Or maybe, Or Maybe, OR MAYBE.. </p><p>We’ve gone from a simple component that logs to the file system and turned it into a engineering monstrosity with multiple points of variability and extensibility. When you start saying “maybe we should” or “this could change in the future” or stuff like that, that’s when you start over engineering something.</p><p>Unfortunately, there’s only one way to know when you’ve started over-engineering: Experience. Sorry Eric, I can’t help you with your junior engineers. As David Lee Roth <a href="http://www.lyricsdepot.com/david-lee-roth/experience.html">once sang</a>, Experience is the “worst teacher goin’”. But if there’s a better way to learn, I don’t know it. In the meantime, I suggest code reviews and pair programming.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1274</wp:post_id>
		<wp:post_date>2009-07-17 16:55:40</wp:post_date>
		<wp:post_date_gmt>2009-07-17 16:55:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-texas-dependency-injection-massacre</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="software-design"><![CDATA[Software Design]]></category>
		<category domain="post_tag" nicename="software-engineering"><![CDATA[Software Engineering]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d425eb36-8a14-4877-ba44-cfb9aa87a4ef]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[The+Texas+Dependency+Injection+Massacre]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/07/17/The+Texas+Dependency+Injection+Massacre]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2242</wp:comment_id>
			<wp:comment_author><![CDATA[Sam Gentile]]></wp:comment_author>
			<wp:comment_author_email>managedcode44@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://samgentile.com/Web</wp:comment_author_url>
			<wp:comment_author_IP>98.110.111.205</wp:comment_author_IP>
			<wp:comment_date>2009-07-17 18:16:36</wp:comment_date>
			<wp:comment_date_gmt>2009-07-18 01:16:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The commented link also goes to the David Lee Roth lyrics]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2243</wp:comment_id>
			<wp:comment_author><![CDATA[John]]></wp:comment_author>
			<wp:comment_author_email>jevdemon@acm.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.217.31.151</wp:comment_author_IP>
			<wp:comment_date>2009-07-17 21:57:58</wp:comment_date>
			<wp:comment_date_gmt>2009-07-18 04:57:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://www.globalnerdy.com/wordpress/wp-content/uploads/2008/12/yagni-development-assistant-3.gif]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2244</wp:comment_id>
			<wp:comment_author><![CDATA[PhilM]]></wp:comment_author>
			<wp:comment_author_email>philm@ymail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>69.226.219.51</wp:comment_author_IP>
			<wp:comment_date>2009-08-05 18:45:30</wp:comment_date>
			<wp:comment_date_gmt>2009-08-06 01:45:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Most programmers/software engineers/developers that I have worked with for a few decades now, are pretty stupid. Given the fact that we are human beings, that is quite natural that most of us are stupid. We go periodically to our chosen place of worship and get our dose of dogmatism from people blessed with glib tongues. Usually, the dogmas are reasonable sounding and seem worth adopting for life.

So it is with programming. The priests of programming come in the guise of methodology gurus, architects, framework designers, testers, you name it and they are there. They usually have something to sell. The sheepish lot of programmers, who usually have an inflated sense of self-importance, absorb these dogmas and practice it as every new convert to any faith is wont to do.

I have suffered and continue to suffer working with people who so foolishly and feverishly follow the prescribed rituals that the rituals become the end. Meeting the end of goal building a useful system is not the driver at all. Our systems are so finely architected at the micro level, right down to the patterns from GoF book, but they are miserable failures when it comes to the real world requirements of performance, security, scalability, robustness, extensibility, maintainability and usability. No need to mention that they are forever late. If your software is not full of interfaces, abstract classes and implementation classes or if it doesn't have a boat load of managers, DAOs, it is considered unworthy and you are considered ignorant of modern ways of building software. The soul of design, which is all about trade offs, is hardly ever practiced. Everything is gold plated. Every turd gets french polished :) 

Every practice has its place. But those who follow practices in total faith are, let me repeat, stupid. The bad news is that, there are a lot people of faith.

Sorry, just have to get this off my chest somewhere. I liked your blog and had to comment.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Functions that Create Functions in Powershell</title>
		<link>http://devhawk.net/2009/07/28/functions-that-create-functions-in-powershell/</link>
		<pubDate>Tue, 28 Jul 2009 16:59:13 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://fc763e0f-f263-4dfb-b656-df6642994b92</guid>
		<description></description>
		<content:encoded><![CDATA[Since I started using Powershell, I’m very picky about what I let on my path. I feel it’s much cleaner to create aliases or functions rather than letting all kinds of crud creep into my path.

Recently, I installed the latest <a href="http://www.ironruby.com/Download">IronRuby release</a> and discovered there’s a whole bunch of little batch file wrappers around common Ruby commands like gem and rake. While being able to simply type “igem” or “irake” is much easier than typing “ir "C:Program Filesironruby-0.6.0binigem"”, I didn’t want to pollute my path - even with a product from my team. Instead, I wanted to create a Powershell function for each of those IronRuby-fied commands. Furthermore, I wanted to avoid manually creating a function for each Ruby command – these batchfiles are literally identical except for their name, so I figured it would be possible automate the function creation in Powershell. Here’s what I came up with:
<pre class="brush: powershell">$iralias = get-alias ir -EA SilentlyContinue
if ($iralias -eq $null) {return}

$irbindir = split-path $iralias.Definition

function make-rubyfunction($cmd)
{
  $cmdpath = join-path $irbindir $cmd
  set-item function:global:$cmd -Value {ir $cmdpath $args}.GetNewClosure()
  write-host "Added IronRuby $_ command"
}

("igem","iirb","irackup","irails","irake","irdoc","iri") |
  %{make-rubyfunction $_}</pre>
I start by getting the ir alias, which I’m <a href="http://devhawk.net/2008/12/17/PowerShell+Findtosetalias.aspx">setting in my traditional fashion</a>. The Ruby command files are in the same directory as ir.exe, which is what ir is aliased to. If the ir alias isn’t set, I quit out of the script without setting anything.

The make-rubyfunction function is the primary workhorse of this script. You pass in a command name as a string, and it uses <a href="http://technet.microsoft.com/en-us/library/dd347590.aspx">set-item</a> on the <a href="http://technet.microsoft.com/en-us/library/dd347741.aspx">function provider</a> to create a new function. Note, I had to explicitly create this function in the global scope since I’m running the set-item cmdlet inside a script.

Getting the value for the function took a bit of head banging to figure out. I’m used to Python, which automatically closes over variables, so my first attempt was to set the function value to something like { ir $cmdpath $args }. But Powershell doesn’t close automatically, so that fails since $cmd isn’t defined inside the function. I asked around on the internal Powershell alias, and someone pointed me to the new <a href="http://blogs.msdn.com/powershell/archive/2009/03/27/get-closure-with-getnewclosure.aspx">GetNewClosure</a> function in Powershell v2. In other words, Powershell only supports manual closures, which is kind of wonky, but works OK for this scenario. I create a new script block that references in-scope variable $cmdpath and GetNewClosure automatically creates a new script block where that value is captured and embedded. More info on GetNewClosure <a href="http://msdn.microsoft.com/en-us/library/system.management.automation.scriptblock.getnewclosure(VS.85).aspx">in the docs</a>.

Now, I’m using Win7 exclusively at this point, so depending on a v2 feature didn’t bother me. However, if you’re using Powershell v1, you could still accomplish something similar using text substitution. Here’s my original (i.e. pre-GetNewClosure) version of make-rubyfunction
<pre class="brush: powershell">function make-rubyfunction($cmd)
{
  $cmdpath = join-path $irbindir $cmd
  $p = "ir `"$cmdpath`" `$args"
  set-item function:global:$cmd -Value $p
  write-host "Added IronRuby $_ command"
}</pre>
I’m using Powershell’s standard text substitution mechanism to create the function value as a string. Note that I’m escaping the dollar sign in $args, so that does not get substituted the way $cmdpath does. GetNewClosure feels cleaner, so that’s how I ended up doing it, but both ways seem to work fine.

Finally, I pass an array of IronRuby commands down the pipe to make-rubyfunction. I love the pipe command, though it feels strange to use parentheses instead of square brackets for list comprehensions like Python and F#!

Anyway, the script – as usual – is <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/ironruby%7C_aliases.ps1">up on my SkyDrive</a>. At some point, I want to do something similar for common IronPython scripts like <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/57298#758946">pyc</a> and <a href="http://github.com/devhawk/ipydbg/tree/master">ipydbg</a>. Until then, hopefully someone out there will find it useful (like maybe the IronRuby team?).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1275</wp:post_id>
		<wp:post_date>2009-07-28 16:59:13</wp:post_date>
		<wp:post_date_gmt>2009-07-28 16:59:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>functions-that-create-functions-in-powershell</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[fc763e0f-f263-4dfb-b656-df6642994b92]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Functions+That+Create+Functions+In+Powershell]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/07/28/Functions+That+Create+Functions+In+Powershell]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I Hate Global.asax</title>
		<link>http://devhawk.net/2009/08/06/i-hate-global-asax/</link>
		<pubDate>Thu, 06 Aug 2009 11:58:58 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://f8806ba3-a1bb-4c6f-8a39-a0ca8a81ef58</guid>
		<description></description>
		<content:encoded><![CDATA[<p>One of the things I’ve always loved about ASP.NET is how easily extensible it is. Back in 2000, I had a customer that wanted to “skin” their website using XML and XSLT – an approach Martin Fowler later called <a href="http://martinfowler.com/eaaCatalog/transformView.html">Transform View</a>. We were working with classic ASP at the time, so the solution we ended up with was kind of ugly. But I was able to implement this approach in ASP.NET in a few hundred lines of code, which I wrote up in <a href="http://msdn.microsoft.com/en-us/magazine/dvdarchive/cc164164.aspx">an MSDN article</a> published back in 2003. In the conclusion of that article, I wrote the following:</p><blockquote><p>Using ASP.NET is kind of like having your mind read. If you ever look at a site and think "I need something different," you'll most likely find that the ASP.NET architects have considered that need and provided a mechanism for you to hook in your custom functionality. In this case, I've bypassed the built-in Web Forms and Web Services support to build an entire engine that services Web requests in a unique way.</p></blockquote><p>Nearly ten years later, I finally ran into a situation where ASP.NET failed to read my mind and doesn’t provide a mechanism to hook in custom functionality: Global.asax.</p><p>I always thought of global.asax as an obsolete construct primarily intended to ease migration from classic ASP. After all, ASP.NET has first class support for customizing request handling at various points throughout the execution pipeline via <a href="http://msdn.microsoft.com/en-us/library/system.web.ihttpmodule.aspx">IHttpModule</a>. Handling those events in global.asax always felt vaguely hacky to me. </p><p>However, what I didn’t realize is that there are some events that can only be handled via global.asax (or its code behind). In particular, Application_Start/End and Session_Start/End can only be handled in global.asax. Worse, these aren’t true events. For reasons I’m sure made sense at the time but that I don’t understand, the HttpApplicationFactory discovers these methods via reflection rather than by an interface or other more typical mechanism. You can check it out for yourself with <a href="http://reflector.red-gate.com">Reflector</a> or the <a href="http://referencesource.microsoft.com/">Reference Source</a> – look for the method with the wonderful name ReflectOnMethodInfoIfItLooksLikeEventHandler. No, I’m not making that up.</p><p>The reason I suddenly care about global.asax is because Application_Start is where ASP.NET MVC apps configure their route table. But if you want to access the Application_Start method in a dynamic language like IronPython, you’re pretty much out of luck. The only way to receive the Application_Start pseudo-event is via a custom HttpApplication class. But you can’t implement your custom HttpApplication in a dynamically typed language like IronPython since it finds the Application_Start method via Reflection. Ugh.</p><p>If someone can explain to me why ASP.NET uses reflection to fire the Application_Start event, I’d love to understand why it works this way. Even better - I’d love to see this fixed in some future version of ASP.NET. You come the only way to configure a custom HttpApplication class is to specify it via global.asax? Wouldn’t it make sense to specify it in web.config instead?</p><p>In order to support Application_Start for dynamic languages you basically have two choices:</p><ol><li>Build a custom HttpApplication class in C# and reference it in global.asax. This is kind of the approach used by Jimmy’s ironrubymvc project. He’s got a <a href="http://github.com/jschementi/ironrubymvc/blob/939319febe205a43d6837e50fe3fe4740708fd58/IronRubyMvc/Core/RubyMvcApplication.cs">RubyMvcApplication</a> which he inherits his <a href="http://github.com/jschementi/ironrubymvc/blob/939319febe205a43d6837e50fe3fe4740708fd58/IronRubyMvcWeb/Global.asax.cs">GlobalApplication</a> from. Given that GlobalApplication is empty, I think he could remove his global.asax.cs file and just reference RubyMvcApplication from global.asax directly. </li><li>Build custom Application_Start/End-like events out of IHttpModule Init and Dispose. You can have multiple IHttpModule instances in a given web app, so you’d need to make sure you ran fired Start and End only once. This is the approach taken by the <a href="http://aspnet.codeplex.com/Wiki/View.aspx?title=Dynamic%20Language%20Support">ASP.NET Dynamic Language Support</a>. [1] </li></ol><p>So here’s the question Iron Language Fans: Which of these approaches is better? I lean towards Option #1, since it traps exactly the correct event though it does require a global.asax file to be hanging around (kind of like how the ASP.NET MVC template has a blank default.aspx file “to ensure that ASP.NET MVC is activated by IIS when a user makes a "/" request”). But I’m curious what the Iron Language Community at large thinks. Feel free to leave me a comment or <a href="mailto:harry.pierson@microsoft.com">drop me an email</a> with your thoughts.</p><hr /><p>[1] FYI, I’m working on getting the code for ASP.NET Dynamic Language Support released. In the meantime, you can verify what I’m saying via Reflector.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1276</wp:post_id>
		<wp:post_date>2009-08-06 11:58:58</wp:post_date>
		<wp:post_date_gmt>2009-08-06 11:58:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>i-hate-global-asax</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[f8806ba3-a1bb-4c6f-8a39-a0ca8a81ef58]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[I+Hate+Globalasax]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/06/I+Hate+Globalasax]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2245</wp:comment_id>
			<wp:comment_author><![CDATA[Parag Mehta]]></wp:comment_author>
			<wp:comment_author_email>contact@jpinfoworld.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jpinfoworld.com</wp:comment_author_url>
			<wp:comment_author_IP>121.247.165.141</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 22:02:00</wp:comment_date>
			<wp:comment_date_gmt>2009-08-10 05:02:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's a really interesting find :) I didn't realize this since I didn't use Dynamic language as yet.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2246</wp:comment_id>
			<wp:comment_author><![CDATA[Sea Cat]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>64.126.25.123</wp:comment_author_IP>
			<wp:comment_date>2009-08-10 09:16:37</wp:comment_date>
			<wp:comment_date_gmt>2009-08-10 16:16:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What I don't understand is why you would want to use dynamic languages for asp.net development in the first place. Sounds like a bastardization of the environment to me.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2247</wp:comment_id>
			<wp:comment_author><![CDATA[Joe Chung]]></wp:comment_author>
			<wp:comment_author_email>joechung2008@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>97.113.6.29</wp:comment_author_IP>
			<wp:comment_date>2009-08-22 13:04:08</wp:comment_date>
			<wp:comment_date_gmt>2009-08-22 20:04:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The reason Application_Start, Application_End, Session_Start, and Session_End are like that is because of legacy.  ASP worked like that - http://msdn.microsoft.com/en-us/library/ms525965.aspx

Would it be possible to the route table in an  HttpApplication's Init method override instead?  Or is that too soon in the application's lifecycle to muck around with the ASP.NET routing table?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2248</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://htto://www.ironpythoninaction.com</wp:comment_author_url>
			<wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
			<wp:comment_date>2009-08-23 14:34:43</wp:comment_date>
			<wp:comment_date_gmt>2009-08-23 21:34:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Sea cat
Once you done *anything* in a dynamic language you tend to want to use them wherever possible... ;-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2249</wp:comment_id>
			<wp:comment_author><![CDATA[Dody Gunawinata]]></wp:comment_author>
			<wp:comment_author_email>dody@nomadlife.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.237.157.155</wp:comment_author_IP>
			<wp:comment_date>2009-08-26 14:08:36</wp:comment_date>
			<wp:comment_date_gmt>2009-08-26 21:08:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[1st approach. It seems to be it's more straightforward. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2250</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
			<wp:comment_date>2009-08-26 23:14:26</wp:comment_date>
			<wp:comment_date_gmt>2009-08-27 06:14:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Dody, I was leaning that way as well.

@Joe, I don't see why you couldn't setup the route table in HttpApplication::Init. And since Init is virtual, that would solve the App_Start reflection problem. However, I'm not sure how to inject IronPython into the ASP.NET pipeline that early or how to configure an HttpApplication subclass without using global.asax. I'll ask around with my friends on the ASP.NET team though. Thanks for the suggestion!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Pygments for Windows Live Writer v1.0.2</title>
		<link>http://devhawk.net/2009/08/07/pygments-for-windows-live-writer-v1-0-2/</link>
		<pubDate>Fri, 07 Aug 2009 15:46:50 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://13f5634e-e472-48e0-86eb-8d51c583006d</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I just uploaded a new version of my <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Pygments%20for%20WL%20Writer/Pygments.WLWriter.msi">Pygments for WL Writer plugin</a> to my skydrive. Nothing major here – some minor UI cleanup + an upgrade to <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=27350">IronPython 2.6 beta 2</a>. Installing over the old version worked on my machine, but that’s as far as my testing has gone. I also pushed the <a href="http://github.com/devhawk/pygments.wlwriter/tree/v1.0.2">latest source</a> out to GitHub.  </p><p>I’m still waiting on a fix for what <a href="http://blogs.msdn.com/dinoviehland/default.aspx">Dino</a> has taken to calling “Harry’s Pygments Import Bug” – which actually turned out to be <em>three </em>importer bugs. The Pygments lexers package is customized so as to abstract away the specific modules the individual lexers are defined in. I don’t use that functionality – I’m using <a href="http://github.com/devhawk/pygments.wlwriter/blob/5684d8e936921e9f79ab3e3f08bd1570e48a8a51/pygments_package/pygments/lexers/__init__.py#L41">get_all_lexers</a> and <a href="http://github.com/devhawk/pygments.wlwriter/blob/5684d8e936921e9f79ab3e3f08bd1570e48a8a51/pygments_package/pygments/lexers/__init__.py#L69">get_lexer_by_name</a> instead – but the bugs caused importing the package to fail so in the mean time I commented out the <a href="http://github.com/devhawk/pygments.wlwriter/blob/5684d8e936921e9f79ab3e3f08bd1570e48a8a51/pygments_package/pygments/lexers/__init__.py#L202">lines that don’t work under IronPython</a>. I think Dino’s got the fixes for this checked in, but I probably won’t update Pygments for WL Writer again until IronPython 2.6 RC.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1277</wp:post_id>
		<wp:post_date>2009-08-07 15:46:50</wp:post_date>
		<wp:post_date_gmt>2009-08-07 15:46:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pygments-for-windows-live-writer-v1-0-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="pygments"><![CDATA[Pygments]]></category>
		<category domain="post_tag" nicename="windows-live"><![CDATA[Windows Live]]></category>
		<category domain="post_tag" nicename="windows-live-writer"><![CDATA[Windows Live Writer]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[13f5634e-e472-48e0-86eb-8d51c583006d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Pygments+For+Windows+Live+Writer+V102]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/07/Pygments+For+Windows+Live+Writer+V102]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Building a Hybrid C# / IronPython App Without Dynamic Type</title>
		<link>http://devhawk.net/2009/08/10/building-a-hybrid-c-ironpython-app-without-dynamic-type/</link>
		<pubDate>Mon, 10 Aug 2009 08:04:21 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://13f1d88e-c057-427c-bb8f-d85062ba910a</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Arguably, the biggest feature of C# 4.0 is the new <a href="http://msdn.microsoft.com/en-us/library/dd264736(VS.100).aspx">dynamic type</a>. And it’ll be great…when it ships. In the meantime, some of us what to build hybrid C# and IronPython applications today, such as my <a href="http://devhawk.net/2009/08/07/Pygments+For+Windows+Live+Writer+V102.aspx">Pygments for Windows Live Writer plugin</a>. </p><p><a href="http://pygments.org/"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="pygments_logo" border="0" alt="pygments_logo" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/CallingIronPythonfromCWithouttheDynamicT_E49B/pygments_logo_55f6722f-70ee-4d75-8781-b5d547dd3f72.png" width="318" height="133" /> Pygments</a> is a syntax highlighter, written in Python, with support for <a href="http://pygments.org/languages/">over one hundred languages</a>. With the exception of a couple of bugs in our importer (<a href="http://devhawk.net/2009/08/07/Pygments+For+Windows+Live+Writer+V102.aspx">discussed here</a>) it works great with IronPython. It’s also extensible, so I was able to easily build a custom formatter to output exactly the HTML I want inserted in my blog posts. So it made perfect sense to use Pygments as the basis of a Windows Live Writer plugin. </p><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/CallingIronPythonfromCWithouttheDynamicT_E49B/image_6.png"><img style="border-right-width: 0px; margin: 0px 5px 0px 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" align="left" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/CallingIronPythonfromCWithouttheDynamicT_E49B/image_thumb_2.png" width="122" height="220" /></a> As great a tool as Windows Live Writer is, it’s developers haven’t exactly seen the light when it comes to dynamic languages. If you want to <a href="http://msdn.microsoft.com/en-us/library/aa702851.aspx">create a custom Content Source</a> for Windows Live Writer, you have to generate a compiled on-disk assembly with a static type and custom attributes. Not exactly IronPython’s forte, if you know what I mean. I did try and build a pure IronPython solution, but eventually gave up. So I ended up building a hybrid solution. The front end of the plugin as well as the UI elements are written in C# while the syntax highlighter engine is written in IronPython. And since this is running on the current .NET framework, I didn’t have the new fangled C# 4.0 dynamic type to help me. </p><p>Over the next couple of blog posts, I want to highlight a few aspects how I built this plugin, including compiling Python packages into assemblies and invoking Python code from C# 3.0 and earlier. If you want to look for your self, <a href="http://github.com/devhawk/pygments.wlwriter/tree/master">the source</a> is up on GitHub.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1278</wp:post_id>
		<wp:post_date>2009-08-10 08:04:21</wp:post_date>
		<wp:post_date_gmt>2009-08-10 08:04:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>building-a-hybrid-c-ironpython-app-without-dynamic-type</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="pygments"><![CDATA[Pygments]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[13f1d88e-c057-427c-bb8f-d85062ba910a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Building+A+Hybrid+C+IronPython+App+Without+Dynamic+Type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/10/Building+A+Hybrid+C+IronPython+App+Without+Dynamic+Type]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Compiling Python Packages into Assemblies</title>
		<link>http://devhawk.net/2009/08/10/compiling-python-packages-into-assemblies/</link>
		<pubDate>Mon, 10 Aug 2009 11:16:41 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://058b7415-e1e2-43e8-b6ed-6d9e67a32e1f</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/970048722e75_E4A5/image_5.png"><img style="border-right-width: 0px; margin: 0px 5px 0px 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" align="left" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/970048722e75_E4A5/image_thumb.png" width="144" height="260" /></a> In looking at my <a href="http://devhawk.net/2009/08/10/Building+A+Hybrid+C+IronPython+App+Without+Dynamic+Type.aspx">hybrid IronPython / C# Windows Live Writer plugin</a>, we’re going to start at the bottom with the Pygments package. Typically Python packages are a physical on-disk folder that contain a collection of Python files (aka modules). And during early development of Pygments for WLWriter, that’s exactly how I used it. However, when it can time for deployment, I figured it would be much easier if I packaged up the <a href="http://github.com/devhawk/pygments.wlwriter/tree/2c9cbb7f777d66d5ad615bb71201dc6c181ef18e/pygments_package/pygments">Pygments package</a>, <a href="http://github.com/devhawk/pygments.wlwriter/blob/2c9cbb7f777d66d5ad615bb71201dc6c181ef18e/pygments_package/devhawk_formatter.py">my custom HTML formatter</a> and the <a href="http://github.com/devhawk/pygments.wlwriter/tree/2c9cbb7f777d66d5ad615bb71201dc6c181ef18e/pygments_package/pygments_dependencies">standard library modules that Pygments depends on</a> into a single assembly.</p><p>IronPython ships with a script named <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/57861#758946">pyc</a> for compiling Python files into .NET assemblies. However, pyc is pretty much just a wrapper around the clr module CompileModules function. I wrote my <a href="http://github.com/devhawk/pygments.wlwriter/blob/2c9cbb7f777d66d5ad615bb71201dc6c181ef18e/pygments_package/build_pygments.py">own custom script</a> to build the Pygments assembly from the files in a the pygments and pygments_dependencies folders.</p><p></p><pre class="brush: python">
from System import IO
from System.IO.Path import Combine

def walk(folder):
  for file in IO.Directory.GetFiles(folder):
    yield file
  for folder in IO.Directory.GetDirectories(folder):
    for file in walk(folder): yield file
  
folder = IO.Path.GetDirectoryName(__file__)

pygments_files = list(walk(Combine(folder, 'pygments')))
pygments_dependencies = list(walk(Combine(folder,'pygments_dependencies')))

all_files = pygments_files + pygments_dependencies
all_files.append(IO.Path.Combine(folder, 'devhawk_formatter.py'))

import clr
clr.CompileModules(Combine(folder, "..externalpygments.dll"), *all_files)
</pre><p></p><p>Most of this code is a custom implementation of <a href="http://docs.python.org/library/os.html#os.walk">walk</a>. I have all the <a href="http://github.com/devhawk/pygments.wlwriter/tree/2c9cbb7f777d66d5ad615bb71201dc6c181ef18e/External">IronPython and DLR dlls</a> including ipy.exe checked into my source tree, but I don’t have the standard library checked in. Other than that, the code is pretty straight forward – collect a bunch of files in a list and call CompileModules.</p><p>The problem with this approach is that IronPython isn’t doing any kind of dependency checking when we compile the assembly. If you pass just the contents of the Pygments package into CompileModules, it will emit an assembly but that assembly will still depend on some modules in the standard library. If those aren’t available, the Pygments assembly won’t load. I’d <em>love</em> to have an automatic tool to determine module dependencies, but since I didn’t have such a tool I used a brute-force, by-hand solution. I wrote a <a href="http://github.com/devhawk/pygments.wlwriter/blob/2c9cbb7f777d66d5ad615bb71201dc6c181ef18e/External/test_compiled_pygments.py">small script</a> to exercise the Pygments assembly. If there were any missing dependencies, test_compiled_pygments would throw an exception indicating the missing module. For each missing dependency, I copied over the missing dependency, recompiled to project and tried again. Lather, rinse, repeat. Not fun, but Pygments only depended on seven standard library modules so it didn’t end up taking that long. </p><p>So having gone down this path of compiling Python files into an assembly, would I do it again? For an application with an installer like this one, yes no question. I added the Pygments assembly as a reference to my C# library and it got added to the installer automatically. That was much easier than managing all of the Pygments files and its dependencies in the installer project manually. Plus, I still would have had to manually figure out the dependencies unless I chose to include the entire standard library.</p><p>I will point out that the compiled Pygments assembly is the largest single file in my deployed solution. It clocks in at 2.25MB. That’s about twice the size of the Python files that I compiled it from. So clearly, I’m paying for the convenience of deploying a single file in space and maybe load time. [1] I’m also paying in space for a private copy of IronPython and the DLR – the two IronPython and five DLR assemblies clock in around 3.16MB. In comparison, the actual Writer plugin assembly itself is only about 25KB! But for an installed desktop app like a WLWriter plugin, 5MB of assorted infrastructure isn’t worth worrying about compared to the hassle of ensuring a shared copy of IronPython is installed. I mean, even if you don’t know IronPython exists, you can still install and use Pygments for WLWriter. Simplifying the install process is easily worth 5MB in storage space on the user’s computer in my opinion.</p><p>Next up, we’ll look at the Python half of the PygmentsCodeSource component, which calls into this compiled Pygments library. </p><hr /><p>[1] I haven’t done it, but it would be interesting to compare the load time for the single larger pygments assembly vs. loading and parsing the Python files individually. If I had to guess, I’m thinking the single assembly would load faster even though it’s bigger since there’s less overhead (only loading one big file vs. lots of small ones) and you skip the parsing step. But that’s pure guesswork on my part.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1279</wp:post_id>
		<wp:post_date>2009-08-10 11:16:41</wp:post_date>
		<wp:post_date_gmt>2009-08-10 11:16:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>compiling-python-packages-into-assemblies</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="pygments"><![CDATA[Pygments]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[058b7415-e1e2-43e8-b6ed-6d9e67a32e1f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Compiling+Python+Packages+Into+Assemblies]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/10/Compiling+Python+Packages+Into+Assemblies]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Embedding Python Scripts in C# Applications</title>
		<link>http://devhawk.net/2009/08/11/embedding-python-scripts-in-c-applications/</link>
		<pubDate>Tue, 11 Aug 2009 09:24:42 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://ac6fe2e5-6c82-4898-8ee3-1bde31026655</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="image" border="0" alt="image" align="left" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/8d7a6d959c67_6D72/image_thumb_1.png" width="133" height="240" /></p><p>Now that I’ve got Pygments and its dependencies <a href="http://devhawk.net/2009/08/10/Compiling+Python+Packages+Into+Assemblies.aspx">packaged up in an easy-to-distribute assembly</a>, I need to be able to call it from C#. However, if you pop open pygments.dll in Reflector, you’ll notice it’s not exactly intuitive to access. Lots of compiler generated names like pygments$12 and StringIO$64 in a type named DLRCachedCode. Clearly, this code isn’t intended to be used by anything except the IronPython runtime. </p><p>So we better create one of those IronPython runtime thingies.</p><p>As you can see in the layer diagram to the left, PygmentsCodeSource is split into two parts – a C# part and a Python part. The Python part is very simple – just importing a couple of Pygments functions into the global namespace and a simple helper function to generate syntax highlighted HTML from a given block of code in a given language and style. The code itself is pretty simple. Note the reference to the pygments assembly I described last post. Here’s the entire file:</p><pre class="brush: python">
import clr
clr.AddReference("pygments")       

from pygments.lexers import get_all_lexers       
from pygments.styles import get_all_styles       

def generate_html(code, lexer_name, style_name):       
  from pygments import highlight       
  from pygments.lexers import get_lexer_by_name       
  from pygments.styles import get_style_by_name       
  from devhawk_formatter import DevHawkHtmlFormatter       

  if not lexer_name: lexer_name = "text"
  if not style_name: style_name = "default"
  lexer = get_lexer_by_name(lexer_name)       
  return highlight(code, lexer, DevHawkHtmlFormatter(style=style_name))
</pre><p>Instead of including this in the Pygments assembly, I embedded this file as a resource in my C# assembly. This way, I could use the standard DLR hosting APIs to create a script source and execute this code. I did have to build a concrete StreamContentProvider class to wrap the resource stream in, but otherwise, it’s pretty straight forward. </p><pre class="brush: csharp">
static ScriptEngine _engine;      
static ScriptSource _source;      

private void InitializeHosting()      
{
    _engine = IronPython.Hosting.Python.CreateEngine();      

    var asm = System.Reflection.Assembly.GetExecutingAssembly();      
    var stream = asm.GetManifestResourceStream(      
                   "DevHawk.PygmentsCodeSource.py");      
    _source = _engine.CreateScriptSource(      
                new BasicStreamContentProvider(stream),  
                "PygmentsCodeSource.py");      
}
</pre><p>Once I got the engine and script source set up, all that remains is setup a script scope to execute the script source in. For this specific application, it’s probably overkill to have a scope per instance – I think the syntax highlighting process is stateless so a single scope should be easily shared across multiple PygmentsCodeSource instances. But I didn’t take any chances, I created a script scope per instance to execute the source in.</p><pre class="brush: csharp">
ScriptScope _scope;     
Thread _init_thread;      

public PygmentsCodeSource()      
{
    if (_engine == null)      
        InitializeHosting();      

     _scope = _engine.CreateScope();      

    _init_thread = new Thread(() =&gt; { _source.Execute(_scope); });      
    _init_thread.Start();      
}
</pre><p>You’ll notice that I’m executing the source in the scope on a background thread. That’s because it takes a while to execute, especially the first time. However, I don’t actually use the Python code until after the user types or copies a block of code into the UI and presses OK. In my experience, executing the Python code is typically finished by the time I get code into the box and press OK. I just need to make sure I add an _init_thread.Join guard anywhere I’m going to access the _scope to be sure the initialization is complete before I try to use it.</p><p>In the next, and last, post in this small series we’ll see how to invoke Python functions in the _scope I initialized above from C#.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1280</wp:post_id>
		<wp:post_date>2009-08-11 09:24:42</wp:post_date>
		<wp:post_date_gmt>2009-08-11 09:24:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>embedding-python-scripts-in-c-applications</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="pygments"><![CDATA[Pygments]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[ac6fe2e5-6c82-4898-8ee3-1bde31026655]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Embedding+Python+Scripts+In+C+Applications]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/11/Embedding+Python+Scripts+In+C+Applications]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2251</wp:comment_id>
			<wp:comment_author><![CDATA[Randall Sutton]]></wp:comment_author>
			<wp:comment_author_email>randallsutton@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.randallsutton.net</wp:comment_author_url>
			<wp:comment_author_IP>64.78.193.116</wp:comment_author_IP>
			<wp:comment_date>2009-08-11 09:50:12</wp:comment_date>
			<wp:comment_date_gmt>2009-08-11 16:50:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good Post.  Seems like managing the engine/scope startup time is the biggest issue when executing python scripts from C#.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Invoking Python Functions from C# (Without Dynamic)</title>
		<link>http://devhawk.net/2009/08/12/invoking-python-functions-from-c-without-dynamic/</link>
		<pubDate>Wed, 12 Aug 2009 10:10:00 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://03f74f91-03a2-4aa2-a456-33967f739b18</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/InvokingPythonFunctionsfromCWithoutDynam_13C34/image_2.png"><img style="border-right-width: 0px; margin: 0px 5px 0px 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" align="left" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/InvokingPythonFunctionsfromCWithoutDynam_13C34/image_thumb.png" width="133" height="240" /></a> So I’ve <a href="http://devhawk.net/2009/08/10/Compiling+Python+Packages+Into+Assemblies.aspx">compiled the Pygments package into a CLR assembly</a> and <a href="http://devhawk.net/2009/08/11/Embedding+Python+Scripts+In+C+Applications.aspx">loaded an embedded Python script</a>, so now all that remains is calling into the functions in that embedded Python script. Turns out, this is the easiest step so far.</p><p>We’ll start with get_all_lexers and get_all_styles, since they’re nearly identical. Both functions are called once on initialization, take zero arguments and return a PythonGenerator (for you C# devs, a PythonGenerator is kind of like the IEnumerable that gets created when you yield return from a function). In fact, the only difference between them is that get_all_styles returns a generator of simple strings, while get_all_lexers returns a PythonTuple of the long name, a tuple of aliases, a tuple of filename patterns and a tuple of mime types. Here’s the implementation of Languages property:</p><pre class="brush: csharp">
PygmentLanguage[] _lanugages;     

public PygmentLanguage[] Languages      
{
    get
    {
        if (_lanugages == null)      
        {
            _init_thread.Join();      

            var f = _scope.GetVariable&lt;PythonFunction&gt;("get_all_lexers");      
            var r = (PythonGenerator)_engine.Operations.Invoke(f);      
            var lanugages_list = new List&lt;PygmentLanguage&gt;();      
            foreach (PythonTuple o in r)      
            {
                lanugages_list.Add(new PygmentLanguage()      
                    {
                        LongName = (string)o[0],      
                        LookupName = (string)((PythonTuple)o[1])[0]      
                    });      
            }

            _lanugages = lanugages_list.ToArray();      
        }

        return _lanugages;      
    }
}
</pre><p>If you recall from my last post, I initialized the _scope on a background thread, so I first have to wait for the thread to complete. If I was using C# 4.0, I’d simply be able to run _scope.get_all_lexers, but since I’m not I have to manually reach into the _scope and retrieve the get_all_lexers function via the GetVariable method. I can’t invoke the PythonFunction directly from C#, instead I have to use the Invoke method that hangs off _engine.Operations. I cast the return value from Invoke to a PythonGenerator and iterate over it to populate the array of languages.</p><p>If you’re working with dynamic languages from C#, the <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/57985#760280">ObjectOperations</a> instance than hangs off the ScriptEngine instance is amazingly useful. Dynamic objects can participate in a powerful but somewhat complex protocol for binding a wide variety of dynamic operation types. The <a href="http://ironpython.codeplex.com/SourceControl/changeset/view/57985#760650">DynamicMetaObject</a> class supports twelve different Bind operations. But the DynamicMetaObject binder methods are designed to be used by language implementors. The ObjectOperations class lets you invoke them fairly easily from a higher level of abstraction.</p><p>The last Python function I call from C# is generate_html. Unlike get_all_lexers, generate_html takes three parameters and can be called multiple times. The Invoke method has a params argument so it can accept any number of additional parameters, but when I tried to call it I got a NotImplemented exception. It turns out that Invoke currently throws NotImplemented if it receives more than 2 parameters. Yes, we realize that’s kinda broken and we are looking to fix it. However, it turns out there’s another way that’s also more efficient for a function like generate_html that we are likely to call more than once. Here’s my implementation of GenerateHtml in C#.</p><pre class="brush: csharp">
Func&lt;object, object, object, string&gt; _generatehtml_function;      

public string GenerateHtml(string code, string lexer, string style)      
{
    if (_generatehtml_function == null)      
    {
        _init_thread.Join();      
             
        var f = _scope.GetVariable&lt;PythonFunction&gt;("generate_html");      
        _generatehtml_function = _engine.Operations.ConvertTo      
                           &lt;Func&lt;object, object, object, string&gt;&gt;(f);      
    }

    return _generatehtml_function(code, lexer, style);      
}
</pre><p>Instead of calling Invoke, I convert the PythonFunction instance into a delegate using Operations.ConvertTo which I then cache and call like any other delegate from C#. Not only does Invoke fail for more than two parameters, it creates a new dynamic call site every time it’s called. Since get_all_lexers and get_all_styles are each only called once, it’s no big deal. But you typically call generate_html multiple times for a block of source code. Using ConvertTo generates a dynamic call site as part of the delegate, so that’s more efficient than creating one on every call. </p><p>The rest of the C# code is fairly pedestrian and has nothing to do with IronPython, as all access to Python code is hidden behind GenerateHtml as well as the Languages and Styles property. </p><p>So as I’ve shown in the last few posts, embedding IronPython inside a C# application – even before we get the new dynamic functionality of C# 4.0 – isn’t really all that hard. Of course, we’re always interested in ways to make it easier. If you’ve got any questions or suggestions, please feel free to leave a comment or drop me a line.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1281</wp:post_id>
		<wp:post_date>2009-08-12 10:10:00</wp:post_date>
		<wp:post_date_gmt>2009-08-12 10:10:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>invoking-python-functions-from-c-without-dynamic</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="pygments"><![CDATA[Pygments]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[03f74f91-03a2-4aa2-a456-33967f739b18]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Invoking+Python+Functions+From+C+Without+Dynamic]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/12/Invoking+Python+Functions+From+C+Without+Dynamic]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2009 Space Elevator Conference</title>
		<link>http://devhawk.net/2009/08/13/2009-space-elevator-conference/</link>
		<pubDate>Thu, 13 Aug 2009 16:39:43 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://897e8929-bc55-4e98-acf3-5b5bac7e8ee1</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Today marks the start of the 2009 <a href="http://www.spaceelevatorconference.org/">Space Elevator Conference</a> on the Microsoft campus. Last night, my father and I attended a free overview presentation on space elevators. My father is a huge sci-fi fan and has read many of Arthur C. Clarke’s books include <a href="http://en.wikipedia.org/wiki/The_Fountains_of_Paradise">The Fountains of Paradise</a> so he was very excited for this opportunity. Unfortunately, while the idea of a space elevator is pretty exciting, the presentation itself left quite a bit to be desired.</p><p><a href="http://en.wikipedia.org/wiki/Space_elevator"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" border="0" alt="" align="left" src="http://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Space_elevator_structural_diagram.svg/240px-Space_elevator_structural_diagram.svg.png" width="139" height="240" /></a>For the un-initiated, a <a href="http://en.wikipedia.org/wiki/Space_elevator">space elevator</a> is just what it sounds like – an elevator into space. Chemical rockets are horribly inefficient, so instead the idea is to run a cable way out into space. According to Wikipedia, a space elevator would be a couple of orders of magnitude cheaper for getting things into space than chemical rocketry.</p><p>Of course, actually building a space elevator would have a massive up front cost and an engineering effort that would dwarf even the effort that <a href="http://www.wechoosethemoon.com/">landed mankind on the moon.</a> One of the biggest problems is substance the cable itself is build out of. This cable would be thousands of kilometers long, and would have to be extremely strong. Frankly, there’s no feasible material to make the cable from available to us today. Apparently, making a cable strong enough out of the strongest high tensile steel available today would weigh more than the entire universe! Not exactly feasible. But advancements in <a href="http://en.wikipedia.org/wiki/Carbon_nanotube">carbon nanotubes</a> have scientists believing they might be able to make materials 100x stronger than high tensile steel. If that pans out, it would be feasible to build the space elevator cable from carbon nanotubes.</p><p>Another big issue is power for the climbers. Current thinking apparently is to beam power to the climbers via megawatt lasers – an idea that like carbon nanotubes would have far reaching impact on our society over and above space elevators. The idea of “beaming power” sounds nearly as fantastic as the space elevator itself, but apparently there’s an <a href="http://www.spaceward.org/elevator2010-pb">X-Prize style competition</a> underway with a cool $2 million in prize money if you can build a beam powered climber that travel 5 meters/second.</p><p>While the idea of a space elevator is very fascinating and I was excited to spend an evening with my dad geeking out in a non-software related field, the presentation itself was kinda crappy. I have no doubt that Dr. Bryan Laubscher, who delivered the presentation, is one of the top minds in space elevator theory and technology in the world today. However, his presentation was bullet-point laden, rambling, incoherent at times and frankly boring. </p><p>For example, I get the feeling that Dr. Laubscher spends a lot of time defending the idea of a space elevator to skeptical NASA scientists. He spent WAY too much time talking about how inefficient chemical rockets are – I mean, mention it once but don’t keep coming back to that point over and over. He also went off on a strange tangent about the potential for societal decline when we turn our back on exploration. But he wasn’t presenting to skeptical NASA scientist last night – he was presenting to group of enthusiastic amateurs. If you can’t tailor your presentation to your audience, there’s no way you’re going to be effective.</p><p>While the presentation could have been better, it still had some fascinating information. For example, there would probably have to be multiple space elevators – Dr. Laubscher estimated there would be five. It’s much more efficient to have the space elevator be one way so you need at least two – one to have one to go up and one to go down. I never considered the idea of multiple space elevators before.</p><p>Apparently, last year’s Space Elevator Conference was on the Microsoft Campus and I wouldn’t be surprised if next year’s was as well. I hope it will be. I’d like to attend more of the conference. Saturday is Space Elevator 101 day at the conference but I’m driving my parents to the airport. In the meantime, there are some space elevator <a href="http://www.spaceelevatorblog.com/">blogs</a> to <a href="http://blog.spaceelevator.com/">follow</a>. Also, I met the president of the <a href="http://www.liftport.com/">LiftPort Group</a> which is headquartered in Seattle, so maybe I’ll get a chance to talk to him one-on-one sometime after the conference is over.</p><p>And I should probably read <a href="http://en.wikipedia.org/wiki/The_Fountains_of_Paradise">The Fountains of Paradise</a> while I’m at it. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1282</wp:post_id>
		<wp:post_date>2009-08-13 16:39:43</wp:post_date>
		<wp:post_date_gmt>2009-08-13 16:39:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2009-space-elevator-conference</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-geekery"><![CDATA[General Geekery]]></category>
		<category domain="post_tag" nicename="space-elevator"><![CDATA[Space Elevator]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[897e8929-bc55-4e98-acf3-5b5bac7e8ee1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[2009+Space+Elevator+Conference]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/13/2009+Space+Elevator+Conference]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2252</wp:comment_id>
			<wp:comment_author><![CDATA[MikeRo]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.41.245</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 22:36:20</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 05:36:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So, how can only a 100x improvement get you from something that needs to "weigh more than the entire universe" to "feasible"?  I think the you'd need quite a few more zeros there :) 
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>CodePlex Editor Role</title>
		<link>http://devhawk.net/2009/08/16/codeplex-editor-role/</link>
		<pubDate>Sun, 16 Aug 2009 08:17:05 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://8abb1cb3-64ad-4d3d-b12b-a453a4ef5c1a</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Ask <a href="http://blogs.msdn.com/SaraFord/">Sara</a>, I have been bugging her for a LONG time for <a href="http://blogs.msdn.com/codeplex/archive/2009/08/14/donate-ad-revenue-to-charity-and-new-editor-role.aspx">this CodePlex feature</a>. Actually, my team has been bugging her team for longer than either of us have been in these jobs.</p><p>Last week’s CodePlex release includes a feature known as “Editor Role”. If you look at the <a href="http://ironpython.codeplex.com/People/ProjectRoles.aspx">Project Role Matrix</a>, you’ll notice two primary differences from what the standard logged-in user can do: they can create/edit wiki pages and they <em>can’t </em>rate releases. Developers and Coordinators can’t rate releases either – I guess the idea is that they don’t want members of the team rating their own releases (5 Stars! Again! Wow, we’re awesome!).</p><p>Until now, the only way to give members of the community the ability to edit the wiki also gave permission to edit work items, check in source code and make releases. We’re still working on getting Microsoft at large to understand the <a href="http://devhawk.net/2009/06/03/Strengthening+The+Microsoft+Ecosystem+With+Source+Code.aspx">benefits of community collaboration aspect in open source</a>, but in the meantime we just can’t give those permissions to people off the team. However, we would love to have contributions to our documentation wiki. [1] With the new Editor Role, we’ll be able to grant wiki editor access without any of the other permissions.</p><p>Of course, the whole idea of “wiki permissions” kinda flies in the face of the basic <a href="http://c2.com/cgi/wiki?WikiDesignPrinciples">wiki design principles</a>. So we’re going to be pretty liberal about handing out editor permissions. If you’re interested in editing the wiki, <a href="mailto:harry.pierson@microsoft.com?subject=IronPython Wiki Editor Role">drop me a line</a> and I’ll get you hooked up.  </p><p>Big mega-thanks to the CodePlex team for making this feature happen. I guess I’ll have to find something new to bug Sara about!</p><p>[1] You can tell we’re a real open source project because we’re begging for documentation help! </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1283</wp:post_id>
		<wp:post_date>2009-08-16 08:17:05</wp:post_date>
		<wp:post_date_gmt>2009-08-16 08:17:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>codeplex-editor-role</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="codeplex"><![CDATA[CodePlex]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[Open Source]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[8abb1cb3-64ad-4d3d-b12b-a453a4ef5c1a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[CodePlex+Editor+Role]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/16/CodePlex+Editor+Role]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HawkCodeBox</title>
		<link>http://devhawk.net/2009/08/20/hawkcodebox/</link>
		<pubDate>Thu, 20 Aug 2009 11:49:16 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://6643b4fa-0c17-4840-9456-77b83d45fae7</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Last month, I <a href="http://devhawk.net/2009/07/09/Syntax+Highlighting+TextBoxes+In+WPF+Ndash+A+Sad+Story.aspx">lamented</a> the lack of extensibility of the WPF text box. While there are <a href="http://www.actiprosoftware.com/Products/DotNet/WindowsForms/SyntaxEditor/Default.aspx">several</a><a href="http://www.aqistar.com/">vendors</a> and at least one <a href="http://wiki.sharpdevelop.net/AvalonEdit.ashx">open source</a> custom syntax highlighting text box, it still really bothers me how inextensible the basic WPF text box is. I just want to do a simple colorizing REPL – why is that so hard?</p><p>So instead of using any of those syntax highlighting text boxes, I decided to build my own using the approach Ken Johnson <a href="http://www.codeproject.com/KB/WPF/CodeBox.aspx">wrote about</a> on Code Project. As I wrote before, it’s a hack – you set the text box’s foreground and background brushes to transparent so that you can override OnRender – but it works. </p><p>The big change I made from Ken’s code was to use DLR TokenCategorizer instead of regular expressions to tokenize the code. <a href="http://dlr.codeplex.com/SourceControl/changeset/view/26964#581527">TokenCategorizer</a> is a service provided by the DLR hosting API, which will tokenize a given script source for you. Here’s the code that colorizes the text in the text box.</p><p></p><pre class="brush: csharp">
var source = Engine.CreateScriptSourceFromString(this.Text);
var tokenizer = Engine.GetService&lt;TokenCategorizer&gt;();
tokenizer.Initialize(null, source, SourceLocation.MinValue);

var t = tokenizer.ReadToken();
while (t.Category != TokenCategory.EndOfStream)
{
    if (SyntaxMap.ContainsKey(t.Category))
    {
        ft.SetForegroundBrush(_syntaxMap[t.Category], 
             t.SourceSpan.Start.Index, t.SourceSpan.Length);
    }

    t = tokenizer.ReadToken();
}
</pre><p>As you can see, I ask the engine for a TokenCategorizer, initialize it with the text box’s current contents, then iterate thru the tokens, looking for ones in my SyntaxMap. If the token category is in the syntax map, we change the foreground brush for that span of formatted text (ft is a WPF FormattedText instance I created earlier in the method. </p><p>Of course, this approach isn’t very efficient – it re-colorizes the entire file on every change. It turns out that some DLR TokenCategorizer are restartable so you can cache the tokenizer state at any point and then return later with a new TokenCategorizer instance and pick up tokenizing where you left off. With this approach, you could say tokenize a line at a time, allowing you to only need to retokenize the line where the change occurred rather than the entire file. But only IronPython supports tokenizer restarting today, so I decided to take the easy way and simple re-colorize on every change.</p><p>I named the project HawkCodeBox and I’ve <a href="http://github.com/devhawk/HawkCodeBox/tree/master">published the source</a> up on GitHub. It’s fairly simple, but of course the goal wasn’t to build the be-all-end-all text editor – other <a href="http://blogs.msdn.com/vseditor/">people in the VS team</a> already have that job. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1284</wp:post_id>
		<wp:post_date>2009-08-20 11:49:16</wp:post_date>
		<wp:post_date_gmt>2009-08-20 11:49:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hawkcodebox</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="hawkcodebox"><![CDATA[HawkCodeBox]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[6643b4fa-0c17-4840-9456-77b83d45fae7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[HawkCodeBox]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/20/HawkCodeBox]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2253</wp:comment_id>
			<wp:comment_author><![CDATA[Fahad]]></wp:comment_author>
			<wp:comment_author_email>fahad007@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.164.28.206</wp:comment_author_IP>
			<wp:comment_date>2009-08-28 14:24:22</wp:comment_date>
			<wp:comment_date_gmt>2009-08-28 21:24:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You could actually use the FormattedText class, which is a low-level font based text renderer, and use a custom control for rendering. I would actually go with TextBlock and have my own render calls, then use a canvas that will allow me to edit a charactor to simply host on top of my editing row.

-Fahad]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>DevHawk World Tour FY2010</title>
		<link>http://devhawk.net/2009/08/21/devhawk-world-tour-fy2010/</link>
		<pubDate>Fri, 21 Aug 2009 21:32:23 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://ebe6a3e3-a076-4a95-9239-44ed7ec4268d</guid>
		<description></description>
		<content:encoded><![CDATA[<p>As I’ve done the <a href="http://devhawk.net/2007/09/04/The+DevHawk+2007+World+Tour.aspx">past</a><a href="http://devhawk.net/2008/05/16/DevHawk+World+Tour+2008.aspx">two</a> years, here’s a list of all the places I’m going in the next fiscal year. Traditionally, I’ve done this post by calendar year, but all MSFT planning is done by FY and so invariably I miss events early in the calendar year but late in the fiscal (like PyCon last year). I'll be updating this post periodically as I get tapped for more presentations. There are several other conferences I'm considering, submitting sessions for, in discussions with, but these are the ones that are confirmed. </p><p><strong><u>Danish University Tour, Sept 7-11</u></strong></p><p><a href="http://www.microsoft.com/danmark/mdcc/news/ironpython.mspx"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="250px-Dannebrog" border="0" alt="250px-Dannebrog" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DevHawkWorldTourFY2010_C89F/250px-Dannebrog_3.jpg" width="150" height="112" /></a> My FY10 travels first take me to Copenhagen, where I was invited by the local subsidiary to present at four different universities in a single week. Don’t know how much sightseeing I’ll get done, but I’ll sure be talking a lot. My host <a href="http://twitter.com/martinesmann">Martin Esmann</a> writes <a href="http://www.computerworld.dk/blog/studblog">Stud.blog</a> for Danish ComputerWorld and <a href="http://www.computerworld.dk/blog/studblog/1931">has a post</a> (in Danish) about my visit. Personally, I am just excited about being featured in something called “Stud.blog”! :) Actually, Stud here means “Student” not “<a href="http://dictionary.reference.com/browse/stud">slender, upright members of wood</a>” or any other definition of the term “stud”. </p><p>I’ll be visiting <a href="http://en.aau.dk/">Aalborg University</a>, <a href="http://www.au.dk/en">Aarhus University</a>, <a href="http://www.sdu.dk/?sc_lang=en">University of Southern Denmark</a> and <a href="http://www.ku.dk/english/">University of Copehhagen</a> as well as <a href="http://www.microsoft.com/danmark/mdcc/news/ironpython.mspx">delivering a TechTalk</a> at the <a href="http://www.microsoft.com/danmark/mdcc/">Microsoft Development Center Copenhagen</a>, which is Microsoft’s biggest development center in Europe. I’ll primarily be delivering my Iron Languages introductory talk “Pumping Iron”, but there’s also some interest in language development on the DLR so I’ll be talking on that topic as well.</p><p><strong><u><strong><em><a href="http://www.pnpsummit.com/west2009/west2009.aspx">patterns &amp; practices Summit Redmond 2009</a></em></strong>, Oct 12-16</u></strong></p><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DevHawkWorldTourFY2010_C89F/n79454152413_3738_2.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="n79454152413_3738" border="0" alt="n79454152413_3738" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DevHawkWorldTourFY2010_C89F/n79454152413_3738_thumb.png" width="100" height="83" /></a> This will be my third p&amp;p Summit in a row and fourth in five years. This year, I’m doing a talk called “Not Everything is a new Nail() : How Languages Influence Design”. I was supposed to deliver this talk last year, but got side track with my day job and ended up talking about IronPython instead. <a href="http://twitter.com/keithpleas">Keith</a> has made it VERY clear he doesn’t want another last minute substitution again this year.</p><blockquote><p>Turing award winner Alan Perlis is credited with saying 'A language that doesn't affect the way you think about programming is not worth knowing.' Yet, most programmers rarely venture outside of the comfort zone of statically-typed object-oriented languages. Our heavy use of object-oriented languages influences our thinking to the point that we can?t see alternative approaches at all. This isn?t to say the object-oriented languages are bad, but as is typical in most things, there is no one 'best' way for all situations. In this talk, VS Languages PM Harry Pierson will look at a given software development scenario from both the object-oriented and functional perspectives, in order to see how much on an influence language really has on our engineering efforts.</p></blockquote><p><a href="https://www.msteched.com/europe/Public/default.aspx"><strong><u>Tech·Ed Europe 2009</u></strong></a><strong><u>, Nov 9-13</u></strong></p><p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="TechEd_Europe_2009" border="0" alt="TechEd_Europe_2009" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DevHawkWorldTourFY2010_C89F/TechEd_Europe_2009_3.png" width="180" height="122" /> I knew I was going to be updating this post over time, but I didn’t expect to have to update it so soon! Literally the day after I posted this, I got the speaker invite for Tech·Ed Europe 2009. My session hasn’t been posted yet, but this is the abstract we submitted:</p><blockquote><p><u>Dynamic Languages on the Microsoft .NET Framework        <br /></u>The Dynamic Language Runtime (DLR) adds a shared dynamic type system, a standard hosting model, and support for generating fast dynamic code to the CLR. IronPython and IronRuby are Microsoft’s dynamic language implementations on .NET. In this talk, we’ll show you how to interactively create great .NET applications using dynamic languages. You’ll walk away knowing why dynamic languages deserve a spot in your toolbox! </p></blockquote><p>It’s kind of generic, but given that most of the audience probably hasn’t seen IronPython or IronRuby, having broad latitude in my presentation topic is a good thing. I’ll probably deliver a variant of my standard “Pumping Iron” talk like I’m doing in Denmark. I delivered it recently at an internal event with <a href="http://twitter.com/jschementi">Jimmy</a>, so there’s lots more IronRuby content than there used to be.</p><p>The only bummer about doing Tech·Ed Europe is that I’m only doing one measly talk. I’m asking around – I’d love to do a .NET user group or university talk while I’m in town. Any takers?</p><p><a href="http://microsoftpdc.com/"><strong><strike>Microsoft Professional Developers Conference 2009</strike></strong></a><strong><strike>, Nov 17-19</strike></strong></p><p><img style="margin: 0px 0px 0px 5px; display: inline" alt="Find out what's next" align="right" src="http://microsoftpdc.com/content/images/creative/PDC09Bling_General_WhatsNext_136.jpg" />Update: Tech·Ed Europe and PDC are on back-to-back weeks this year so we’ll be sending a teammate-to-be-determined to PDC in my stead. My family is very pleased I won’t be gone for two weeks straight.</p><p><strike>Last year, I was on the content team for PDC. This year, that PITA responsibility belongs to someone else so I might actually get real work done in the four weeks leading up to PDC. My team will tell you, last year PDC sucked up 100% of my time for a month as we were driving towards our 2.0 release. </strike></p><p><strike>Technically, I haven’t had a talk for PDC accepted yet. But I submitted three and two are looking good (though I assume only one will make it to the actual show) so I thought I’d just go ahead and include it on this post. If/when my talks get accepted, I’ll post links and abstracts. Also, if one of my PDC talks is accepted, I’ll probably submit a talk for </strike><a href="http://www.lacodecamp.com/"><strike>SoCal Code Camp</strike></a><strike> as well.</strike></p><p><strong><u><a href="http://us.pycon.org/2010/about/">PyCon 2010</a>, Feb 19-21</u></strong></p><p></p><p></p><p></p><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DevHawkWorldTourFY2010_C89F/pycon_logo_2.gif"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="pycon_logo" border="0" alt="pycon_logo" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DevHawkWorldTourFY2010_C89F/pycon_logo_thumb.gif" width="79" height="103" /></a> This will also be my third PyCon in a row, though PyCon last year was a bit of a whirlwind since I had literally just joined the IronPython team. I finally feel like I might have something interesting to present at PyCon this year. Last year <a href="http://us.pycon.org/2009/conference/schedule/event/86/">Dino</a> and <a href="http://us.pycon.org/2009/conference/schedule/event/25/">Jim</a> handled the presentation duties from our team (with Michael Foord and Jonathan Hartley <a href="http://us.pycon.org/2009/tutorials/schedule/1AM3/">delivering a tutorial</a> and Sarah Sutkiewicz <a href="http://us.pycon.org/2009/conference/schedule/event/83/">speaking on FePy</a>). We already have one announcement that I think is pretty significant lined up and might have a second depending on how hard I can push LCA and management between now and then. Talk proposals are due October 1st, so any suggestions would be appreciated!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1285</wp:post_id>
		<wp:post_date>2009-08-21 14:32:23</wp:post_date>
		<wp:post_date_gmt>2009-08-21 21:32:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devhawk-world-tour-fy2010</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
		<category domain="post_tag" nicename="presentation"><![CDATA[Presentation]]></category>
		<category domain="post_tag" nicename="travel"><![CDATA[Travel]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[ebe6a3e3-a076-4a95-9239-44ed7ec4268d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[DevHawk+World+Tour+FY2010]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/21/DevHawk+World+Tour+FY2010]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Async Messaging and the Barbarian Hordes</title>
		<link>http://devhawk.net/2009/08/26/async-messaging-and-the-barbarian-hordes/</link>
		<pubDate>Wed, 26 Aug 2009 18:33:46 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://ebed9385-833f-4ef9-8a32-931162f742a1</guid>
		<description></description>
		<content:encoded><![CDATA[<p>At PDC 1996, <a href="http://blogs.msdn.com/pathelland/">Pat Helland</a> did a six minute bit where he compared personal computing to the <a href="http://en.wikipedia.org/wiki/Sack_of_Rome_(455)">sacking of Rome</a> and <a href="http://en.wikipedia.org/wiki/Microsoft_Transaction_Server">Microsoft Transaction Server</a> to the <a href="http://en.wikipedia.org/wiki/Renissance">Renaissance</a>. It was called “<a href="http://blogs.msdn.com/pathelland/archive/2009/01/19/transaction-processing-and-the-barbarian-hordes.aspx">Transaction Processing and the Barbarian Hordes</a>” and in my opinion it should be required viewing for everyone in the tech industry.</p><p><iframe style="width: 500px; height: 375px" src="http://silverlight.services.live.com/invoke/19454/Transaction%20Processing%20and%20the%20Barbarian%20Hordes/iframe.html" frameborder="0" scrolling="no" align="center"></iframe></p><p>Of course, the tech industry has changed significantly since PDC96. In particular, personal computing has become the new “Classical Rome” and web developers are the new barbarians. Just as Microsoft rediscovered transaction processing in the 90’s, it seems that RESTifarians are on the verge of rediscovering asynchronous messaging. </p><blockquote><p>“The internet <a href="http://blogmaverick.com/2008/02/10/the-internet-is-officially-dead-and-boring-its-the-economy-stupi/">has been dead and boring</a> for a while now.  It has reached a point of stability where flashes of technological creativity are rare, but every now and then some new technology can put a spark back in the ole gal (no sexism intended).</p></blockquote><blockquote><p>If you haven’t heard of <a href="http://www.slideshare.net/progrium/using-web-hooks?src=embed">WebHooks</a> or<a href="http://code.google.com/p/pubsubhubbub/"> PubSubHubBub</a> its about time you did. Both are designed to  simplify and optimize the web.”</p><p>Mark Cuban, <a href="http://blogmaverick.com/2009/08/25/the-internet-is-about-to-change/">The Internet is about to change</a></p></blockquote><p>Not to put too fine a point on it, but these “flashes of technological creativity” that Mark’s going gaga over aren’t new at all. Both Web Hooks and PubSubHubbub are essentially async messaging, the oldest form of messaging in the history of networking. But just as personal computing ignored the importance of transaction processing for a long time, REST has long ignored the importance of async messaging. Instead, web development has instead been focused exclusively on request/response – something <a href="http://devhawk.net/2007/12/05/Durable+And+RESTful.aspx">I’ve struggled with</a> for quite some time. But the rise of Twitter has driven many people to realize that something I’ve known since 2003: “<a href="http://devhawk.net/2003/12/17/Reliable+Syndication.aspx">In order to truly evolve syndication…we need to break free of the synchronous polling model</a>.” [1]</p><p><img style="border-right-width: 0px; margin: 0px 5px 0px 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" align="left" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheAsyncWeb_13D36/image_8.png" width="244" height="82" />I love the slogan from <a href="http://blog.webhooks.org/2009/04/23/slides-from-pivotal-labs-talk/">this Web Hooks presentation</a>: “so simple you’ll think it’s stupid”. Web Hooks aren’t stupid – far from it – but they certainly are simple. They’re basically <a href="http://en.wikipedia.org/wiki/Callback_(computer_science)">callbacks</a> – which Web Hooks creator <a href="http://blogrium.com">Jeff Lindsay</a> readily acknowledges - invoked across the network using standard REST technology like HTTP and XML or JSON. The canonical webhook examples are <a href="https://www.paypal.com/ipn">Paypal Instant Payment Notification</a> and <a href="http://github.com/guides/post-receive-hooks">GitHub Post-Receive Hooks</a>. In both cases, you register a custom notification URL with the system in question. Then, when something specific happens in the system, a message gets POSTed to the registered URL. In some scenarios, it’s a simple notification. For example, when GitHub receives a commmit push, it POSTs a JSON message about the commit to the registered URL. In other scenarios, the initial message is the start of an async conversation - the system expects you to POST a message back to them sometime in the future. For example, when a customer makes a payment, PayPal POSTs a message to the URL you registered. You then confirm the payment by posting a message back to a well known PayPal URL. </p><p>Note, by the way, that both of these canonical examples depend on async messaging. GitHub isn’t going to do anything with a response anyway, so there’s no point in sending them a response. PayPal, on the other hand, is expecting a response. Yet, they use async messaging instead of an arguably simpler HTTP request/response operation. They do this for same reason <a href="https://www.ibm.com/developerworks/webservices/library/ws-transjta/">WS-Transaction</a> is the <a href="http://blogs.msdn.com/pathelland/archive/2007/05/20/soa-and-newton-s-universe.aspx">Anti-Availability Protocol</a> – the last thing you want to do is lock up precious resources in your system waiting for some nimrod on the other side of the Internet to respond to a request you sent. Instead you what PayPal does – send an async message, listen on a separate channel for a response, correlate the messages explicitly via some kind of conversation identifier and release your precious resources to do other work while you wait for the response. </p><p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="image" border="0" alt="image" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheAsyncWeb_13D36/image_7.png" width="180" height="80" /> As for <a href="http://code.google.com/p/pubsubhubbub/">PubSubHubbub</a>, it’s focused on real time delivery of new information. <a href="http://rsscloud.org">Dave Winer’s recent RSS Cloud efforts</a> focus on real-time notification as well. In both cases, instead of subscribers polling a given RSS feed for changes every X amount of time, they register for notification when the feed is updated. This is very similar to the way GitHub uses async messages for commit push notification as described above. </p><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheAsyncWeb_13D36/image_10.png"><img style="border-right-width: 0px; margin: 0px 5px 0px 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" align="left" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheAsyncWeb_13D36/image_thumb_3.png" width="260" height="198" /></a>Both PubSubHubbub and RSS Cloud include an intermediary that’s responsible for managing the list of current subscribers and relaying the notification when the publisher makes a change.  Honestly, I’m not a fan of the Hub/Cloud intermediary – it feels a little too ESB-like to me. However, since it’s only relaying notifications it receives without transformation, I can live with it. Besides, there’s no reason why a publisher can’t act as it’s own hub. The vast number of blogs and twitter users have so few subscribers that the extra layer of abstraction is probably not worth it. On the other hand, if you’re going to run a notification hub for the largest users, you might as well use it for smaller ones as well.</p><p>While I think Mark’s laid the “new technology” hype on pretty thick, I do think he hits the nail on the head regarding the major new business opportunities that can come from adopting the heretofore ignored async messaging model on the web:</p><blockquote><p>“This could be an open door for the content business…Using The Associated Press as an example, AP could post their stories to a HUB. In realtime, the HUB can update member websites so that they will always have information first, before any aggregator. It may not take long for aggregators to recognize the new data on the member sites, but they won’t have it first.</p><p>The New York Times could do the same thing. Subscribers could get everything first, in realtime. Then after some delay which might be 1 minute, it might be 30 minutes depending on what the paper thinks is the value related to timeliness, it could post on the website and on twitter and facebook as updates. Would NY Times online readers pay $1 a month to be guaranteed that they get their news first, before anyone else ? I dont know.</p><p>In the sports world, text based play by play websites could be updated in realtime rather than pulling every 30 seconds or requiring the user to hit refresh every few seconds.”</p></blockquote><p>Arguably, this opportunity is easier to realize <em><u>precisely because async messaging isn’t new technology</u></em>. Getting people to adopt a new technology is incredibly hard. It’s much easier to get people to adopt a new pattern for using an existing technology. And async messaging has been possible as long as the web has been in existence. </p><p>Web Hooks and PubSubHubbub are long overdue but very welcome steps forward in the evolution of the Internet. I wonder what the barbarians will rediscover next?</p><hr /><p>[1] Of course, writing a prediction like this is a far sight from actually implementing it. If I had actually put some engineering effort behind this in 2003, maybe I’d be a household name in the tech community by now. On the other hand, I said some things in that same post that have turned out to be spectacularly incorrect (“Indigo is going to make Longhorn a great platform for SOA”) so it probably wouldn’t have made much of a difference.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1286</wp:post_id>
		<wp:post_date>2009-08-26 11:33:46</wp:post_date>
		<wp:post_date_gmt>2009-08-26 18:33:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>async-messaging-and-the-barbarian-hordes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<category domain="post_tag" nicename="async-messaging"><![CDATA[Async Messaging]]></category>
		<category domain="post_tag" nicename="web-2-0"><![CDATA[Web 2.0]]></category>
		<category domain="post_tag" nicename="web-services"><![CDATA[Web Services]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[ebed9385-833f-4ef9-8a32-931162f742a1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Async+Messaging+And+The+Barbarian+Hordes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/26/Async+Messaging+And+The+Barbarian+Hordes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2254</wp:comment_id>
			<wp:comment_author><![CDATA[Christian Weyer]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.thinktecture.com/cweyer</wp:comment_author_url>
			<wp:comment_author_IP>87.176.33.97</wp:comment_author_IP>
			<wp:comment_date>2009-08-26 13:35:08</wp:comment_date>
			<wp:comment_date_gmt>2009-08-26 20:35:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hm, nice post, dude.
But how do these two toolkits solve the NAT/Firewall issue? Without a solution to this they are pretty much useless in breadth usage.

And don't get me started about the definition of 'real time' :)

-Christian]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>The Last Mile of the Internet</title>
		<link>http://devhawk.net/2009/08/27/the-last-mile-of-the-internet/</link>
		<pubDate>Thu, 27 Aug 2009 11:08:02 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://71dfa192-0234-4f3d-9939-bc35274f3f5a</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blogs.thinktecture.com/cweyer">Christian Weyer</a> makes a <a href="http://devhawk.net/CommentView,guid,ebed9385-833f-4ef9-8a32-931162f742a1.aspx#commentstart">great comment</a> on <a href="http://devhawk.net/2009/08/26/Async+Messaging+And+The+Barbarian+Hordes.aspx">yesterday’s post</a> about the barbarian rediscovery of async messaging:
<blockquote>But how do these two toolkits solve the NAT/Firewall issue? Without a solution to this they are pretty much useless in breadth usage.</blockquote>
Simply put, they don’t. Frankly, they don’t even try. And I agree with Christian that the NAT/Firewall issue makes any async messaging based approach useless for clients. It’s kind of like the <a href="http://en.wikipedia.org/wiki/Last_mile">last mile problem</a> in the telco/cable industries – you’ve got this great capability in the center, but you can’t leverage its full potential because of the massive effort it takes to push that capability all the way to the edge of the network.

Dave Winer has been <a href="http://www.scripting.com/stories/2009/07/17/thisIsNotAnEarthshakingAnn.html">pretty explicit</a> with his RSS Cloud work: “The goal is to have a <em>Small Pieces Loosely Joined</em> equivalent of Twitter.” PubSubHubbub doesn’t mention Twitter by name, but the <a href="http://pubsubhubbub.googlecode.com/svn/trunk/pubsubhubbub-core-0.1.html">protocol spec</a> specifically says “Polling sucks. We think a decentralized pubsub layer is a fundamental, missing layer in the Internet architecture today”. Both specs have a fundamental design that looks like this:

<img style="display: block; float: none; margin-left: auto; margin-right: auto; border-width: 0px;" title="image" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/AsyncMessagingandClientApplications_15086/image_3.png" border="0" alt="image" width="640" height="139" />

This picture leaves out multiple publishers and subscribers and the subscriber registration process, but you get the basic idea. And it all works great <em>assuming</em> that both the subscriber and the pub/sub infrastructure can accept incoming connections. While that seems like a fairly safe assumption for infrastructure pieces, it is clearly a faulty assumption for any subscriber running locally on a client machine. Client machines primarily live behind firewalls at the office, behind NAT routers at home or on mobile wireless network – all of which disallow most if not all incoming connections. In other words, this works just fine for server subscribers (like, say Google Reader) but not for client subscribers (like, say TweetDeck).

<img style="display: block; float: none; margin-left: auto; margin-right: auto; border-width: 0px;" title="image" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/AsyncMessagingandClientApplications_15086/image_17.png" border="0" alt="image" width="640" height="113" />

As far as I can tell, the only way to enable client subscribers to play in this async messaging world is via some type of relay service. Any other solution I can think of depends on mass adoption of new technology, which as I mentioned in my last post is nearly impossible.

<img style="display: block; float: none; margin-left: auto; margin-right: auto; border-width: 0px;" title="image" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/AsyncMessagingandClientApplications_15086/image_20.png" border="0" alt="image" width="640" height="296" />

In this approach, the client subscriber makes an outbound connection to some type of relay infrastructure, which in turn creates a endpoint on the public internet for that client. Registration for pub/sub happens as normal, using the relay endpoint as the notification URL. Then, when a message arrives on the relay endpoint, it’s sent back down the outbound connection to the client.

The relay approach is technically feasible – it’s used in many places today. <a href="http://technet.microsoft.com/en-us/library/aa997252.aspx">Exchange DirectPush</a> uses this approach to support real-time delivery of mail to mobile devices – though the relay capability is built directly Exchange client access servers rather than available as a separate service. The <a href="http://www.microsoft.com/azure/servicebus.mspx">.NET Service Bus</a> – part of <a href="http://www.microsoft.com/azure">Windows Azure</a> – provides a hosted relay infrastructure that anyone can leverage (though their support of non-windows platforms is pretty weak). I haven’t worked with it, but it looks like <a href="http://dev.opera.com/articles/view/opera-unite-developer-primer/">Opera’s new Unite platform</a> includes a relay service as well (note, they call it a proxy service). Nice thing about Opera Unite is the async messaging infrastructure is built right into their browser, though you could achieve something similar in any browser using <a href="http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/net/Socket.html">Flash</a> or <a href="http://msdn.microsoft.com/en-us/library/cc296248(VS.95).aspx">Silverlight</a>.

Yes, having to relay messages sucks. But the question is, which sucks worse: polling or relaying?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1287</wp:post_id>
		<wp:post_date>2009-08-27 11:08:02</wp:post_date>
		<wp:post_date_gmt>2009-08-27 11:08:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-last-mile-of-the-internet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<category domain="post_tag" nicename="async-messaging"><![CDATA[Async Messaging]]></category>
		<category domain="post_tag" nicename="web-2-0"><![CDATA[Web 2.0]]></category>
		<category domain="post_tag" nicename="web-services"><![CDATA[Web Services]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[71dfa192-0234-4f3d-9939-bc35274f3f5a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[The+Last+Mile+Of+The+Internet]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/27/The+Last+Mile+Of+The+Internet]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2255</wp:comment_id>
			<wp:comment_author><![CDATA[Marius Mikučionis]]></wp:comment_author>
			<wp:comment_author_email>marius@cs.aau.dk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>130.225.198.205</wp:comment_author_IP>
			<wp:comment_date>2009-09-03 02:32:58</wp:comment_date>
			<wp:comment_date_gmt>2009-09-03 09:32:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How about using Jabber (or alike) protocol for relaying?
It works in distributed way just like email, while it has real-time capabilities, also each user can have infinitely many resource locators (and each user has full control over their addresses), then just setup different apps to listen to a different resource name which is subscribed to whatever publisher.
In the end, if your mail/NAT/whatever-publicaly-facing server is Jabber-capable, you have the real-time relay infrastructure in place already. 
Moreover this setup works *everytime* you move your netbook away from home network!
Google uses XMMP even for voice/video communication.
So what are we reinventing?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2256</wp:comment_id>
			<wp:comment_author><![CDATA[jake]]></wp:comment_author>
			<wp:comment_author_email>jochs@critical-masses.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.critical-masses.com/jakeofalltrades/</wp:comment_author_url>
			<wp:comment_author_IP>67.84.28.174</wp:comment_author_IP>
			<wp:comment_date>2009-09-03 08:05:30</wp:comment_date>
			<wp:comment_date_gmt>2009-09-03 15:05:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Marius I believe that's exactly what superfeedr does]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2257</wp:comment_id>
			<wp:comment_author><![CDATA[Lo'sos']]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.228.93.154</wp:comment_author_IP>
			<wp:comment_date>2009-09-22 12:58:36</wp:comment_date>
			<wp:comment_date_gmt>2009-09-22 19:58:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[XMPP is still polling. It's not a naive polling, but polling none the less.
With the client behind NAT/firewall, there doesn't seem to be any way around that. It's the client who is responsible for initiating request. Even if one uses smart tricks with multiple mini-requests and responses to emulate biderectional communications. It's still synchronous request/response model under the hood.
On the other side, if network lattency is low, client and server resources are abundant, and there is no true real-time requirements (all of which is typically the case for all the "webby" things), it should suffice for quite a few (if not most) usage scenarios.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Danish University Tour Trip Report</title>
		<link>http://devhawk.net/2009/09/18/danish-university-tour-trip-report/</link>
		<pubDate>Fri, 18 Sep 2009 17:13:48 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d39f98fb-c02b-4f5e-8613-b6e5ff153f12</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’ve been back from Denmark for a week – it took me that long to get back on Pacific time zone and dig out from the mountain of email that collected while I was gone. But I <a href="http://twitter.com/martinesmann/status/4074900218">got word</a> from my esteemed host <a href="http://twitter.com/martinesmann">Martin Esmann</a> that the <a href="http://channel9.msdn.com/posts/martinesmann/Pumping-Iron-Dynamic-Languages-on-NET/">video of my TechTalk</a> had been posted to Channel 9, so it seems as good a time as any for my trip report.</p><p>At each of these universities, I did two talks. The first was Pumping Iron: The State of Dynamic Languages on the .NET Framework. That’s the one in the Channel 9 video. The other talk was <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Presentations/Developing%20on%20the%20DLR.pptx">Developing with the DLR</a>, which I’ve posted to my Skydrive. That talk was more focused on the CLR and DLR as a platform for language development. If there’s interest (leave a comment), I’ll record audio for that presentation and post it up on SlideShare or something like that. </p><h3><a href="http://en.aau.dk/">Aalborg University</a></h3><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DanishUniversityTourTripReport_9595/IronPython_DK_trip_on_a_map_2.png"><img style="border-right-width: 0px; margin: 0px 0px 0px 5px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="IronPython_DK_trip_on_a_map" border="0" alt="IronPython_DK_trip_on_a_map" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DanishUniversityTourTripReport_9595/IronPython_DK_trip_on_a_map_thumb.png" width="108" height="124" /></a></p><p>First stop of the University Tour was Aalborg University – about a four hour drive from Copenhagen (or as the Danish spell it København). As you can see on the map, we started with the furthest university away then worked our way back to Copenhagen. Martin picked me up at the airport and we hit the road. I was horribly jet lagged, but we spent most of the drive geeking out about programming languages (when I wasn’t napping).</p><p>Each of the universities had a different focus that I was interested in. At Aalborg, it was in teaching programming. Given the popularity of <a href="http://www.python.org/community/sigs/current/edu-sig/">Python in education</a>, we had lots to talk about. My host at Aalborg was <a href="http://www.cs.aau.dk/~bt/">Bent Thomsen</a> who has done <a href="http://www.springerlink.com/content/u481122hk38w4j32/">significant research</a> on this topic, as has <a href="http://www.springerlink.com/content/2267261t17202k77/">his wife Lone</a>. One of the areas we discussing in particular was about teaching classes vs. objects first. Apparently, these days there’s significant momentum behind teaching class first, but the folks at Aalborg – as I understand it – have seen that approach has been ineffective. That squared with a talk I saw on teaching OOP with Python that I saw <a href="http://us.pycon.org/2008/conference/talks/?search=Goldwasser">last year at PyCon</a> by <a href="http://euler.slu.edu/~goldwasser/publications/">Dr. Goldwasser</a>.</p><p>The other area we discussed was teaching <a href="https://intranet.cs.aau.dk/education/courses/2009/spo">compiler design</a>. Clearly, this is an area I thought the DLR could be a big help in. Bent primarily uses <a href="http://www.amazon.com/Programming-Language-Processors-Java-Interpreters/dp/0130257869">Programming Language Processors in Java</a> to teach this course, but he finds that it’s a little out of date + he’s much more interested in the compiler aspect than the interpreter aspect of that book. The idea of generating DLR Expression Trees which can be compiled into IL with a simple call to <a href="http://dlr.codeplex.com/SourceControl/changeset/view/27854#580545">LambdaExpression.Compile</a> and can then run directly on the CLR seemed to sound appealing to him. </p><h3><a href="http://www.au.dk/en">Aarhus University</a></h3><p>Next up was Aarhus University. I didn’t get to spend as much time with the folks from Aarhus, though our host <a href="http://www.brics.dk/~danvy/">Olivier Danvy</a> did help me find a “uniquely Danish” gift for my wife (though I also brought her Danish bread &amp; chocolate). We spent some time talking about F# and compiler design, and Olivier made this great comment over lunch that “OCaml is a domain specific language for compiler writers”. That is very true.</p><p>Olivier had to leave for a previous engagement, so <a href="http://www.brics.dk/~jmi/">Jan Midtgaard</a> - who teaches Aarhus’ <a href="https://www.daimi.au.dk/dOvs/">Compilation class</a> – hosted me for the actual talks. In that class, they implement a subset of Java known as Joos in AspectJ. One of the cool things about this class is how they grade the compilers – you upload your complier code to a web site and they run it against an existing test framework. They couldn’t give the students the test framework directly because it would be too easy to reverse engineer the tests from the compiled Java code (I assume the Java world has the equivalent of <a href="http://www.red-gate.com/products/reflector/">Reflector</a>?) Like Aalborg, I spent significant time discussing the idea of targeting the DLR in their compiler class. </p><h3><a href="http://www.sdu.dk/?sc_lang=en">University of Southern Denmark</a></h3><p>Of the four universities I visited, this was probably the poorest fit for the content I was delivering. On the other hand, it was awesome – USD has a strong focus on Robotics. They even have a <a href="http://www.robodays.com/activities/robodays-robot-festival-in-odense.aspx">RoboDays Robot Festival</a> in Odense. Unfortunately, the festival was the weekend after I visited, so many of the robots were out in preparation for the festival. However, our host <a href="http://www.mip.sdu.dk/people/Staff/ups.html">Ulrik Schultz</a> did bring us to to visit the <a href="http://modular.mmmi.sdu.dk/wiki/Main_Page">Modular Robotics Research Lab</a> so I got to see these guys in action:</p><p></p><div style="padding-bottom: 0px; margin: 0px auto; padding-left: 0px; width: 425px; padding-right: 0px; display: block; float: none; padding-top: 0px" id="scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:03a073ea-5567-4e13-ba0d-d2b78cf96155" class="wlWriterEditableSmartContent"><div id="d33c395b-2d4e-4e85-b752-23636cfbfe64" style="margin: 0px; padding: 0px; display: inline;"><div><a href="http://www.youtube.com/watch?v=SYizuooEs7s" target="_new"><img src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DanishUniversityTourTripReport_9595/videod9804c33b78e.jpg" style="border-style: none" galleryimg="no" onload="var downlevelDiv = document.getElementById('d33c395b-2d4e-4e85-b752-23636cfbfe64'); downlevelDiv.innerHTML = &quot;&lt;div&gt;&lt;object width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/SYizuooEs7s&amp;hl=en&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/SYizuooEs7s&amp;hl=en&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;&quot;;" alt="" /></a></div></div></div><p></p><p>Real transforming robots! Not quite Optimus Prime mind you, but you gotta start somewhere. These robots are call <a href="http://modular.mmmi.sdu.dk/wiki/ATRON">ATRON</a> and they’re pretty impressive to see in action. However, they are kinda weak computationally – they only have 128k of flash memory + 4k of ROM. 4K! However, the next generation of these bots is supposed to have like 64MB of memory and a FPGA – more than enough power to use the the <a href="http://www.microsoft.com/netmf">Micro Framework</a>.</p><h3><a href="http://www.ku.dk/english/">University of Copenhagen</a></h3><p>The final stop on my university tour was University of Copenhagen, where I was hosted by <a href="http://www.diku.dk/hjemmesider/ansatte/henglein/">Fritz Henglein</a> of the <a href="http://www.diku.dk/Forskning/algorithmsandprogramminlanguages/">Algorithms and Programming Languages Group</a>. He’s done some <a href="http://www.diku.dk/hjemmesider/ansatte/henglein//publications//henglein94b.html">research on dynamic languages</a>, but these days he and his team are doing some fascinating research on the intersection of business and programming languages. He leads a project called <a href="http://www.3gerp.org/">3gERP</a> in partnership with <a href="http://www.microsoft.com/danmark/mdcc/default.mspx">Microsoft Development Center Copenhagen</a> to “develop a standardized, yet highly configurable and flexible, global ERP system for SME’s based on fundamentally new software architecture.” That topic isn’t as interesting to me in my current role in the VS Languages team, but was very relevant to my background in services architecture and MSIT.</p><h3>Copenhagen .NET Users Group</h3><p>While I was in Denmark, I got to speak to the local .NET users group about IronPython. These are always fun since they are less formal. Also, this was a much more .NET knowledgeable crowd than I had had all week so I got some deeper questions about the .NET stack. Among the members of that user group is <a href="http://madskristensen.net/">Mads Kristensen</a>, founder of the <a href="http://www.dotnetblogengine.net/">BlogEngine.NET</a> project. So I put together a special demo “integrating” IronPython into BlogEngine.NET. It was kinda silly – I wrote an extension that would execute any blog post as python that was in the RunPython category. But it was also mind-numbingly simple:</p><pre class="brush: csharp">
[Extension("Extend .NET Blog Engine with IronPython")]
public class IPyExtension
{
    static ScriptEngine _engine;

    static IPyExtension()
    {
        _engine = IronPython.Hosting.Python.CreateEngine();
        Post.Serving += new EventHandler&lt;ServingEventArgs&gt;(Post_Serving);
    }


    static void Post_Serving(object sender, ServingEventArgs e)
    {
        Post p = (Post)sender;
        bool runpython = p.Categories.Exists(delegate(Category cat) { 
            return string.Compare(cat.Title, "RunPython", true) == 0; });
        if (runpython)
        {
            e.Body = _engine.Execute&lt;string&gt;(e.Body);
        }
    }
}
</pre><p>I’d love to see REAL IronPython integration into BlogEngine.NET, but I needed something I could do in a couple of hours late at night in a code base I wasn’t familiar with.</p><h3>Pumping Iron TechTalk </h3><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DanishUniversityTourTripReport_9595/IMG_2297_2.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="IMG_2297" border="0" alt="IMG_2297" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DanishUniversityTourTripReport_9595/IMG_2297_thumb.jpg" width="164" height="124" /></a> Finally, on Friday I delivered my final talk of the week, which is available to watch and download from <a href="http://channel9.msdn.com/posts/martinesmann/Pumping-Iron-Dynamic-Languages-on-NET/">Channel 9</a>. It was a packed house and I was a little nervous about having the talk recorded, but I think it went well. Certainly, it seemed well received by the audience. </p><p align="center"><object data="data:application/x-silverlight-2," type="application/x-silverlight-2" width="320" height="240"><param name="source" value="http://channel9.msdn.com/App_Themes/default/vp09_06_22.xap" /><param name="initParams" value="m=http://ecn.channel9.msdn.com/o9/ch9/5/3/4/2/9/4/techtalkmdccironpython_2MB_ch9.wmv,autostart=false,autohide=true,showembed=true, thumbnail=http://ecn.channel9.msdn.com/o9/ch9/5/3/4/2/9/4/techtalkmdccironpython_320_ch9.png, postid=492435" /><param name="background" value="#00FFFFFF" /><a href="http://go.microsoft.com/fwlink/?LinkID=124807" style="text-decoration: none;"><img src="http://go.microsoft.com/fwlink/?LinkId=108181" alt="Get Microsoft Silverlight" style="border-style: none" /></a></object></p><p>I ended the work part of my trip to Denmark with an interview with a Danish IT newspaper (which I’ll post a link to when it gets published) and a sit down with the <a href="http://www.microsoft.com/dynamics/en/us/products/nav-overview.aspx">Dyanmics:NAV</a> team. My wife always tells me that she’d love it if I got a 6-12 month assignment to work overseas, so I tried to convince the NAV team that they REALLY want to integrate IronPython like the <a href="http://www.langnetsymposium.com/2009/talks/13-RomanIvantsov-IronPythonMSDynamic.html">Dynamics AX team</a> is doing. If you see a post here about me moving to Copenhagen, you’ll know I was successful! :)</p><h3>Final Thoughts</h3><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DanishUniversityTourTripReport_9595/IMG_2276_2.jpg"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="IMG_2276" border="0" alt="IMG_2276" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/DanishUniversityTourTripReport_9595/IMG_2276_thumb.jpg" width="124" height="164" /></a>Other than the jet lag, which seemed tougher on this trip than when I’ve gone westward to New Zealand, Australia or Malaysia, I had a blast. It was a real treat seeing so much of Denmark and getting to talk to so many interesting people. I even got to do some sight seeing in Copenhagen and Odense. Hans Christian Andersen was born in Odense and so I got to see the house he was born in as well as get my picture taken with this statue of him right outside our hotel. Major thanks to Martin Esmann for inviting me, driving me around – we drove a megameter, aka 1000km, over the course of the trip – and being an all around amazing host.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1288</wp:post_id>
		<wp:post_date>2009-09-18 17:13:48</wp:post_date>
		<wp:post_date_gmt>2009-09-18 17:13:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>danish-university-tour-trip-report</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="presentation"><![CDATA[Presentation]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d39f98fb-c02b-4f5e-8613-b6e5ff153f12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Danish+University+Tour+Trip+Report]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/19/Danish+University+Tour+Trip+Report]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2258</wp:comment_id>
			<wp:comment_author><![CDATA[Greg Bray]]></wp:comment_author>
			<wp:comment_author_email>Greg.Bray@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://codeblog.theg2.net</wp:comment_author_url>
			<wp:comment_author_IP>98.202.213.86</wp:comment_author_IP>
			<wp:comment_date>2009-09-18 20:36:16</wp:comment_date>
			<wp:comment_date_gmt>2009-09-19 03:36:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I watched the Pumping Iron video today and it was very good! I started playing around with IronPython in Resolver One earlier this year, and while I haven't found any Business uses yet I will definitely keep them in my developer's tool chest. 

Keep up the great work!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython 2.6 Release Candidate</title>
		<link>http://devhawk.net/2009/09/23/ironpython-2-6-release-candidate/</link>
		<pubDate>Wed, 23 Sep 2009 10:26:00 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://e87976bd-9c06-47b4-ae1e-8729dc4e32d6</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://ironpython.codeplex.com/"><img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="image" border="0" alt="image" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/IronPython2.6ReleaseCandidate_EDEE/image_3.png" width="507" height="147" /></a></p><p>We released the <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=30315">IronPython 2.6 release candidate</a> on CodePlex yesterday. If all goes well, this will be the ONLY RC and we’ll republish it as the RTW build in about a month. So if you’ve been holding off on experimenting with the 2.6 release, now’s the time to jump in with both feet. </p><p>As I’ve written before on this blog, this is a HUGE release for us:</p><ul><li>Python 2.6 features such as <a href="http://docs.python.org/whatsnew/2.6.html#pep-343-the-with-statement">with statement</a>, <a href="http://docs.python.org/whatsnew/2.6.html#pep-3129-class-decorators">class decorators</a> and <a href="http://docs.python.org/whatsnew/2.6.html#pep-3112-byte-literals">byte literals</a></li><li><a href="http://devhawk.net/2009/03/27/IronPython+26+Alpha+1.aspx">Adaptive Compilation</a></li><li><a href="http://devhawk.net/CategoryView,category,__clrtype__.aspx">__clrtype__ Metaclasses</a></li><li><a href="http://devhawk.net/2009/05/21/IronPython+26+Beta+1.aspx">ctypes and Frames support</a></li><li><a href="http://devhawk.net/2009/07/08/MicrosoftScriptingDebugging.aspx">Lightweight Debugging</a></li><li>417 bugs fixed! </li></ul><p>Anyway, with 2.6 winding down, the IronPython team finds ourselves in a unique position that we’ve never been in before: <u>caught up</u>. As far as I can tell, most of the Python community hasn’t made the move to <a href="http://www.python.org/download/releases/3.1">Python 3.1</a> and <a href="http://www.python.org/dev/peps/pep-0373/">Python 2.7</a> is looking like it will be released <a href="http://mail.python.org/pipermail/python-dev/2009-September/092005.html">next summer</a>. So IronPython is caught up with the latest version of Python most of the Python community appears to be using. </p><p>So that begs the question: what do we do now?</p><p>Of course, we want to hear from you regarding our next steps, but some things we are looking at include:</p><ul><li><u>.NET Framework 4.0        <br /></u>We’ve shipped CTP releases of IronPython for each public beta of Visual Studio 2010 and  .NET Framework 4.0. You can expect that to continue as Visual Studio 2010 winds down and ships. </li><li><u>Fixing Bugs        <br /></u>417 bugs fixed is good, but there are still 839 active work items in our issue tracker. In previous releases, we’ve done minor bug fix releases every few months so we’ll probably keep up that cadence. Make sure you go vote for bugs you think are important. </li><li><u>App Compatibility        <br /></u>One thing we can do is take some of the more popular Python apps such as Django and Mercurial and make sure they run well on IronPython. In some cases, there may need to be changes to the Python apps to get them to run on IronPython (for example, see <a href="http://jdhardy.blogspot.com/2008/07/django-on-ironpython.html">Jeff Hardy’s patch</a> for running Django on IronPython) which assuredly means more time with lawyers for me. </li><li><u>Missing Modules       <br /></u>While IronPython 2.6 is our implementation of Python 2.6, there are binary modules we haven’t implemented yet like <a href="http://docs.python.org/library/csv.html">_csv</a>, <a href="http://docs.python.org/library/ast.html">_ast</a> and <a href="http://docs.python.org/library/pyexpat.html">pyexpat</a>. You could consider this App Compatibility work, but we have a different internal process for bug fixing and implementing new features so I broke this out separately.</li><li><u>Documentation</u><br />Invariably an area for improvement in all software, our doc story today is pretty much “go look at docs.python.org”. Of course, that doesn’t cover any IronPython specific functionality. Of course, what would be great would be to combine existing Python docs with IronPython specific docs in a single reference, which also assuredly means more time with lawyers for me. </li><li><u>Tutorials        <br /></u>If you haven’t seen Michael Foord’s <a href="http://www.trypython.org/">Try Python</a>, it’s awesome. However, it was recently pointed out to me that it doesn’t include any IronPython specific behavior (importing and interoperating with .NET types for example). The <a href="http://jimmy.schementi.com/silverlight/Tutorial/">IronRuby Tutorial</a> has specific IronRuby features and it would be awesome to do the same for IronPython. Of course, if we wrote new tutorials in <a href="http://docutils.sourceforge.net/rst.html">reStructured Text</a>, then I’m guessing it would be easy for Michael to include it in Try Python via his <a href="http://code.google.com/p/rst2xaml/">rst2xaml</a> tool. </li><li><u>“Just Text” in Silverlight        <br /></u>If you haven’t seen MIX Online Labs <a href="http://www.visitmix.com/Labs/gestalt/">Gestalt project</a>, browse to <a href="http://www.visitmix.com/labs/gestalt/samples/getting.started/05_final.html">one of the samples</a> and View Source. Python as “just text” in the browser. Cool, eh? <a href="http://blog.jimmy.schementi.com/">Jimmy</a> is working on <a href="http://rubyforge.org/pipermail/ironruby-core/2009-September/005245.html">implementing the “just text” model</a> for the Silverlight version of IronPython (and <a href="http://www.visitmix.com/labs/gestalt/samples/getting.started/01_ruby.html">IronRuby</a>). </li><li><u>Visual Studio        <br /></u>There’s no work item for VS Integration in our issue tracker, but there have been <a href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=475830">112 votes for IronPython integration</a> (as well as <a href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=479957">79 votes for IronRuby integration</a>) in the VS 2010 connect bug database. No promises here, but we are acutely aware of how popular this suggestion is. </li><li><u>CodePlex Foundation</u><br />The <a href="http://codeplex.org/">CodePlex Foundation</a> is a new non-profit foundation sponsored by Microsoft with the explicit mission “to enable the exchange of code and understanding among software companies and open source communities.” As one of the oldest open source projects at Microsoft, we are very interested in the CodePlex Foundation as you might imagine. However, CodePlex Foundation is VERY new - everything is tagged “interim” for the first 100 days. Once the Foundation elects non-interim board members and establishes things like a charter and by-laws, you can be sure we’ll be investigating it more thoroughly. In other words, definitely more time with lawyers for me. </li></ul><p>In case I haven’t said it lately, it’s great working on the IronPython team with <a href="http://blogs.msdn.com/dinoviehland/">Dino Viehland</a>, <a href="http://knowbody.livejournal.com">Dave Fugate</a> and <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2008-December/009154.html">David DiCato</a> (The IronRuby guys aren’t bad either!). Also, I may whine about the amount of time I spend with lawyers, but honestly Yong, Kathryn and Kevin – our main LCA contacts – do a great job helping us figure out how and where to push the envelope so thanks to them as well.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1289</wp:post_id>
		<wp:post_date>2009-09-23 10:26:00</wp:post_date>
		<wp:post_date_gmt>2009-09-23 10:26:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-2-6-release-candidate</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[e87976bd-9c06-47b4-ae1e-8729dc4e32d6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+26+Release+Candidate]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/23/IronPython+26+Release+Candidate]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2261</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
			<wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
			<wp:comment_date>2009-09-23 10:40:00</wp:comment_date>
			<wp:comment_date_gmt>2009-09-23 17:40:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Adding an IronPython tutorial to Try Python is on my todo list. :-)

If you guys can contribute something first then that would be awesome of course... :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2262</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Lee]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.86</wp:comment_author_IP>
			<wp:comment_date>2009-09-23 12:39:00</wp:comment_date>
			<wp:comment_date_gmt>2009-09-23 19:39:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Visual Studio integration, without a doubt.  This would be huge for a variety of reasons; I want to use a familiar editor, I want to build mixed-language projects without managing multiple toolsets, makes it easier for my team to take it seriously, etc., etc.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2263</wp:comment_id>
			<wp:comment_author><![CDATA[Dody Gunawinata]]></wp:comment_author>
			<wp:comment_author_email>dody@nomadlife.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.237.143.127</wp:comment_author_IP>
			<wp:comment_date>2009-09-23 18:25:00</wp:comment_date>
			<wp:comment_date_gmt>2009-09-24 01:25:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[App compatibility would be on top of my list especially since on the web space, there is no major python framework is currently working out of the box  on IronPython and that's a pretty major gap.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2264</wp:comment_id>
			<wp:comment_author><![CDATA[Bob Arnson]]></wp:comment_author>
			<wp:comment_author_email>spam@bobs.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.joyofsetup.com</wp:comment_author_url>
			<wp:comment_author_IP>75.149.136.201</wp:comment_author_IP>
			<wp:comment_date>2009-09-23 18:34:43</wp:comment_date>
			<wp:comment_date_gmt>2009-09-24 01:34:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I haven't been able to find any statements about 3.x: Is there a plan for 3.x support or is it a question of critical mass?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2266</wp:comment_id>
			<wp:comment_author><![CDATA[Bengt]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.226.214.95</wp:comment_author_IP>
			<wp:comment_date>2009-09-24 00:22:47</wp:comment_date>
			<wp:comment_date_gmt>2009-09-24 07:22:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Until you have a form designer and intellisense IronPython is just a toy compared to C#, only good for embedding scenarios. And with C# 5 I can just use C# as an embedding language instead.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2267</wp:comment_id>
			<wp:comment_author><![CDATA[Kamil Dworakowski]]></wp:comment_author>
			<wp:comment_author_email>kamil@dworakowski.name</wp:comment_author_email>
			<wp:comment_author_url>http://kamil.dworakowski.name</wp:comment_author_url>
			<wp:comment_author_IP>88.96.105.246</wp:comment_author_IP>
			<wp:comment_date>2009-09-24 03:27:05</wp:comment_date>
			<wp:comment_date_gmt>2009-09-24 10:27:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would be most happy with import time improvement, specifically importing from dll (python compiled into dlls).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2268</wp:comment_id>
			<wp:comment_author><![CDATA[Jonathan Hartley]]></wp:comment_author>
			<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
			<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
			<wp:comment_author_IP>88.96.105.246</wp:comment_author_IP>
			<wp:comment_date>2009-09-24 03:50:22</wp:comment_date>
			<wp:comment_date_gmt>2009-09-24 10:50:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Harry,

Is there a better place for people to suggest / vote for features than in these comments? Maybe on the IP mailing list? Or is here fine?

Personally, start up time is the only thing that bugs me on a daily basis, and makes me think twice when I'm choosing between IronPython or CPython for new personal projects.

Bengt: There's nothing to stop you using the Visual Studio form designer and then just inheriting from those generated forms in IronPython. We do that with new GUI components all the time where I work.
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2269</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>michael@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
			<wp:comment_author_IP>88.96.105.246</wp:comment_author_IP>
			<wp:comment_date>2009-09-24 10:01:06</wp:comment_date>
			<wp:comment_date_gmt>2009-09-24 17:01:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'd love to see you guys work on performance as benchmarked in some realistic scenarios (e.g. Unladen Swallow are using the Django templating engine for benchmarking). I don't think microbenchmarks at all show the performance issues for large Python apps.

In general running IronPython with larger Python codebases (Django, Trac, Mercurial) would shake out both comaptibility *and* performance issues which I think are the most important. :-)

Oh - getting pdb working *fully* with IronPython 2.6 would be awesome by the way. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2270</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>michael@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
			<wp:comment_author_IP>88.96.105.246</wp:comment_author_IP>
			<wp:comment_date>2009-09-24 10:02:36</wp:comment_date>
			<wp:comment_date_gmt>2009-09-24 17:02:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Bengt
I don't see how generating forms in IronPython is particularly interesting. Visual Studio integration *is* interesting but the form designer should be at the bottom of the priority list for integration. You can already use the forms designer to generate C# and use that from IronPython very easily.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2271</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2009-09-24 16:36:34</wp:comment_date>
			<wp:comment_date_gmt>2009-09-24 23:36:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Bob, We're big fans of Python 3k (though we'll skip 3.0 and go directly to 3.1) as ascii stings is a big source of incompatibility for IronPython. Now that we're (almost) past 2.6, we're trying to figure out our post 2.6 roadmap including when we ship IronPython 3.1.

@Jonathan, I think the best way for people to vote is to create work items on the IronPython CodePlex site since it's got a built in voting system. Also, have you looked tried the new 2.6 - I'd love to hear your thoughts on our improved startup time.

@Eric, Agreed on VS integration

@Dody, Agreed on app compat. Any suggestions beyond Michael's (Django, Trac, Mercurial)?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2272</wp:comment_id>
			<wp:comment_author><![CDATA[Dody Gunawinata]]></wp:comment_author>
			<wp:comment_author_email>dody@nomadlife.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.237.146.28</wp:comment_author_IP>
			<wp:comment_date>2009-09-30 15:48:43</wp:comment_date>
			<wp:comment_date_gmt>2009-09-30 22:48:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://www.sqlalchemy.org/ and http://code.google.com/p/formalchemy/

http://turbogears.org/

http://pylonshq.com

http://webpy.org/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython Post 2.6 Roadmap</title>
		<link>http://devhawk.net/2009/09/28/ironpython-post-2-6-roadmap/</link>
		<pubDate>Mon, 28 Sep 2009 10:33:02 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://dbf7d543-5a65-4642-a1f0-44f25aa1ff37</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It’s not quite out the door yet, but things have gotten quieter around here since we shipped the <a href="http://devhawk.net/2009/09/23/IronPython+26+Release+Candidate.aspx">Release Candidate of 2.6</a>. But there’s no rest for the dynamic, so we’ve already started thinking about what we do next.</p><p>Since we shipped 2.0 last December, we’ve shipped two service releases: 2.0.1 two months later in February and 2.0.2 four months after that in June. We weren’t planning on doing a 2.0.3 release, but then we discovered the CLR folks made a breaking change to partial trust in Windows 7. David <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2009-September/011268.html">recently emailed</a> the IronPython mailing list looking for feedback on other must-fix bugs we can get to for 2.0.3. If you’ve got an opinion on 2.0.3 must-fix bugs, please respond to that thread.</p><p>For 2.6 service releases, we’re looking to tighten up the timeframe a bit from last time. We’re planning to ship service releases of 2.6 in December and February. However, since we don’t have a major release ship vehicle in the 2.x branch until Python 2.7 next summer, these service releases may contain new functionality in addition to bug fixes. In particular, we will look to include any missing modules work that I discussed in my <a href="http://devhawk.net/2009/09/23/IronPython+26+Release+Candidate.aspx">RC announcement post</a> in these service releases.</p><p>In addition to the IronPython 2.6 service releases, we’ll also continue to track the <a href="http://www.microsoft.com/visualstudio/2010">Visual Studio 2010</a> beta cycle as it heads to RTM. I can’t comment on VS2010 dates, but I can say that we will ship a CTP of IronPython 2.6 for .NET Framework 4.0 for Visual Studio 2010 Beta 2 and that we are committed to shipping the RTM of our .NET 4.0 version the day that Visual Studio 2010 is publicly available. Given that dynamic the <a href="http://msdn.microsoft.com/en-us/library/dd264736(VS.100).aspx">big new feature of C# 4.0</a>, we want to make sure IronPython is ready to go as soon as C# 4.0 is available. </p><p>BTW, we are well aware that “IronPython 2.6 for .NET Framework 4.0” is a long ugly name. Any suggestions on a different one? We’ve been thinking “IronPython 2.6 R2” since the “R2” nomenclature is <a href="http://technet.microsoft.com/en-us/windowsserver/bb428898.aspx">big</a><a href="http://www.microsoft.com/sqlserver/2008/en/us/R2.aspx">around</a><a href="http://www.microsoft.com/windowsserver2008/en/us/r2-editions-overview.aspx">here</a>. But “R2” doesn’t really capture the essence of the .NET 4.0 compatible release. Besides, when has the dynamic languages team at Microsoft ever done ANYTHING because it was popular with the Microsoft marketing folks? :)</p><p>At this point, we’ve got the next few months mapped out, but not much more beyond that. Specifically, we have two gaping holes in the roadmap:</p><ul><li>Visual Studio Integration </li><li>IronPython 3.x </li></ul><p>For now, I’m going to leave these holes unfilled. Currently, the rest of my VS Languages teammates (along with the rest of DevDiv) are heads down driving towards beta 2 of Visual Studio 2010. Once they reach that milestone, planning on Visual Studio v.next will begin. Those plans have the potential for impacting how the IronPython team proceeds going forward. </p><p>Frankly, several members of the dynamic languages team have been pitching in with the “drive to beta 2” effort so we’re a little more short handed than usual. If we get those people back, then we’re in a much better position to execute on both VS Integration and IronPython 3.x. If we don’t, then we have to make some hard choices about how to proceed. I’m guessing most would agree that VS integration is more important IronPython 3.x support. However, those aren’t equal efforts by any stretch of the imagination. How valuable is VS integration if, for example, we don’t have the bandwidth to build decent intellisense? As I said, hard choices.</p><p>If you want to make your voice heard on Microsoft’s level of commitment to IronPython, make sure you go rate the <a href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=475830">IronPython integration issue</a> on Microsoft Connect. (while you’re there, rate the <a href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=479957">IronRuby integration issue</a> too.) The IronPython integration is currently the top rated open issue on the VS Connect site and is the second highest vote getter out of all the Connect issues (active or otherwise) logged since VS 2010 shipped it’s first CTP! [1] </p><hr /><p>[1] Seriously, the next most recent Connect issue with more votes than IronPython integration is <a href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=308352">HttpRuntime.ProcessRequest() does not work in IIS7 Integrated Pipeline Mode</a> from November 2007. The next one before that was <a href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=106007">Create Service Pack for Visual Studio 2005</a> from November 2005. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1290</wp:post_id>
		<wp:post_date>2009-09-28 10:33:02</wp:post_date>
		<wp:post_date_gmt>2009-09-28 10:33:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-post-2-6-roadmap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[dbf7d543-5a65-4642-a1f0-44f25aa1ff37]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+Post+26+Roadmap]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/09/28/IronPython+Post+26+Roadmap]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2273</wp:comment_id>
			<wp:comment_author><![CDATA[Alcides Fonseca]]></wp:comment_author>
			<wp:comment_author_email>me@alcidesfonseca.com</wp:comment_author_email>
			<wp:comment_author_url>http://alcidesfonseca.com</wp:comment_author_url>
			<wp:comment_author_IP>193.11.233.70</wp:comment_author_IP>
			<wp:comment_date>2009-09-28 10:39:56</wp:comment_date>
			<wp:comment_date_gmt>2009-09-28 17:39:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just a small suggestion. Instead of R2 why not IronPython 2.6 n4, which stands for .net 4.0. Makes more sense than R2 to me since it reminds me of RC2.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2274</wp:comment_id>
			<wp:comment_author><![CDATA[Pedro Brown]]></wp:comment_author>
			<wp:comment_author_email>phs.brown@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>201.78.199.230</wp:comment_author_IP>
			<wp:comment_date>2009-09-28 14:41:30</wp:comment_date>
			<wp:comment_date_gmt>2009-09-28 21:41:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

In my opinion VS integration is, indeed, more important then Python 3.x. 

If the model of choice for this integration is a VS Addin, maybe you could release a CTP with some of the features, even if it doesn't include a decent intellisense.

My company is considering moving a code generator written in Delphi Win32 to a VS Addin, embedding IronPython in it, using it to run the Models (somewhat like CodeSmith, but much more specific).

The problem is that VS doesn't even have syntax highlighting. 

Thanks. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2275</wp:comment_id>
			<wp:comment_author><![CDATA[Martin Meinhardt]]></wp:comment_author>
			<wp:comment_author_email>am_tomoni@yahoo.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.49.190.47</wp:comment_author_IP>
			<wp:comment_date>2009-09-29 06:43:03</wp:comment_date>
			<wp:comment_date_gmt>2009-09-29 13:43:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["IronPython 2.6 D4"

"D" for "Dynamic" and "4" stands for ".NET v4".]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2276</wp:comment_id>
			<wp:comment_author><![CDATA[anon]]></wp:comment_author>
			<wp:comment_author_email>aaa@aa.gr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>88.218.48.85</wp:comment_author_IP>
			<wp:comment_date>2009-09-29 06:57:08</wp:comment_date>
			<wp:comment_date_gmt>2009-09-29 13:57:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ironpython 4.2.6]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Lightweight Debugging for Hybrid C#/IronPython Apps</title>
		<link>http://devhawk.net/2009/10/06/lightweight-debugging-for-hybrid-cironpython-apps/</link>
		<pubDate>Tue, 06 Oct 2009 14:11:38 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://3cf0678c-d21a-4569-8d9c-2a3ae2996605</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://www.zazzle.com/you_had_me_at_dynamic_shirt-235421109922997983"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="designallCAZM93SM" border="0" alt="designallCAZM93SM" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/EmbeddedDebuggingIntroduction_AD18/designallCAZM93SM_3.jpg" width="240" height="221" /></a></p><p>One of the IronPython scenarios that I’m hearing more and more about recently is for <a href="http://en.wikipedia.org/wiki/Polyglot_%28computing%29">polyglot</a> programs. In these scenarios, part of the application is built in IronPython other parts are build in compiled, statically typed languages like C# or Visual Basic. Sometimes, programs are written this way to allow the C# app to access a Python library, like my <a href="http://devhawk.net/2009/04/05/Pygments+For+Windows+Live+Writer.aspx">Pygments for WL Writer</a> plugin. Other programs want to be customizable by the end user, like <a href="http://blogs.msdn.com/intellipad/archive/2008/11/11/newbie-experience-writing-a-custom-command.aspx">Intellipad</a>. Whatever the reason, I think that the number of these hybrid polyglot programs is going up, which partially explains why the C# team added the <a href="http://msdn.microsoft.com/en-us/library/dd264741(VS.100).aspx">new dynamic type</a> to C# 4.0.</p><p>(FYI: the <a href="http://www.zazzle.com/you_had_me_at_dynamic_shirt-235421109922997983">You had me at “dynamic”</a> shirt above is available for sale in my Zazzle store along with my <a href="http://www.zazzle.com/architecture_help_dark_t_shirt-235848130425737882">Architecture Help 5¢</a> shirt)</p><p>The thing is that if you’re going to build polyglot apps, you’re probably going to want the ability to debug polyglot apps as well. I’ve <a href="http://devhawk.net/2009/02/27/Writing+An+IronPython+Debugger+Introduction.aspx">written extensively</a> about building a debugger for IronPython. However, <a href="http://github.com/devhawk/ipydbg/">ipydbg</a> uses the CLR debugger under the hood which means you have to have the debugger and the code it’s debugging in separate processes. That’s a huge design burden for building a debuggable polyglot application. Luckily, as of IronPython 2.6, we support Python’s built-in trace debugging capability (aka <a href="http://docs.python.org/library/sys.html#sys.settrace">sys.settrace</a>). While you can use this in pure Python apps (like <a href="http://docs.python.org/library/pdb.html">PDB</a>), you can also use it polyglot C# (or VB)/IronPython apps as well. If only someone were to take the time to build a sample and document what he did along the way…</p><p>Hey, that sounds like PM work!</p><p>Seriously, let me introduce you to the worlds simplest Twitter application: GetThings. The app downloads a list of my tweets via the Twitter API and displays them in a list box. The UI is written in C# while the tweet download code is written in Python. Clearly, this is a pretty brain dead app – but the point isn’t to build a great Twitter app but rather to show how to use the settrace API from C#.</p><p>I’ve stuck the <a href="http://github.com/devhawk/LightweightDebuggerDemo">code up on GitHub</a>. If you want to see the basic app in action sans debugging, start with the <a href="http://github.com/devhawk/LightweightDebuggerDemo/commit/92bd5fc330e2a48ae84fc185f3e397aefb4be1eb">initial checkin</a>. As you can see here, basic C# / IronPython integration is pretty trivial. I’m simply creating an engine and a scope, adding the list boxes’ Items property to the scope, and executing the getthings.py file from the disk.</p><pre class="brush: csharp">
private void Window_Loaded(object sender, RoutedEventArgs e)
{
    ScriptEngine engine = Python.CreateEngine();
    ScriptScope  scope = engine.CreateScope();
    scope.SetVariable("items", lbThings.Items);
    engine.ExecuteFile("getthings.py", scope);
}
</pre><p>Since GetThings.py is just a text file, the user can modify it to get a list of anything they want – some other user’s timeline, the public timeline, or even – gasp! – something not from Twitter! In fact, as you see below, I’ve actually modified it to pull the tweets from a file on disk so I can avoid hitting the network on every run.</p><pre class="brush: python">
import clr
clr.AddReference("System.Xml")
from System.Xml import XmlDocument

def get_nodes(xml):
    return xml.SelectNodes("statuses/status/text")

def download_stuff():
    x = XmlDocument()

    #load from disk to save time in development
    #x.Load("http://twitter.com/statuses/user_timeline/devhawk.xml")
    x.Load("devhawk.xml")

    for n in get_nodes(x):
        txt = n.InnerText
        items.Add(txt)

download_stuff()
</pre><p>OK, so that’s the basics of the world’s simplest hybrid C#/IronPython Twitter application. Next up, I’ll add the settrace basics.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1291</wp:post_id>
		<wp:post_date>2009-10-06 14:11:38</wp:post_date>
		<wp:post_date_gmt>2009-10-06 14:11:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lightweight-debugging-for-hybrid-cironpython-apps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="lightweight-debugger"><![CDATA[Lightweight Debugger]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[3cf0678c-d21a-4569-8d9c-2a3ae2996605]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Lightweight+Debugging+For+Hybrid+CIronPython+Apps]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/06/Lightweight+Debugging+For+Hybrid+CIronPython+Apps]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2277</wp:comment_id>
			<wp:comment_author><![CDATA[Rahmi Guldahl]]></wp:comment_author>
			<wp:comment_author_email>rahmi.guldahl@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.209.32.145</wp:comment_author_IP>
			<wp:comment_date>2009-11-03 12:44:31</wp:comment_date>
			<wp:comment_date_gmt>2009-11-03 20:44:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do you have a clue to me regarding why Im not able to use pythons built-in modules like datetime re and so on. Im doing this embedding stuff, and everything works up to the part where I am do "import re, datetime" in the python script.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2278</wp:comment_id>
			<wp:comment_author><![CDATA[Rahmi Guldahl]]></wp:comment_author>
			<wp:comment_author_email>rahmi.guldahl@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.124.247.132</wp:comment_author_IP>
			<wp:comment_date>2009-12-02 22:48:33</wp:comment_date>
			<wp:comment_date_gmt>2009-12-03 06:48:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I solved this one, there was a problem with my dependencies, since I had two projects running, the embedding was a class library while the project executing was a windows service project, so obviously I had to import the dependencies in that project as well.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Hybrid App Debugging Aside - The DLR Hosting API</title>
		<link>http://devhawk.net/2009/10/07/hybrid-app-debugging-aside-the-dlr-hosting-api/</link>
		<pubDate>Wed, 07 Oct 2009 15:58:15 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://96e3d1b3-5adc-4e69-b414-e69a6e5a05d0</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In my series on <a href="http://devhawk.net/2009/10/06/Lightweight+Debugging+For+Hybrid+CIronPython+Apps.aspx">Hybrid App Debugging</a>, I showed the following code for executing a Python file in a hybrid C#/IronPython app.</p><pre class="brush: csharp">
private void Window_Loaded(object sender, RoutedEventArgs e)
{
    ScriptEngine engine = Python.CreateEngine();
    ScriptScope  scope = engine.CreateScope();
    scope.SetVariable("items", lbThings.Items);
    engine.ExecuteFile("getthings.py", scope);
}
</pre><p>The <a href="javascript:window.location.href='http://dlr.codeplex.com/Project/Download/FileDownload.aspx?DownloadId=84001';">DLR Hosting API</a> has three distinct levels of functionality. As simple as this is, technically it’s level 2 since it’s using a ScriptEngine directly. If you wanted to use the simplest level 1 hosting API, you could use runtimes instead of engines and save a line of code.</p><pre class="brush: csharp">
private void Window_Loaded(object sender, RoutedEventArgs e)
{
    ScriptRuntime runtime = Python.CreateRuntime();
    runtime.Globals.SetVariable("items", lbThings.Items);
    runtime.ExecuteFile("getthings.py");
}
</pre><p>The ScriptRuntime version of ExecuteFile doesn’t include an overload that takes a ScriptScope like ScriptEngine does, so instead you add the items variable to the globals scope. However, this doesn’t automatically add the items object to every child scope – you have to explicitly import items into the local scope if you want to use it. So for Python, that means you need to add “import items” to the top of the GetThings.py script. Nothing else changes.</p><p>Personally, I find DLR Hosting API Level 2 to be straightforward and easy enough to understand, so I tend to code to that level by default. I actually had to go read the doc to discover the ScriptRuntime.Globals property and talk to Dino about importing those variables into a local scope. However, I wanted to point out that nothing in my Hybrid App Debugging sample so far is really dependent on the level 2 API. If you just want to execute some Python files in the context of your C# application, you can stick with the simpler level 1 API if you want. You can even use lightweight debugging with the level 1 API – there’s an overload of the SetTrace extension method for ScriptRuntimes just as there is for ScriptEngines. Just something to keep in mind.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1292</wp:post_id>
		<wp:post_date>2009-10-07 15:58:15</wp:post_date>
		<wp:post_date_gmt>2009-10-07 15:58:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hybrid-app-debugging-aside-the-dlr-hosting-api</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
		<category domain="post_tag" nicename="hosting-api"><![CDATA[Hosting API]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="lightweight-debugger"><![CDATA[Lightweight Debugger]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[96e3d1b3-5adc-4e69-b414-e69a6e5a05d0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Hybrid+App+Debugging+Aside+The+DLR+Hosting+API]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/07/Hybrid+App+Debugging+Aside+The+DLR+Hosting+API]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hybrid App Debugging - TracebackDelegate and SetTrace</title>
		<link>http://devhawk.net/2009/10/07/hybrid-app-debugging-tracebackdelegate-and-settrace/</link>
		<pubDate>Wed, 07 Oct 2009 13:43:27 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://0cbc8971-2ce0-4098-b3b4-23a7f852cc86</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Now that I’ve introduced my <a href="http://devhawk.net/2009/10/06/Lightweight+Debugging+For+Hybrid+CIronPython+Apps.aspx">simple hybrid GetThings app</a>, we need to set about adding support for debugging just the IronPython part of the app via the new lightweight debugging functionality we’re introducing in 2.6. Note, the code is <a href="http://github.com/devhawk/LightweightDebuggerDemo">up on github</a>, but isn’t going to exactly match what I show on the blog. Also, I have a post RC1 daily build of IronPython in the <a href="http://github.com/devhawk/LightweightDebuggerDemo/tree/deac85aaf14b37352ce4248917fd857c173d8997/External">Externals folder</a> since I discovered a few issues while building this sample that Dino had to fix after RC1. Those assemblies will be updated as needed as the sample progresses.</p><p>We saw last time how how easy it is to execute a Python script to configure a C# app – only four lines of code. If we want to support debugging, we need to add a fifth:</p><pre class="brush: csharp">
private void Window_Loaded(object sender, RoutedEventArgs e)
{
    ScriptEngine engine = Python.CreateEngine();
    engine.SetTrace(this.OnTraceback);

    ScriptScope s = engine.CreateScope();
    s.SetVariable("items", lbThings.Items);
    engine.ExecuteFile("getthings.py", s);
}
</pre><p>You’ll notice the one new line – the call to engine.SetTrace. This is actually an extension method – ScriptEngine is a DLR hosting API class and but SetTrace is IronPython specific functionality [1]. If you look at the source of Python.SetTrace, you’ll see that it’s just a wrapper around SysModule.settrace, but it avoids needing to get the engine’s shared PythonContext yourself.</p><p>SetTrace takes a TracebackDelegate as a parameter. That delegate gets registered as the global traceback handler for the Python engine (on that thread, but we’ll ignore threading for now). Whenever that engine enters a new scope (i.e. a new function), the IronPython runtime calls into the global traceback handler. While the traceback handler runs, execution of the python code in that engine is paused. When the traceback handler returns, the engine resumes executing python code.</p><p>In addition to the global traceback handler, each scope has a local traceback handler as well. The TracebackDelegate type returns a TracebackDelegate which is used as the local traceback handler for the next traceback event within that scope. Traceback handlers can return themselves, some other TracebackDelegate, or null if they don’t want any more traceback events for the current scope. It’s kinda confusing, so here’s a picture:</p><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/HybridAppDebuggingTracebackDelegateandSe_F502/image_10.png"><img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="image" border="0" alt="image" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/HybridAppDebuggingTracebackDelegateandSe_F502/image_thumb_4.png" width="514" height="206" /></a></p><p>You’ll notice three different traceback event types in the picture above: call, line and return. Call indicates the start of a scope, and is always invoked on the global traceback handler (i.e. the traceback passed to SetTrace). Line indicates the Python engine is about to execute a line of code and return indicates the end of a scopes execution. As you can see, the runtime uses the return value of the traceback for the next tracing call until the end of the scope. The return value from the “return” event handler is ignored. </p><p>So now that we know the basics of traceback handlers, here’s a simple TracebackDelegate that simply returns itself. The “Hello, world!” of traceback debugging if you will.</p><pre class="brush: csharp">
private TracebackDelegate OnTraceback
    (TraceBackFrame frame, string result, object payload)
{
    return this.OnTraceback;
}
</pre><p>If you run this code, there will be no functional difference from the code before you added the SetTrace call. That’s because we’re not doing anything in the traceback handler. But if you run this in the debugger with a breakpoint on this function, you’ll see that it gets called a bunch of times. In the python code <a href="http://devhawk.net/2009/10/06/Lightweight+Debugging+For+Hybrid+CIronPython+Apps.aspx">from the last post</a>, there are three scopes – module scope, download_stuff function scope and the get_nodes function scope. Each of those function scopes will have a call and return event, plus a bunch of line events in between. </p><p>The parameters for TracebackDelegate are described <a href="http://docs.python.org/library/sys.html#sys.settrace">in the Python docs</a>. The frame parameter is the current stack frame – it has information about the local and global variables, the code object currently executing, the line number being executed and a pointer to the previous stack frame if there is one. More information on code and frame objects is available in the <a href="http://docs.python.org/reference/datamodel.html#the-standard-type-hierarchy">python data model</a> (look for “internal types”). Result is the reason why the traceback function is being called (in Python docs, it’s called “event” but that’s a keyword in C#). IronPython supports four traceback results: “call”, “line” and “return” as described above plus “exception” when an exception is thrown. Finally, the payload value’s meaning depends on the traceback result. For call and line, payload is null. For return, payload is the value being returned from the function. For exception, the payload is information about the exception and where it was thrown. </p><p>As I mentioned above, python code execution is paused while the traceback handler executes and then continues when the traceback handler returns. That means you need to block in that function if you want to let the user interact with the debugger. For a console app like PDB, you can do that with a single thread of execution easily enough. For a GUI app like GetThings, that means running the debugger and debugee windows on separate threads. And as I alluded to, tracing for Python script engines is per thread. So next time, we’ll look deeper into how to use multiple threads for lightweight debugging a hybrid app.</p><hr /><p>[1] Eventually, I’d like to see IronRuby support lightweight debugging as well. However, there’s no built in mechanism for Ruby debugging the way there is for Python, so it’s less clear how we should expose debugging to the Ruby developer. We’d also want to build a language neutral DLR Hosting API mechanism for lightweight debugging as well at that point. But honestly, we have higher priorities at this point.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1293</wp:post_id>
		<wp:post_date>2009-10-07 13:43:27</wp:post_date>
		<wp:post_date_gmt>2009-10-07 13:43:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hybrid-app-debugging-tracebackdelegate-and-settrace</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="lightweight-debugger"><![CDATA[Lightweight Debugger]]></category>
		<category domain="post_tag" nicename="polyglot"><![CDATA[Polyglot]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[0cbc8971-2ce0-4098-b3b4-23a7f852cc86]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Hybrid+App+Debugging+Ndash+TracebackDelegate+And+SetTrace]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/07/Hybrid+App+Debugging+Ndash+TracebackDelegate+And+SetTrace]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hybrid App Debugging - The Debug Window</title>
		<link>http://devhawk.net/2009/10/09/hybrid-app-debugging-the-debug-window/</link>
		<pubDate>Fri, 09 Oct 2009 11:18:35 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://fe530c58-39d6-46d5-ad44-40acd2c1cfdc</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In my <a href="http://devhawk.net/2009/10/09/Hybrid+App+Debugging+Ndash+Threading.aspx">last installment</a>, I added support for a separate debug window on a separate thread from the main window thread. That way, I can pause the execution of the main window while the debug window stays responsive to user input. Now, let’s add some functionality to the debug window. I’m going to start by showing the source code of the python file being executed.</p><pre class="brush: csharp">
private void OnTraceback(TraceBackFrame frame, string result, object payload)
{
    FunctionCode code = (FunctionCode)frame.f_code;
    if (_curCode == null || _curCode.co_filename != code.co_filename)
    {
        _source.Inlines.Clear();
        foreach (var line in System.IO.File.ReadAllLines(code.co_filename))
        {
            _source.Inlines.Add(new Run(line + "rn"));
        }
    }
</pre><p>The TraceBackFrame instance has a property f_code that represents the FunctionCode object being executed in this frame. We have to explicitly cast to FunctionCode type because currently we’re exposing all properties that hang off TraceBackFrame as object type. Since Python is a dynamic language, we’re going to use reflection against the instance itself anyway so it doesn’t really matter what the return type is. However, I’ve asked Dino to change the TraceBackFrame type to use explicit types in order to make it easier to use SetTrace from statically typed languages like C#. Look for that in RC2.</p><p>After we cast the code object so it can be used from C#, we check to see if the currently loaded file matches the file currently loaded into the UI. I’ve <a href="http://devhawk.net/2009/07/09/Syntax+Highlighting+TextBoxes+In+WPF+Ndash+A+Sad+Story.aspx">ranted recently</a> about the limitations of WPF’s TextBox but I didn’t want to get hung up syntax highlighting for this sample so I just went ahead and used the <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.richtextbox.aspx">RichTextBox</a>. In the DebugWindow Loaded event handler, I create _source as a WPF <a href="http://msdn.microsoft.com/en-us/library/system.windows.documents.paragraph.aspx">Paragraph</a> and then wrap it in a FlowDocument and use it as the RichTextBox’s Document. I set the FlowDocument to be extremely wide, so as to avoid word wrapping. Then when I need to load a new source file, I clear _source of it’s current contents and add a single line run for every line of code in the file. This convention becomes useful later when I go to highlight the current line of code. </p><p>Once I load the current file, I save the current frame, code, result and payload in instance fields and then switch on result to determine what to do next. Currently, I’m just highlighting the relevant line of code and setting a TextBlock control in the menu bar.</p><pre class="brush: csharp">
private void TracebackCall()
{
    dbgStatus.Text = string.Format("Call {0}", _curCode.co_name);
    HighlightLine((int)_curFrame.f_lineno, 
        Brushes.LightGreen, Brushes.Black);
}

private void TracebackReturn()
{
    dbgStatus.Text = string.Format("Return {0}", _curCode.co_name);
    HighlightLine(_curCode.co_firstlineno, 
        Brushes.LightPink, Brushes.Black);
}

private void TracebackLine()
{
    dbgStatus.Text = string.Format("Line {0}", _curFrame.f_lineno);
    HighlightLine((int)_curFrame.f_lineno, 
        Brushes.Yellow, Brushes.Black);
}
</pre><p></p><p>In Visual Studio, we typically highlight the current line of code in yellow. However, that doesn’t work as great in a language like Python that delineates code blocks with whitespace. In ipydbg, I <a href="http://devhawk.net/2009/03/19/Writing+An+IronPython+Debugger+Colorful+Console.aspx">indicated function return</a> with three carets. But I didn’t want to be modifying the text in the RichTextBox here so instead I used different colors for the different traceback event types: light green for call, light pink for return and yellow for line. The frame object contains the current line number, which I use for call and line, while the code object has the first line of the current code object, which I use for return. HighlightLine highlights the line in question with the colors provided and also scrolls that line into view if it isn’t already visible.</p><p>So now when a traceback is handled, it shows the text for the file being executed and highlights the appropriate line, based on the type of traceback event that happened. Now all we need is to have some way be able to continue execution. In the code, you’ll see I’ve <a href="http://github.com/devhawk/LightweightDebuggerDemo/blob/deac85aaf14b37352ce4248917fd857c173d8997/LightweightDebuggerDemo/DebugWindow.xaml.cs#L21">defined a series</a> of RoutedUICommands for common debugger commands. I’ve got the StepIn command wired up in the <a href="http://github.com/devhawk/LightweightDebuggerDemo/blob/deac85aaf14b37352ce4248917fd857c173d8997/LightweightDebuggerDemo/DebugWindow.xaml">DebugWindow XAML</a> to a menu item and the “S” keystroke. All that remains is to define StepInExecuted.</p><pre class="brush: csharp">
private void StepInExecuted(object sender, ExecutedRoutedEventArgs e)
{
    dbgStatus.Text = "Running";

    foreach (var i in _source.Inlines)
    {
        i.Background = rtbSource.Background;
        i.Foreground = rtbSource.Foreground;
    }

    _dbgContinue.Set();
}
</pre><p>This function does three basic things: changes the dbgStatus text, resets all the text in the RichTextBox back to the default coloring, and sets the _dbgContinue AutoResetEvent which signals the main window thread that’s been blocked in OnTracebackReceived to continue.</p><p>With this post, I’m about even with the code that’s <a href="http://github.com/devhawk/LightweightDebuggerDemo">up on GitHub</a>. That code has a few other capabilities – notably it will stop tracing if you close the debug window and it supports StepOut command which disables traceback for the current scope by returning null in OnTracebackReceived. But I haven’t implemented things like:</p><ul><li>Set Next Statement</li><li>Viewing and changing variables</li><li>Debugger REPL</li><li>Breakpoint Management</li></ul><p>Any suggestions on which of those would you like to see next? </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1294</wp:post_id>
		<wp:post_date>2009-10-09 11:18:35</wp:post_date>
		<wp:post_date_gmt>2009-10-09 11:18:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hybrid-app-debugging-the-debug-window</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="lightweight-debugger"><![CDATA[Lightweight Debugger]]></category>
		<category domain="post_tag" nicename="polyglot"><![CDATA[Polyglot]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[fe530c58-39d6-46d5-ad44-40acd2c1cfdc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Hybrid+App+Debugging+Ndash+The+Debug+Window]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/09/Hybrid+App+Debugging+Ndash+The+Debug+Window]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2279</wp:comment_id>
			<wp:comment_author><![CDATA[Luiz]]></wp:comment_author>
			<wp:comment_author_email>luiz.tuschinski@quellon.com.br</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>200.247.182.184</wp:comment_author_IP>
			<wp:comment_date>2009-10-15 07:24:57</wp:comment_date>
			<wp:comment_date_gmt>2009-10-15 14:24:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Where can We download the full sourcecode of this debug routines?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2280</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
			<wp:comment_date>2009-10-21 19:07:29</wp:comment_date>
			<wp:comment_date_gmt>2009-10-22 02:07:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://github.com/devhawk/LightweightDebuggerDemo]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2281</wp:comment_id>
			<wp:comment_author><![CDATA[A B]]></wp:comment_author>
			<wp:comment_author_email>cold_fusion@fastmail.fm</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>192.91.60.11</wp:comment_author_IP>
			<wp:comment_date>2009-10-29 04:01:11</wp:comment_date>
			<wp:comment_date_gmt>2009-10-29 11:01:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great job, I'm happy to see settrace finally implemented and put into use.
This actually makes IronPython a viable solution to a project we're initiating over here.

Though, someone expressed concern for how slow running a script may become when break point management is implemented in the debugger.

I would like to hear your thoughts about that.

Thanks.
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2282</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
			<wp:comment_date>2009-11-23 22:40:19</wp:comment_date>
			<wp:comment_date_gmt>2009-11-24 06:40:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@AB, running the script under the debugger is slower, but I'm not sure how much slower exactly. I'd ask Dino on the IronPython mailing list - he implemented it so I'm sure he can speak to the amount of overhead there is.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2283</wp:comment_id>
			<wp:comment_author><![CDATA[loge]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>95.32.232.7</wp:comment_author_IP>
			<wp:comment_date>2009-11-25 12:41:51</wp:comment_date>
			<wp:comment_date_gmt>2009-11-25 20:41:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank You very much for this excellent "debug" series.
It would be good to see Your description of viewing variables during debug...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1302965671.947";s:7:"message";s:37:"devhawk reported this comment as spam";s:5:"event";s:11:"report-spam";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[devhawk]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1302965854.4995";s:7:"message";s:41:"devhawk reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Hybrid App Debugging - Threading</title>
		<link>http://devhawk.net/2009/10/08/hybrid-app-debugging-threading/</link>
		<pubDate>Thu, 08 Oct 2009 18:42:38 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d69568b9-9021-46d6-aeb4-0e1bb554fbf1</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I <a href="http://devhawk.net/2009/10/07/Hybrid+App+Debugging+Ndash+TracebackDelegate+And+SetTrace.aspx">added traceback</a> to my GetThings app in just two lines of code, but so far it doesn’t actually do anything that you would expect a debugger to do. But before we get to that, we need understand a little about how threading works for traceback debugging.</p><p>As I mentioned last time, the traceback debugger works by calling into the registered traceback handler at various times (entering/exiting a function, before executing a line of code and on exceptions). Execution of the Python code continues when the traceback function exits. That means that you have to block the execution thread while you let the user poke around with the debugger UI. For a console based app, that’s easy. For a GUI app, not so much.</p><p>At a minimum, you need to run your debugger UI on a separate thread from your main app window. If you want your main app window to be responsive while you debug, you’ll need to pump messages at a minimum (<a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.application.doevents.aspx">DoEvents</a> in Windows Forms, <a href="http://social.msdn.microsoft.com/forums/en-US/wpf/thread/a2988ae8-e7b8-4a62-a34f-b851aaf13886">similar approaches are available</a> for WPF) or preferably run your python scripts on a background thread separate from either the main window UI thread or the debugger UI thread. To keep things simple, I’m going to simply block the main window thread while the debugger is active.</p><p>Since I’m going to have to setup a new thread for the debugger window, I decided to use a static constructor to centralize creating the thread, creating the window and registering the traceback handler all in one place.</p><p></p><pre class="brush: csharp">
static Thread _debugThread;
static DebugWindow _debugWindow;
static ManualResetEvent _debugWindowReady = new ManualResetEvent(false);

public static void InitDebugWindow(ScriptEngine engine)
{
    _debugThread = new Thread(() =&gt;
    {
        _debugWindow = new DebugWindow(engine);
        _debugWindow.Show();
        Dispatcher.Run();
    });
    _debugThread.SetApartmentState(ApartmentState.STA);
    _debugThread.Start();

    _debugWindowReady.WaitOne();
    engine.SetTrace(_debugWindow.OnTracebackReceived);
}
</pre><p></p><p>As you can see, InitDebugWindow spins up a new thread and creates the debug window on that thread. Since it’s not the main WPF application thread, you have to explicitly call <a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatcher.run.aspx">Dispatcher.Run</a> to get the event queue pumping. You also have to explicitly <a href="http://msdn.microsoft.com/en-us/library/system.threading.thread.setapartmentstate.aspx">set the apartment state</a> to be single threaded for any threads creating WPF objects. Finally, I wait for the window to signal that it’s ready (it set’s the _debugWindowReady AutoResetEvent in the Window Loaded event) and then call SetTrace, passing in the debug window’s OnTracebackReceived event, on the thread that called InitDebugWindow.</p><p>It’s critical that you call SetTrace – and thus InitDebugWindow – on the thread that’s going to execute the Python code. Debugging in Python is <em>per thread</em>. Even if you execute the same code in the same ScriptScope with the same ScriptEngine but on a different thread, the traceback handler calls won’t fire. The way DebugWindow is written, it will only support debugging a single thread, but it would be pretty straightforward to support multiple threads by changing the way OnTracebackReceived gets signaled to continue.</p><p>Speaking of OnTracebackReceived, this was my initial basic implementation of it:</p><p></p><pre class="brush: csharp">
private TracebackDelegate OnTracebackReceived
    (TraceBackFrame frame, string result, object payload)
{
    Action&lt;TraceBackFrame, string, object&gt; tbAction = this.OnTraceback;
    this.Dispatcher.BeginInvoke(tbAction, frame, result, payload);
    _dbgContinue.WaitOne();
    return this.OnTracebackReceived;
}
</pre><p></p><p>As we saw, the DebugWindow is running on a different thread than the traceback handler call will come in on. So OnTracebackReceived needs to invoke a new call on the correct thread by using <a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatcher.begininvoke.aspx">Dispatcher.BeginInvoke</a>. Even though OnTracebackReceived is always called on the main window thread, it still has access to the properties of the debug window thread like its Dispatcher. I used BeginInvoke to invoke OnTraceback asynchronously – OnTraceback isn’t going to return anything interesting and we’re going to wait on an AutoResetEvent before continuing anyway so I didn’t see any reason to use a synchronous call. </p><p>We’ll discuss OnTraceback more next post, but basically it will configure the UI for the traceback event that happened. Then DebugWindow will wait for user input. When the user indicates they want to resume execution, the command handler in question will set _dbgContinue and the original traceback will return so execution can continue. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1295</wp:post_id>
		<wp:post_date>2009-10-08 18:42:38</wp:post_date>
		<wp:post_date_gmt>2009-10-08 18:42:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hybrid-app-debugging-threading</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="lightweight-debugger"><![CDATA[Lightweight Debugger]]></category>
		<category domain="post_tag" nicename="polyglot"><![CDATA[Polyglot]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d69568b9-9021-46d6-aeb4-0e1bb554fbf1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Hybrid+App+Debugging+Ndash+Threading]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/09/Hybrid+App+Debugging+Ndash+Threading]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IronPython and IronRuby CTPs for .NET 4.0 Beta 2</title>
		<link>http://devhawk.net/2009/10/21/ironpython-and-ironruby-ctps-for-net-4-0-beta-2/</link>
		<pubDate>Wed, 21 Oct 2009 15:27:16 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://f7eb4d9e-0459-4fc6-a8be-0dd56f902d9d</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://msdn.microsoft.com/en-us/vstudio/dd582936.aspx"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="VS_v_rgb" border="0" alt="VS_v_rgb" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/IronPythonandIronRubyCTPsfor.NET4.0Beta2_D952/VS_v_rgb_3.png" width="300" height="117" /></a> In case you’ve been hiding under a rock (or maybe just aren’t tracking developments in the .NET community outside of IronPython), Microsoft <a href="http://msdn.microsoft.com/en-us/vstudio/dd582936.aspx">released Visual Studio 2010 beta 2</a> this week. Of course for me personally, the most important feature in Visual Studio 2010 is <a href="http://msdn.microsoft.com/en-us/library/dd264736(VS.100).aspx">C# 4.0 new dynamic type</a> (<a href="http://msdn.microsoft.com/en-us/library/dd537660(VS.100).aspx">also available in Visual Basic</a>, but since VB already supported some level of late binding it’s not exactly “new” to VB). </p><p>For those of you who want to experiment with this cool new feature, may I present <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=28125">IronPython 2.6 CTP for .NET 4.0 Beta 2</a>. If you can’t think of any cool things to try with this new feature, the VB team blog <a href="http://blogs.msdn.com/vbteam/archive/2008/12/17/walkthrough-dynamic-programming-in-visual-basic-10-0-and-c-4-0-lisa-feigenbaum.aspx">has some scenarios</a> to get your started. </p><p>Also available: <a href="http://ironruby.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=33305">IronRuby CTP for .NET 4.0 Beta 2</a> if you’re more into gemstones than snakes.</p><p>These are preview releases, which means they’ve gone thru basic testing. If you find any bugs, PLEASE report them via <a href="http://ironpython.codeplex.com/WorkItem/Create.aspx">the usual channel</a>. I wrote in my Post 2.6 Roadmap post, “we are committed to shipping the RTM of our .NET 4.0 version the day that Visual Studio 2010 is publicly available” but that means shaking out the bugs between now and then. We need your help so we’re ready to go by Visual Studio 2010 launch - March 22, 2010 <a href="http://blogs.msdn.com/somasegar/archive/2009/10/19/announcing-visual-studio-2010-and-net-fx-4-beta-2.aspx">as per Soma’s blog</a>.</p><p>BTW, <a href="http://alcidesfonseca.com">Alcides Fonseca</a> <a href="http://devhawk.net/CommentView,guid,dbf7d543-5a65-4642-a1f0-44f25aa1ff37.aspx#commentstart">suggested</a> we call this release “IronPython 2.6 N4” since it’s designed to run on .NET Framework 4.0. I like that. What do you think?</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1296</wp:post_id>
		<wp:post_date>2009-10-21 15:27:16</wp:post_date>
		<wp:post_date_gmt>2009-10-21 15:27:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-and-ironruby-ctps-for-net-4-0-beta-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<category domain="post_tag" nicename="ironruby"><![CDATA[IronRuby]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[f7eb4d9e-0459-4fc6-a8be-0dd56f902d9d]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+And+IronRuby+CTPs+For+NET+40+Beta+2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/21/IronPython+And+IronRuby+CTPs+For+NET+40+Beta+2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2284</wp:comment_id>
			<wp:comment_author><![CDATA[Randall Sutton]]></wp:comment_author>
			<wp:comment_author_email>randallsutton@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.randallsutton.net</wp:comment_author_url>
			<wp:comment_author_IP>173.10.25.165</wp:comment_author_IP>
			<wp:comment_date>2009-11-16 11:51:05</wp:comment_date>
			<wp:comment_date_gmt>2009-11-16 19:51:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So I downloaded the IronPython CTP for .NET 4.0 and when I reference the Dlls I get a built with a previous framework message.  Also there are not any silverlight dlls included.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>IronPython 2.0.3 and 2.6 RC2</title>
		<link>http://devhawk.net/2009/10/27/ironpython-2-0-3-and-2-6-rc2/</link>
		<pubDate>Tue, 27 Oct 2009 14:29:29 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://a105b675-f06a-4548-a8f3-3525a5b96654</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It has been a very busy week for the IronPython team. Just under a week ago, we shipped a <a href="http://devhawk.net/2009/10/21/IronPython+And+IronRuby+CTPs+For+NET+40+Beta+2.aspx">CTP for .NET Framework 4.0</a>. Since then, we’ve shipped two – yes, two! – more versions of IronPython. Three releases in one week! If we could keep up that pace, we’d be shipping like 27 more releases of IronPython by the end of the year!</p><p>FYI, we’re not going to keep up the pace of shipping three releases a week for the next two months. We may be a little crazy on the IronPython team, but we’re not THAT crazy!</p><p>Actually, all three of these releases represent fairly small changes in the IronPython source tree. The .NET 4.0 beta was a CTP, so it’s basically whatever we had in our main trunk when they forked .NET Framework for the beta. </p><p><a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=30416">IronPython 2.0.3</a> is a minor point release in the 2.0 branch (duh). In addition to backporting some fixes from 2.6, we had to fix an CLR breaking change in partial trust on Windows 7. If you’re using IronPython 2.0.x in partial trust on Windows 7 you *MUST* upgrade to 2.0.3 (or 2.6 when it’s released). Sorry about that – but it was out of our hands. </p><p><a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=34451">IronPython 2.6 RC2</a> is – as you would expect - a minor update over the first release candidate. There was a memory leak discovered in the hosting APIs which forced us to do a second release candidate. Since we had to fix that, we took in a few of other fixes including some standard library changes (we left out json by accident in RC1 and Michael Foord got logging updated to work better with IronPython so we took the latest version of it). As per the release notes, we expect this to be the final RC and will re-ship it as RTM in about a month. Please start using this latest release and let us know if you find anything.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1297</wp:post_id>
		<wp:post_date>2009-10-27 14:29:29</wp:post_date>
		<wp:post_date_gmt>2009-10-27 14:29:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ironpython-2-0-3-and-2-6-rc2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[a105b675-f06a-4548-a8f3-3525a5b96654]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[IronPython+203+And+26+RC2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/27/IronPython+203+And+26+RC2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Joining Windows</title>
		<link>http://devhawk.net/2009/10/26/joining-windows/</link>
		<pubDate>Tue, 27 Oct 2009 00:22:43 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://16570446-12d5-47c1-be94-5a8d1754110a</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Big news in DevHawk land: I’ll be taking on a new role in the <a href="http://www.microsoft.com/windows/">Windows</a> division after I come back from <a href="http://www.msteched.com/europe/Public/">TechEd Europe</a> (plus a week vacation visiting my bro-in-law in Germany after TechEd). </p><p>You guys have heard of Windows, right? They just released <a href="http://www.microsoft.com/Windows/windows-7/default.aspx">a new version</a> recently you might be aware of…Actually, I hear it was <a href="http://seattletimes.nwsource.com/html/microsoftpri0/2010119125_windows_7_launch_microsoft_new_ads_say_windows_was.html">your idea</a>!</p><p>Seriously, I am <em><u>stoked</u></em>to be joining the Windows team. I can’t say much about the new job beyond a) it’s in Windows Client (as opposed to Windows Server) and b) I’m working on a team that’s focused on the Windows developer experience. The Windows team is deep in what you might call “building on teh awesome that is Windows 7” but that they simply call “planning”, so sorry if specifics are kinda sparse. I’ll be back working for <a href="http://twitter.com/maheshp">Mahesh Prakriya</a>, who originally hired me into my current role on the IronPython team. Someday I might tell you the Mahesh PyCon Lego Story, but for now I’ll just say I was great working for Mahesh the first time and I think this time is going to be even better. </p><p>Working on Windows…focused on developer experience…for Mahesh - It’s like the perfect storm of work geekdom for me.</p><p>Of course, starting a new job means my time on the IronPython team is coming to an end. As excited as I am about this new opportunity in the Windows division, I’m a little sad to be leaving Developer Division and the IronPython team. I’ve joked with audiences that I care about Python because Microsoft pays me to care about Python, but that’s not completely true. <a href="http://python.org/">Python</a> is a fantastic language and IronPython’s combination of Python + .NET is hard to beat in my opinion. IronPython has made significant progress while I’ve been here the last eighteen months – two major releases (well, 2.6 is almost done), redisting the Python standard library, Visual Studio 2010 compat - but there’s still much for IronPython to accomplish. And of course, leaving behind such great teammates like <a href="http://twitter.com/dinoviehland">Dino</a>, <a href="http://twitter.com/davefugate">Dave</a>, <a href="http://twitter.com/jredville">Jim</a> and <a href="http://twitter.com/jschementi">Jimmy</a> is ALWAYS hard. </p><p>The Windows team is somewhat tighter lipped than the totally transparent approach we use in IronPython. Not to worry, my evangelism skills were part of the reason I got the job so you’ll be hearing plenty from me soon enough. However, my posting here will be kinda sparse until I get my bearings over there. Until then, I’m sure that you will be absolutely fascinated by non-work-related-but-still-sometimes-geeky minutia I <a href="http://twitter.com/devhawk">post on Twitter</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1298</wp:post_id>
		<wp:post_date>2009-10-26 17:22:43</wp:post_date>
		<wp:post_date_gmt>2009-10-27 00:22:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>joining-windows</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="post_tag" nicename="working-at-msft"><![CDATA[Working at MSFT]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[16570446-12d5-47c1-be94-5a8d1754110a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Joining+Windows]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/27/Joining+Windows]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2285</wp:comment_id>
			<wp:comment_author><![CDATA[Jesse Ezell]]></wp:comment_author>
			<wp:comment_author_email>jezell@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.iserviceoriented.com</wp:comment_author_url>
			<wp:comment_author_IP>98.173.13.58</wp:comment_author_IP>
			<wp:comment_date>2009-10-27 09:58:09</wp:comment_date>
			<wp:comment_date_gmt>2009-10-27 16:58:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congrats! ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2286</wp:comment_id>
			<wp:comment_author><![CDATA[Ada]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.46.92.19</wp:comment_author_IP>
			<wp:comment_date>2009-10-30 03:56:09</wp:comment_date>
			<wp:comment_date_gmt>2009-10-30 10:56:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good luck in Windows! 
I have learned much about IronPython from your blog. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2287</wp:comment_id>
			<wp:comment_author><![CDATA[Giles]]></wp:comment_author>
			<wp:comment_author_email>giles@giles.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.gilesthomas.com/</wp:comment_author_url>
			<wp:comment_author_IP>88.96.105.246</wp:comment_author_IP>
			<wp:comment_date>2009-11-02 03:18:15</wp:comment_date>
			<wp:comment_date_gmt>2009-11-02 11:18:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congrats on the new role, I hope it works out really well!

Will you be announcing who's replacing you (to the limited extent that you're replaceable ;-) here on the blog?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2288</wp:comment_id>
			<wp:comment_author><![CDATA[Glenn Block]]></wp:comment_author>
			<wp:comment_author_email>gblock@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/gblock</wp:comment_author_url>
			<wp:comment_author_IP>67.170.37.196</wp:comment_author_IP>
			<wp:comment_date>2009-12-09 21:08:55</wp:comment_date>
			<wp:comment_date_gmt>2009-12-10 05:08:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am late in sending this, but congratulations! I am looking forward to seeing what you are working on next.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>The SOA Manifesto - Pointlessness Manifested</title>
		<link>http://devhawk.net/2009/10/27/the-soa-manifesto-pointlessness-manifested/</link>
		<pubDate>Tue, 27 Oct 2009 17:31:37 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://5b689c6b-a26f-4f71-8a1a-fe2f1e876e42</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://www.agilemanifesto.org/"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" border="0" align="right" src="http://www.agilemanifesto.org/background.jpg" width="240" height="180" /></a>You know what the <a href="http://www.agilemanifesto.org/">Agile Manifesto</a> doesn’t have? Video of a “very formal ceremony” announcing said manifesto. Instead, we just have <a href="http://www.agilemanifesto.org/background.jpg">artistically rendered picture</a> of what sure looks like <a href="http://www.martinfowler.com/">Martin Fowler</a> pointing at a white board while some of the other original signatories look on. Sure, it’s a cool picture, but wouldn’t it have been much cooler if they had captured that moment on video instead? Especially if it was video of them all standing around looking vaguely uncomfortable while photographers took their picture and someone gravely read the manifesto to give it artificially inflated importance. </p><p>I only watched ten seconds of the <a href="http://soa-manifesto.org/">SOA Manifesto</a><a href="http://www.youtube.com/watch?v=TCg16oTZSV0">announcement video</a> before I realized there’s nothing to see here, move along, just a bunch of navel gazing from the <a href="http://thomaserl.com/">usual SOA suspects</a>. </p><p>Seriously, if you having a big announcement about how cool, earth shattering, significant or, hell, even interesting your manifesto is, then it’s not any of those things. It’s a waste of my time.</p><p>Then I noticed that my previous manager and personal friend <a href="http://blogs.msdn.com/jdevados/">John deVadoss</a> is one of the signatories. I have metric tons of respect for John, so I gave the SOA Manifesto a second chance. </p><p>It lost me at the second sentence. </p><blockquote><p>Service orientation is a paradigm that frames what you do. <strong>Service-oriented architecture (SOA) is a type of architecture that results from applying service orientation. </strong>We have been applying service orientation to help organizations consistently deliver sustainable business value, with increased agility and cost effectiveness, in line with changing business needs.</p></blockquote><p>Are you frakking kidding me? “Service-oriented architecture (SOA) is a type of architecture that results from applying service orientation.” Who the hell came up with that? I didn’t realize the <a href="http://soasymposium.com/">International SOA Symposium</a> had a Department of Redundancy Department. </p><p>When you define SOA in terms of SO, then you can’t possibly score well on the practicality quotient.</p><p>The rest of the manifesto isn’t much better. What made the Agile manifesto great IMO was that it ran counter to “common” beliefs like “changing requirements late in the process is bad” and “shipping software cycles should take years”. Sure, we all realize how right those Agile manifesto guys were <em><u>now</u></em>, but at the time it was the next best thing to heresy for many organizations. Those guys were agents of change. And I mean real change, not “this will help me sell books” change.</p><p>SOA manifesto on the other hand is basically repackaged common sense. Stuff like “Recognize that SOA ultimately demands change on many levels” and “The scope of SOA adoption can vary. Keep efforts manageable and within meaningful boundaries” Any help figuring out what that change is or what the scope should be? Nope. Thanks for the advice guys, but I had your so called “Guiding Principles” figured out long ago. </p><p>But hey, I’m sure the manifesto will help Thomas Erl et. al. sell more SOA books. So, I guess from that perspective it’s mission accomplished.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1299</wp:post_id>
		<wp:post_date>2009-10-27 17:31:37</wp:post_date>
		<wp:post_date_gmt>2009-10-27 17:31:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-soa-manifesto-pointlessness-manifested</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<category domain="post_tag" nicename="soa"><![CDATA[SOA]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[5b689c6b-a26f-4f71-8a1a-fe2f1e876e42]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[The+SOA+Manifesto+Ndash+Pointlessness+Manifested]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/28/The+SOA+Manifesto+Ndash+Pointlessness+Manifested]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2290</wp:comment_id>
			<wp:comment_author><![CDATA[Henrik Liliendahl S&#248;rensen]]></wp:comment_author>
			<wp:comment_author_email>hlsgr@mail.tele.dk</wp:comment_author_email>
			<wp:comment_author_url>http://liliendahl.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP>80.62.9.67</wp:comment_author_IP>
			<wp:comment_date>2009-10-28 00:10:56</wp:comment_date>
			<wp:comment_date_gmt>2009-10-28 07:10:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Harry, I follow you. You may very easy make the common sense of the SOA manifesto into a reusable ZYZ manifesto component as blogged <a href="http://liliendahl.wordpress.com/2009/10/26/universal-pearls-of-wisdom/
" rel="nofollow">here</a>.
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2291</wp:comment_id>
			<wp:comment_author><![CDATA[ilanchelian]]></wp:comment_author>
			<wp:comment_author_email>ilanchelian@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.99.195.64</wp:comment_author_IP>
			<wp:comment_date>2009-11-03 08:36:00</wp:comment_date>
			<wp:comment_date_gmt>2009-11-03 16:36:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[punching article. nice.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2292</wp:comment_id>
			<wp:comment_author><![CDATA[W. Kevin Hazzard]]></wp:comment_author>
			<wp:comment_author_email>wkhazzard@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.gotnet.biz/Blog</wp:comment_author_url>
			<wp:comment_author_IP>70.208.103.1</wp:comment_author_IP>
			<wp:comment_date>2009-11-07 10:36:59</wp:comment_date>
			<wp:comment_date_gmt>2009-11-07 18:36:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hear, hear. SOA became a joke not when the has-beens realized they could sell books by repackaging common sense. It became a joke when the major software vendors decided that competing with common sense principles was more important than innovation and competency.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Job Opening on my Team</title>
		<link>http://devhawk.net/2009/12/07/job-opening-on-my-team/</link>
		<pubDate>Mon, 07 Dec 2009 11:49:10 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://8b7ad043-5c02-4753-b59a-c897bce205b5</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’m just starting the third week in my new job – though between Thanksgiving and an intestinal virus, I’ve only been in my office for five days total so far. That’s not enough time to establish enough groundwork to be comfortable talking about what my team is doing yet. However, I just found out we’re still hiring and better yet there’s a public description of the job opening. So if you’ve ever thought “I want to work for Microsoft/Windows Division/With Harry”, here’s your chance! And if you aren’t looking for a new job, at least you can get some small hints as to what I’m doing in my new gig - “building substantial improvements into the Windows development platform” sounds interesting, doesn’t it?</p><blockquote><p><strong><a href="https://careers.microsoft.com/JobDetails.aspx?jid=9986">Senior Program Manager(708846 -External)</a></strong></p><p>Job Category: Software Engineering: Program Management     <br />Location: United States, WA, Redmond      <br />Job ID: 708846 9986      <br />Product: Windows  <br />Division: Windows Division</p><p>Developers! Developers! Developers!</p><p>Developers are the key to the success of Windows and at the center of a software ecosystem that represents hundreds of billions of dollars. Our team is chartered with reinvigorating the Windows developer ecosystem by building substantial improvements into the Windows development platform (APIs, tools and the underlying infrastructure) and making developing for Windows fun!</p><p>The team is currently seeking a Senior Program Manager to help us achieve our mission. The ideal candidate will have:</p><ul><li>Strong core PM competencies with special emphasis on developer tools and collaboration skills.</li><li>Proven track-record of delivering results in a cross-team (ideally cross-division) environment. </li><li>Has been a Program Manager shipping key products for at least 6 years.</li><li>Deep empathy for the developer as a customer; ability to empathize through 1st hand experience of writing apps some of the issues developers are facing with respect to APIs, tooling such as Visual Studio and SDK.</li><li>A demonstrated track record of excellence and delivering in ambiguous V1 situations.</li><li>Has Bachelors in Computer Science or engineering.</li></ul></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1300</wp:post_id>
		<wp:post_date>2009-12-07 11:49:10</wp:post_date>
		<wp:post_date_gmt>2009-12-07 11:49:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>job-opening-on-my-team</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="post_tag" nicename="working-at-msft"><![CDATA[Working at MSFT]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[8b7ad043-5c02-4753-b59a-c897bce205b5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Job+Opening+On+My+Team]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2009/12/07/Job+Opening+On+My+Team]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
