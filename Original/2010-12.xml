<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->


<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>DevHawk</title>
	<link>http://devhawk.net</link>
	<description>Passion * Technology * Ruthless Competence</description>
	<pubDate>Fri, 18 Oct 2013 06:07:08 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://devhawk.net</wp:base_site_url>
	<wp:base_blog_url>http://devhawk.net</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>devhawk</wp:author_login><wp:author_email>harry@devhawk.net</wp:author_email><wp:author_display_name><![CDATA[DevHawk]]></wp:author_display_name><wp:author_first_name><![CDATA[Harry]]></wp:author_first_name><wp:author_last_name><![CDATA[Pierson]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>dale</wp:author_login><wp:author_email>dale@microsoft.com</wp:author_email><wp:author_display_name><![CDATA[Dale Churchward]]></wp:author_display_name><wp:author_first_name><![CDATA[Dale]]></wp:author_first_name><wp:author_last_name><![CDATA[Churchward]]></wp:author_last_name></wp:author>


	

	<item>
		<title>Fixing Powershell&#039;s Busted Resolve-Path Cmdlet</title>
		<link>http://devhawk.net/2010/01/21/fixing-powershells-busted-resolve-path-cmdlet/</link>
		<pubDate>Thu, 21 Jan 2010 23:38:51 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://0f11ab8d-df0d-458c-8ee5-105b1fdedcd3</guid>
		<description></description>
		<content:encoded><![CDATA[<div>Usually, my <a href="http://devhawk.net/CategoryView,category,PowerShell.aspx">PowerShell posts</a> are effusive in their praise. However, who thought up this “feature” gets no praise from me:</div>
<pre class="brush: text">PS»Resolve-Path ~missing.file
Resolve-Path : Cannot find path 'C:Usershpiersonmissing.file' because it does not exist.</pre>
<div>In my opinion, this is a bad design. Resolve-Path assumes that if the filename being resolved doesn’t exist, then it must be an error. But in the script I’m building, I’m resolving the path of a file that I’m going to create. In other words, I know a priori that the file doesn’t exist. Yet Resolve-Path insists on throwing an error. I would have expected there to be some switch you could pass to Resolve-Path telling it to skip path validation, but there’s not.</div>
<div>And the worst thing is, I can see that Resolve-Path came up with the “right” answer – it’s right there in the error message!</div>
<div>Searching around, I found <a href="http://www.vistax64.com/powershell/24603-resolve-path-non-existing-file.html">a thread</a> where someone else was having the same problem. Jeffrey Snover – aka Distinguished Engineer, inventor of Powershell and <a href="http://www.langnetsymposium.com/2009/talks/23-ErikMeijer-LiveLabsReactiveFramework.html">target of Erik Meijer’s Lang.NET coin throwing stunt</a> – suggested using <a href="http://blogs.msdn.com/powershell/archive/2006/11/03/erroraction-and-errorvariable.aspx">–ErrorAction and –ErrorVariable</a> to ignore the error and retrieve the resolved path from the TargetObject property error variable. Like Maximilian from the thread, using this approach feels fragile and frankly kinda messy, but I needed a solution. So I wrote the following function that wraps up access to the error variable so at least I don’t have fragile messy code sprinkled through out my script.</div>
<pre class="brush: powershell">function force-resolve-path($filename)
{
  $filename = Resolve-Path $filename -ErrorAction SilentlyContinue
                                     -ErrorVariable _frperror
  if (!$filename)
  {
    return $_frperror[0].TargetObject
  }
  return $filename
}</pre>
<div>The script is pretty straightforward. –ErrorAction SilentlyContinue is PowerShell’s version of <a href="http://msdn.microsoft.com/en-us/library/5hsw66as.aspx">On Error Resume Next</a> in Visual Basic. If the cmdlet encounters an error, it gets stashed away in the variable specified by ErrorVariable (it’s also added to $Error so you can still retrieve the error object if ErrorVariable isn’t specified) and continues processing. Then I manually check to see if resolve-path succeeded – i.e. did it return a value – and return the TargetObject of the Error object if it didn’t.</div>
<div>As I said, fragile and kinda messy. But it works.</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1301</wp:post_id>
		<wp:post_date>2010-01-21 23:38:51</wp:post_date>
		<wp:post_date_gmt>2010-01-21 23:38:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fixing-powershells-busted-resolve-path-cmdlet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[0f11ab8d-df0d-458c-8ee5-105b1fdedcd3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Fixing+Powershellrsquos+Busted+ResolvePath+Cmdlet]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2010/01/22/Fixing+Powershellrsquos+Busted+ResolvePath+Cmdlet]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2294</wp:comment_id>
			<wp:comment_author><![CDATA[Richard Siddaway]]></wp:comment_author>
			<wp:comment_author_email>powershel-uk@hotmail.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://msmvps.com/blogs/RichardSiddaway/Default.aspx</wp:comment_author_url>
			<wp:comment_author_IP>89.168.185.202</wp:comment_author_IP>
			<wp:comment_date>2010-01-28 10:58:13</wp:comment_date>
			<wp:comment_date_gmt>2010-01-28 18:58:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm presuming two things here:
1) you want to test the path to the folder containing the file
2) you want to test if the file already exists before attempting the creation

Why not use a couple of calls to test-path]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Weakly Typed Dynamic Languages and Natural Selection</title>
		<link>http://devhawk.net/2010/02/17/weakly-typed-dynamic-languages-and-natural-selection/</link>
		<pubDate>Wed, 17 Feb 2010 17:31:35 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://7e10e7c7-af7c-494d-aab5-eba47d58d67f</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’m not reading much in the way of blogs or twitter these days – way to heads down in my new job for that right now. But I did see Scott Hanselman’s post on <a href="http://www.hanselman.com/blog/BackToBasicsC4MethodOverloadingAndDynamicTypes.aspx">method overloading and dynamic types</a> and Ted Neward’s follow-on post <a href="http://blogs.tedneward.com/2010/02/14/Dont+Fear+The+DynamicVARIANTReaper.aspx">static-typing fundamentalism</a>. Even though I’ve moved on from the IronPython team, dynamic typing is a topic that’s still <a href="http://www.zazzle.com/you_had_me_at_dynamic_shirt-235421109922997983">near and dear to my heart</a> so I can’t resist throwing in my 2¢.</p><p>First off, I agree 100% with Ted’s post - though not the over-the-top mocking tone. These static &gt; dynamic flame bait comments are so tired that they’ve literally become cliché. I agree with Ted’s points, but by answering fire with fire he’s just perpetuating the flame war that he claims to be so tired of. I really am tired of it, so I’m not going to bother to address any of the original anti-dynamic typing faux-arguments (fauxguments?) nor Ted’s artful and devastatingly mocking takedown of them.</p><p>But I do have a question for any static-typing fundamentalists in the audience: if static typing is so much better than dynamic typing, then how come dynamically typed languages are so popular? Doesn’t natural selection apply to type systems?</p><p>Those aren’t rhetorical questions. Building software takes time and effort. While developers often donate time and effort to projects (see: open source) typically they work for money. That money has to come from somewhere – usually it comes from someone who needs the software built for some business reason. And the people footing the bill for software construction demand the highest return on investment they can get.</p><p>If dynamic typing or VARIANT (which is actually weak not dynamic typing, but I digress) really did create “horrific devastation”, wouldn’t that have caused a negative feedback loop where the business people who actually foot the bills for creating software became wary and untrusting of using VB as the language of choice for their projects in favor of strong and statically typed languages that helped developers “make good choices”?</p><p>Yet the opposite happened. VB was the most popular programming language in the world for the better part of a decade. And while VB’s reign at the top is over, I’d argue that these days the most popular programming languages are PHP and JavaScript, both of which are weakly typed dynamic languages too. </p><p>Now clearly, popular != better. However, static-typing fundamentalism isn’t an argument about which way is “better” so much as an argument about which way is “worthy”. But how can you argue that you’re approach is the only worthy path when the opposite approach has been so successful? Remember, one developer’s “horrific devastation” might be another businessman's “successful project because it helped me enter a new market faster than my competitors”.  </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1302</wp:post_id>
		<wp:post_date>2010-02-17 17:31:35</wp:post_date>
		<wp:post_date_gmt>2010-02-17 17:31:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>weakly-typed-dynamic-languages-and-natural-selection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="dynamic-languages"><![CDATA[Dynamic Languages]]></category>
		<category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
		<category domain="post_tag" nicename="visual-basic"><![CDATA[Visual Basic]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[7e10e7c7-af7c-494d-aab5-eba47d58d67f]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Weakly+Typed+Dynamic+Languages+And+Natural+Selection]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2010/02/18/Weakly+Typed+Dynamic+Languages+And+Natural+Selection]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2296</wp:comment_id>
			<wp:comment_author><![CDATA[Eduardo Jezierski]]></wp:comment_author>
			<wp:comment_author_email>edjez@instedd.org</wp:comment_author_email>
			<wp:comment_author_url>http://edjez.instedd.org</wp:comment_author_url>
			<wp:comment_author_IP>24.16.46.17</wp:comment_author_IP>
			<wp:comment_date>2010-02-17 18:16:49</wp:comment_date>
			<wp:comment_date_gmt>2010-02-18 02:16:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You may have to look at the most successful set of patterns on the planet, and how dynamic typing may or may not help them.

http://www.joeyoder.com/papers/patterns/BBOM/mud.html

and...forget kittens! Dynamic typed languages are pumping hundreds of thousands of messages to/from surviving Haitians, in direct communication with low-level protocols from telecommunications companies. 
http://code.google.com/p/nuntium/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2297</wp:comment_id>
			<wp:comment_author><![CDATA[Ryan Riley]]></wp:comment_author>
			<wp:comment_author_email>ryan.riley@panesofglass.org</wp:comment_author_email>
			<wp:comment_author_url>http://wizardsofsmart.net</wp:comment_author_url>
			<wp:comment_author_IP>66.193.255.227</wp:comment_author_IP>
			<wp:comment_date>2010-02-18 13:25:26</wp:comment_date>
			<wp:comment_date_gmt>2010-02-18 21:25:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice post. Interestingly enough, the most statically typed languages are functional languages with strong type inference that removes almost any need for type declaration (Haskell, F#, etc). Funny enough, these functional languages come with REPLs just like the dynamic languages, so in the end, one must conclude it isn't static vs. dynamic; it's "script" languages that rule the world. ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2298</wp:comment_id>
			<wp:comment_author><![CDATA[Scott Koon]]></wp:comment_author>
			<wp:comment_author_email>scott@lazycoder.com</wp:comment_author_email>
			<wp:comment_author_url>http://lazycoder.com</wp:comment_author_url>
			<wp:comment_author_IP>207.155.204.150</wp:comment_author_IP>
			<wp:comment_date>2010-02-22 12:46:21</wp:comment_date>
			<wp:comment_date_gmt>2010-02-22 20:46:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I generally leave out JavaScript whenever I talk about "popular dynamic languages" simply because there were NO other alternatives to writing client-side code in the web browser. I loves me some JavaScript, but if you're the only man left on an earth full of women, you're gonna get some lovin'.

PHP belongs on the popular list as does Python. People don't talk about Python a lot, but generally chugging away in academia or scientific research there's usually a bunch of Python scripts holding things together.

re: static typing - I always smirk when I attend a talk or read a blog post about the latest compiler gymnastics you can perform on the CLR to avoid having to pay homage to a dead typing system. 90% of all the current design patterns and best practices vanish when you use a dynamic language IMO.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Washington Stealth Lacrosse</title>
		<link>http://devhawk.net/2010/05/17/washington-stealth-lacrosse/</link>
		<pubDate>Mon, 17 May 2010 09:58:42 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://2bdd5c99-733f-4efe-a135-60d4786eca64</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://www.stealthlax.com/"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" border="0" align="right" src="http://sphotos.ak.fbcdn.net/hphotos-ak-snc1/hs159.snc1/5932_111961876044_93620706044_2350467_25193_n.jpg" width="240" height="107" /></a>Last Saturday night, my family and I went with some friends from the neighborhood up to Everett to catch the <a href="http://www.stealthlax.com/">Washington Stealth</a> in the <a href="http://www.nll.com">National Lacrosse League</a> Champion’s Cup final. This was my first indoor lacrosse game, and it was a <a href="http://seattletimes.nwsource.com/html/othersports/2011876936_stealth16.html">doozy</a> - the Stealth were down four goals with a a minute to go in the third quarter, but scored eight goals in a row to take the Champions Cup 15-11. After watching my Capitals <a href="http://sports.espn.go.com/nhl/playoffs/2010/columns/story?columnist=burnside_scott&amp;id=5146185">collapse</a> in the NHL playoffs, it was awesome to see the home team come out on top.</p><p>(Side Note, at least the Caps aren’t alone when it comes to embarrassing playoff performances this year. Boston <a href="http://espn.go.com/nhl/playoffs/2010/matchup/_/teams/bruins-flyers">blew a 3-0 series lead</a> against Philly and Pittsburg blew a 3-2 series lead against Montreal <em>and </em><a href="http://espn.go.com/nhl/recap?gameId=300512016">got beat like a drum</a> in game 7. I’d argue that the Caps performance was still the most embarrassing of the three, but not by much)</p><p><img style="margin: 0px 10px 0px 0px; display: inline" align="left" src="http://upload.wikimedia.org/wikipedia/en/thumb/c/cd/NLLLogo.svg/200px-NLLLogo.svg.png" width="132" height="234" />As I said, this was my first indoor lacrosse game. The game is basically ice hockey without the ice. In fact, the Stealth’s advertising slogan this year was “It’s like hockey…with balls”. [1] As far as I could tell, the playing area is identical to a hockey rink except for the no ice thing. Benches, boards, penalty boxes, goal position – all the same. There are five players + a goalie per side, with lots of line changes and plenty of hitting. I might not have been to a game before, but I was able to pick up the basics of strategy and rules just based on the similarity to hockey. </p><p>Since it’s so similar to hockey, it’s probably easier to talk about the things that are different - like the shot clock. Similar to basketball, in indoor lacrosse you have a limited amount of time to take a shot or else you lose possession. Maintaining possession in lacrosse seems easier than in does in hockey, so the shot clock is an important addition. Otherwise, killing penalties and running out the clock with a lead would be child’s play once you got possession. But with the shot clock, you can only chew up thirty seconds at a time.</p><p>The combination of the basketball-esque shot clock and hockey-esque line changes creates for an interesting dynamic, but not always positive. I was expecting there to be more fast breaks, But instead, unless it’s a clear one-on-none or two-on-one, the breaking player almost always pulls up and waits for the line change to finish – often going off himself. There are line changes in hockey, but it’s rare for a guy in the offensive zone to be able to just hold onto the puck and wait for the rest of the team to line change.</p><p>On the other hand, I really liked how indoor lacrosse doesn’t have constant face-offs like hockey does. Face offs in indoor lacrosse are only to start quarters and after goals. Otherwise, when the ball goes out of play or there’s a penalty, there are simple possession rules to determine who gets the ball. Face-offs are exciting, and they happen often enough given the amount of scoring in indoor lacrosse (26 goals total Sat. night, which was close to the season average for the Stealth of 24.375 total goals scored per game) without being overwhelming (there were 68 face-offs in yesterday’s Sharks/Hawks game – that’s more than one per minute). </p><p>Of course, having a good game with a come-from-behind victory by the home team certainly casts the game in the best light. Having a packed house also helped. 8,600 fans there last night – a sellout – many of whom appeared to be involved in lacrosse leagues around the Puget Sound area. The friends we went with have a teenage son who plays, which is how they got into it. Patrick says he wants to learn to play to, so I’m guessing this won’t be our last Stealth game.</p><p>This being primarily a geek blog, I’ll add that both the Stealth and the NLL in general need to modernize their marketing and fan base building efforts. The Stealth website is old school to put it mildly – I especially like the full screen ad to buy tickets for Saturday’s game that still pops up, two days after the game. Lacrosse fans claim it’s the <a href="http://blog.fortiusone.com/2008/01/24/lacrosse-the-fastest-growing-sport-in-the-country/">fastest growing sport in the nation</a>, but it gets almost zero media attention. So why not encourage citizen media by issuing press credentials to fans who blog about the Stealth like the <a href="http://offwing.com/2006/08/guidelines-for-issuing-press-credentials-to-bloggers">Caps did a few years ago</a>? Selling NLL TV rights for any significant dollars is a pipe dream right now, so why not stream the games online? I suspect the main revenue source for NLL teams is ticket sales and merchandise – streaming the games would be a good way to push both.</p><hr /><p>[1] Cute slogan, but the implication that lacrosse players are tougher than hockey players is ludicrous. NLL season lasts 16 games and the playoff are three rounds of single elimination. NHL season lasts 82 games and the playoffs are four rounds of best of seven series.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1303</wp:post_id>
		<wp:post_date>2010-05-17 09:58:42</wp:post_date>
		<wp:post_date_gmt>2010-05-17 09:58:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>washington-stealth-lacrosse</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="indoor-lacrosse"><![CDATA[Indoor Lacrosse]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-stealth"><![CDATA[Washington Stealth]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[2bdd5c99-733f-4efe-a135-60d4786eca64]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Washington+Stealth+Lacrosse]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2010/05/17/Washington+Stealth+Lacrosse]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2303</wp:comment_id>
			<wp:comment_author><![CDATA[jdn]]></wp:comment_author>
			<wp:comment_author_email>kingcrim@earthlink.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.blogcoward.com</wp:comment_author_url>
			<wp:comment_author_IP>66.92.132.209</wp:comment_author_IP>
			<wp:comment_date>2010-05-17 18:04:06</wp:comment_date>
			<wp:comment_date_gmt>2010-05-18 01:04:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm sorry sir, but as a Pens fan, I completely object to the idea that we got beaten by a drum in Game 7 against the Habs.

We got our a$$e$ whipped and handed back to us in a burlap sack.

Please correct this oversight...LOL.

Boston's performance has to be the worst because it is so historic.  The #1 seed has lost in the first round before (forgetting the year, but the Wings did it at least once, if not twice...which might bode well for the Caps as much as I cringe to think about it as a Pens fan...back in the day, I think there was a movement to dump Yzerman from the Wings because he couldn't win...think about that for a minute).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2304</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
			<wp:comment_date>2010-05-18 08:23:55</wp:comment_date>
			<wp:comment_date_gmt>2010-05-18 15:23:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I dunno - teams have blown 3-1 series leads and #1 seeds have lost to #8 seeds, but the combination of #1 seed blowing a 3-1 series hasn't ever happned, so I still think it's worse than Boston's performance, though maybe only worse by a little bit.

Comparisons to Yzerman's Wings as well as Gretzky's Oilers have been plentiful in Washington. I just hope management doesn't hear those and think nothing has to change. The team doesn't need to be blown up and rebuild, but it does need tweaking. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Testing the Untestable with Delegate Injection</title>
		<link>http://devhawk.net/2010/10/07/testing-the-untestable-with-delegate-injection/</link>
		<pubDate>Thu, 07 Oct 2010 19:22:18 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://d978e50d-1158-4448-ab5e-c45d1ae8eb67</guid>
		<description></description>
		<content:encoded><![CDATA[<p>My ASP.NET skills may be a bit rusty, but that’s not stopping me from working on a side project in ASP.NET MVC. While it has made significant strides in the 4.0 release, code like this demonstrates that ASP.NET still has a long way to go to improve testability.</p><pre class="brush: csharp">
public class AccountController : Controller
{
    ITwitterService _twitter;

    //constructor dependency injection
    public AccountController(ITwitterService twitterService)
    {
        _twitter = twitterService;
    }

    public ActionResult SignInWithTwitter()
    {
        //check for GetRedirectUrl and sets cookie
        Response.SetCookie(new HttpCookie("RedirectUrl",
            FormsAuthentication.GetRedirectUrl(string.Empty, false)));

        //build callback URL
        var callback_url_builder = new UriBuilder()
        {
            Host = Request.ServerVariables["SERVER_NAME"],
            Port = int.Parse(Request.ServerVariables["SERVER_PORT"]),
            Path = Url.Action("SignInWithTwitterCallback"),
        };

        //Helper funciton to invoke Twitter’s oauth/request_token REST endpoint
        var url = _twitter.GetRequestToken(callback_url_builder.ToString());

        //redirect to the URL returned from _twitter.GetRequestToken
        return Redirect(url);
    }
</pre><p>This code has several dependencies that are hard or impossible to test: FormsAuthentication, Request, Response and Url. Testing this code is a real pain in the ass. When I originally wrote this code, I bit the bullet and wrote said the PITA test code. But I couldn’t help thinking there must be a better way. </p><p>Clearly, in order to be able to test this code, I need to introduce points of abstraction that can be filled with mock implementations during unit test runs. I already have one such abstraction point - the _twitter field of AccountController is an ITwitterService instance that gets injected on construction. I have a “real” implementation that gets injected in production and a mock implementation that I manually inject in my tests.</p><p>In order to test the code above, I’ll need to wrap the calls into the untestable objects in some sort of injectable dependency that can be mocked out for tests.</p><p>C# being an OO language, typically we think of Dependency Injection in terms interfaces and classes. However, wrapping the untestables in interfaces and then implementing those interfaces is a lot of additional code. Instead of one injected dependency, the code above would need five injected dependencies. Furthermore, since objects are both the unit of dependency injection as well as the typical way the URL namespace is segmented, I also have to consider the dependencies of any other action methods on AccountController. That gets ugly fast.</p><p>Instead of thinking in terms of objects and interfaces, I wondered what DI might look like if we thought about dependencies in terms of delegates and anonymous lambdas? You know, <a href="http://devhawk.net/2007/12/05/Functional+Understanding.aspx">functional programming</a>?  It might look something like this: </p><pre class="brush: csharp">
Func&lt;string&gt; @GetRedirectUrl;
Action&lt;HttpCookie&gt; @SetCookie;
Func&lt;NameValueCollection&gt; @ServerVariables;
Func&lt;string, string&gt; @ActionUrl;

public ActionResult SignInWithTwitter()
{
    //check for GetRedirectUrl and sets cookie
    @SetCookie(new HttpCookie("RedirectUrl", @GetRedirectUrl()));

    //build callback URL
    var callback_url_builder = new UriBuilder
    {
        Host = @ServerVariables()["SERVER_NAME"],
        Port = int.Parse(@ServerVariables()["SERVER_PORT"]),
        Path = @ActionUrl("SignInWithTwitterCallback"),
    };

    //Call twitter.GetRequestToken
    var url = _twitter.GetRequestToken(callback_url_builder.ToString());

    //redirect to the URL returned from Twitter.GetRequestToken
    return Redirect(url);
}
</pre><p>(Note, I'm using the @ symbol as a prefix for injected delegates, in order to make it easier to pick them out of the code. Looks kinda odd, but it is valid C#.)</p><p>This is better in that it’s actually testable without requiring a metric crapload of test code to mock the ASP.NET intrinsics. However, this approach don’t have enough information to inject dependencies based on type alone. For example, the @GetRedirectUrl is a Func&lt;string&gt; (i.e. a function that takes no parameters and returns a string). However, FormsAuth FormsCookieName and DefaultUrl properties would also be represented as Func&lt;string&gt; delegates as well. </p><p>Most DI containers have support resolving dependencies by name and type, but that makes declaring dependencies much tougher and more fragile in my opinion. If you’re going to <strike>limit yourself to static typing</strike> write compiled code, you might as well let the compiler do as much heavy lifting as possible, right?</p><p>Also, wrapping each untestable method call in a delegate has made the explosion of dependencies problem even worse. SignInWithTwitter declares four new dependencies, the callback action (not shown) adds seven new delegate dependencies and the sign out action adds one, making a total of thirteen dependencies! (including the original ITwitterService). However, none of these twelve delegate dependencies are shared across action methods. So they aren’t really controller dependencies so much as action dependencies. So what if I went ahead and declared them as action dependencies directly?</p><pre class="brush: csharp">
public Func&lt;ActionResult&gt; SignInWithTwitter(
    Func&lt;string&gt; @GetRedirectUrl,
    Action&lt;HttpCookie&gt; @SetCookie,
    Func&lt;NameValueCollection&gt; @ServerVariables,
    Func&lt;string, string&gt; @ActionUrl)
{
    return () =&gt;
    {
        //check for GetRedirectUrl and sets cookie
        SetCookie(new HttpCookie("RedirectUrl", GetRedirectUrl()));

        //build callback URL
        var callback_url_builder = new UriBuilder
        {
            Host = ServerVariables()["SERVER_NAME"],
            Port = int.Parse(ServerVariables()["SERVER_PORT"]),
            Path = ActionUrl("LogOnCallback"),
        };

        //Call twitter.GetRequestToken
        var url = _twitter.GetRequestToken(
            callback_url_builder.ToString());

        //redirect to the URL returned from Twitter.GetRequestToken
        return Redirect(url);
    };
}
</pre><p>SignInWithTwitter is now a function that takes four delegates and returns a delegate - we’re really down the functional programming rabbit hole now! </p><p>The benefit of this approach is that I can make tradeoffs as I see fit between controller and action dependencies. ITwitterService is still injected via the AccountController constructor since it is used by two of the three Account actions. Dependencies only used by a single action can be scoped to that specific action so that only tests for a given action method have to mock them out. And testing this is a breeze compared to <a href="http://www.hanselman.com/blog/ASPNETMVCSessionAtMix08TDDAndMvcMockHelpers.aspx">having to mock out intrinsic ASP.NET objects</a>. </p><pre class="brush: csharp">
[Fact]
public void returns_redirect_result_with_getrequesttoken_url()
{
    //inject controller dependencies
    var twitter = new Mock&lt;Models.ITwitterService&gt;(MockBehavior.Strict);
    twitter.Setup(t =&gt; t.GetRequestToken(It.IsAny&lt;string&gt;()))
        .Returns("http://fake.twittertest.local");
    var controller = new AccountController(twitter.Object);

    //inject action dependencies
    Func&lt;string&gt; @getRedirectUrl = () =&gt; "/fake/redirect/url";
    Action&lt;HttpCookie&gt; @setCookie = c =&gt; { };
    Func&lt;NameValueCollection&gt; @serverVariables = 
        () =&gt; new NameValueCollection() 
        {
            {"SERVER_NAME", "testapp.local"},
            {"SERVER_PORT", "8888"}
        };
    Func&lt;string, string&gt; @actionUrl = url =&gt; "/fake/url/action/result";
    var action = controller.SignInWithTwitter(@getRedirectUrl, 
        @setCookie, @serverVariables, @actionUrl);

    //Invoke action
    var result = action();

    //Validate
    var redirectResult = Assert.IsType&lt;RedirectResult&gt;(result);
    Assert.Equal("http://fake.twittertest.local", redirectResult.Url);
}
</pre><p>I could make this code even smaller by moving the action dependencies out to be test fixture class fields. Assuming you write multiple tests for each action method, this allows you to reuse the mock action delegates across multiple methods. If I want to do negative testing, I can easily define test-specific delegates that throw exceptions or return unexpected values.</p><p>Of course, the down side to this approach is that MVC has *no* idea what to do with an action method that returns Func&lt;ActionResult&gt;. I could envision support for this pattern in MVC someday, though we’d need a robust solution to the type+name dependency issue I described above. For now, I will simply wrap the delegate injection version (aka the testable version) of the action in a non-testable but MVC compatible version that injects the right delegate dependencies. </p><p></p><pre class="brush: csharp">
public ActionResult SignInWithTwitter()
{
    return SignInWithTwitter(
        () =&gt; FormsAuthentication.GetRedirectUrl(string.Empty, false),
        Response.SetCookie,
        () =&gt; Request.ServerVariables,
        Url.Action)();
}
</pre><p>Since I’m using the untestable intrinsics, I can’t write any tests for this method. However, it’s nearly declarative because the anonymous delegates I’m injecting are closing over the untestable intrinsics. Personally, I’m willing to make the tradeoff of having an declarative yet untestable wrapper action method in order to get the delegate injected easy-to-test version of SignInWithTwitter that has the real implementation. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1304</wp:post_id>
		<wp:post_date>2010-10-07 19:22:18</wp:post_date>
		<wp:post_date_gmt>2010-10-07 19:22:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing-the-untestable-with-delegate-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[d978e50d-1158-4448-ab5e-c45d1ae8eb67]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Testing+The+Untestable+With+Delegate+Injection]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2010/10/08/Testing+The+Untestable+With+Delegate+Injection]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2306</wp:comment_id>
			<wp:comment_author><![CDATA[Robert Seso]]></wp:comment_author>
			<wp:comment_author_email>robert.seso@gmx.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.245.219.245</wp:comment_author_IP>
			<wp:comment_date>2010-10-08 06:44:16</wp:comment_date>
			<wp:comment_date_gmt>2010-10-08 13:44:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hm...has a spaghetti code touch to it. Wouldn't using a better mocking framework that can mock sealed ASP.NET classes (such as TypeMock or JustMock) be a simpler solution in this case? ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2307</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.87</wp:comment_author_IP>
			<wp:comment_date>2010-10-08 09:45:48</wp:comment_date>
			<wp:comment_date_gmt>2010-10-08 16:45:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Using TypeMock or JustMock might be easier, but I don't think they're widely used due to their price tag. 

I'm curious why you think this is spaghetti. I mean, I get why this might feel strange if you're not familiar with functional programming. But spaghetti to me is "complex and tangled control structure" (Wikipedia). The control structure here is very straightforward - one layer of abstraction in order to be able to test the untestable intrinsics.
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2308</wp:comment_id>
			<wp:comment_author><![CDATA[Robert Seso]]></wp:comment_author>
			<wp:comment_author_email>robert.seso@gmx.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>95.90.96.255</wp:comment_author_IP>
			<wp:comment_date>2010-10-08 12:05:30</wp:comment_date>
			<wp:comment_date_gmt>2010-10-08 19:05:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, any problem in programming could be solved by adding layers of abstraction, but at one point or another those layers start generating more problems then they solve. It's nothing to do with my understanding of functional programming, but in this case this is a clear overkill and I couldn't imagine maintaining anything but simplest classes coded in this way. In addition, you can't easily set expectations on delegates this way, e.g. test that certain delegate was called exactly X times, or that it was called with a certain input parameter etc.

Yes, advanced mocking frameworks do cost some money, but they are well worth it and typically cost less than one day spent debugging overly complex code.

Don't get me wrong -- I do find the concept very interesting. You might have a look at Event Based Components architecture which completely evolves around similar concepts.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2309</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.87</wp:comment_author_IP>
			<wp:comment_date>2010-10-08 14:55:23</wp:comment_date>
			<wp:comment_date_gmt>2010-10-08 21:55:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mocking delegates will be supported in Moq v4 (http://code.google.com/p/moq/issues/detail?id=235) including support for testing that a certain delegate was called exactly X times or that it was called with certain input parameters, etc.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Variadic Powershell Functions With Optional Named Params</title>
		<link>http://devhawk.net/2011/02/02/variadic-powershell-functions-with-optional-named-params/</link>
		<pubDate>Thu, 03 Feb 2011 05:38:51 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://41f3e3dd-5165-4025-b4dc-8d216fb63d4e</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’ve been doing a little CPython coding lately. Even though I <a href="http://devhawk.net/2009/10/27/Joining+Windows.aspx">left the IronPython team</a> a while ago (and IronPython is now <a href="http://blogs.msdn.com/b/jasonz/archive/2010/10/21/new-components-and-contributors-for-ironpython-and-ironruby.aspx">under new management</a>) I’m still still a big fan of the Python language and it’s great for prototyping. </p><p>However, one thing I don’t like about Python is how it uses the <a href="http://docs.python.org/using/cmdline.html#envvar-PYTHONPATH">PYTHONPATH environment variable</a>. I like to keep any non-standard library dependencies in my project folder, but then you have to set the PYTHONPATH environment variable in order for the Python interpreter to resolve those packages. Personally, I wish there was a command line parameter for specifying PYTHONPATH – I hate having to modify the environment in order to execute my prototype. Yes, I realize I don’t have to modify the machine-wide environment – but I would much prefer a stateless approach to an approach that requires modification of local shell state.</p><p>I decided to build a <a href="http://cid-0d9bc809858885a4.office.live.com/self.aspx/DevHawk%20Content/Powershell/cpy.ps1">Powershell script</a> that takes allows the caller to invoke Python while specifying the PYTHONPATH as a parameter. The script saves off the current PYTHONPATH, sets it to the passed in value, invokes the Python interpreter with the remaining script parameters, then sets PYTHONPATH back to its original value. While I was at it, I added the ability to let the user optionally specify which version of Python to use (defaulting to the most recent) as well as a switch to let the caller chose between invoking <a href="http://docs.python.org/using/windows.html#executing-scripts">python.exe or pythonw.exe</a>.</p><p>The details of the script are fairly mundane. However, building a Powershell script that supported optional named parameters and collected all the unnamed arguments together in a single parameter took a little un-obvious Powershell voodoo that I thought was worth blogging about.</p><p>I started with the following param declaration for my function</p><pre class="brush: powershell">
param (
    [string] $LibPath="", 
    [switch] $WinApp, 
    [string] $PyVersion=""
)
</pre><p>These three named parameters control the various features of my Python Powershell script. Powershell has an <a href="http://technet.microsoft.com/en-us/library/dd347675.aspx">automatic variable</a> named $args that holds the arguments that don’t get bound to a named argument. My plan was to pass the contents of the $args parameter to the Python interpreter. And that plan works fine…so long as none of the non-switch parameters are omitted. </p><p>I mistakenly (and in retrospect, stupidly) thought that since I had provided default values for the named parameters, they would only bind to passed-in arguments by name. However, Powershell binds non-switch parameters by position if the names aren’t specified . For example, this is the command line I use to execute tests from the root of my prototype project:</p><pre class="brush: text">
cpy -LibPath .Libsite-packages .Scriptsunit2.py discover -s .src
</pre><p>Obviously, the $LibPath parameter gets bound to the “.Libsite-package” argument. However, since $PyVersion isn’t specified by name, it gets bound by position and picks up the “.Scriptsunit2.py” argument. Clearly, that’s not what I intended – I want “.Scriptsunit2.py” along with the remaining arguments to be passed to the Python interpreter while the PyVersion parameter gets bound to its default value.</p><p>What I needed was more control over how incoming arguments are bound to parameters. Luckily, Powershell 2 introduced <a href="http://technet.microsoft.com/en-us/library/dd347600.aspx">Advanced Function Parameters</a> which gives script authors exactly that kind of control over parameters binding. In particular, there are two custom attributes for parameters that allowed me to get the behavior I wanted:</p><ul><li>Position – allows the script author to specify what positional argument should be bound to the parameter. If this argument isn’t specified, parameters are bound in the order they appear in the param declaration</li><li>ValueFromRemainingArguments – allows the script author to specify that all remaining arguments that haven’t been bound should be bound to this parameter. This is kind of like the Powershell equivalent of <a href="http://msdn.microsoft.com/en-us/library/w5zay9db.aspx">params in C#</a> or the <a href="http://en.wikipedia.org/wiki/Stdarg.h#Declaring_variadic_functions">ellipsis in C/C++</a>. </li></ul><p>A little experimentation with these attributes yielded the following solution:</p><pre class="brush: powershell">
param (
    [string] $LibPath="", 
    [switch] $WinApp, 
    [string] $PyVersion="",
    [parameter(Position=0, ValueFromRemainingArguments=$true)] $args
)
</pre><p>Note, the first three parameters are unchanged. However, I added an explicit $args parameter (I could have named it anything, but I had already written the rest of my script against $args) with the Position=0 and ValueFromRemainingArguments=$true parameter attribute values.The combination of these two attribute values means that the $args parameter is bound to an array of all the positional (aka unnamed) incoming arguments, starting with the first position. In other words – exactly the behavior I wanted.</p><p>Not sure how many people need a Powershell script that sets PYTHONPATH and auto-selects the latest version of Python, but maybe someone will find it useful. Also, I would think this approach to variadic functions with optional named parameters could be useful in other scenarios where you are wrapping an existing tool or utility in PowerShell, but need the ability to pass arbitrary parameters thru to the tool/utility being wrapped.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1305</wp:post_id>
		<wp:post_date>2011-02-02 21:38:51</wp:post_date>
		<wp:post_date_gmt>2011-02-03 05:38:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>variadic-powershell-functions-with-optional-named-params</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>dasblog_entryid</wp:meta_key>
			<wp:meta_value><![CDATA[41f3e3dd-5165-4025-b4dc-8d216fb63d4e]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitle</wp:meta_key>
			<wp:meta_value><![CDATA[Variadic+Powershell+Functions+With+Optional+Named+Params]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
			<wp:meta_value><![CDATA[2011/02/03/Variadic+Powershell+Functions+With+Optional+Named+Params]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2321</wp:comment_id>
			<wp:comment_author><![CDATA[Barry Kelly]]></wp:comment_author>
			<wp:comment_author_email>bkelly.ie@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.barrkel.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.97.41.252</wp:comment_author_IP>
			<wp:comment_date>2011-02-02 23:14:38</wp:comment_date>
			<wp:comment_date_gmt>2011-02-03 07:14:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["I wish there was a command line parameter for specifying PYTHONPATH – I hate having to modify the environment in order to execute my prototype."

There is, in bash:

PYTHONPATH=/whatever/you/like your-program

I use this feature all the time; the compiler I work on (Delphi) uses an envvar to specify logging options in the debug build. I'm a little bit surprised it's not a feature in PowerShell.

foo=x bar=y your-app

etc.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2322</wp:comment_id>
			<wp:comment_author><![CDATA[Barry Kelly]]></wp:comment_author>
			<wp:comment_author_email>bkelly.ie@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.barrkel.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.97.41.252</wp:comment_author_IP>
			<wp:comment_date>2011-02-02 23:19:15</wp:comment_date>
			<wp:comment_date_gmt>2011-02-03 07:19:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I should add that these environment variables are applied by bash after it has forked, and before the exec - so it doesn't affect the ambient shell's environment.

I use Cygwin bash. Works very well.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2323</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
			<wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://voidspace.org.uk/</wp:comment_author_url>
			<wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
			<wp:comment_date>2011-02-03 02:57:54</wp:comment_date>
			<wp:comment_date_gmt>2011-02-03 10:57:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You can also add custom .pth files (text files containing paths) to site-packages to add directories to sys.path.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2324</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.85</wp:comment_author_IP>
			<wp:comment_date>2011-02-03 10:17:42</wp:comment_date>
			<wp:comment_date_gmt>2011-02-03 18:17:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Barry - you can set the ambient shell environment in powershell ($env:PYTHONPATH = /whatever/you/like) but I'm not aware of way to apply the environment changes to a forked process w/o affecting the current one. I would suspect it's possible, but it's not out of the box AFAIK.

@Michael - I didn't know about .pth files - I'll take a look at that!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>DevHawk Has A Brand New Blog (Engine)</title>
		<link>http://devhawk.net/2011/04/16/devhawk-has-a-brand-new-blog-engine/</link>
		<pubDate>Sun, 17 Apr 2011 04:36:33 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=1568</guid>
		<description></description>
		<content:encoded><![CDATA[So it would make a crappy song, but the title of this post is still true. This is my first post on the new-and-improved DevHawk running on <a href="http://wordpress.org/">WordPress</a>.

I decided a while back that it was time to modernize my blog engine - <a href="http://dasblog.info/">DasBlog </a>is getting a little long of tooth and there hasn't been a new release in over two years. I spent some time looking at different options, but settled on WordPress for much the same reasons <a href="http://windowsteamblog.com/windows_live/b/windowslive/archive/2010/09/27/wordpress-com-and-windows-live-partnering-together-and-providing-an-upgrade-for-30-million-windows-live-spaces-customers.aspx">Windows Live did</a>: "host of impressive capabilities", scalable and widely used. Also, it's very extensible, has about a billion available themes and has a very active development community. I was able to find plugins to <a href="http://www.viper007bond.com/wordpress-plugins/clean-archives-reloaded/">replicate DasBlog's archive page</a> as well as <a href="http://www.emmanuelgeorjon.com/en/plugin-eg-archives-1745/">archive widget</a> that replicated custom functionality that I added to DasBlog via <a href="http://dasblog.info/CreatingCustomMacrosForDasBlog.aspx">custom macros</a>.

Of course, moving eight years worth of posts to a new engine took quite a bit of effort and planning. I wanted to make sure that I maintained all my posts and comments as well as take advantage of some of the new features available to me from WordPress. For example, I took the opportunity to flatten my list of categories and move most of them to be tags. I also went thru and converted all of my old code snippets to use <a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHighlighter</a> instead of <a href="http://codehtmler.codeplex.com/releases/view/9505">CodeHTMLer</a> or <a href="http://devhawk.net/2009/04/05/pygments-for-windows-live-writer/">Pygments for WL Writer</a>. Of course, I automated almost all of the conversion process. For anyone interested in following my footsteps, I <a href="https://bitbucket.org/devhawk/dasblog-wxr-convert">published my PowerShell scripts</a> for converting DasBlog to the <a href="http://ipggi.wordpress.com/2011/03/16/the-wordpress-extended-rss-wxr-exportimport-xml-document-format-decoded-and-explained/">WordPress WXR import/export format</a> up on BitBucket.

Not only did I want to save all my data, I also wanted to make sure I saved my search engine mojo (if I have any left after blogging a paltry six times in the past sixteen months). So I hacked up a WordPress plugin to redirect my old DasBlog links to the new WordPress URLs. That's <a href="https://bitbucket.org/devhawk/devhawk-redirect">up on BitBucket as well</a> for anyone who wants it. It's got some DevHawk specific bits in there (like the category cleanup) but if you tore those parts out it would be usable for any DasBlog-to-WordPress conversion. If there's interest, maybe I'll write up how the conversion scripts and redirect plugin work.

The plan is that now that I'm finally done moving my blog over the new back end, I will actually start writing on a more regular basis again. We'll see how that works out.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1568</wp:post_id>
		<wp:post_date>2011-04-16 21:36:33</wp:post_date>
		<wp:post_date_gmt>2011-04-17 04:36:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devhawk-has-a-brand-new-blog-engine</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="post_tag" nicename="dasblog"><![CDATA[dasBlog]]></category>
		<category domain="category" nicename="general-geekery"><![CDATA[General Geekery]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[WordPress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Shocker at Staples</title>
		<link>http://devhawk.net/2011/04/20/shocker-at-staples/</link>
		<pubDate>Wed, 20 Apr 2011 16:51:15 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/2011/04/20/shocker-at-staples/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>My passion for the Washington Capitals is <a href="http://devhawk.net/tag/washington-capitals/">well documented</a>. What you don’t know is that I was actually a Los Angeles Kings fan before I was a Capitals fan. </p>  <p>I wasn’t into hockey growing up, but I caught hockey fever when I was going to college in southern California. That was the Gretzky era&#160; - he led them to the Stanley Cup finals the year after I graduated from USC – and the Kings were the hottest ticket in town. But that era faded with the 1994 lockout, bankruptcy, trading Gretzky to the Blues in 1996 and missing the playoffs four years in a row. But unlike most of my then-fellow Angelenos, I stayed on the Kings bandwagon. </p>  <p>In 1998, the Kings finally made it back to the playoffs, facing the St. Louis Blues (Gretzky had moved on to the Rangers by then). The Kings had lost the first two games in St. Louis, but held a 3-0 lead in the 3rd period of Game #3. Then this happened:</p>  <blockquote>   <p>In a game that will be talked about for years to come, the Kings saw a 3-0 lead wiped out by four St. Louis power-play goals within a 3:07 span after defenseman Sean O'Donnell received a fighting major for beating down the Blues' Geoff Courtnall, who had knocked down goaltender Jamie Storr.</p>    <p>Pascal Rheaume, Brett Hull and Pierre Turgeon scored goals to tie the score and then Terry Yake knocked in the game-winner as the Blues rallied for a 4-3 victory Monday night to take a commanding 3-0 lead in their best-of-seven playoff series before a sellout crowd of 16,005 at the Great Western Forum.</p>    <p><a href="http://articles.latimes.com/1998/apr/28/sports/sp-43929">Meltdown on Manchester</a>       <br />Los Angeles Times, April 28 1998</p> </blockquote>  <p>I was one of those 16,005. It was the ugliest feeling I have ever had walking out of a hockey game. </p>  <p>I imagine the fans at the Staples Center last night are familiar with it.</p>  <blockquote>   <p>&quot;I've never seen anything like it,&quot; defenseman Matt Greene said after the Kings squandered a 4-0 lead and gave up a season-high five goals in the second period. </p>    <p>San Jose winger Devin Setoguchi finished off a three-on-two break with a deadly wrist shot past Jonathan Quick 3 minutes and 9 seconds into sudden-death play, stunning a Staples Center crowd that had been taken for a long and wild ride all night. What seemed like a chance for the Kings to take control of the series instead became a potentially devastating defeat that left the Sharks leading the first-round series two games to one with Game 4 scheduled for Staples Center on Thursday.</p>    <p><a href="http://www.latimes.com/sports/la-sp-elliott-kings-sharks-20110420,0,7599986.column">Kings turn four-goal lead into 6-5 overtime loss to Sharks in Game 3</a>&#160; <br />Los Angeles Times, April 20 2011</p> </blockquote>  <p>I watched the 2nd period last night at first with jubilation (Kings go up 4-0 less than a minute into the period), then slight concern (Sharks finally get on the board), then increasing concern (Sharks close the game to 4-3), then relief (Kings score :15 seconds later to make it 5-3) and finally horror (Sharks score twice in the last :90 seconds to tie the game 5-5). </p>  <p>I couldn’t watch any more after that. I saw that it had gone to overtime, but I didn’t know who won until I looked it up online this morning. </p>  <p>Frozen Royalty calls it the “<a href="http://frozenroyalty.net/2011/04/20/frozen-royalty-audio-la-kings-turn-4-0-lead-into-flop-on-figueroa-in-game-3-vs-san-jose/">Flop on Figueroa</a>”. Purple Crushed Velvet <a href="http://purplecrushedvelvet.blogspot.com/2011/04/i-believed-in-you-kings-you-broke-my.html">has a broken heart</a>. Hockeywood calls it an “<a href="http://lifeinhockeywood.com/2011/04/20/game-3.aspx">epic meltdown</a>” but then <a href="http://i441.photobucket.com/albums/qq139/hockeywood/keepcalm.jpg">suggests</a> Kings fans need to “Keep Calm and Carry On” because “One game a playoff series does not make”. </p>  <p>Technically, that’s true – the Kings are only down 2-1 and have shown <a href="http://espn.go.com/nhl/recap?gameId=310416018">they can win in San Jose</a>. But with momentum shift of blowing a 4 goal lead, I don’t see how the Kings win this series. I’d like to be wrong, but I don’t see how they win another game this year, much less the series.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1842</wp:post_id>
		<wp:post_date>2011-04-20 09:51:15</wp:post_date>
		<wp:post_date_gmt>2011-04-20 16:51:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>shocker-at-staples</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="epic-fail"><![CDATA[Epic Fail]]></category>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="post_tag" nicename="los-angeles-kings"><![CDATA[Los Angeles Kings]]></category>
		<category domain="post_tag" nicename="playoffs"><![CDATA[Playoffs]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<wp:comment>
			<wp:comment_id>3069</wp:comment_id>
			<wp:comment_author><![CDATA[jdn]]></wp:comment_author>
			<wp:comment_author_email>kingcrim@earthlink.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.blogcoward.com</wp:comment_author_url>
			<wp:comment_author_IP>173.9.218.177</wp:comment_author_IP>
			<wp:comment_date>2011-04-21 15:36:37</wp:comment_date>
			<wp:comment_date_gmt>2011-04-21 22:36:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah, I can only imagine how brutal it was to watch that game.    The Pens had a brutal game or two this year, but that was during the regular season.  Penner has been a major disappointment (maybe even worst than Ponikarovsky was for the Pens last year.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303425397.5623";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Playing With The Lead</title>
		<link>http://devhawk.net/2011/04/25/playing-with-the-lead/</link>
		<pubDate>Mon, 25 Apr 2011 07:03:07 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=1847</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_1848" align="alignright" width="210" caption="Ovechkin Celebrates the Capitals&#39; First Goal in Game 5"]<a href="http://www.nhl.com/ice/recap.htm?id=2010030115"><img class="size-medium wp-image-1848  " title="Ovechkin Celebrates the Capitals' First Goal in Game 5" src="http://devhawk.net/wp-content/uploads/2011/04/113092763_slide-300x200.jpg" alt="Ovechkin Celebrates the Capitals' First Goal in Game 5" width="210" height="140" /></a>[/caption]

Obviously, the <a href="http://www.nhl.com/ice/recap.htm?id=2010030115">Capitals win Saturday</a> was huge. It put them through to the second round for only the second time since their trip to the Stanley Cup Finals in 1998. It was also the first playoff series in the Ovechkin/Boudreau era to be settled without having to go the full seven games. The Capitals have played four seven-game playoff series in the past three years. It'll be nice for the Caps to have the extra time off to rest and heal for a change.

As we wait to see who the Capitals will face in the Conference Semifinals, I want to highlight what I think is a huge change from series from the past three years: The Capitals went 3-1 against the Rangers when they held the series lead. Over the four series in 2008-2010, the Capitals went 2-5 in games where they held the series lead. That's pretty bad. It gets even worse when you realize that both of those wins came early in their respective series. The Caps won game #2 against the Penguins in '09 to take a 2-0 series lead. Last year, they won game #3 against the Canadiens to take a 3-1 series lead. In both of those series, the Capitals proceeded to lose the next three games. They eventually lost both series.

So when the Caps <a href="http://www.nhl.com/ice/recap.htm?id=2010030113">lost game 3</a> and we're down 3-0 at the start of the 3rd period <a href="http://www.nhl.com/ice/recap.htm?id=2010030114">in game 4</a>, it certainly seemed as if the Capitals we're going to choke away another series lead like they had the past two years. Instead, they came out for the third period and played like their backs were against the wall. And while the Capitals' have sucked at defending a series lead, they have played very well well when facing elimination - 6-3 to be exact in the past three years.

If the <a href="http://www.usatoday.com/sports/hockey/nhl/capitals/2011-04-19-alex-ovechkin-capitals-playoffs_N.htm">new-and-improved Caps</a> can combine their traditional talent of playing from behind in the series with the ability to <del>drive nails into coffins</del> win games when they have the series lead, the Capitals will be a very hard team to beat this year.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1847</wp:post_id>
		<wp:post_date>2011-04-25 00:03:07</wp:post_date>
		<wp:post_date_gmt>2011-04-25 07:03:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>playing-with-the-lead</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="post_tag" nicename="playoffs"><![CDATA[Playoffs]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[caps-learning-to-play-with-the-lead]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using Task in ASP.NET MVC Today</title>
		<link>http://devhawk.net/2011/05/19/using-task-of-t-in-asp-net-mvc-today-2/</link>
		<pubDate>Fri, 20 May 2011 01:44:07 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=1864</guid>
		<description></description>
		<content:encoded><![CDATA[I've been experimenting with the <a href="http://msdn.microsoft.com/en-us/vstudio/async.aspx">new async support</a> coming in the next version of C# (and VB). I must say, I'm very impressed. Async is one of those things you know you're supposed to be doing. However, traditionally it has taken a lot of code and been hard to get right. The new await keyword changes all that.

For example, here's an async function to download the <a href="http://dev.twitter.com/doc/get/statuses/public_timeline">Twitter public timeline</a>:
<pre class="brush:csharp">public async Task PublicTimelineAsync()
{
  var url = "http://api.twitter.com/1/statuses/public_timeline.xml";
  var xml = await new WebClient().DownloadStringTaskAsync(url);
  return XDocument.Parse(xml);
}</pre>
That's not much more difficult that writing the synchronous version. By using the new async and await keywords, all the ugly async <a href="http://en.wikipedia.org/wiki/Continuation-passing_style">CPS</a> code you're supposed to write is generated for you automatically by the compiler. That's a huge win.

The only downside to async is that support for it is spotty in the .NET Framework today. Each major release of .NET to date has introduced a new async API pattern. .NET 1.0 had the <a href="http://msdn.microsoft.com/en-us/library/ms228963.aspx">Async Programming Model (APM)</a>. .NET 2.0 introduced the <a href="http://msdn.microsoft.com/en-us/library/wewwczdw.aspx">Event-based Async Pattern (EAP)</a>. Finally .NET 4.0 gave us the <a href="http://msdn.microsoft.com/en-us/library/dd537609.aspx">Task Parallel Library (TPL)</a>. The await keyword only works with APIs writen using the TPL pattern. APIs using older async patterns have to be wrapped as TPL APIs to work with await. The <a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=4738205d-5682-47bf-b62e-641f6441735b&amp;displaylang=en">Async CTP</a> includes a bunch of extension methods that wrap common async APIs, such as DownloadStringTaskAsync from the code above.

The async wrappers are nice, but there are a few places where we really need the TPL pattern plumbed deeper. For example, ASP.NET MVC supports <a href="http://msdn.microsoft.com/en-us/library/ee728598.aspx">AsyncControllers</a>. AsyncControllers are used to avoid blocking IIS threads waiting on long running I/O operations - such as getting the public timeline from Twitter. Now that I've been bitten by the <a href="http://blogs.msdn.com/b/lucian/archive/2011/04/15/async-ctp-refresh-design-changes.aspx">async zombie virus</a>, I want to write my async controller methods using await:
<pre class="brush:csharp">public async Task&lt;ActionResult&gt; Index()
{
    var t = new Twitter();
    var timeline = await t.PublicTimelineAsync();
    var data = timeline.Root.Elements("status")
        .Elements("text").Select(e =&gt; e.Value);
    return View(data);
}</pre>
Unfortunately, neither the main trunk of MVC nor the MVC futures project has support for the TPL model [1]. Instead, I have to manually write some semblance of the async code that await would have emitted on my behalf. In particular, I have to manage the outstanding operations, implement a continuation method and map the parameters in my controller manually.
<pre class="brush:csharp">public void IndexAsync()
{
    var twitter = new Twitter();

    AsyncManager.OutstandingOperations.Increment();
    twitter
        .PublicTimelineAsync()
        .ContinueWith(task =&gt;
        {
            AsyncManager.Parameters["timeline"] = task.Result;
            AsyncManager.OutstandingOperations.Decrement();
        });
}

public ActionResult IndexCompleted(XDocument timeline)
{
    var data = timeline.Root.Elements("status")
        .Elements("text").Select(e =&gt; e.Value);
    return View(data);
}</pre>
I promise you, writing that boilerplate code over and over gets old pretty darn quick. So I wrote the following helper function to eliminate as much boilerplate code as I could.
<pre class="brush:csharp">public static void RegisterTask&lt;T&gt;(
    this AsyncManager asyncManager,
    Task&lt;T&gt; task,
    Func&lt;T, object&gt; func)
{
    asyncManager.OutstandingOperations.Increment();
    task.ContinueWith(task2 =&gt;
    {
        //invoke the provided function with the
        //result of running the task
        var o = func(task2.Result);

        //use reflection to set asyncManager.Parameters
        //for the returned object's fields and properties
        var ty = o.GetType();
        foreach (var f in ty.GetFields())
        {
            asyncManager.Parameters[f.Name] = f.GetValue(o);
        }
        foreach (var p in ty.GetProperties())
        {
            var v = p.GetGetMethod().Invoke(o, null);
            asyncManager.Parameters[p.Name] = v;
        }

        asyncManager.OutstandingOperations.Decrement();
    });
}</pre>
With this helper function, you pass in the Task&lt;T&gt; that you are waiting on as well as a delegate to invoke when the task completes. RegisterTask takes care of incrementing and decrementing the outstanding operations count as appropriate. It also registers a continuation that reflects over the object returned from the invoked delegate to populate the Parameters collection.

With this helper function, you can write the async controller method like this:
<pre class="brush:csharp">public void IndexAsync()
{
    var twitter = new Twitter();

    AsyncManager.RegisterTask(
        twitter.PublicTimelineAsync(),
        data =&gt; new { timeline = data });
}

//IndexCompleted hasn't changed
public ActionResult IndexCompleted(XDocument timeline)
{
    var data = timeline.Root.Elements("status")
        .Elements("text").Select(e =&gt; e.Value);
    return View(data);
}</pre>
It's not as clean as the purely TPL based version. In particular, you still need to write separate Async and Completed methods for each controller method. You also need to build an object to map values from the completed tasks into parameters in the completed method. Mapping parameters is a pain, but the anonymous object syntax is terser than setting values in the AsyncManager Parameter collection.

It's not full TPL support, but it'll do for now. Here's hoping that the MVC team has async controller methods with TPL on their backlog.

<hr />

[1] I'm familiar with Craig Cavalier's <a href="http://craigcav.wordpress.com/2010/12/23/asynchronous-mvc-using-the-task-parallel-library/">Async MVC with TPL</a> post, but a fork of the MVC Futures project is a bit too bleeding edge for my needs at this point.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1888</wp:post_id>
		<wp:post_date>2011-05-19 18:44:07</wp:post_date>
		<wp:post_date_gmt>2011-05-20 01:44:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-task-of-t-in-asp-net-mvc-today-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
		<category domain="post_tag" nicename="async"><![CDATA[Async]]></category>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3174</wp:comment_id>
			<wp:comment_author><![CDATA[Twitter Mirror]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/kartiksehgal/statuses/71951606014410752</wp:comment_author_url>
			<wp:comment_author_IP>66.129.67.214</wp:comment_author_IP>
			<wp:comment_date>2011-05-21 08:07:24</wp:comment_date>
			<wp:comment_date_gmt>2011-05-21 15:07:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Using Task in ASP.NET MVC Today - http://devhawk.net/2011/05/19/using-task-of-t-in-asp-net-mvc-today/ #dotnet...</strong>

Using Task&lt;T&gt; in ASP.NET MVC Today - http://devhawk.net/2011/05/19/using-task-of-t-in-asp-net-mvc...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3175</wp:comment_id>
			<wp:comment_author><![CDATA[gautam kinkar]]></wp:comment_author>
			<wp:comment_author_email>kinkargautam91@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>117.197.96.190</wp:comment_author_IP>
			<wp:comment_date>2011-05-24 04:43:44</wp:comment_date>
			<wp:comment_date_gmt>2011-05-24 11:43:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[sir please guide me that c or c++ is nessesory for asp.net]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3176</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
			<wp:comment_date>2011-05-24 09:39:51</wp:comment_date>
			<wp:comment_date_gmt>2011-05-24 16:39:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@gautam, The code in this post is C#. There is a managed version of C++ (aka <a href="http://en.wikipedia.org/wiki/C%2B%2B/CLI" rel="nofollow">C++/CLI</a>) but I don't think it works with ASP.NET.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3175</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3177</wp:comment_id>
			<wp:comment_author><![CDATA[Rashmi]]></wp:comment_author>
			<wp:comment_author_email>rashmia@greatdevelopers.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.Beejak.com</wp:comment_author_url>
			<wp:comment_author_IP>147.114.249.109</wp:comment_author_IP>
			<wp:comment_date>2011-05-24 20:39:40</wp:comment_date>
			<wp:comment_date_gmt>2011-05-25 03:39:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's nice. Will give it a try. I am sure the performance would increase.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3178</wp:comment_id>
			<wp:comment_author><![CDATA[Haacked]]></wp:comment_author>
			<wp:comment_author_email>haacked@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://haacked.com/</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.118</wp:comment_author_IP>
			<wp:comment_date>2011-05-25 09:27:30</wp:comment_date>
			<wp:comment_date_gmt>2011-05-25 16:27:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[We plan to support this in ASP.NET MVC 4.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3179</wp:comment_id>
			<wp:comment_author><![CDATA[Felix]]></wp:comment_author>
			<wp:comment_author_email>felix@rabinovich.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.74.77.43</wp:comment_author_IP>
			<wp:comment_date>2011-05-29 15:32:01</wp:comment_date>
			<wp:comment_date_gmt>2011-05-29 22:32:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ideally, I would like to use asynch controller for POST call where I pass a few parameters and await result. Async controller assumes that the service implements Event-based Asynchronous Pattern or BeginMethod/EndMethod Pattern (or at least documentation assumes). Your example here calls DownloadStringTaskAsync which assumes GET or REST service.
So, I am not sure if I can call WebRequest.GetResponse asynchronously and just don't know how; or it is only possible for specially crafted services (and then Async CTP just simplifies what is already available).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3180</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.22.116.15</wp:comment_author_IP>
			<wp:comment_date>2011-06-01 22:08:17</wp:comment_date>
			<wp:comment_date_gmt>2011-06-02 05:08:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[With an async controller, you can choose which of your controller methods are async and which are sync - they don't all have to be sync.

As for DownloadStringTaskAsync, it's provided as part of the Async CTP and works with any site that DownloadString would work with AFAIK]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3179</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Build Your Own WDS Discovery Image</title>
		<link>http://devhawk.net/2011/05/19/build-your-own-wds-discovery-image/</link>
		<pubDate>Thu, 19 May 2011 13:19:23 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=1900</guid>
		<description></description>
		<content:encoded><![CDATA[Given that I <a href="http://devhawk.net/2009/10/26/joining-windows/">work on the Windows team</a>, it shouldn’t come as a surprise that we use <a href="http://technet.microsoft.com/en-us/library/cc772106(v=WS.10).aspx">Windows Deployment Services</a> to distribute Windows images internally. For most machines, it’s really convenient. You trigger a network boot (on my Lenovo, you press the “ThinkVantage” button during start up), select the image to install and what partition to install it to, wait a while, answer the installation finalization questions (machine name, user name, etc) and you’re done.

However, I have an <a href="http://www.dell.com/us/p/inspiron-duo/pd">Dell Inspiron Duo</a> (with the cool flip screen) netbook that lacks a built in network port. No network port, no network boot. I’ve got a USB network dongle, but it doesn’t support network boot either. No network boot, no ultra-convenient WDS installation, sad DevHawk.

I was able to work around this by building a custom <a href="http://technet.microsoft.com/en-us/library/cc730907(WS.10).aspx">WDS Discover image</a> that I loaded onto a USB flash drive. Now, I plug in the USB drive, select it as the boot device and I’m off and running…err, off and installing at any rate. Building the image was kind of tricky, so I figured it would be a good idea to write it down and share.

<strong>Step One: Install the <a href="http://technet.microsoft.com/en-us/library/dd349343(v=WS.10).aspx">Windows Automated Installation Kit (AIK)
</a></strong>The AIK is a set of tools for customizing Windows Images and deployment. In particular, it includes the <a href="http://technet.microsoft.com/en-us/library/dd744322(v=WS.10).aspx">Windows Preinstallation Environment</a> (aka WinPE) which is the minimal OS environment that Windows Setup runs in. We’ll be building a custom WinPE image to launch the WDS discovery and setup from.

<strong>Step Two: Create a new PE image
</strong>The AIK includes a command line tool for creating a blank PE image. Step 1 of this <a href="http://technet.microsoft.com/en-us/library/dd744530(v=WS.10).aspx">walkthru</a> shows you how to use it. It’s pretty easy. Open the Deployment Tools Command Prompt as an administrator and run the following commands:
<pre class="brush:plain">copype.cmd x86 C:\winpe_x86
copy winpe.wim ISO\sources\boot.wim</pre>
The copype.cmd batch file creates a new PE image of the specified architecture in the specified location. The Inspiron is an Atom processor so I chose an x86 PE image.

Note, in several steps below I assume you’ve created your  PE image in c:\winpe_x86. If you’ve created it somewhere else, make sure to swap in the correct path when executing the steps below.

<strong>Step Three: Mount the PE Boot image with DISM
</strong>Now that we have our basic PE boot image, we need to update it with custom drivers and the setup experience that can load WDS images across the network. Before we can update boot.wim, we need to mount it on the file system.

The AIK includes the <a href="http://technet.microsoft.com/en-us/library/dd744256(WS.10).aspx">Deployment Image Servicing and Management (DISM)</a> tool for working with WIM files. To mount the boot.wim file, execute the following command:
<pre class="brush:plain">dism /Mount-WIM /WimFile:C:\winpe_x86\ISO\sources\boot.wim /index:1 /MountDir:c:\winpe_x86\mount</pre>
Copype.cmd created an empty mount directory specifically for DISM to mount WIM images in.

<strong>Step Four: Add Custom Device Driver
</strong>The driver for my USB network dongle is not included in the standard Windows driver package, so it needs to be <a href="http://technet.microsoft.com/en-us/library/dd799289(WS.10).aspx">manually added to the PE image</a>. Again, we use DISM to do this.
<pre class="brush:plain">dism /image:c:\winpe_x86\mount /add-driver /driver:"PATHTODRIVERDIRECTORY"</pre>
<strong>Step Five: Add Setup packages
</strong>The PE image does not include the Windows Setup program by default. There are <a href="http://technet.microsoft.com/en-us/library/dd744533(WS.10).aspx">several optional packages</a> that you can add to your PE image. For WDS discovery, you need to add the setup and setup-client packages. Again, we use DISM to update the image.
<pre class="brush:plain">dism /image:c:\winpe_x86\mount /add-package /packagepath:"c:\Program Files\Windows AIK\Tools\PETools\x86\WinPE_FPs\winpe-setup.cab"
dism /image:c:\winpe_x86\mount /add-package /packagepath:"c:\Program Files\Windows AIK\Tools\PETools\x86\WinPE_FPs\winpe-setup-client.cab"</pre>
<strong>Step Six: Add winpeshl.ini file
</strong>Now that we’ve added the setup program to the image, we need to tell setup to <a href="http://technet.microsoft.com/en-us/library/cc730907(WS.10).aspx#BKMK_custom">run in WDS discovery mode on startup</a>. This is accomplished by adding a winpeshl.ini file to the WindowsSystem32 folder of the PE image.

Note, the <a href="http://technet.microsoft.com/en-us/library/cc730907(WS.10).aspx#BKMK_custom">official instructions</a> on TechNet have a bug. The path to setup.exe should be %<strong>SYSTEMDRIVE</strong>%sources, not %<strong>SYSTEMROOT</strong>%sources. Here’s the contents of my winpeshl.ini file:
<pre class="brush:plain">[LaunchApps]
%SYSTEMDRIVE%\sources\setup.exe, "/wds /wdsdiscover"</pre>
You can also add /wdsserver:&lt;server&gt; to the command line if you want to hard code the WDS Server to use in your image.

<strong>Step Seven: Add Lang.ini file
</strong>If you do all the above steps and try to boot the resulting image, you’ll get a nasty “Windows could not determine the language to use for Setup” error. Turns out there’s another bug in the official docs – <a href="http://www.msfn.org/board/topic/139298-winpe-30-wds-problems/">you need a lang.ini file in your sources directory</a> along side setup.exe in order to run. I just grabbed the lang.ini file off the normal Win7 boot image and copied it to the sources directory of my mounted boot image.

<strong>Step Eight: Commit and Unmount the PE Boot image
</strong>We’re now done updating the boot image, so it’s time to close and unmount it. This is accomplished with DISM:
<pre class="brush:plain">dism /unmount-wim /mountdir:c:\winpe_x86\mount /commit</pre>
At this point, the contents of the ISO folder are ready to be transferred to a USB stick for booting.

<strong>Step Nine: Prepare the USB Flash Drive
</strong>To enable your USB flash drive to be bootable, it needs to have a single FAT32 partition spanning the entire drive. Instructions in this <a href="http://technet.microsoft.com/en-us/library/dd744530(v=WS.10).aspx">walkthru</a> show you how to configure and format your USB drive.

Note, not all USB drives are created equal. I have one USB drive where the Duo just comes up with a blank screen when I try to use it for USB Boot. If you follow these steps and can’t boot, try a different USB drive.

<strong>Step Ten: Copy the image contents to the Flash Drive
</strong>I just did this with xcopy. In this case, my flash drive is E:, but obviously you should swap in the drive letter for your flash drive.
<pre class="brush:plain">xcopy c:\winpe_x86\ISO\*.* /e e:</pre>
<strong>Step Eleven: Boot your Netbook from the USB drive
</strong>With the USB drive containing the image + the network dongle both plugged in, boot the machine and trigger USB boot. For the Duo, you can hit F12 during boot to manually select your boot source. Your custom image will be booted, and it will then look out on the network to find the WDS server to load images from. Select the image you want and where you want to install it and away you go.

One thing to remember is that you're adding the  USB network dongle driver to the WDS discovery boot image, but <em>not</em> to the image that gets installed via WDS. So chances are you'll need the driver again once you get the image installed. I put that driver on the same USB key that holds the boot image. That way I can easily install the driver once Windows is installed.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1900</wp:post_id>
		<wp:post_date>2011-05-19 06:19:23</wp:post_date>
		<wp:post_date_gmt>2011-05-19 13:19:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>build-your-own-wds-discovery-image</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="deployment"><![CDATA[Deployment]]></category>
		<category domain="category" nicename="general-geekery"><![CDATA[General Geekery]]></category>
		<category domain="post_tag" nicename="wds"><![CDATA[WDS]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[Windows]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3181</wp:comment_id>
			<wp:comment_author><![CDATA[Bob Panick]]></wp:comment_author>
			<wp:comment_author_email>rpanick@msn.com</wp:comment_author_email>
			<wp:comment_author_url>http://photos.panick.com</wp:comment_author_url>
			<wp:comment_author_IP>72.255.116.219</wp:comment_author_IP>
			<wp:comment_date>2011-06-01 17:37:07</wp:comment_date>
			<wp:comment_date_gmt>2011-06-02 00:37:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Alternately you can create the WinPE disk, copy the Windows WIM files and simply use ImageX to extract the WIM file to your target disk.  Then when Windows has stared add the network drivers.  In this case you don't even need the network drivers until you are ready to join the domain, and you may be able to use your WiFi network.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3182</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.22.116.15</wp:comment_author_IP>
			<wp:comment_date>2011-06-01 22:14:38</wp:comment_date>
			<wp:comment_date_gmt>2011-06-02 05:14:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting. I'll have to look into this approach. Can you load the WIM files from the WDS server or do they need to be placed on a traditional file share?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3181</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Open Position On My Team</title>
		<link>http://devhawk.net/2011/06/15/open-position-on-my-team/</link>
		<pubDate>Wed, 15 Jun 2011 17:58:45 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=1913</guid>
		<description></description>
		<content:encoded><![CDATA[My team is hiring. I don't have a link to the job description on the Microsoft Careers site yet, but the job description is below.

Interested? <a title="Job Opening on your team" href="mailto:harry.pierson@microsoft.com">Send me mail</a>.
<blockquote><span style="text-decoration: underline;"><strong>IC PM2/Senior Program Manager Position in the Windows Developer Experience Team </strong></span>

Do you want to help ship the most ambitious release of Windows to date? Do you want to make your impact on millions of developers and hundreds of millions of users?

We are the Developer Experience Team. We are building the next generation of developer technologies for creating Windows applications. Our platform powers the new APIs that developers will use to create stunning new Windows applications. You will own the design and delivery of key platform features that will be used by developers in the Windows org, at Microsoft, and around the world to create the APIs that power the next generation of Windows applications.

What do we need from you? Awesomeness. What exactly does that mean? You can drive ambiguous goals independently to completion. You know what needs to get done and by when. You lead by example, cat-herd by necessity, and make a positive impact on your peers in PM, Dev and Test. Others in your org seek out your help because they know you will get it done, or that you will show them how to get it done better if they are coming to you for advice.

Requirements:
<ul>
	<li>You have 5+ years of experience in Program Management.</li>
	<li>You love software developers and can see the world from their perspective.</li>
	<li>You have strong JavaScript/C#/C++ skills</li>
	<li>You have completed multiple ship cycles on a large-scale product.</li>
	<li>You have intellectual horsepower and creativity, and can quickly adapt to new technologies and go deep in new areas.</li>
	<li>You have excellent communication and partnering skills. You can drive features
across teams who have different needs and priorities.</li>
	<li>Experience delivering developer platforms a significant plus.</li>
</ul>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1913</wp:post_id>
		<wp:post_date>2011-06-15 10:58:45</wp:post_date>
		<wp:post_date_gmt>2011-06-15 17:58:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>open-position-on-my-team</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="post_tag" nicename="working-at-msft"><![CDATA[Working at MSFT]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Windows Runtime</title>
		<link>http://devhawk.net/2011/09/15/the-windows-runtime/</link>
		<pubDate>Thu, 15 Sep 2011 14:40:31 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=1919</guid>
		<description></description>
		<content:encoded><![CDATA[After nearly 2 years of not being able to tell anyone what I was working on - or even the name of the team I was on! - <a href="http://www.buildwindows.com/">//build</a> is finally here and the <a href="http://msdn.microsoft.com/en-us/windows/apps/br229516">Windows 8 developer preview</a> is finally out there in the open for everyone to start building applications for. You have NO idea how hard it's been for me to keep my mouth shut and blog quiet about this!

I am a program manager on the Runtime Experience team, one of <a href="http://blogs.msdn.com/b/b8/archive/2011/08/17/introducing-the-team.aspx">many teams</a> in the Windows division building Windows 8. Our team is responsible for building the underlying infrastructure that powers the <a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh464942(v=VS.85).aspx">Windows Runtime</a> (or WinRT for short). In particular, I work on the WinRT metadata infrastructure. I also work closely with our partners in Developer Division that use the metadata to project WinRT APIs into multiple languages.

In a nutshell, WinRT is the new API surface area for <a href="http://msdn.microsoft.com/en-us/windows/apps/">Metro style apps</a> in Windows 8. WinRT APIs are available across multiple languages - C#, Visual Basic, C++ and JavaScript - enabling developers to build Metro style apps using the language and frameworks they are most familiar with. Much, much more info is available on the new <a href="http://dev.windows.com">Windows Dev Center</a>.

In addition to the <a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh464942(v=VS.85).aspx">developer preview docs for WinRT</a>, there are several sessions at //build focusing on WinRT - what it is, how it works under the covers, and how you use it from the various languages. Here's a handy list of all the //build sessions you should check out if you want to know more about WinRT:
<ul>
	<li><a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/PLAT-874T">Lap Around Windows Runtime</a>
Martyn Lovell - the dev manager for the Runtime Experience team - provides a overview of the Windows Runtime.</li>
	<li><a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/TOOL-531T">Using the Windows Runtime from C# and Visual Basic</a>
Jesse Kaplan from the CLR team and I cover how you can build managed Metro style apps and how you use WinRT from C# and VB. Obviously, I highly recommend this session because...Well, it's my session isn't it? What am I gonna say? Don't watch my talk?</li>
	<li><a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/TOOL-533T">Using the Windows Runtime from JavaScript</a>
Luke Hoban from the JavaScript team talks about how WinRT is used when building the new Metro style apps in HTML5 and JavaScript.</li>
	<li><a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/TOOL-532T">Using the Windows Runtime from C++</a>
Herb Sutter from the C++ team as well as the C++ standards committee talks about how WinRT is used for C++ developers building native Metro style apps.</li>
	<li><a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/PLAT-203T">Async Everywhere: creating responsive APIs and apps</a>
Ben Kuhn, a developer on the Runtime Experience team, dives deep on how async is exposed and implemented in WinRT</li>
	<li><a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/PLAT-875T">Windows Runtime Internals: understanding "Hello World"</a>
Matt Merry, a teammate on the Runtime Experience PM team, goes under the hood and shows you how the internals of WinRT work.</li>
	<li><a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/PLAT-877T">Being Pragmatic by leveraging existing code in Metro style apps</a>
<a href="http://twitter.com/#!/jolson88">Jason Olson</a>, a teammate on the Runtime Experience PM team and my next door office neighbor, talks about how you bring your existing code into the new world of Metro style apps. In particular, he's got a <a href="http://code.msdn.microsoft.com/windowsapps/Groove-Drum-Sequencer-cc6028ec">wicked cool demo</a>.</li>
	<li><a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/PLAT-657T">Windows Interns: our summer of apps</a>
John Lam, my immediate boss, is MCing this session with some of the Windows Interns who built the first Windows 8 Metro style apps over the summer.</li>
</ul>
As I write this, not all the sessions have been delivered and none of them are available online yet. But they should all be online within a couple of days. Also, you can also get more information as well as ask questions over at the <a href="http://forums.dev.windows.com">Windows Dev Center Forums</a>. Our dev manager has already been <a href="http://social.msdn.microsoft.com/profile/martyn%20lovell%20%5Bmsft%5D/">very busy answering questions</a>!

I am so excited that you can finally see what we've been working on and I can wait to see what <span style="text-decoration: underline;">you</span> build with Windows 8!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1919</wp:post_id>
		<wp:post_date>2011-09-15 07:40:31</wp:post_date>
		<wp:post_date_gmt>2011-09-15 14:40:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-windows-runtime</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="build"><![CDATA[//build]]></category>
		<category domain="post_tag" nicename="activation"><![CDATA[Activation]]></category>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="c-plus-plus"><![CDATA[C++]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
		<category domain="post_tag" nicename="metadata"><![CDATA[Metadata]]></category>
		<category domain="post_tag" nicename="metro-style-apps"><![CDATA[Metro style apps]]></category>
		<category domain="post_tag" nicename="visual-basic"><![CDATA[Visual Basic]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="post_tag" nicename="windows-8"><![CDATA[Windows 8]]></category>
		<category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3183</wp:comment_id>
			<wp:comment_author><![CDATA[anvaka]]></wp:comment_author>
			<wp:comment_author_email>anvaka@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://anvaka.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>216.213.97.190</wp:comment_author_IP>
			<wp:comment_date>2011-09-15 09:01:35</wp:comment_date>
			<wp:comment_date_gmt>2011-09-15 16:01:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congratulations with release :). Now it's out, and I can't wait to learn more about WinRT internals. Please keep posting :)!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3184</wp:comment_id>
			<wp:comment_author><![CDATA[Using WinRT from C# //build Demo &#8211; DevHawk]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://devhawk.net/2011/09/15/using-winrt-from-csharp-build-demo/</wp:comment_author_url>
			<wp:comment_author_IP>184.168.254.1</wp:comment_author_IP>
			<wp:comment_date>2011-09-15 09:39:50</wp:comment_date>
			<wp:comment_date_gmt>2011-09-15 16:39:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] DevHawk Designs                       &laquo; The Windows Runtime [...] ]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3185</wp:comment_id>
			<wp:comment_author><![CDATA[Cristian Remy]]></wp:comment_author>
			<wp:comment_author_email>alhudson.alhudson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.gamespot.com</wp:comment_author_url>
			<wp:comment_author_IP>200.23.29.77</wp:comment_author_IP>
			<wp:comment_date>2011-09-15 14:45:46</wp:comment_date>
			<wp:comment_date_gmt>2011-09-15 21:45:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great!

Finally the Longhorn promise is a fact]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3186</wp:comment_id>
			<wp:comment_author><![CDATA[Dev{eloper} Stonez]]></wp:comment_author>
			<wp:comment_author_email>dev.stonez@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/devstonez</wp:comment_author_url>
			<wp:comment_author_IP>82.77.217.139</wp:comment_author_IP>
			<wp:comment_date>2011-09-16 00:49:44</wp:comment_date>
			<wp:comment_date_gmt>2011-09-16 07:49:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I’m just wondering how the HTML5/JavaScript Metro applications will be packaged and protected against reversal …
 For packaging I’ll expect some sort of signed zip/jar (no mention about .appx on MSDN) but for protection, outside of heavy obfuscation for JavaScript I can’t envision any other way (maybe a new precompiled/binary format ?)
 If the protection is not good, writing HTML5/JavaScript apps will not flourish to much IMHO.

Since the Metro documentation state that the applications are self-consistent (no shared DLL’s, etc), I’m just wondering how you can create a modular, BIG Metro application by creating reusable components/libraries … Another issue that bother me relate to the library reuse, since the Metro documentation state that the applications are self-consistent (no shared DLL's, etc), so I'm just wondering how you can create a modular, BIG Metro application by creating reusable components/libraries ... 

If all the HTML5/JavaScript Metro apps should contain the same CSS and WinJS scripts then it doesn't look quite good ... I expected some form of libraries/reuse to exist from the start.

Do you have more details for all of these ?

BTW, all the HTML5/JavaScript way of programming Metro apps remind me about Opera widgets that you can build for several years now]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3187</wp:comment_id>
			<wp:comment_author><![CDATA[Dev{eloper} Stonez]]></wp:comment_author>
			<wp:comment_author_email>dev.stonez@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/devstonez</wp:comment_author_url>
			<wp:comment_author_IP>82.77.217.139</wp:comment_author_IP>
			<wp:comment_date>2011-09-16 05:21:09</wp:comment_date>
			<wp:comment_date_gmt>2011-09-16 12:21:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A deep-dive into WinRT and CLR  under Windows 8 and better details of the actual Windows 8 architecture can be found here <a href="http://dougseven.com/2011/09/15/a-bad-picture-is-worth-a-thousand-long-discussions/" rel="nofollow">A bad picture is worth a thousand long discussions.</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3188</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.40.153</wp:comment_author_IP>
			<wp:comment_date>2011-09-18 09:34:58</wp:comment_date>
			<wp:comment_date_gmt>2011-09-18 16:34:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dev{eloper} Stonez, would you mind re-asking your questions over on the <a href="http://forums.dev.windows.com" rel="nofollow">Metro style apps Forum</a>? We have support engineers actively monitoring those forums and it will be easier to for others with similar questions to find answers posted there rather than here. Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Using WinRT from C# //build Demo </title>
		<link>http://devhawk.net/2011/09/15/using-winrt-from-csharp-build-demo/</link>
		<pubDate>Thu, 15 Sep 2011 16:39:30 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=1924</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday at<a href="http://www.buildwindows.com/"> //build</a>, Jesse Kaplan and I delivered the <a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/TOOL-531T">Using Windows Runtime from C# and Visual Basic</a> talk. In the talk, I demonstrated how natural and familiar it is to use WinRT from C# by building a simple Metro style app. This app  takes a picture with a webcam and implements the share charm contract in less than 15 lines of C# code.

Instead of making you try and read code off the recorded video stream that should be published soon, I've written this walkthru to explain exactly what I did in that demo. In addition, I've started from scratch (i.e. File-&gt;New Project) so that you can follow along at home if you wish.

First, you need to install the <a href="http://msdn.microsoft.com/en-us/windows/apps/br229516">Windows Developer Preview</a>. I recommend the x64 version with tools. Scott Hanselman has a <a href="http://www.hanselman.com/blog/GuideToInstallingAndBootingWindows8DeveloperPreviewOffAVHDVirtualHardDisk.aspx">great write up</a> on using boot to VHD to run the preview. (though I do disagree w/ his assessment of dual boot. I've been dual booting Win7 and Win8 on my laptop for months and it's never ended in tears or blood). Also, you're going to need a webcam in order to run the app yourself.

Once the Windows Developer Preview is up and running, run the Socialite app and login with your Facebook credentials. We're going to use Socialite to share the picture we take with the webcam. Giving it your credentials up front makes the demo run smoother!

Next, fire up VS11 (aka Microsoft Visual Studio 11 Express for Windows Developer Preview). Create a new project and select the Visual C# -&gt; Windows Metro Style -&gt; Application template.

Once the new project has been created, you should be looking at the MainPage.xaml file. Update the Grid element to contain a button and an image.
<pre class="brush:xml">&lt;Grid x:Name="LayoutRoot" Background="#FF0C0C0C"&gt;
    &lt;Button x:Name="ClickMe" Click="ClickMe_Click"&gt;Click Me&lt;/Button&gt;
    &lt;Image x:Name="Photo" Width="800" Height="600"
           HorizontalAlignment="Center" VerticalAlignment="Center"/&gt;
&lt;/Grid&gt;</pre>
Next, hover over the Click="ClickMe_Click" attribute of the button, right click and select "Navigate to Event Handler". VS11 will take you to MainPage.xaml.cs and automatically generate a skeleton event handler for you.

In my //build session, I demonstrated that VS11 can automatically resolve WinRT namespaces the same way that it resolves managed namespaces. But for the purposes of this blog post, it's easier if you just add the additional using statements we're going to need at the top of MainPage.xaml.cs now.
<pre class="brush:csharp">using Windows.Media.Capture;
using Windows.Storage;
using Windows.UI.Xaml.Media.Imaging;
using Windows.ApplicationModel.DataTransfer;
using Windows.Storage.Streams;</pre>
Now, we add the code for ClickMe_Click:
<pre class="brush:csharp">private async void ClickMe_Click(object sender, RoutedEventArgs e)
{
    var ui = new CameraCaptureUI();
    ui.PhotoSettings.CroppedAspectRatio = new Size(4, 3);

    var file = await ui.CaptureFileAsync(CameraCaptureUIMode.Photo);

    if (file != null)
    {
        var stream = await file.OpenAsync(FileAccessMode.Read);

        var bitmap = new BitmapImage();
        bitmap.SetSource(stream);
        Photo.Source = bitmap;
    }
}</pre>
A few things to note about this code:
<ul>
	<li>Even though it's using native WinRT libraries, the C# feels natural and familiar - as if you were calling into traditional managed libraries. We're newing up classes, we're passing in constructor parameters, we're using primitive numbers and enums, we're assigning properties, etc. That is very much by design.</li>
	<li>We're using a couple of async WinRT methods (CaptureFileAsync and OpenAsync). C# 5.0's new await keyword to make it extremely easy to write linear looking code that doesn't block on async operations.</li>
	<li>No P/Invoke or COM Interop attributes anywhere to be seen!</li>
</ul>
Finally, before we can run this code we need to declare our intent to use the webcam. Double click on the Package.appxmanifest file, click on the "Capabilites" tab, and then check the Webcam checkbox.

With the capability declared, now we can run the app. Hit F5 and VS11 will compile and deploy the Metro style app you just built. Click the button, acknowledge that you want to let the program use the webcam, take a pic, crop it, and there it is in your UI!

For the second part of the demo, I added share contract support. Here's how to do that.

First, we need to pull the stream variable into class instance scope so that we can access it in the share contract event handler. We do that by adding a private IRandomAccessStream variable named stream and removing the var declarations from the line where we call OpenAsync. The updated click event handler looks like this:
<pre class="brush:csharp">//here's the instance scope stream variable
IRandomAccessStream stream;

private async void ClickMe_Click(object sender, RoutedEventArgs e)
{
    var ui = new CameraCaptureUI();
    ui.PhotoSettings.CroppedAspectRatio = new Size(4, 3);

    var file = await ui.CaptureFileAsync(CameraCaptureUIMode.Photo);

    if (file != null)
    {
        //the only change from the code above was to remove
        //the var declaration from the following line
        stream = await file.OpenAsync(FileAccessMode.Read);

        var bitmap = new BitmapImage();
        bitmap.SetSource(stream);
        Photo.Source = bitmap;
    }
}</pre>
Next, we need to wire up the share event handler in the XAML page's constructor. That's a single line of code and VS11 intellisense writes most of  it for you
<pre class="brush:csharp">public MainPage()
{
    InitializeComponent();
    DataTransferManager.GetForCurrentView().DataRequested +=
        new TypedEventHandler&lt;DataTransferManager, DataRequestedEventArgs&gt;(MainPage_DataRequested);
}</pre>
If you've ever wired up an event handler in C# before with VS, you'll be familiar with the "Press TAB to insert" the correct event handler type followed by "TAB to generate handler". Even though hthis is a WinRT event, VS11 helps you wire it up just the same as it does for managed events.

Now we implement the share contract event handler. That's just a simple if statement - calling args.Request.Data.SetBitmap if the user has taken a picture and calling args.Request.FailWithDisplayText with an error message if they have not.
<pre class="brush:csharp">private void MainPage_DataRequested(DataTransferManager sender,
    DataRequestedEventArgs args)
{
    if (stream == null)
        args.Request.FailWithDisplayText("No picture taken!");
    else
        args.Request.Data.SetBitmap(stream);
}</pre>
This part of the demo shows off static methods and event handlers. Again, note how natural and familiar it feels to use WinRT from C#.

And we're done, so hit F5 to build, deploy and run the app again.

I didn't remember to do this in the //build talk, but first try selecting the share contract <em>before </em>taking a picture. Windows will display the "No picture taken" text in share contract window since the user taken a picture to share yet. That's pretty boring so dismiss the share contract and take a picture like you did before. Then select the share contract, select Socalite, write a pithy message and press "Share in Facebook".

That's the entire demo! Taking a picture with the webcam, uploading to facebook, calling native WinRT APIs from C# in a natural and familiar way and all in just under 15 lines of code!

With our talk and demos, Jesse and I wanted to communicate just how important C# and VB are in the overall developer story for Windows 8. This demo shows off the hard work our two teams have done in order to make sure the managed developer's experience with Windows 8 was the best that it could be. As I said in the talk - if you're a managed developer, <span style="text-decoration: underline;">you already know how to build these Metro style apps</span>.

I know I <a href="http://devhawk.net/2011/09/15/the-windows-runtime/">said it before</a>, but I really can't wait to see what you guys build with Windows 8!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1924</wp:post_id>
		<wp:post_date>2011-09-15 09:39:30</wp:post_date>
		<wp:post_date_gmt>2011-09-15 16:39:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-winrt-from-csharp-build-demo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="build"><![CDATA[//build]]></category>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="metro-style-apps"><![CDATA[Metro style apps]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="post_tag" nicename="windows-8"><![CDATA[Windows 8]]></category>
		<category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3189</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Smith]]></wp:comment_author>
			<wp:comment_author_email>Msmithy@gotchu.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>188.29.103.241</wp:comment_author_IP>
			<wp:comment_date>2011-09-16 10:30:29</wp:comment_date>
			<wp:comment_date_gmt>2011-09-16 17:30:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well we won't be building enterprise apps in silverlight that's for sure! :-(]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3190</wp:comment_id>
			<wp:comment_author><![CDATA[Volker Hetzer]]></wp:comment_author>
			<wp:comment_author_email>volker.hetzer@ts.fujitsu.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.70.169.36</wp:comment_author_IP>
			<wp:comment_date>2011-09-19 09:49:43</wp:comment_date>
			<wp:comment_date_gmt>2011-09-19 16:49:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi!
Great talk, even it I only saw the recording!
Only, I still have some problems understanding the plumbing behind the WinRT/CLR stuff:
Given, for example a WinRT call that returns a vector or a Map, what do I really get?
Like, will the CLR GC be able to move it around, like native .NET objects?
Will a
<code>
foreach (WinRTObject O in X.GetWinRTCollection())
{
dowomethingWith(O;)
}
</code>
involve COM interop and RTW stuff?
I've asked this in <a href="http://social.msdn.microsoft.com/forums/en-us/vblanguage/thread/04955BA7-C940-46EB-8F55-374600AE262C" / rel="nofollow"> but so far didn't get enlightened very much.

Very nice talk!
Volker]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3191</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.125</wp:comment_author_IP>
			<wp:comment_date>2011-09-19 13:56:10</wp:comment_date>
			<wp:comment_date_gmt>2011-09-19 20:56:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Glad you liked the talk Volker! As I said in the talk, WinRT is built on a foundation of COM. So, yes, whenever you use WinRT from C#, you're using COM interop and RCWs (I'm assuming you meant "RCW" aka Runtime Callable Wrapper when you wrote "RTW stuff".)

As you might imagine, I took the weekend off, but I'll be surfing the forums regularly answering questions in the future.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3190</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3192</wp:comment_id>
			<wp:comment_author><![CDATA[Josh Smith]]></wp:comment_author>
			<wp:comment_author_email>flapplejacks@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://joshsmithonwpf.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>66.235.47.69</wp:comment_author_IP>
			<wp:comment_date>2011-09-19 21:53:09</wp:comment_date>
			<wp:comment_date_gmt>2011-09-20 04:53:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the helpful write up. One thing...the demo doesn't unhook the DataRequested event of the DataTransferManager. Unless there are weak events being used in WinRT, this sample code probably causes a memory leak because the MainPage is always referenced by an instance of DataTransferManager (whose lifetime I assume is greater than that of the page). Or is there some new greatness in WinRT's eventing model that I'm not aware of?

Thanks,
Josh]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3193</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin C]]></wp:comment_author>
			<wp:comment_author_email>kevinc43@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>95.150.230.153</wp:comment_author_IP>
			<wp:comment_date>2011-09-23 07:27:02</wp:comment_date>
			<wp:comment_date_gmt>2011-09-23 14:27:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A quick couple of questions:
1) If an app is written in pure XAML - say a grid with a few boxes - with no code of any kind (c#/javascript/c++) - are any dotnet libs/runtime's loaded? Does XAML in Win8/Metro have any dotnet dependencies? Is the code that renders the declarative XAML

2) Can javascript project be written to work with XAML instead of HTML.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316788022.8845";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316832947.2094";s:7:"message";s:46:"devhawk changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3194</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.231.40.153</wp:comment_author_IP>
			<wp:comment_date>2011-09-23 19:57:56</wp:comment_date>
			<wp:comment_date_gmt>2011-09-24 02:57:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[1) I'm not sure how compelling a pure XAML app would be. But Windows XAML does not depend on .NET. If you build a Metro style app with XAML and C++, you don't load the CLR.

2) No, JS only works with HTML.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3193</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1316833076.5071";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>My //build Talk</title>
		<link>http://devhawk.net/2011/10/06/my-build-talk/</link>
		<pubDate>Thu, 06 Oct 2011 15:17:52 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=1927</guid>
		<description></description>
		<content:encoded><![CDATA[I just realized that while I posted the <a href="http://devhawk.net/2011/09/15/using-winrt-from-csharp-build-demo/">demo steps</a> from my //build talk, I never posted the talk itself here on DevHawk. Consider that oversight rectified with this post.

(Note, the static image below appears cut-off, but the video should scale to the width of my blog automatically. If not, head on over to the <a href="http://channel9.msdn.com/events/BUILD/BUILD2011/TOOL-531T">official page</a> for the talk over on Channel 9)

<iframe style="width: 620px; height: 351px;" src="http://channel9.msdn.com/Events/BUILD/BUILD2011/TOOL-531T/player?w=620&amp;h=351" frameborder="0" scrolling="no" width="320" height="240"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1927</wp:post_id>
		<wp:post_date>2011-10-06 08:17:52</wp:post_date>
		<wp:post_date_gmt>2011-10-06 15:17:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-build-talk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="build"><![CDATA[//build]]></category>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="metro-style-apps"><![CDATA[Metro style apps]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="post_tag" nicename="windows-8"><![CDATA[Windows 8]]></category>
		<category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Building WinRT Components with C++/CX</title>
		<link>http://devhawk.net/2012/06/08/building-winrt-components-with-cpp-cx/</link>
		<pubDate>Fri, 08 Jun 2012 21:25:55 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=1941</guid>
		<description></description>
		<content:encoded><![CDATA[I don't get out to talk to customers like I used to in previous jobs. &lt;sigh&gt; But a few weeks ago, I got a chance to do a session at Channel 9's <a href="http://channel9.msdn.com/Events/Windows-Camp/Developing-Windows-8-Metro-style-apps-in-Cpp">Developing Windows 8 Metro style apps with C++</a> <a href="http://channel9.msdn.com/Events/Windows-Camp">Windows Camp</a>. There were some great talks at the event on <a href="http://channel9.msdn.com/Events/Windows-Camp/Developing-Windows-8-Metro-style-apps-in-Cpp/Building-Metro-style-apps-with-XAML-and-Cpp">XAML with C++</a>, <a href="http://channel9.msdn.com/Events/Windows-Camp/Developing-Windows-8-Metro-style-apps-in-Cpp/Cpp-and-DirectX-for-Metro-Style-Games">C++ for Metro Style Games</a> and  using <a href="http://channel9.msdn.com/Events/Windows-Camp/Developing-Windows-8-Metro-style-apps-in-Cpp/Building-Apps-with-Cpp-XAML-and-DirectX">DirectX and XAML together</a>. My talk was on building <a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh441572(v=vs.110).aspx">Windows Runtime Components </a>in C++. Here's the abstract:
<blockquote>The Windows Runtime enables developers from a variety of languages – JavaScript, C#, Visual Basic and C++ - to use the Windows APIs in a natural and familiar way. But did you know that you can build your own components that project into those same languages for use in your Metro style apps? Watch this session to learn how to build your own Windows Runtime components with C++ that can be used across languages in Metro style applications.</blockquote>
I haven't had time, but I plan to blog the demo step-by-step like I did for my <a href="http://devhawk.net/2011/09/15/using-winrt-from-csharp-build-demo/">//build demo</a>. In the meantime, check out the talk:

<iframe style="width: 620px; height: 351px;" src="http://channel9.msdn.com/Events/Windows-Camp/Developing-Windows-8-Metro-style-apps-in-Cpp/Building-Windows-Runtime-Components-with-Cpp/player?w=620&amp;h=351" frameborder="0" scrolling="no" width="320" height="240"></iframe>

(Note, the static image below appears cut-off, but the video should scale to the width of my blog automatically. If not, head on over to the <a href="http://channel9.msdn.com/Events/Windows-Camp/Developing-Windows-8-Metro-style-apps-in-Cpp/Building-Windows-Runtime-Components-with-Cpp">official page</a> for the talk over on Channel 9)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1941</wp:post_id>
		<wp:post_date>2012-06-08 14:25:55</wp:post_date>
		<wp:post_date_gmt>2012-06-08 21:25:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>building-winrt-components-with-cpp-cx</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-plus-plus"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="c-plus-plus-cx"><![CDATA[C++/cx]]></category>
		<category domain="post_tag" nicename="channel-9"><![CDATA[Channel 9]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="post_tag" nicename="windows-8"><![CDATA[Windows 8]]></category>
		<category domain="post_tag" nicename="windows-camp"><![CDATA[Windows Camp]]></category>
		<category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
		<category domain="post_tag" nicename="winrt-components"><![CDATA[WinRT Components]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[building-winrt-components-with-cppcx]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3239</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &ndash; June 11, 2012 | Alvin Ashcraft&#039;s Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2012/06/11/dew-drop-june-11-2012/</wp:comment_author_url>
			<wp:comment_author_IP>72.47.228.20</wp:comment_author_IP>
			<wp:comment_date>2012-06-11 04:43:29</wp:comment_date>
			<wp:comment_date_gmt>2012-06-11 11:43:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Building WinRT Components with C++/CX (Harry Pierson) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339415009.0828";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340116048.4654";s:7:"message";s:46:"devhawk changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3270</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk &#8211; Windows Camp Demo, Part One]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://devhawk.net/2012/06/19/windows-camp-demo-part-one/</wp:comment_author_url>
			<wp:comment_author_IP>184.168.254.1</wp:comment_author_IP>
			<wp:comment_date>2012-06-19 20:13:43</wp:comment_date>
			<wp:comment_date_gmt>2012-06-20 03:13:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] weeks ago, I did a talk on building Windows Runtime components in C++. As part of that talk, I did a demo that showed accessing a WinRT component written in C++ from a [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340162023.7642";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340162143.0962";s:7:"message";s:46:"devhawk changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Windows Camp Demo, Part One</title>
		<link>http://devhawk.net/2012/06/19/windows-camp-demo-part-one/</link>
		<pubDate>Wed, 20 Jun 2012 03:13:34 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2002</guid>
		<description></description>
		<content:encoded><![CDATA[Several weeks ago, I did a talk on <a href="http://devhawk.net/2012/06/08/building-winrt-components-with-cpp-cx/">building Windows Runtime components in C++</a>. As part of that talk, I did a demo that showed accessing a WinRT component written in C++ from a C# XAML application. Like I did for <a href="http://devhawk.net/2011/09/15/using-winrt-from-csharp-build-demo/">my //build talk</a>, I’ve written this walkthrough so you can follow along at home without having to read code off the recorded video stream. I’ve also published the source up on <a href="https://github.com/devhawk/WindowsCampDemo">GitHub</a>.

The demo had two parts – the first was a “Hello, world!” style demo, the second demonstrated wrapping an <a href="http://bitmap.codeplex.com/">existing C++ library</a> in a WinRT component to make it callable from other languages. This post covers the first part of the demo. I’ll post a walkthrough of the second part of the demo soon.

In order to follow along, you’ll need the <a href="http://windows.microsoft.com/en-US/windows-8/release-preview">Windows 8 Release Preview</a> as well as <a href="http://msdn.microsoft.com/en-us/windows/apps/hh852659">Visual Studio 2012 Express RC for Windows 8</a>. You should be able to use the RC version of VS 2012 <a href="http://www.microsoft.com/visualstudio/11/en-us/professional">Pro</a>, <a href="http://www.microsoft.com/visualstudio/11/en-us/premium">Premium</a> or <a href="http://www.microsoft.com/visualstudio/11/en-us/ultimate">Ultimate</a>, but I’ve only tested with Express. Note, the original presentation was done on Win8 Consumer Preview / VS 11 Beta, but I figured it made more sense to write up the walkthrough on the latest bits.

We’re going to start by creating the C# XAML app we’ll use as the component client. Fire up VS 2012 RC and select new project. Select Visual C# -&gt; Windows Metro Style -&gt; Blank App (XAML), name the project “WindowsCamp” and press OK. Once the project has been created, open up the MainPage.xaml file, replace the Grid element that’s there by default with the following XAML code:
<pre class="brush:xml">&lt;StackPanel Background="{StaticResource ApplicationPageBackgroundThemeBrush}"&gt;
    &lt;Button Click="Button_Click_1"&gt;Click me&lt;/Button&gt;
    &lt;TextBlock x:Name="myText" FontSize="20"&gt;&lt;/TextBlock&gt;
    &lt;Image x:Name="myImage"&gt;&lt;/Image&gt;
&lt;/StackPanel&gt;</pre>
As you can see, my UX skills have not improved since //build.

Now, we need to add a project for the C++ WinRT component. Right click on solution in the Solution Explorer and select Add -&gt; New Project. In the New Project dialog, Select Visual C++ -&gt; Windows Metro Style -&gt; Windows Runtime Component, name the project “WindowsCampComponent” and press OK.

Once the component project has been created, we’re going to add some code to it. Open Class1.h if it’s not already open. Update the file to read as follows:
<pre class="brush:cpp">#pragma once

using namespace Platform;

namespace WindowsCampComponent
{
    public ref class Class1 sealed
    {
    public:
        Class1();

        String^ SayHello(String^ name) {
            return String::Concat(
                ref new String(L"Hello there "),
                name);
        };
    };
}</pre>
The code is a bit more complex than your typical Hello, world. The SayHello method takes a string parameter that represents someone’s name. The method concatenates the provided name with a hard coded greeting string and returns the resulting string. Doesn’t get much simpler. However, even though it’s just a single line of code there are several concepts that are important to point out:
<ul>
	<li>ref class – WinRT objects are projected in C++/CX as ref classes and vise-versa. Since we’re building a WinRT component to consume from C#, we define it as a ref class. Note, unless you’re writing a XAML control, all WinRT classes must be sealed.</li>
	<li>Hats – The ‘^’ character after the String type declarations is the handle-to-object modifier. It’s basically the pointer-to-object modifier (aka ‘*’) but for ref classes. We’ll see in the second part of the demo that you invoke members on a ref class using the same ‘-&gt;’ syntax that you use in vanilla C++.</li>
	<li>ref new – You create instances of ref clases using “ref new” instead of “new” as you do in vanilla C++. Ref new returns a handle to the newly created ref class – a String^ in this case.</li>
	<li>Platform::String – C++/CX projects some non-class WinRT types as ref classes in the Platform namespace. In this case, C++/CX projects the new language interoperable string type <a href="http://msdn.microsoft.com/en-us/library/br205775(v=vs.85).aspx">HSTRING</a> as a Platform::String ref class. HSTRINGS are UTF-16, so Platform::String provides a constructor that takes a wide string literal. We imported the Platform namespace via the “using namespace” directive so we wouldn’t have to type “Platform::” multiple times.</li>
</ul>
For more information about the design of the C++/CX language, check out <a href="http://blogs.msdn.com/b/vcblog/archive/2011/10/20/10228473.aspx">Jim Springfield’s post</a> on the <a href="http://blogs.msdn.com/b/vcblog/">Visual C++ team blog</a>.

Now that we’ve written our WinRT component, we’ll write the code to consume it in C#. First, we need to add a reference to the C++ WinRT component project in our C# Metro style XAML app. WinRT references are added just like traditional CLR references – via the Add Reference dialog. Right click on the WindowsCamp node of the Solution explorer, select “Add Reference…” from the menu, click the check box next to the WindowsCampComponent project from the solution and press OK.

Go back to MainPage.xaml and double click on the button labeled “Click Me” in the designer. This will add a click event handler named Button_Click_1 and take you to MainPage.xaml.cs so you can write the code for it. Type in “var wcc = new Windows” and look at the resulting intellisense list. Notice that WindowsCampComponent is missing.

<img class="alignnone size-full wp-image-2004" title="WCDemo1-Intellisense1" src="http://devhawk.net/wp-content/uploads/2012/06/WCDemo1-Intellisense1.png" alt="" width="496" height="241" />

This is because the C++ component hasn’t been compiled yet. We need compile the C++ component project in order to generate the Windows metadata file (aka the file with the .winmd extension) that is used to drive intellisense. Delete the line of code you just added and compile the solution. Now type that line of code again, and you’ll notice that the WindowsCampComponent namespace is available.

<img class="alignnone size-full wp-image-2005" title="WCDemo1-Intellisense2" src="http://devhawk.net/wp-content/uploads/2012/06/WCDemo1-Intellisense2.png" alt="" width="490" height="238" />

Now, update the button click event handler to read as follows:
<pre class="brush:csharp">private void Button_Click_1(object sender, RoutedEventArgs e)
{
    var wcc = new WindowsCampComponent.Class1();
    myText.Text = wcc.SayHello("Herb Sutter");
}</pre>
<img class="size-thumbnail wp-image-2008 alignleft" title="WCDemo1-RunningApp" src="http://devhawk.net/wp-content/uploads/2012/06/WCDemo1-RunningApp-e1340161688130-150x74.png" alt="" width="150" height="74" />Now, run the app, click the “Click Me” button and marvel at the wonder of WinRT language interop to print a greeting to Herb Sutter. I used <a href="http://herbsutter.com/">Herb Sutter</a> from the C++ team since he was the keynote speaker at the Windows Camp event and was standing in the back of the room when I did the demo.

And that’s it for the Hello, world demo. Kind of a lot of steps for essentially 3 lines of code – 1 line of component code and 2 lines of client code. However, we did get the infrastructure set up so we add more substantial code in the next post.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2002</wp:post_id>
		<wp:post_date>2012-06-19 20:13:34</wp:post_date>
		<wp:post_date_gmt>2012-06-20 03:13:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows-camp-demo-part-one</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-plus-plus"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="c-plus-plus-cx"><![CDATA[C++/cx]]></category>
		<category domain="post_tag" nicename="channel-9"><![CDATA[Channel 9]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="metro-style-apps"><![CDATA[Metro style apps]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="post_tag" nicename="windows-8"><![CDATA[Windows 8]]></category>
		<category domain="post_tag" nicename="windows-camp"><![CDATA[Windows Camp]]></category>
		<category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
		<category domain="post_tag" nicename="winrt-components"><![CDATA[WinRT Components]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3343</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk &#8211; Windows Camp Demo, Part Two]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://devhawk.net/2012/06/19/windows-camp-demo-part-two/</wp:comment_author_url>
			<wp:comment_author_IP>184.168.254.1</wp:comment_author_IP>
			<wp:comment_date>2012-06-24 09:34:49</wp:comment_date>
			<wp:comment_date_gmt>2012-06-24 16:34:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] my previous post, we set up a C++ WinRT component project and a C# Metro style XAML app to use the component. The [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340555689.8581";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340555706.0414";s:7:"message";s:46:"devhawk changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3286</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &ndash; June 20, 2012 (#1,348) | Alvin Ashcraft&#039;s Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2012/06/20/dew-drop-june-20-2012-1348/</wp:comment_author_url>
			<wp:comment_author_IP>72.47.228.18</wp:comment_author_IP>
			<wp:comment_date>2012-06-20 11:16:15</wp:comment_date>
			<wp:comment_date_gmt>2012-06-20 18:16:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Windows Camp Demo, Part One (Harry Pierson) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340216175.6573";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340244552.3914";s:7:"message";s:46:"devhawk changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Windows Camp Demo, Part Two</title>
		<link>http://devhawk.net/2012/06/24/windows-camp-demo-part-two/</link>
		<pubDate>Mon, 25 Jun 2012 03:15:24 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2012</guid>
		<description></description>
		<content:encoded><![CDATA[In my <a href="http://devhawk.net/2012/06/19/windows-camp-demo-part-one/">previous post</a>, we set up a C++ WinRT component project and a C# Metro style XAML app to use the component. The code was dinky Hello, world type stuff. Now, let’s do something a little more interesting.

In preparing for this demo, I found a <a href="http://bitmap.codeplex.com/">C++ bitmap library</a> on CodePlex that includes a plasma texture generation function. This sounded like a good demo for both language interop and using existing code. It builds on the code from <a href="http://devhawk.net/2012/06/19/windows-camp-demo-part-one/">my previous post</a>, so either start there or <a href="https://github.com/devhawk/WindowsCampDemo">clone from GitHub</a> and checkout the part1 tag.

First step is to add the bitmap_image.hpp file from <a href="http://www.partow.net/index.html">Arash Partow’s</a> <a href="http://bitmap.codeplex.com/">C++ Bitmap Library</a> to the C++ component project. Download the <a href="http://bitmap.codeplex.com/SourceControl/list/changesets">latest commit</a> from CodePlex as a zip and extract the bitmap_image.hpp file into your C++ component project directory. Switch over to VS, right click on the component project node, select Add -&gt; Existing Item… and select the bitmap_image.hpp file.

Now that we have included the library code, we need to write the wrapper code to expose that library functionality to other languages via WinRT. We’ll start by adding the following namespace declarations to the top of the Class1.h header file:
<pre class="brush:cpp">using namespace Windows::Foundation;
using namespace Windows::Storage::Streams;</pre>
And then we’ll add the declaration for our GetPlasmaImageAsync method to Class1’s header file underneath the SayHello method. Note, in my original presentation I called this method GetPlasmaImage, neglecting to follow the naming convention of appending “Async” to name of all asynchronous methods.
<pre class="brush:cpp">IAsyncOperation&lt;IRandomAccessStream^&gt;^ GetPlasmaImageAsync(
    unsigned int width, unsigned int height);</pre>
We’re using two WinRT types in this method declaration.
<ul>
	<li><a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.storage.streams.irandomaccessstream.aspx">IRandomAccessStream</a> represents a stream of binary data that supports random access. We’re going to return our plasma image as an IRandomAccessStream and then wrap it in a XAML bitmap image for use in our UI.</li>
	<li><a href="http://msdn.microsoft.com/en-us/library/windows/apps/br206598.aspx">IAsyncOperation&lt;T&gt;</a> represents an asynchronous operation that returns a value. Generating the image takes a significant amount of time (especially given the shortcut I used as you’ll see in a bit) so we need to make it async. Async is a <em>big</em> topic and we’re just touching on it in this walkthrough. For more on async in WinRT, check out my teammate <a href="http://blogs.msdn.com/b/windowsappdev/archive/2012/03/20/keeping-apps-fast-and-fluid-with-asynchrony-in-the-windows-runtime.aspx">Jason Olson’s post</a> on the <a href="http://blogs.msdn.com/b/windowsappdev/">Win8 app developer blog</a>.</li>
</ul>
Now that we have the declaration, let’s switch over to the Class1.cpp file to add the method implementation. This isn’t a one line method like SayHello, so I decided to separate declaration from implementation as is traditional C++ best practice.

Before we do anything else, we need to #include the bitmap_image.hpp file. However, this bitmap library uses an unchecked destination STL copy function that <a href="http://msdn.microsoft.com/en-us/library/aa985872(v=vs.110).aspx">Microsoft considers unsafe</a>. I <em>really </em>should be updating the code to used <a href="http://msdn.microsoft.com/en-us/library/aa985965(v=vs.110)">checked iterators</a>, but since this is demo code, we’re going to turn off the warning instead. We do that by #defining _SCL_SECURE_NO_WARNINGS. While we’re doing that, let’s add the additional #includes and using namespace statements we’re going to need.
<pre class="brush:cpp">#include "pch.h"
#include "Class1.h"

#define _SCL_SECURE_NO_WARNINGS
#include "bitmap_image.hpp"
#include &lt;string&gt;
#include &lt;ppltasks.h&gt;

using namespace WindowsCampComponent;
using namespace std;
using namespace concurrency;
using namespace Windows::Storage;</pre>
In addition to the bitmap image library, we’re going to need the STL string library and the Parallel Patterns Library, so I’ve gone ahead and #included those header files and used those namespaces. We’re also going to use some types from the Windows::Storage namespace, so I’ve used that namespace as well.

The implementation of the GetPlasmaImageAsync method is going to happen in several steps:
<ol>
	<li>Generate the plasma image using the C++ Bitmap library</li>
	<li>Save the plasma image to a temporary file</li>
	<li>Reopen the temporary file as an IRandomAcessStream with WinRT’s file system APIs</li>
</ol>
Saving and reopening the file is the shortcut I alluded to earlier. The image library includes a save_image method that uses STL streams to write the image out to a file. A better solution would be to factor the save_image method to support saving a bitmap to a stream and then implementing an STL -&gt; WinRT stream adapter, but this is a simple demo so I’ll leave that as an exercise to the reader. (Please send me a pull request if you do this!)

First, we’re going to generate the file path we’ll be saving the image to. Turns out this somewhat difficult because WinRT uses wide character strings while the bitmap library expects ASCII STL strings.
<pre class="brush:cpp">//get the temp filename
auto tempFolder = ApplicationData::Current-&gt;TemporaryFolder;

wstring tempFolderPath(tempFolder-&gt;Path-&gt;Data());
string folderPath(begin(tempFolderPath), end(tempFolderPath));

auto filePath = folderPath.append("\\plasma.bmp");</pre>
I’m not proud of this code. It’s the kind of code you write when you’re rushing to get a demo for your talk done. But lets look at it anyway.

First, I get the path to the temporary folder via the <a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.storage.applicationdata.current.aspx">current</a> <a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.storage.applicationdata.aspx">ApplicationData</a> object. Then I converted it first to a std::wstring and then to a std::string. I probably could have created the std::string directly from the tempFolder variable, but using the begin and end iterators of the wstring is a clever hack I read somewhere online. Finally, I append the file name to the folder path to get the final file path name.

Next, we generate and save the plasma image. This code is lifted almost verbatim from the bitmap_test.cpp file that comes with the C++ image library. The only difference is that we’re using the width and height arguments as parameters to the bitmap_image constructor rather than hardcoded values.
<pre class="brush:cpp">//create the image object
bitmap_image image(width, height);
image.clear();

double c1 = 0.9;
double c2 = 0.5;
double c3 = 0.3;
double c4 = 0.7;

::srand(0xA5AA5AA5);

//generate plasma image
plasma(image, 0, 0, image.width(), image.height(),
    c1, c2, c3, c4, 3.0, jet_colormap);

//Save the image to the file
image.save_image(filePath);</pre>
Finally, we open the image file from the temporary folder using WinRT APIs. File access APIs in WinRT are exclusively async, so I’m using <a href="http://msdn.microsoft.com/en-us/library/hh750113(v=vs.110)">PPL tasks</a> to simplify the async code. Note, I’ve reworked this code from what I did in the video to make it easier to understand. I’ve also added explicit type declarations that I didn’t need to make it clear what each type is. If I replaced those all with the new auto keyword from C++11, the code would work the same.
<pre class="brush:cpp">//reopen the image file using WinRT
IAsyncOperation&lt;StorageFile^&gt;^ getFileAsyncOp = 
    tempFolder-&gt;GetFileAsync(ref new String(L"plasma.bmp"));

task&lt;StorageFile^&gt; getFileTask(getFileAsyncOp);

task&lt;IRandomAccessStream^&gt; openFileTask = 
    getFileTask.then([](StorageFile^ storageFile) {
       return storageFile-&gt;OpenAsync(FileAccessMode::Read);
    });

return create_async(
    [openFileTask]() { return openFileTask; });</pre>
First, we call GetFileAsync to get the file from the temp folder which returns an IAsyncOperation&lt;StorageFolder^&gt; object. We then convert the IAsyncOperation to a PPL task via the task constructor. Note, these two steps could be easily combined into a single step if you not being extra verbose for education purposes.

Once we have a PPL task to get the file, we specify the operation to do when the task completes by passing a lambda to the <a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh750044.aspx">task's then method</a>. In this case, we’re going to open the file after we get it. The then method is nice because we can chain together as many async operations as we want in a nearly-synchronous coding style.

Finally, once we have built up the PPL task that represents the entire asynchronous operation, we use the <a href="http://msdn.microsoft.com/en-us/library/hh750102(v=vs.110).aspx">create_async</a> method to convert the PPL task back to an IAsyncOperation which we return from the function.

Now that we have written the component side, lets update the client side. Async operations are very succinct in CLR because of the <a href="http://msdn.microsoft.com/en-us/library/hh191443(v=VS.110).aspx">new await keywords</a>. Much nicer than the .then model used by PPL (which is probably why Herb Sutter <a href="http://herbsutter.com/2012/04/06/we-want-await-a-c-talk-thats-applicable-to-c/">wants to see await added to C++</a>).
<pre class="brush:csharp">private async void Button_Click_1(object sender, RoutedEventArgs e)
{
    var wcc = new WindowsCampComponent.Class1();
    myText.Text = wcc.SayHello("Herb Sutter");

    var stm = await wcc.GetPlasmaImageAsync(800, 600);

    var bitmap = new BitmapImage();
    bitmap.SetSource(stm);
    myImage.Source = bitmap;
}</pre>
And it works!

<a href="http://devhawk.net/wp-content/uploads/2012/06/WCDemo2-RunningApp.png"><img class="alignnone size-medium wp-image-2015" title="WCDemo2-RunningApp" src="http://devhawk.net/wp-content/uploads/2012/06/WCDemo2-RunningApp-300x187.png" alt="" width="300" height="187" /></a>

And that’s the entire demo. About 20 lines of code to wrap a  pre-existing library function and make it available to other languages via the Windows Runtime. I showed calling my WinRT component from C# here, but I could have called it from JavaScript just as easily.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2012</wp:post_id>
		<wp:post_date>2012-06-24 20:15:24</wp:post_date>
		<wp:post_date_gmt>2012-06-25 03:15:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows-camp-demo-part-two</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-plus-plus"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="c-plus-plus-cx"><![CDATA[C++/cx]]></category>
		<category domain="post_tag" nicename="channel-9"><![CDATA[Channel 9]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="metro-style-apps"><![CDATA[Metro style apps]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="post_tag" nicename="windows-8"><![CDATA[Windows 8]]></category>
		<category domain="post_tag" nicename="windows-camp"><![CDATA[Windows Camp]]></category>
		<category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
		<category domain="post_tag" nicename="winrt-components"><![CDATA[WinRT Components]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ambiguous ExtensionAttribute Errors</title>
		<link>http://devhawk.net/2012/06/20/ambiguous-extensionattribute-errors/</link>
		<pubDate>Thu, 21 Jun 2012 03:46:59 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2023</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I was recently contacted by <a href="http://nathanaeljones.com/">Nathanael Jones</a> of the <a href="http://imageresizing.net/">ImageResizer project</a> about a <a href="http://stackoverflow.com/questions/11025100/escape-catch-22-with-extension-attributes-in-net-2-0">question</a> he had posted on Stack Overflow:</p>  <blockquote>   <p>How can a single .NET assembly, targeting 2.0, 3.0, 3.5, 4.0, and 4.5 concurrently, support extension methods for both C# and VB.NET consumers?</p> </blockquote>  <p><strong>Short Answer</strong>: <u><em>You can’t.</em></u> You think you can, but if you’re serious about targeting .NET 2.0/3.0 and 3.5+ as well as that whole C# and VB support thing, you can’t. Not really. </p>  <p><strong>Long Answer</strong>: People <em>love</em> extension methods. Seriously, I think some people want to marry extension methods they love them so much. They just can’t stand to be without their extension methods, even when they’re using .NET 2.0. </p>  <p>Rather than go without, <a href="http://www.danielmoth.com/Blog/Using-Extension-Methods-In-Fx-20-Projects.aspx">some</a> <a href="http://msdn.microsoft.com/en-us/magazine/cc163317.aspx#S7">people</a> <a href="http://www.codethinked.com/using-extension-methods-in-net-20">figured</a> <a href="http://kohari.org/2008/04/04/extension-methods-in-net-20/">out</a> how to get extension methods support on older versions of the .NET Runtime. Extension methods are essentially a compile time technology – the IL that gets emitted for calling an extension method is identical to the IL for calling a normal static method. The only runtime dependency for extension methods is the <a href="http://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.extensionattribute.aspx">ExtensionAttribute</a> which is used to mark methods intended to be used as extension methods (as well as classes and assemblies that contain them). ExtensionAttribute is defined in System.Core from .NET 3.5, but it’s just a marker. If you define your own copy of ExtensionAttribute and use the VS 2008 or later version of the C# compiler, you can get extension methods to work on .NET 2.0.</p>  <p>Back when I was working on IronPython, we ran into this exact issue when we merged DLR expression trees with LINQ expression trees. LINQ trees used extension methods all over the place, but we still needed to support .NET 2.0 in IronPython. We were already using the VS08 compiler so all we had to do was add our own copy of ExtensionAttribute to the DLR and we were good to go…or so we thought. Instead, <a href="http://devhawk.net/2008/09/17/dlr-namespace-change-fire-drill/">we discovered</a> that this approach doesn’t work as advertised - at least not if you care about VB support. </p>  <p>The problem stems from having multiple copies of ExtensionAttribute. IronPython and DLR had no problem – they were compiled for .NET 2.0 and thus had only the one copy of ExtensionAttribute that we added to the DLR. But people who used IronPython or DLR in a .NET 3.5 project ended up two copies of ExtensionAttribute – the copy we added to DLR and the official System.Core version. Two copies of a system provided type == start of a big problem.</p>  <p>Actually, if you’re only using C#, having multiple copies of ExtensionAttribute isn’t that big a deal. The C# compiler raises a <a href="http://msdn.microsoft.com/en-us/library/8xys0hxk.aspx">warning</a> when it find multiple definitions of a type in the System namespace. Because ExtensionAttribute is in the System namespace, C# has to pick one of the colliding type definitions to use. However, since the copies of ExtensionAttribute are identical it doesn’t matter which version the C# compiler picks.</p>  <p>Unfortunately, Visual Basic is much less forgiving when it encounters multiple versions of the same type. Instead of a warning like C#, the VB compiler raises an <a href="http://msdn.microsoft.com/en-us/library/8f0k13d2.aspx">error</a> when it encounters multiple definitions of ExtensionAttribute. So the “define your own ExtensionAttribute” approach leaves you with a DLL that won’t work from VB on .NET 3.5 or later.</p>  <p>Excluding VB on what was the most recent version of .NET at the time was a non starter for us, so we investigated other options. We discovered that we could “solve” this issue (again “or so we thought”) by having an internal definition of ExtensionAttribute in every assembly that needed it. Since the types weren’t public, VB stopped complaining about type collisions. C# still had the compiler warning, but we had already decided not to care about that. </p>  <p>I <a href="http://devhawk.net/2008/09/17/dlr-namespace-change-fire-drill/">said at the time</a> “It seems counterintuitive, doesn’t it? To solve a multiple type definition problem, we defined even more copies of the type in question.” Yeah, turns out I was kinda way wrong about that. We <a href="http://devhawk.net/2008/10/21/the-fifth-assembly/">discovered later</a> that having an internal ExtensionAttribute per project solved the VB ambiguous type error but introduced a new “break all the other extension methods in the project error”. </p>  <p>Remember earlier when I wrote it didn’t matter which copy of ExtensionAttribute the C# compiler picks because they are “identical”? Remember when I wrote we could solve the VB ambiguous type error by changing the visibility of ExtensionAttribute? Woops. Changing the visibility of our ExtensionAttribute meant it was no longer identical which meant it kinda mattered which copy of ExtensionAttribute the C# compiler choose. If the C# compiler picked one of our internal ExtensionAttributes, it would break every use of extension methods in the project referencing IronPython or the DLR! </p>  <p>We investigated a bunch of ways to control which version of ExtensionAttribute was selected by the C# compiler, but we couldn’t find an easy, obvious way in MSBuild to control the order of references passed to the compiler. In the end, we moved the custom ExtensionAttribute into its own DLL. That way, we could reference it from our IronPython and DLR projects to get extension method support but .NET 3.5 projects referencing either IronPython or DLR could reference System.Core instead. We still got the C# warning, but since we were back to identical ExtensionAttribute&#160; definitions, the warning could be ignored. </p>  <p>Believe me, if there had been any way to remove the extension methods from the DLR and IronPython, we would have done it. Having a separate assembly with just a single custom attribute definition is an ugly hack, pure and simple. But the DLR was essentially the .NET 4.0 version System.Core – getting it to run along side the .NET 3.5 version of System.Core was bound to require hacks. </p>  <p>My <a href="http://stackoverflow.com/a/11113191">advice to Nathanial on SO</a> was the same as I gave at the top of this post: don’t use the “define your own ExtensionAttribute” hack to try and get extension method support on .NET 2.0. Extensions methods are nice, but they aren’t worth the headache of dealing with the errors that stem from multiple definitions of ExtensionAttribute when you try to use your library from .NET 3.5 or later.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2023</wp:post_id>
		<wp:post_date>2012-06-20 20:46:59</wp:post_date>
		<wp:post_date_gmt>2012-06-21 03:46:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ambiguous-extensionattribute-errors</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="clr"><![CDATA[CLR]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="extension-methods"><![CDATA[Extension Methods]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[LINQ]]></category>
		<category domain="post_tag" nicename="visual-basic"><![CDATA[Visual Basic]]></category>
		<wp:comment>
			<wp:comment_id>3333</wp:comment_id>
			<wp:comment_author><![CDATA[jdhardy]]></wp:comment_author>
			<wp:comment_author_email>jdhardy@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jdhardy.ca</wp:comment_author_url>
			<wp:comment_author_IP>207.171.191.60</wp:comment_author_IP>
			<wp:comment_date>2012-06-22 10:23:01</wp:comment_date>
			<wp:comment_date_gmt>2012-06-22 17:23:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Newer versions of IronPython solve this problem by not supporting .NET 2. 3.5 is the minimum. I'd love to make it 4.0, but the mobile platforms aren't fully there yet.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340385781.7049";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Setup-PowerShell</title>
		<link>http://devhawk.net/?p=2036</link>
		<pubDate>Thu, 28 Jun 2012 06:51:37 +0000</pubDate>
		<dc:creator>devhawk</dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2036</guid>
		<description></description>
		<content:encoded><![CDATA[Working for the Windows team, I setup <em>lots</em> of Windows machines. Kinda the nature of the beast. In order to make this less of a hassle, I've got a variety of scripts to get a freshly paved machine into a state where I can actually <em>use</em> it.

One thing I use quite often is PowerShell. Getting PowerShell in a usable state on a machine means a few of different things. First off, I need to get my script library onto my newly paved machine. For me, this is drop dead easy because Microsoft uses <a href="http://technet.microsoft.com/en-us/library/bb742423.aspx">IntelliMirror</a> – my script library is just there when I log into a new machine with my domain credentials. If you're not using a domain or IntelliMirror, Peter Provost's recent <a href="•%09http:/www.peterprovost.org/blog/2012/04/20/mastering-my-machine-repaves-with-git-and-powershell/">Mastering My Machine Repaves With Git and PowerShell</a> looks like a great approach.

I don't have to do anything to get my scripts onto a new box, but I do still need to configure PowerShell to run those scripts. Out of the box, PowerShell has a <a href="http://msdn.microsoft.com/en-us/library/dd347641.aspx">restricted execution policy</a>. In order to have permission to run scripts, you have to use the <a href="http://technet.microsoft.com/en-us/library/hh849812.aspx">Set-ExecutionPolicy cmdlet</a> while running as admin. I got tired real quick of launching an elevated PowerShell console window and typing "Set-ExecutionPolicy RemoteSigned" over and over, so I put together the original version of my setup-powershell.bat script (which is <a href="https://skydrive.live.com/redir?resid=D9BC809858885A4!1154">up on my SkyDrive</a> along with some of my other PowerShell scripts)
<pre>
%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe -noprofile Set-ExecutionPolicy RemoteSigned -Force 

IF NOT EXIST %SystemRoot%\syswow64\WindowsPowerShell\v1.0\powershell.exe GOTO SkipWow64 

%SystemRoot%\syswow64\WindowsPowerShell\v1.0\powershell.exe -noprofile Set-ExecutionPolicy RemoteSigned -Force 
:SkipWow64 

PAUSE </pre>
<span style="font-family: Times New Roman; font-size: 12pt;">All I'm doing here is running PowerShell from the command line and passing in the simple PowerShell command "Set-ExecutionPolicy RemoteSigned –Force". I'm almost always running x64, so I set the execution policy for the default PowerShell as well as for the <a href="http://en.wikipedia.org/wiki/WoW64">Wow64</a> version of PowerShell if it's available (though I almost never use the x86 version). In order for this to work, I need to run the bat file as an admin, but that's easy to do from Explorer by right-clicking the .bat file and selecting "Run as administrator".
</span>

<span style="font-family: Times New Roman; font-size: 12pt;">So far so good, but it turns out I'm also kinda picky about my <a href="http://en.wikipedia.org/wiki/Win32_console">console window</a> settings. I know, I know - there are other, better console replacements like <a href="http://sourceforge.net/projects/console/">Console2</a> and <a href="http://code.google.com/p/conemu-maximus5/">ConEmu</a>. But frankly I'm used to the Windows console and haven't ever taken the time to really put one of these other console replacements thru its paces. ConEmu has had <a href="http://www.hanselman.com/blog/ConEmuTheWindowsTerminalConsolePromptWeveBeenWaitingFor.aspx">its praises sung</a> by Scott "Ultimate Tool List" Hanselman, so maybe I'll give it a try. In the meantime, there's the issue of Windows console settings.
</span>

<span style="font-family: Times New Roman; font-size: 12pt;">Configuring the Windows console settings is kinda messy. First off, there are the <a href="http://technet.microsoft.com/en-us/library/cc978570">default console settings</a> in the registry. Those are easy enough to set via PowerShell.
</span>
<pre><code>Set-ItemProperty -path HKCU:\Console -name QuickEdit -value 1 </code></pre>
<pre><code>Set-ItemProperty -path HKCU:\Console -name FaceName -value Consolas </code></pre>
<pre><code>Set-ItemProperty -path HKCU:\Console -name FontFamily -value 54 </code></pre>
<pre><code>Set-ItemProperty -path HKCU:\Console -name FontSize -value 0x100000 </code></pre>
<pre><code> #ScreenBufferSize 120 w x 3000 h </code></pre>
<pre><code>Set-ItemProperty -path HKCU:\Console -name ScreenBufferSize 0xbb80078 </code></pre>
<pre><code> #WindowSize 120 w x 40 h </code></pre>
<pre><code>Set-ItemProperty -path HKCU:\Console -name WindowSize 0x280078 </code></pre>
<span style="font-family: Times New Roman; font-size: 12pt;">However, it turn out there are two way to override the default console settings. First, you can add subkeys to the HKCU:\Console registry key to specify additional overriding console settings. Additionally, you can specify console settings directly in the shortcut files (aka the .lnk files from the traditional Start Menu). Frankly, I don't want all this customization of console windows – I want them all to be the same other than the window title and background color, which I set in my $profile script.
</span>

&nbsp;

&nbsp;

<span style="font-family: Times New Roman; font-size: 12pt;">Also, I'm very picky about my console settings – the font, the window size, the buffer size, yada yada yada.
</span>

&nbsp;

&nbsp;

&nbsp;

<span style="font-family: Times New Roman; font-size: 12pt;">There are two aspects to this script:
</span>
<ul>
	<li><span style="font-family: Times New Roman; font-size: 12pt;">Configuring PowerShell's execution policy
</span></li>
	<li><span style="font-family: Times New Roman; font-size: 12pt;">Configuring Windows' built-in Console app settings (font, window size, etc)
</span></li>
</ul>
<span style="font-family: Times New Roman; font-size: 12pt;">For execution policy, I configure both the main PowerShell version as well as the WOW64 version to use <a href="http://technet.microsoft.com/en-us/library/ee176961.aspx"><span style="color: blue; text-decoration: underline;">RemoteSigned execution policy</span></a>
</span>

<span style="font-family: Times New Roman; font-size: 12pt;">For console settings, I set the defaults in HKCU:\Console, remove any app-specific console settings under HKCU:\Console and iterate over the all the .lnk files in the start menu and remove their console data block via <a href="http://msdn.microsoft.com/en-us/library/bb774918.aspx"><span style="color: blue; text-decoration: underline;">IShellLinkDataList::RemoveDataBlock</span></a>. Yes, I realize that there are other, better console replacements out there. But it's easier for me to setup the built-in console app the way I like it when I set the PowerShell execution policy rather than always install a new console app on every fresh install.
</span>

<span style="font-family: Times New Roman; font-size: 12pt;">In order to make this script runnable on a fresh Windows install, I'm using a batch file rather than a PowerShell script. It's easy to right-click on the setup-powershell.bat file and select "Run as administrator" from the context menu. However, the code to configure the console settings is all PowerShell (including embedded C# to interact with the IShellLinkDataList COM object). I want a single file solution but I also want to be able to edit and test my PowerShell separately. So I wrote a little build script that takes my console management scripts, encodes them as base64 and concatenates the scripts into a single bat file.
</span>

<span style="font-family: Times New Roman; font-size: 18pt;"><strong><a name="to-use"></a>To Use
</strong></span>

<span style="font-family: Times New Roman; font-size: 12pt;">Run build.ps1 from a PowerShell console window. The result is setup-powershell.bat without external dependencies that you can run on both x86 and x64 Windows machines.
</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2036</wp:post_id>
		<wp:post_date>2012-06-27 23:51:37</wp:post_date>
		<wp:post_date_gmt>2012-06-28 06:51:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
