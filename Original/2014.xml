<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.8.4" created="2014-09-26 03:49" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>DevHawk</title>
	<link>http://devhawk.net</link>
	<description>Passion * Technology * Ruthless Competence</description>
	<pubDate>Fri, 26 Sep 2014 03:49:56 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://devhawk.net</wp:base_site_url>
	<wp:base_blog_url>http://devhawk.net</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>devhawk</wp:author_login><wp:author_email>harry@devhawk.net</wp:author_email><wp:author_display_name><![CDATA[DevHawk]]></wp:author_display_name><wp:author_first_name><![CDATA[Harry]]></wp:author_first_name><wp:author_last_name><![CDATA[Pierson]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>dale</wp:author_login><wp:author_email>dale@microsoft.com</wp:author_email><wp:author_display_name><![CDATA[Dale Churchward]]></wp:author_display_name><wp:author_first_name><![CDATA[Dale]]></wp:author_first_name><wp:author_last_name><![CDATA[Churchward]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.8.4</generator>

	<item>
				<title>Putting the “Dev” Back in DevHawk</title>
		<link>http://devhawk.net/2014/02/14/putting-the-dev-back-in-devhawk/</link>
		<pubDate>Fri, 14 Feb 2014 22:59:58 +0000</pubDate>
		<dc:creator><![CDATA[devhawk]]></dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2059</guid>
		<description></description>
		<content:encoded><![CDATA[I’ve done a lot of different jobs in my 15+ years at Microsoft. All of them have been development related in one way or another. Development consulting, developer evangelism, architecture evangelism, IT architect, etc. For the past six years, I’ve been a program manager for a developer related technology - first for <a href="http://devhawk.net/2008/03/11/joining-the-dynamic-languages-team/">IronPython</a> and later for <a href="http://devhawk.net/2009/10/26/joining-windows/">Windows Runtime</a>.

It’s been a good run, but I’m taking the opportunity to move from a “development related” job to just being a pure developer.

I can’t talk much the new gig, other than to say I am working with an all-star cast of braniacs including the likes of <a href="http://joeduffyblog.com/">Joe Duffy</a>, <a href="http://blogs.msdn.com/b/toub/">Stephen Toub</a>, <a href="http://blog.adamnathan.net/">Adam Nathan</a> and <a href="http://blogs.msdn.com/b/kcwalina/">Krzysztof Cwalina</a>. Just the knowledge osmosis opportunity alone is enough to make my head spin. Luckily, after four years on the Windows Runtime team, I'm already quite used to working around a bunch of braniacs - though arguably a less well known in the community bunch once you get beyond than the unestimable <a href="http://blogs.msdn.com/b/larryosterman/">Larry Osterman</a>.

As for this blog, I <em>hope</em> to be blogging more in the future. No promises, but certainly I can’t blog much less than I have for the past several years (<a href="http://devhawk.net/2013/">zero posts for all of 2013</a> is kind of depressing). In particular, I've been away from production development for many, many, <em>many </em>years so I figure there is lots of interesting topics to focus on as I make this transition. In particular, I don't have a classic "algorithms and data structures" computer science background. Based on the interview questions I got - all related to linked lists and binary search trees - I'm guessing this is an area where I really need to sharpen the saw.

Hope you all have liked the various technology I've worked on so far. Here's hoping you like what comes next even more.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2059</wp:post_id>
		<wp:post_date>2014-02-14 14:59:58</wp:post_date>
		<wp:post_date_gmt>2014-02-14 22:59:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>putting-the-dev-back-in-devhawk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="working-at-msft"><![CDATA[Working at MSFT]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>layout_key</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_slider_check_key</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3597</wp:comment_id>
			<wp:comment_author><![CDATA[Scott Slack]]></wp:comment_author>
			<wp:comment_author_email>kd7vbs@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.84.54.68</wp:comment_author_IP>
			<wp:comment_date>2014-02-15 19:05:12</wp:comment_date>
			<wp:comment_date_gmt>2014-02-16 03:05:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm looking forward to some great code!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392519912.0727379322052001953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392520136.72834110260009765625;s:7:"message";s:46:"devhawk changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Blood Sweat &amp; Code</title>
		<link>http://devhawk.net/2014/04/02/blood-sweat-code/</link>
		<pubDate>Wed, 02 Apr 2014 19:17:52 +0000</pubDate>
		<dc:creator><![CDATA[devhawk]]></dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2065</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://devhawk.net/wp-content/uploads/2014/04/CNN.jpg"><img class="wp-image-2068 alignleft" alt="CNN" src="http://devhawk.net/wp-content/uploads/2014/04/CNN-300x190.jpg" width="300" height="190" /></a>Today was a *<strong>HUGE</strong>* thrill as I got to present in the keynote at <a href="http://www.buildwindows.com/">//build</a>! I'll have more on the specifics of Brokered WinRT Components later after my session, but apparently quite a big deal was made of my shirt. I ended up as an <a href="http://cheezburger.com/8132467456">internet meme </a>and on the <a href="http://cnntechlive.cnn.com/Event/Microsoft_Build_keynote_3/111712554">CNN Live Blog</a>!

A long, long time ago (back when I wrote Photoshop Plugins for Mac long before I joined Microsoft), I had a <a href="http://en.wikipedia.org/wiki/CodeWarrior">Metrowerks CodeWarrior </a>t-shirt with the "Blood Sweat &amp; Code" slogan on the back. I loved that slogan, but lost the shirt somewhere along the way. So a few months ago, I decided to make a new one - but this time with the purple and blue of Visual Studio's brand instead of CodeWarrior yellow. When I got a chance to be a part of the //build keynote today, I figured it was a good wardrobe choice.

For those who want one of their own, I posted the <a href="http://www.zazzle.com/blood_sweat_code_shirt-235243653937823200">design on Zazzle</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2065</wp:post_id>
		<wp:post_date>2014-04-02 12:17:52</wp:post_date>
		<wp:post_date_gmt>2014-04-02 19:17:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blood-sweat-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="build"><![CDATA[//build]]></category>
		<category domain="category" nicename="general-geekery"><![CDATA[General Geekery]]></category>
		<category domain="post_tag" nicename="t-shirts"><![CDATA[t-shirts]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>layout_key</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_slider_check_key</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3657</wp:comment_id>
			<wp:comment_author><![CDATA[Mahesh]]></wp:comment_author>
			<wp:comment_author_email>maheshp@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>50.46.145.95</wp:comment_author_IP>
			<wp:comment_date>2014-04-02 18:18:10</wp:comment_date>
			<wp:comment_date_gmt>2014-04-03 01:18:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congrats, Harry!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396487890.087872028350830078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396625634.50938701629638671875;s:7:"message";s:46:"devhawk changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Enterprise WinRT Apps Build Roundup</title>
		<link>http://devhawk.net/2014/04/04/enterprise-winrt-apps-build-roundup/</link>
		<pubDate>Fri, 04 Apr 2014 15:40:18 +0000</pubDate>
		<dc:creator><![CDATA[devhawk]]></dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2071</guid>
		<description></description>
		<content:encoded><![CDATA[Wow, it's been a whirlwind couple of days down here in San Francisco @ <a href="http://www.buildwindows.com/">Build 2014</a>. It has certainly been a huge thrill for me, getting a chance to be a part of the day one keynote and <a href="http://devhawk.net/2014/04/02/blood-sweat-code/">getting 15 minutes of fame</a>. However, as the conference winds down I wanted to pull together a summary of the stuff Microsoft announced that relates to enterprise app development and Windows 8.1 Update. I mean, it wasn't all about my wardrobe choices…

The Windows for Business blog as a <a href="http://blogs.windows.com/windows/b/business/archive/2014/04/02/building-the-mobile-workplace-with-windows-and-windows-phone.aspx">good summary post</a> that hits the highlights. The stuff I wanted to specifically call out is:
<ul>
	<li>We've changed the policy to allow side loaded apps to communicate with desktop apps. Literally every single enterprise customer, Microsoft dev consultant and enterprise technical sales rep I've spoken to in the last year has asked for this.</li>
	<li>We've added a feature in Windows 8.1 Update to enable side loaded apps to run code outside of the App Container. This opens up side loaded apps to access the full power of Windows as well as all the existing code the enterprise may have in its portfolio</li>
	<li>We've made it significantly easier to get side load rights. I'd go thru the specifics here, but Rocky Lhotka (who has been *very* vocal about the issues in this space) had a <a href="http://www.lhotka.net/weblog/Windows8SideLoadingImprovements.aspx">great summary</a>: "For a maximum of around $100 virtually every organization (small to huge) can get a side loading unlock key for all their devices."</li>
</ul>
If you want more information on how to take advantage of these new features for side loaded apps, here are some resources for you:
<ul>
	<li>In addition to my 5 minutes in the keynote, I did a <a href="http://channel9.msdn.com/Events/Build/2014/2-515">whole session</a> where I drilled into more details on that demo. I also demos that used network loopback for interprocess communication.</li>
	<li>John Vintzel and Cliff Strom had a session on <a href="http://channel9.msdn.com/Events/Build/2014/2-524">deploying enterprise apps</a>. As of this writing, the video isn't online yet but it will be within a day or two at that URL.</li>
	<li>We have published whitepapers on both <a href="http://msdn.microsoft.com/en-us/library/windows/apps/dn630195.aspx">Brokered WinRT Components</a> and <a href="http://msdn.microsoft.com/en-us/library/windows/apps/dn640582.aspx">using network loopback in WinRT apps</a> that go into more details on how to build solutions with this technology</li>
	<li>Last but not least, we have a set of <a href="http://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=Topic&amp;f%5B0%5D.Value=Sideloading&amp;f%5B0%5D.Text=Sideloading">samples of sideloaded WinRT apps</a>. This includes the keynote demo, another brokered component demo and the WCF &amp; ASP.NET network loopback demos I did in my session. Note, the <a href="http://code.msdn.microsoft.com/Northwind-Brokered-WinRTC-5143a67c">keynote demo sample</a> is packaged oddly because of the way MSDN's sample repo handles (or in this case doesn't handle) VS solutions with multiple projects. When I get back to Redmond, I'm  going to see if there's a better way to get this sample hosted.</li>
</ul>
I heard many times over the past two days from folks in person at the conference and via email, twitter, facebook, carrier pigeon, etc just how excited they are about these changes &amp; features. As an engineer who spends most of his days in his office and or in meetings building this stuff, it is amazingly gratifying to hear directly from our users how much our work can help them.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2071</wp:post_id>
		<wp:post_date>2014-04-04 08:40:18</wp:post_date>
		<wp:post_date_gmt>2014-04-04 15:40:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>enterprise-winrt-apps-build-roundup</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="brokered-components"><![CDATA[brokered components]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="network-loopback"><![CDATA[network loopback]]></category>
		<category domain="post_tag" nicename="sideload"><![CDATA[sideload]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>layout_key</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_slider_check_key</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3659</wp:comment_id>
			<wp:comment_author><![CDATA[Alex Kovacs]]></wp:comment_author>
			<wp:comment_author_email>alex.kovacs@cirrus.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>166.137.208.19</wp:comment_author_IP>
			<wp:comment_date>2014-04-04 10:39:23</wp:comment_date>
			<wp:comment_date_gmt>2014-04-04 17:39:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is great! It means the voices of IHV / ISV's are being heard.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396633163.5725910663604736328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396633684.1175920963287353515625;s:7:"message";s:46:"devhawk changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3675</wp:comment_id>
			<wp:comment_author><![CDATA[Nick Savenko]]></wp:comment_author>
			<wp:comment_author_email>inci@dezcom.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>139.130.247.194</wp:comment_author_IP>
			<wp:comment_date>2014-04-09 17:18:47</wp:comment_date>
			<wp:comment_date_gmt>2014-04-10 00:18:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Harry!
Thank you for the great session.
When will new template be released for broked WinRT component?

Thanks
Nick]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1397089127.9835340976715087890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1397256293.125216007232666015625;s:7:"message";s:46:"devhawk changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3680</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>131.107.192.228</wp:comment_author_IP>
			<wp:comment_date>2014-04-11 15:45:10</wp:comment_date>
			<wp:comment_date_gmt>2014-04-11 22:45:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Not sure, my old team owns this feature now. Soon I hope!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3675</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1397256310.9987640380859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Brokered Component Wake On Callback Demo Video</title>
		<link>http://devhawk.net/2014/04/11/brokered-component-wake-on-callback-demo-video/</link>
		<pubDate>Fri, 11 Apr 2014 22:43:51 +0000</pubDate>
		<dc:creator><![CDATA[devhawk]]></dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2076</guid>
		<description></description>
		<content:encoded><![CDATA[As you might imagine, I had a pretty amazing time @ <a href="http://channel9.msdn.com/Events/Build/2014/">Build</a>. The only thing that went wrong all week was when one of my demos in <a href="http://channel9.msdn.com/Events/Build/2014/2-515">my session </a>failed. It's was pretty cool demo - the brokered WinRT component fires an event which wakes up a suspended WinRT app for a few seconds to process the event. However, I had shut off toast notifications on my machine, which messed up the demo. So here, for your enjoyment, is a short 3 minute video of the working demo.

<iframe style="width: 870px; height: 490px;" src="http://channel9.msdn.com/blogs/HarryPierson/Brokered-WinRT-Components-Wake-On-Callback-Demo/player?h=490&amp;w=870" height="240" width="320" allowfullscreen="" frameborder="0" scrolling="no"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2076</wp:post_id>
		<wp:post_date>2014-04-11 15:43:51</wp:post_date>
		<wp:post_date_gmt>2014-04-11 22:43:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>brokered-component-wake-on-callback-demo-video</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="brokered-components"><![CDATA[brokered components]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="sideload"><![CDATA[sideload]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>layout_key</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_slider_check_key</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>An Architecture Aware VsVars.ps1</title>
		<link>http://devhawk.net/2014/04/11/an-architecture-aware-vsvars-ps1/</link>
		<pubDate>Sat, 12 Apr 2014 01:28:55 +0000</pubDate>
		<dc:creator><![CDATA[devhawk]]></dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2081</guid>
		<description></description>
		<content:encoded><![CDATA[Like many in the Microsoft dev community, I'm a heavy user of <a href="http://www.visualstudio.com">Visual Studio</a> and <a href="http://microsoft.com/powershell">Powershell</a>. And so, of course, I've been a heavy user <a href="http://www.tavaresstudios.com/Blog/post/The-last-vsvars32ps1-Ill-ever-need.aspx">Chris Tavares' vsvars32.ps1 script</a>. However, recently I needed the ability to specify my desired processor architecture when setting up a VS command line session. Unfortunately, Chris's script wraps vsvars32.bat which only supports generating 32-bit apps. Luckily, VC++ includes a vcvarsall.bat script that let's you specify processor architecture. So I updated my local copy of <a href="http://1drv.ms/1kf8g9I">vsvars.ps1 </a>to use vcvarsall.bat under the hood and added an -x64 switch to enable setting up a 64-bit command line environment. Vcvarsall.bat supports a <a href="http://msdn.microsoft.com/en-us/library/x4d2c09s.aspx">variety of additional options</a>, but 64-bit support is all I needed so that's all I added. I didn't change the name of the script because there's WAY too much muscle memory associated with typing "vsvars" to bother changing that now.

If you want it, you can get my architecture aware version of vsvars.ps1 from my OneDrive here: <a href="http://1drv.ms/1kf8g9I">http://1drv.ms/1kf8g9I</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2081</wp:post_id>
		<wp:post_date>2014-04-11 18:28:55</wp:post_date>
		<wp:post_date_gmt>2014-04-12 01:28:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>an-architecture-aware-vsvars-ps1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="command-line"><![CDATA[command line]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="vsvars"><![CDATA[vsvars]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>layout_key</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_slider_check_key</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[an-architecture-aware-vsvars]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3705</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; The Return &#8211; April 22, 2014 (#1760) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2014/04/22/dew-drop-the-return-april-22-2014-1760/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.50.182</wp:comment_author_IP>
			<wp:comment_date>2014-04-22 06:26:05</wp:comment_date>
			<wp:comment_date_gmt>2014-04-22 13:26:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] An Architecture Aware VsVars.ps1 (Harry Pierson) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398173165.666408061981201171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398175440.9819469451904296875;s:7:"message";s:46:"devhawk changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Brokered WinRT Components Step-by-Step</title>
		<link>http://devhawk.net/2014/04/25/brokered-winrt-components-step-by-step/</link>
		<pubDate>Fri, 25 Apr 2014 15:40:08 +0000</pubDate>
		<dc:creator><![CDATA[devhawk]]></dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2086</guid>
		<description></description>
		<content:encoded><![CDATA[Based on the feedback I’ve gotten since my <a href="http://channel9.msdn.com/Events/Build/2014/KEY01#time=1h35m39s">keynote appearance @ Build</a> – both in person and via email &amp; twitter – there are a lot of folks who are excited about the Brokered WinRT Component feature. However, I’ve been advising folks to hold off a bit until the new VS templates were ready. Frankly, the developer experience for this feature is a bit rough and the VS template makes the experience much better. Well, hold off no longer! My old team has published the <a href="http://visualstudiogallery.msdn.microsoft.com/527286e4-b06a-4234-adde-d313c9c3c23e">Brokered WinRT Component Project Templates</a> up on the <a href="http://visualstudiogallery.msdn.microsoft.com/">Visual Studio Gallery</a>!

Now that the template is available, I’ve written a step-by-step guide demonstrating how to build a “Hello World” style brokered component. Hopefully, this will help folks in the community take advantage of this cool new feature in Windows 8.1 Update.

To keep it readable, I’ve broken it into three separate posts:
<ul>
	<li><a href="http://devhawk.net/2014/04/25/brokered-winrt-components-step-one">Step One – Build the brokered WinRT component</a></li>
	<li><a href="http://devhawk.net/2014/04/25/brokered-winrt-components-step-two">Step Two – Build the proxy/stub</a></li>
	<li><a href="http://devhawk.net/2014/04/25/brokered-winrt-components-step-three">Step Three – Build the client WinRT app</a></li>
</ul>
Note, this walkthrough assumes you’re running Windows 8.1 Update, Visual Studio 2013 with <a href="http://www.visualstudio.com/en-us/news/2014-apr-2-vs#VS2013Update2RC">Update 2 RC</a> (or later) and the <a href="http://visualstudiogallery.msdn.microsoft.com/527286e4-b06a-4234-adde-d313c9c3c23e">Brokered WinRT Component Project Templates</a> installed.

I hope this series helps you take advantage of brokered WinRT components. If you have any further questions, feel free to <a href="mailto:harry.pierson@microsoft.com">drop me an email</a> or <a href="https://twitter.com/devhawk">hit me up on Twitter</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2086</wp:post_id>
		<wp:post_date>2014-04-25 08:40:08</wp:post_date>
		<wp:post_date_gmt>2014-04-25 15:40:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>brokered-winrt-components-step-by-step</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="brokered-components"><![CDATA[brokered components]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="sideload"><![CDATA[sideload]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>layout_key</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_slider_check_key</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Brokered WinRT Components Step One</title>
		<link>http://devhawk.net/2014/04/25/brokered-winrt-components-step-one/</link>
		<pubDate>Fri, 25 Apr 2014 15:41:29 +0000</pubDate>
		<dc:creator><![CDATA[devhawk]]></dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2088</guid>
		<description></description>
		<content:encoded><![CDATA[In this step, we’ll build the brokered component itself. Frankly, the only thing that makes a brokered component different than a normal WinRT component is some small tweaks to the project file to enable access to the full .NET Runtime and Base Class Library. The <a href="http://msdn.microsoft.com/en-us/library/windows/apps/dn630195.aspx">brokered component whitepaper</a> describes the these tweaks in detail, but the new <a href="http://visualstudiogallery.msdn.microsoft.com/527286e4-b06a-4234-adde-d313c9c3c23e">brokered component template</a> takes care of these small tweaks for you.

<a href="http://devhawk.net/wp-content/uploads/2014/04/BRT_NewProject.png"><img class="wp-image-2096 alignleft" alt="BRT_NewProject" src="http://devhawk.net/wp-content/uploads/2014/04/BRT_NewProject-300x207.png" width="180" height="124" /></a>Start by selecting File -&gt; New -&gt; Project in Visual Studio. With the sheer number of templates to choose from these days, I find it’s easier to just search for the one I want. Type “broker” in the search box in the upper left, you’ll end up with two choices – the brokered WinRT component and the brokered WinRT proxy/stub. For now, choose the brokered component. We’ll be adding a brokered proxy/stub <a href="http://devhawk.net/2014/04/25/brokered-winrt-components-step-two">in step two</a>. Name the project whatever you want. I named mine “HelloWorldBRT”.

This is probably the easiest step of the three as there’s nothing really special you have to do – just write managed code like you always do. In my keynote demo, this is where I wrote the code that wrapped the existing ADO.NET based data access library. For the purposes of this walkthrough, let’s do something simpler. We’ll use P/Invoke to retrieve the current <a href="http://msdn.microsoft.com/en-us/library/windows/apps/ms683180.aspx">process</a> and <a href="http://msdn.microsoft.com/en-us/library/windows/apps/ms683183.aspx">thread</a> IDs. These Win32 APIs are <a href="http://msdn.microsoft.com/en-us/library/windows/apps/br205762.aspx">supported for developing WinRT apps</a> and will make it obvious that the component is running in a separate process than the app. Here’s the simple code to retrieve those IDs (hat tip to <a href="http://www.pinvoke.net">pinvoke.net</a> for the interop signatures):
<pre class="brush:csharp">public sealed class Class
{
    [DllImport("kernel32.dll")]
    static extern uint GetCurrentThreadId();

    [DllImport("kernel32.dll")]
    static extern uint GetCurrentProcessId();

    public uint CurrentThreadId
    {
        get { return GetCurrentThreadId(); }
    }

    public uint CurrentProcessId
    {
        get { return GetCurrentProcessId(); }
    }
}</pre>
That’s it! I didn’t even bother to change the class name for this simple sample.

Now, to be clear, there’s no reason why this code needs to run in a broker process. As I pointed out, the Win32 functions I’m wrapping here are supported for use in Windows Store apps. For this walkthrough, I’m trying to keep the code simple in order to focus on the specifics of building brokered components. If you want to see an example that actually leverages the fact that it’s running outside of the App Container, check out the NorthwindRT sample.

In the <a href="http://devhawk.net/2014/04/25/brokered-winrt-components-step-two">next step</a>, we'll add the proxy/stub that enables this component to communicate across a process boundary.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2088</wp:post_id>
		<wp:post_date>2014-04-25 08:41:29</wp:post_date>
		<wp:post_date_gmt>2014-04-25 15:41:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>brokered-winrt-components-step-one</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="brokered-components"><![CDATA[brokered components]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="sideload"><![CDATA[sideload]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>layout_key</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_slider_check_key</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3715</wp:comment_id>
			<wp:comment_author><![CDATA[ErikEJ]]></wp:comment_author>
			<wp:comment_author_email>ejlskov@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://erikej.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>87.60.112.89</wp:comment_author_IP>
			<wp:comment_date>2014-04-26 01:58:31</wp:comment_date>
			<wp:comment_date_gmt>2014-04-26 08:58:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great walkthrough, thanks, finally I feel confident to get started with this feature not being a C++ developer.

I the demo and whitepaper you mention implementing interfaces and adhering to async in the brokered component - is this just recommended or a requirement?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398502711.9225940704345703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398521530.79312801361083984375;s:7:"message";s:46:"devhawk changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3716</wp:comment_id>
			<wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
			<wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>73.53.36.104</wp:comment_author_IP>
			<wp:comment_date>2014-04-26 07:15:20</wp:comment_date>
			<wp:comment_date_gmt>2014-04-26 14:15:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Implementing interfaces and marking them as [ComVisible(true)] is not needed. The managed compilers automatically generate the interfaces under the hood as needed.

Using async is highly recommended to avoid blocking the UI thread. As I showed in the NorthwindRT demo, it's fairly easy to take a synchronous method call, wrap in in a .NET Task and then project the task as an WinRT IAsyncOperation.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3715</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398521720.9800779819488525390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Brokered WinRT Components Step Two</title>
		<link>http://devhawk.net/2014/04/25/brokered-winrt-components-step-two/</link>
		<pubDate>Fri, 25 Apr 2014 15:43:35 +0000</pubDate>
		<dc:creator><![CDATA[devhawk]]></dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2093</guid>
		<description></description>
		<content:encoded><![CDATA[Now that we have built the brokered component , we have to build a proxy/stub for it. Proxies and stubs are how WinRT method calls are marshalled across process boundaries. If you want to know more – or you have insomnia – feel free to read <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms692621(v=vs.85).aspx">all the gory details up on MSDN</a>.

Proxies and stubs look like they might be scary, but they’re actually trivial (at least in the brokered component scenario) because 100% of the code is generated for you. It couldn’t be much easier.

Right click the solution node and select Add -&gt; New Project. Alternatively, you can select File -&gt; New -&gt; Project in the Visual Studio main menu, but if you do that make sure you change the default solution from “Create new Solution” to “Add to Solution”. Regardless of how you launch the new project wizard, search for “broker” again, but this time select the “Brokered Windows Runtime ProxyStub” template. Give the project a name - I chose “HelloWorldBRT.PS”.

<a href="http://devhawk.net/wp-content/uploads/2014/04/ProxyStubAddReference.png"><img class="alignleft  wp-image-2099" alt="ProxyStubAddReference" src="http://devhawk.net/wp-content/uploads/2014/04/ProxyStubAddReference-300x174.png" width="180" height="104" /></a>Once you’ve created the proxy/stub project, you need to set a reference to the brokered component you created in step 1. Since proxies and stubs are native, this is a VC++ project. Adding a reference in a VC++ is not as straightforward as it is in C# projects. Right click the proxy/stub project, select “Properties” and then select Common Properties -&gt; References from the tree on the left. Press the “Add New Reference…” button to bring up the same Add Reference dialog you’ve seen in managed code projects. Select the brokered component project and press OK.

Remember when I said that 100% of the code for the proxy/stub is generated? I wasn’t kidding – creating the template and setting referencing the brokered component project is literally all you need to do. Want proof? Go ahead and build now. If you watch the output windows, you’ll see a bunch of output go by referencing IDL files and MIDLRT among other stuff. This proxy/stub template has some custom MSBuild tasks that generates the proxy/stub code using winmdidl and midlrt. The process is similar to what is <a href="http://msdn.microsoft.com/en-us/library/dn481253.aspx">described here</a>. BTW, if you get a chance, check out the proxy/stub project file – it is a work of art. Major props to <a href="http://www.linkedin.com/pub/kieran-mockford/4/77/110">Kieran Mockford</a> for his msbuild wizardry.

<a href="http://devhawk.net/wp-content/uploads/2014/04/ProxyStubRegisterOutput.png"><img class="alignright  wp-image-2100" alt="ProxyStubRegisterOutput" src="http://devhawk.net/wp-content/uploads/2014/04/ProxyStubRegisterOutput-300x174.png" width="180" height="104" /></a>Unfortunately, it’s not enough just to build the proxy/stub – you also have to register it. The brokered component proxy/stub needs to be registered globally on the machine, which means you have to be running as an admin to do it. VS can register the proxy/stub for you automatically, but that means you have to run VS as an administrator. That always makes me nervous, but if you’re OK with running as admin you can enable proxy/stub registration by right clicking the proxy/stub project file, selecting Properties, navigating to Configuration properties -&gt; Linker -&gt; General in the tree of the project properties page, and then changing Register Output to “Yes”.

If you don’t like running VS as admin, you can manually register the proxy/stub by running “regsvr32 &lt;proxystub dll&gt;” from an elevated command prompt. Note, you do have to re-register every time the public surface area of your brokered component changes so letting VS handle registration admin is definitely the easier route to go.

In the <a href="http://devhawk.net/2014/04/25/brokered-winrt-components-step-three">third and final step</a>, we'll build a client app that accesses our brokered component.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2093</wp:post_id>
		<wp:post_date>2014-04-25 08:43:35</wp:post_date>
		<wp:post_date_gmt>2014-04-25 15:43:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>brokered-winrt-components-step-two</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="brokered-components"><![CDATA[brokered components]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="sideload"><![CDATA[sideload]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>layout_key</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_slider_check_key</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Brokered WinRT Components Step Three</title>
		<link>http://devhawk.net/2014/04/25/brokered-winrt-components-step-three/</link>
		<pubDate>Fri, 25 Apr 2014 15:45:36 +0000</pubDate>
		<dc:creator><![CDATA[devhawk]]></dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2102</guid>
		<description></description>
		<content:encoded><![CDATA[So far, we've created two projects, written all of about two lines of code and we have both our <a href="http://devhawk.net/2014/04/25/brokered-winrt-components-step-one">brokered component </a>and its <a href="http://devhawk.net/2014/04/25/brokered-winrt-components-step-two">proxy/stub</a> ready to go. Now it’s time to build the Windows Runtime app that uses the component. So far, things have been pretty easy – the only really tricky and/or manual step so far has been registering the proxy/stub, and that’s only tricky if you don’t want to run VS as admin. Unfortunately, tying this all together in the app requires a few more manual steps.

But before we get to the manual steps, let’s create the WinRT client app. Again, we’re going to create a new project but this time we’re going to select “Blank App (Windows)” from the Visual C# -&gt; Store Apps -&gt; Windows App node of the Add New Project dialog. Note, I’m not using “Blank App (Universal)” or “Blank App (Windows Phone)” because the brokered WinRT component feature is not support on Windows Phone. Call the client app project whatever you like, I’m calling mine “HelloWorldBRT.Client”.

Before we start writing code, we need to reference the brokered component. We can't reference the brokered component directly or it will load in the sandboxed app process. Instead, the app need to reference a reference assembly version of the .winmd that gets generated automatically by the proxy/stub project. Remember in the <a href="http://devhawk.net/2014/04/25/brokered-winrt-components-step-two">last step </a>when I said Kieran Mockford is an MSBuild wizard? The proxy/stub template project includes a custom target that automatically publishes the reference assembly winmd file used by the client app. When he showed me that, I was stunned - as I said, the man is a wizard. This means all <em>you</em> need to do is right click on the References node of the WinRT Client app project and select Add Reference. In the Reference Manager dialog, add a reference to the proxy/stub project you created in step two.

Now I can add the following code to the top of my App.OnLaunched function. Since this is a simple Hello World walkthru, I’m not going to bother to build any UI. I’m just going to inspect variables in the debugger. Believe me, the less UI I write, the better for everyone involved. Note, I’ve also added the P/Invoke signatures for GetCurrentProcess/ThreadID and to the client app like I did in the brokered component in <a href="http://devhawk.net/2014/04/25/brokered-winrt-components-step-one">step one</a>. This way, I can get the process and thread IDs for both the app and broker process and compare them.
<pre class="brush:csharp">var pid = GetCurrentProcessId();
var tid = GetCurrentThreadId();

var c = new HelloWorldBRT.Class();
var bpid = c.CurrentProcessId;
var btid = c.CurrentThreadId;</pre>
At this point the app will compile, but if I run it the app will throw a TypeLoadException when it tries to create an instance of HelloWorldBRT.Class. The type can’t be loaded because the we're using the reference assembly .winmd published by the proxy/stub project - it has no implementation details, so it can't load. In order to be able to load the type, we need to declare the HelloWorldBRT.Class as a brokered component in the app's pacakge.appxmanifest file. For non-brokered components, Visual Studio does this for you automatically. For brokered components we have to do it manually unfortunately. Every activatable class (i.e. class you can construct via “new”) needs to be registered in the appx manifest this way.

To register HelloWorldBRT.Class, right click the Package.appxmanifest file in the client project, select “Open With” from the context menu and then select “XML (Text) editor” from the Open With dialog. Then you need to insert <a href="http://msdn.microsoft.com/en-us/library/windows/apps/br211443.aspx">inProcessServer extension</a> that includes an <a href="http://msdn.microsoft.com/en-us/library/windows/apps/br211413.aspx">ActivatableClass element</a> for each class you can activate (aka has a public constructor). Each ActivatableClass element contains an ActivatableClassAttribute element that contains a pointer to the folder where the brokered component is installed. Here’s what I added to Package.appxmainfest of my HelloWorldBRT.Client app.
<pre class="brush:xml">&lt;Extensions&gt;
  &lt;Extension Category="windows.activatableClass.inProcessServer"&gt;
    &lt;InProcessServer&gt;
      &lt;Path&gt;clrhost.dll&lt;/Path&gt;
      &lt;ActivatableClass ActivatableClassId="HelloWorldBRT.Class" 
                        ThreadingModel="both"&gt;
        &lt;ActivatableClassAttribute 
             Name="DesktopApplicationPath" 
             Type="string" 
             Value="D:\dev\HelloWorldBRT\Debug\HelloWorldBRT.PS"/&gt;
      &lt;/ActivatableClass&gt;
    &lt;/InProcessServer&gt;
  &lt;/Extension&gt;
&lt;/Extensions&gt;</pre>
The key thing here is the addition of the DesktopApplicationPath ActivatableClassAttribute. This tells the WinRT activation logic that HelloWorldBRT.Class is a brokered component and where the managed .winmd file with the implementation details is located on the device. Note, you can use multiple brokered components in your side loaded app, but they all have the same DesktopApplicationPath.

Speaking of DesktopApplicationPath, the path I’m using here is path the final location of the proxy/stub components generated by the compiler. Frankly, this isn’t an good choice to use in a production deployment. But for the purposes of this walk thru, it’ll be fine.

<a href="http://devhawk.net/wp-content/uploads/2014/04/ClientWatchWindow.png"><img class="wp-image-2103 alignleft" alt="ClientWatchWindow" src="http://devhawk.net/wp-content/uploads/2014/04/ClientWatchWindow-300x94.png" width="300" height="94" /></a>

Now when we run the app, we can load a HelloWorldBRT.Class instance and access the properties. re definitely seeing a different app process IDs when comparing the result of calling GetCurrentProcessId directly in App.OnLoaded vs. the result of calling GetCurrentProcessId in the brokered component. Of course, each run of the app will have different ID values, but this proves that we are loading our brokered component into a different process from where our app code is running.

Now you're ready to go build your own brokered components! Here's hoping you'll find more interesting uses for them than comparing the process IDs of the app and broker processes in the debugger! :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2102</wp:post_id>
		<wp:post_date>2014-04-25 08:45:36</wp:post_date>
		<wp:post_date_gmt>2014-04-25 15:45:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>brokered-winrt-components-step-three</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="brokered-components"><![CDATA[brokered components]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="sideload"><![CDATA[sideload]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>layout_key</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_slider_check_key</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Yet More Change for the Capitals</title>
		<link>http://devhawk.net/2014/04/26/yet-more-change-for-the-capitals/</link>
		<pubDate>Sat, 26 Apr 2014 20:13:29 +0000</pubDate>
		<dc:creator><![CDATA[devhawk]]></dc:creator>
		<guid isPermaLink="false">http://devhawk.net/?p=2114</guid>
		<description></description>
		<content:encoded><![CDATA[Six years ago, I was pretty excited about the future for the Washington Capitals. They had just lost their first round match up with the Flyers – which was a bummer – but they had made the playoffs for the first time in 3 seasons. <a href="http://devhawk.net/2008/04/22/caps-season-ends/">I wrote at the time</a>:
<blockquote>Furthermore, even though they lost, these playoffs are a promise of future success. I tell my kids all the time that the only way to get good at something is to work hard while you’re bad at it. Playoff hockey is no different. Most of the Caps had little or no playoff experience going into this series and it really showed thru the first three games. But they kept at it and played much better over the last four games of the series. They went 2-2 in those games, but the two losses went to overtime. A little more luck (or better officiating) and the Caps are headed to Pittsburgh instead of the golf course.</blockquote>
What a difference <a href="https://twitter.com/JapersRink/status/458585591207038976/photo/1">six seasons makes</a>. Sure, they won the President’s Trophy in 2010. But the promise of future playoff success has been broken, badly. The Caps have been on a pretty steep decline after getting beat by the eighth seed Canadians in the first round of the playoffs in 2010. Since then, they've switched systems three times and head coaches twice. This year, they missed the playoffs entirely even with Alex Ovechkin racking up a league-leading 51 goals.

Today, the word came down that <a href="http://capitalstoday.monumentalnetwork.com/2014/04/26/capitals-announce-changes-to-front-office-and-coaching-staff">both the coach and general manager</a> have been let go. As a Caps fan, I’m really torn about this. I mean, I totally agree that the coach and GM had to go – frankly, I was surprised it didn’t happen 7-10 days earlier. But now what do you do? The draft is two months and one day away, free agency starts two days after that. The search for a GM is going to have to be fast. Then the GM will have to make some really important decisions about players at the draft, free agency and compliance buyouts with limited knowledge of the players in our system. Plus, he’ll need to hire a new head coach – preferably before the draft as well.

The one positive note is that the salary cap for the Capitals <a href="http://www.capgeek.com/capitals">looks pretty good</a> for next year. The Capitals currently have the second largest amount of cap space / open roster slot in the league. (The Islanders are first with $14.5 million / open roster slot. The Caps have just over $7 million / open roster slot.) They have only a handful of unrestricted free agents to resign – with arguably only one “must sign” (<a href="http://capitals.nhl.com/club/player.htm?id=8471362">Mikhail Grabovski</a>) in the bunch. Of course, this could also be a bug rather than a feature – having that many players under contract may make it harder for the new GM to shape the team in his image.

Who every the Capitals hire to be GM and coach, I’m not expecting a promising start. It feels like the next season is already a wash, and we’re not even finished with the first round of this year’s playoffs yet.

I guess it could be worse.

I could be a Toronto Leafs fan.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2114</wp:post_id>
		<wp:post_date>2014-04-26 13:13:29</wp:post_date>
		<wp:post_date_gmt>2014-04-26 20:13:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>yet-more-change-for-the-capitals</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hockey"><![CDATA[Hockey]]></category>
		<category domain="category" nicename="sports"><![CDATA[Sports]]></category>
		<category domain="post_tag" nicename="washington-capitals"><![CDATA[Washington Capitals]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>layout_key</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>post_slider_check_key</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
