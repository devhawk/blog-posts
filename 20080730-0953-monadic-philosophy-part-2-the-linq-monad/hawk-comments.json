[
  {
    "author-name": "Barry Kelly",
    "author-email": "barry.j.kelly@gmail.com",
    "author-url": "http://barrkel.blogspot.com/",
    "date": "2008-07-30T12:33:42-07:00",
    "content": "I think programmers would understand monads better if they were described as a design pattern - anything that follows the monad rules is a monad, effectively.\n\nMonads are that design pattern that permits a library designer to insert himself between a user's data and the actions a user wants to apply to that data. Rather than acting directly on data, the data is stuffed into a wrapper object, and the action desired is passed as an argument; the monad then returns a new monad that has logically applied the desired action to the wrapped-up data. The whole point behind the pattern is that the monad can subtly alter the action depending on the purpose of the monad.\n\nFor a List monad, it's going to apply the operation not just to one element, but to every element in the list. For a Mabye monad, it's only going to apply the operation if the wrapper actually holds any data, and not if otherwise. For an IO monad, it's going to return a value which logically contains a set of imperative instructions that, when finally interpreted after being returned by the main function, will perform operations with side-effects.\n\nThe basic *design pattern* for them all is a wrapper object that takes in functions and returns a new wrapper that has logically applied the function to the contained data."
  },
  {
    "author-name": "Haskeller",
    "author-email": "",
    "author-url": "",
    "date": "2008-07-30T13:38:53-07:00",
    "content": "I hate seeing these Microsoft shits renaming functional theory, like its Visual Basic.... "
  },
  {
    "author-name": "atp",
    "author-email": "",
    "author-url": "",
    "date": "2008-07-31T05:56:59-07:00",
    "content": "Don't fall into the newbie trap of thinking that monads are about sequencing operations.  They aren't.  A large number of monads (for example, Reader) are commutative and do not enforce any sort of statement ordering.\n\nIt seems most people are first introduced to the notion of monads when attempting to do purely functional IO or stateful computations, which is too bad.  Not only are these monads extremely complex (causing the beginner to think monads are more complex in general than they really are) but they are also not representatitive.\n\nI think the Maybe monad and List monad are better \"first monads\" than State or IO."
  }
]