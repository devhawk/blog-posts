<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>IronPython and [Insert MSFT Technology Here]</title>
  <link>http://devhawk.net/2008/11/12/ironpython-and-insert-msft-technology-here/</link>
  <pubDate>Wed, 12 Nov 2008 16:04:51 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://f777dfed-50f5-4a07-bc6b-c3ba8527b420</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Now that PDC08 is in my rear view mirror, I’m back to doing IronPython stuff. One of the things I’m looking at is making IronPython work with a variety of Microsoft technologies. Given the usage of dynamic languages in web scenarios, most of our focus to date has been on using <a href="http://www.codeplex.com/sdlsdk">Iron languages in Silverlight</a>. Being able to program the browser with the same language you program the server is a fairly compelling scenario. We’re also starting to see new progress on <a href="http://www.codeplex.com/aspnet/Wiki/View.aspx?title=Dynamic%20Language%20Support">ASP.NET support for Iron languages</a>.</p><p>But those are only two out of a veritable universe of cool technologies. Now that I’m done with PDC, I can start to explore some of the others. Some ideas include:</p><ul><li>IPy and WPF</li><li>IPy and Surface</li><li>IPy and XNA (desktop only – Xbox and Zune use the Compact Framework with doesn’t support DLR)</li><li>IPy and WCF</li><li>IPy and WF</li></ul><p>Any other suggestions? Please leave them in the comments. </p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1187</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2008-11-12 16:04:51</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2008-11-12 16:04:51</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">ironpython-and-insert-msft-technology-here</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[f777dfed-50f5-4a07-bc6b-c3ba8527b420]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[IronPython+And+LtInsert+MSFT+Technology+Heregt]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2008/11/13/IronPython+And+LtInsert+MSFT+Technology+Heregt]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2137</wp:comment_id>
    <wp:comment_author><![CDATA[Glenn Block]]></wp:comment_author>
    <wp:comment_author_email></wp:comment_author_email>
    <wp:comment_author_url>http://blogs.msdn.com/gblock</wp:comment_author_url>
    <wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
    <wp:comment_date>2008-11-12 16:36:38</wp:comment_date>
    <wp:comment_date_gmt>2008-11-13 00:36:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[IPy and MEF :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2138</wp:comment_id>
    <wp:comment_author><![CDATA[Nick Hodge]]></wp:comment_author>
    <wp:comment_author_email>nhodge@microsoft.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.nickhodge.com/</wp:comment_author_url>
    <wp:comment_author_IP>59.167.244.222</wp:comment_author_IP>
    <wp:comment_date>2008-11-12 16:42:43</wp:comment_date>
    <wp:comment_date_gmt>2008-11-13 00:42:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[How about IronPython and F# :-)

http://blogs.msdn.com/nickhodge/archive/2008/11/12/ironpython-f-parallel-async-a-kittehz-brekfst.aspx]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2139</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email></wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>65.199.215.3</wp:comment_author_IP>
    <wp:comment_date>2008-11-12 16:47:34</wp:comment_date>
    <wp:comment_date_gmt>2008-11-13 00:47:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I agree with Glen, IPy and MEF would be a great combo.

Another one would be IPy and CCR/DSS.  I have just started looking at CCR/DSS and I think it would greatly benefit from a IPy integration.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2140</wp:comment_id>
    <wp:comment_author><![CDATA[Chris Vickerson]]></wp:comment_author>
    <wp:comment_author_email>chrisv@q4websystems.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.q4websystems.com</wp:comment_author_url>
    <wp:comment_author_IP>70.49.157.76</wp:comment_author_IP>
    <wp:comment_date>2008-11-12 20:34:52</wp:comment_date>
    <wp:comment_date_gmt>2008-11-13 04:34:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the opportunity!

Could you please post an example of how to use .net attributes - that would be very helpful.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2141</wp:comment_id>
    <wp:comment_author><![CDATA[Apolon Ivankovic]]></wp:comment_author>
    <wp:comment_author_email>apolon@torqsoftware.com</wp:comment_author_email>
    <wp:comment_author_url>http://torqsoftware.com</wp:comment_author_url>
    <wp:comment_author_IP>203.59.254.217</wp:comment_author_IP>
    <wp:comment_date>2008-11-13 15:25:52</wp:comment_date>
    <wp:comment_date_gmt>2008-11-13 23:25:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Data binding to IronPython and other DLR objects in Silverlight/WPF. I suppose the first question is whether it's possible and in what scenarios it can be done/not-done?

On an unrelated topic, whats happening with Managed JScript on the DLR. Will that be a language made available by Microsoft on the DLR?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2142</wp:comment_id>
    <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
    <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>131.107.0.75</wp:comment_author_IP>
    <wp:comment_date>2008-11-14 15:11:00</wp:comment_date>
    <wp:comment_date_gmt>2008-11-14 23:11:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@Everyone, thanks for the input!

@Chris, we can't use .NET attributes from IronPython today. It's something we're looking at post-2.0

@Apolon, I'll be addressing data binding in WPF next week. I'll look to see if the same approach I'll be describing works for Silverlight. As for Managed JScript on the DLR, it's available for Silverlight as part of the Silverlight Dynamic Language SDK (http://codeplex.com/sdlsdk). It's not available for the desktop CLR. ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2143</wp:comment_id>
    <wp:comment_author><![CDATA[Apolon Ivankovic]]></wp:comment_author>
    <wp:comment_author_email>apolon@torqsoftware.com</wp:comment_author_email>
    <wp:comment_author_url>http://torqsoftware.com</wp:comment_author_url>
    <wp:comment_author_IP>203.59.157.24</wp:comment_author_IP>
    <wp:comment_date>2008-11-18 05:19:20</wp:comment_date>
    <wp:comment_date_gmt>2008-11-18 13:19:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I had a look at the Silverlight Dynamic Language SDK with respect to managed jscript and noticed two things:
a) source code is not provided while it is for IronRuby and IronPython
b) its only supported on Silverlight

Given this background I have the following questions:
a) Will the source code to managed jscript be provided as per IronPython and IronRuby
b) Will it be supported on WPF?
c) Is there a Microsoft blogger or PM in charge of the managed jscript on the DLR functionality (so I can stop bothering you with inane questions ;^)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>