{"status":"ok","post":{"id":1096,"type":"post","slug":"practical-f-parsing-recursion-and-predicate-functions","url":"http:\/\/devhawk.net\/2008\/01\/29\/practical-f-parsing-recursion-and-predicate-functions\/","status":"publish","title":"Practical F# Parsing: Recursion and Predicate Functions","title_plain":"Practical F# Parsing: Recursion and Predicate Functions","content":"<p>To prep for my <a href=\"http:\/\/www.langnetsymposium.com\/\">Lang.NET<\/a> talk, I went back and reviewed <a href=\"http:\/\/devhawk.net\/2007\/12\/10\/Practical+Parsing+In+F.aspx\">my PEG parser<\/a>. One thing I was not happy with was that all the recursion was handled in a one-off manner. When I needed to match multiple characters in the comment rule, I wrote a special one-off function to recursively process the comment until it reached an EOL. When I needed to parse a series of ranges, characters or definitions, I wrote special one-off functions to handle that recursion. Obviously, that&#8217;s not the best approach. So, I wrote the following active pattern functions to handle recursion.<\/p>\n<pre class=\"brush: fsharp\">\/\/ZOM == Zero Or More\r\nlet rec (|ZOM|) f input =\r\n    match f input with\r\n    | Some(i,input) -&gt;\r\n        let j,input = (|ZOM|) f input\r\n        (i :: j, input)\r\n    | None -&gt; [], input \r\n\r\n\/\/OOM == One Or More\r\nlet (|OOM|_|) f input =\r\n    match (|ZOM|) f input with\r\n    | [], input -&gt; None\r\n    | v, input -&gt; Some(v,input)\r\n\r\n\/\/ZOO == Zero Or One\r\nlet (|ZOO|) f input =\r\n    match f input with\r\n    | Some(i,input) -&gt; Some(i), input\r\n    | None -&gt; None,input<\/pre>\n<p>With these functions at the ready, I can stop writing one-off recursion functions. Instead, I write a function that matches a single item, which I pass as an argument to one of the three functions above. For example, here is the original and new version of the top level Grammar function.<\/p>\n<pre class=\"brush: fsharp\">\/\/Original version\r\nlet (|Grammar|_|) input =\r\n    let rec ParseDefinitions dl input =\r\n        match input with\r\n        | Definition (d, input) -&gt; ParseDefinitions (dl @ [d]) input\r\n        | _ -> Some(dl, input)\r\n    let (|OneOrMoreDefintions|_|) input =\r\n        match input with\r\n        | Definition (d, input) -&gt; ParseDefinitions [d] input\r\n        | _ -&gt; None\r\n    match input with\r\n    | Spacing (OneOrMoreDefintions (dl, EndOfFile)) -&gt;\r\n          Some(List.to_array dl)\r\n    | _ -&gt; None \r\n\r\n\/\/New Version\r\nlet (|Grammar|_|) = function\r\n    | Spacing (OOM (|Definition|_|) (dl, EndOfFile)) -&gt; \r\n          Some(List.to_array dl)\r\n    | _ -&gt; None<\/pre>\n<p>The new version is much shorter, because there&#8217;s already a function to match a single definition, which we can pass into OneOrMore (aka OOM). Note, when I pass an active pattern function as a parameter, I have to use it&#8217;s real name (with the pipes and parameters). Having to use the real name is pretty ugly, but F# need to be able to differentiate between using a function as an active pattern vs using it as a function parameter. If you could just call &#8220;OOM Definition (dl, EndOfFile)&#8221;, would F# realize Definition is a parameter?<\/p>\n<p>I also defined syntactic predicate functions. If you&#8217;ll recall, these syntactic predicates will try to match but automatically backtrack, returning success or failure depending on which function you called.<\/p>\n<pre class=\"brush: fsharp\">\/\/FP == Failure Predicate\r\nlet (|FP|_|) f input =\r\n    match f input with\r\n    | Some(_) -&gt; None\r\n    | None -&gt; Some(input)\r\n\r\n\/\/SP == Success Predicate\r\nlet (|SP|_|) f input =\r\n    match f input with\r\n    | Some(_) -&gt; Some(input)\r\n    | None -&gt; None<\/pre>\n<p>To see this in action, here&#8217;s the original and updated Primary function. Only the first rule is relevant, so I&#8217;ve omitted the others.<\/p>\n<pre class=\"brush: fsharp\">\/\/Original version\r\nlet (|Primary|_|) input =\r\n    let (|NotLEFTARROW|_|) input =\r\n        match input with\r\n        | LEFTARROW (_) -&gt; None\r\n        | _ -&gt; Some(input)\r\n    match input with\r\n    | Identifier (id, NotLEFTARROW (input)) -&gt;\r\n        Some(Primary.Identifier(id), input)\r\n    \/\/rest of function omitted for clarity\r\n\r\n\/\/new version\r\nlet (|Primary|_|) = function\r\n    | Identifier (id, FP (|LEFTARROW|_|) (input)) -&gt; \r\n          Some(Primary.Identifier(id), input)\r\n    \/\/rest of function omitted for clarity<\/pre>\n<p>Instead of writing a special function to match &#8220;not left arrow&#8221;, I just pass the left arrow function as a parameter to Failure Predicate (aka FP). With these recursion and syntactic predicate functions, I was able to remove all the one-off recursion functions from my parser. (Note, I posted an <a href=\"http:\/\/cid-0d9bc809858885a4.skydrive.live.com\/self.aspx\/DevHawk%20Content\/Projects\/Practical%20Parsing%20in%20F|3\/F|3%20PegParser%20|52008-01-29|6.zip\">updated version of PegParser<\/a> on my SkyDrive so you can see this in action.)<\/p>\n<p>These five functions significantly reduced the complexity of the code. Unfortunately, I&#8217;m not sure it&#8217;s much easier to read. The conciseness is offset IMO by the ugliness of using the active pattern&#8217;s true names. Also, I would have liked to use custom operators for these five functions, but operators aren&#8217;t allowed to be active pattern functions. Hopefully, that will change at some point in the future, though if we&#8217;re going to dream of better syntax, can we do something about all the parens? Personally, I&#8217;d love to be able to write the following:<\/p>\n<pre class=\"brush: fsharp\">\/\/This doesn't work, but I can dream, can't I?\r\nlet (|Primary|_|) = function\r\n    | Identifier (id) !!LEFTARROW (input) -&gt;\r\n        Some(Primary.Identifier(id), input)\r\n    \/\/rest of function omitted for clarity \r\n\r\nlet (|Grammar|_|) = function\r\n    | Spacing ++Definition (dl) EndOfFile -&gt;\r\n        Some(List.to_array dl)\r\n    | _ -&gt; None<\/pre>\n<p>Note to self, talk to F# team members who come to LangNET about this&#8230;<\/p>\n","excerpt":"<p>To prep for my Lang.NET talk, I went back and reviewed my PEG parser. One thing I was not happy with was that all the recursion was handled in a one-off manner. When I needed to match multiple characters in the comment rule, I wrote a special one-off function to recursively process the comment until [&hellip;]<\/p>\n","date":"2008-01-29 09:40:31","modified":"2011-04-17 00:50:37","categories":[],"tags":[{"id":198,"slug":"f-sharp","title":"F#","description":"","post_count":51},{"id":202,"slug":"functional-programming","title":"Functional Programming","description":"","post_count":18},{"id":209,"slug":"parsing-expression-grammar","title":"Parsing Expression Grammar","description":"","post_count":16}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2016,"name":"ToolmakerSteve","url":"http:\/\/toolmakersteve.com","date":"2008-03-11 21:02:02","content":"<p>I am very interested in what you are saying here, but I don&#8217;t know enough yet about either F# or PEG parsers to be clear WHAT you&#8217;ve done. I want to write a parser for [some grammar]. How do I build on what you have done? Is the grammar you&#8217;ve written a parser for just a specific sample grammar from that whitepaper, or are you saying that it parses grammars written in the notation used in that whitepaper? Or are you building up a combinator library of functions that I would use in writing my own parser directly in F#?<\/p>\n<p>To take a concrete example, suppose I wanted to write a parser for F# itself, and I&#8217;m staring at the F# language spec .. how would I proceed to write such a parser, beginning with your work?<\/p>\n<p>Also, what would be the likely speed of such a parser, versus using the lex\/yacc available with F#?<\/p>\n<p>And since I&#8217;m barraging you with questions, I will also ask if there is source available for an F# parser written in F#, using any parsing approach?<\/p>\n<p>(What I&#8217;m really interested in is translating a subset of ECMAScript 4 to F#, relying on F#&#8217;s type inference to get a high performance CodeDOM based implementation running, but I can&#8217;t claim to know enough about either ES4 or F# to know whether that makes any sense at all&#8230;) <\/p>\n","parent":0},{"id":2017,"name":"ToolmakerSteve","url":"http:\/\/toolmakersteve.com","date":"2008-03-11 22:18:58","content":"<p>Found your post &#8216;F# PEG Parser Next Steps&#8217; which answers my question above about what your code does (&#8216;it simply builds a PEG AST from a PEG grammar.&#8217;).<\/p>\n<p>Re &#8216;figure out where to take it next&#8217;, I&#8217;d love to see a technique for mixing domain-specific-language source with generic F# source. As an anti-example of what I mean, consider how scripting languages are currently embedded into HTML pages. Horrible syntactic kludges. Even worse is stuff often done in Javascript or PHP to output page fragments that are composed into a page. Often totally ad hoc and unstructured. Suppose one&#8217;s goal was to create web pages or a browser-based web application, and we re-thought this from scratch. What might an approach be? One interesting approach to structured mixing of logic and presentation in an XML document can be seen at whitebeam.org). Given F#, and parser technology, what would be a clean way to express what we are trying to say? In some situations, a good answer would be a DOM-based one. That is, I&#8217;d like a less verbose way to type the equivalent to the XML document one would create if using Whitebeam. F# logic snippets would be embedded in the presentation document hierarchy in a clean way. In other cases, it would make more sense to INVERT this: Write an application in F#, but with a preprocessor that allows presentation nodes to be expressed readably.<\/p>\n","parent":0},{"id":2018,"name":"ToolmakerSteve","url":"http:\/\/toolmakersteve.com","date":"2008-03-14 13:07:27","content":"<p>Minor comment re name choices on page<br \/>\n<a href=\"http:\/\/devhawk.net\/2007\/12\/11\/Practical+F+Parsing+The+Parse+Buffer.aspx\" rel=\"nofollow\">http:\/\/devhawk.net\/2007\/12\/11\/Practical+F+Parsing+The+Parse+Buffer.aspx<\/a><br \/>\nyou present two different versions, one reusing the name &#8220;token&#8221;, the other using an unambiguous name &#8220;ttail&#8221;, which you find less readable.<br \/>\nI agree, but the reuse of &#8220;token&#8221; in the first one caused me to mis-read its functioning the first time.<br \/>\nA better solution than EITHER of these is to use variations on token; e.g. call the second use &#8220;token1&#8243; or some such. That way, the semantics is clear (&#8220;this is a case where the tail is being used as another token&#8221;), AND there is no confusing the two uses.<\/p>\n","parent":0},{"id":2019,"name":"ToolmakerSteve","url":"http:\/\/toolmakersteve.com","date":"2008-03-14 13:11:05","content":"<p>Here is my version of your code from Jan 2008:<\/p>\n<p>let (|TK|_|) token  input =<br \/>\n    let rec ParseToken token input =<br \/>\n        match token,(|NC|_|) input with<br \/>\n        | t :: [], Some(i, input1) when i = t -> Some(input1)<br \/>\n        | t :: token1, Some(i, input1) when i = t-> ParseToken token1 input1<br \/>\n        | _ -> None<br \/>\n    ParseToken (List.of_seq token) input<\/p>\n","parent":0},{"id":2020,"name":"ToolmakerSteve","url":"http:\/\/toolmakersteve.com","date":"2008-03-14 13:11:55","content":"<p>Gaaah &#8212; add whitespace back in to indent the above as needed!<\/p>\n","parent":0},{"id":2021,"name":"ToolmakerSteve","url":"http:\/\/toolmakersteve.com","date":"2008-03-14 15:07:24","content":"<p>Another comment on naming:<br \/>\nBeing new to F#, and active pattern matching,<br \/>\nit took me a long time to understand exactly how (|TK|_|) works, even after reading The Whitepaper you linked to [Thanks for that link -- I would not have grokked active patterns without it].<\/p>\n<p>It would have been somewhat easier if something like &#8220;remainder&#8221; or &#8220;unconsumed&#8221; had been used instead of &#8220;input&#8221;, for the RESULT of each rule. That would have clued me in that the active pattern syntax is not referring to a left hand side (input param) term here, but a right hand side (result).<\/p>\n<p>Here is my version of EndOfLine [replace my \"indent-dots\" with spacing]:<\/p>\n<p>let (|EndOfLine|_|) = function<br \/>\n. | TK &#8220;rn&#8221; (unconsumed) -> Some(unconsumed)<br \/>\n. | TK &#8220;n&#8221; (unconsumed) -> Some(unconsumed)<br \/>\n. | TK &#8220;r&#8221; (unconsumed) -> Some(unconsumed)<br \/>\n. | _ -> None<\/p>\n","parent":0},{"id":2022,"name":"ToolmakerSteve","url":"http:\/\/toolmakersteve.com","date":"2008-03-14 15:48:27","content":"<p><a href=\"http:\/\/devhawk.net\/2007\/12\/19\/Practical+F+Parsing+The+Abstract+Syntax+Tree.aspx\" rel=\"nofollow\">http:\/\/devhawk.net\/2007\/12\/19\/Practical+F+Parsing+The+Abstract+Syntax+Tree.aspx<\/a><br \/>\nWould benefit from an example, showing a simple Abstract Syntax Tree being built up using these functions. In general, these talks would benefit from more examples of how all this looks to someone using what you are building up. This would give clear context to the reader. &#8220;black box&#8221; explain from the outside, THEN open the box to explain the insides.<\/p>\n<p>At this point, perhaps showing the nested rule calls recognizing a single low level construct, wrapped in successively higher constructs:<\/p>\n<p>(|Char|_|) !!&#8221;5&#8243;<br \/>\n&#8211;> Some (&#8217;5&#8242;, [])<\/p>\n<p>(|Range|_|) !!&#8221;5-9&#8243;<br \/>\n&#8211;> Some (Dual (&#8217;5&#8242;, &#8217;9&#8242;), [])<\/p>\n<p>(|Class|_|) !!&#8221;[5-9]&#8221;<br \/>\n&#8211;> Some ([Dual ('5', '9')], [])<\/p>\n<p>(|Primary|_|) !!&#8221;[5-9]&#8221;<br \/>\n&#8211;> Some (Class [Dual ('5', '9')], [])<\/p>\n<p>A talk or two later, once you have enough of the functions, describe a small PEG grammar, and show the AST for some sample inputs.<\/p>\n","parent":0},{"id":2023,"name":"ToolmakerSteve","url":"http:\/\/toolmakersteve.com","date":"2008-03-14 16:05:28","content":"<p>&#8220;These five functions significantly reduced the complexity of the code. Unfortunately, I&#8217;m not sure it&#8217;s much easier to read. The conciseness is offset IMO by the ugliness of using the active pattern&#8217;s true names.&#8221;<\/p>\n<p>I consider the new version MUCH easier to read. To be precise, as I get used to the split-banana syntax by experimenting with active patterns, it is becoming a familiar visual entity with a known meaning, that I can rapidly scan and associate with that meaning. Contrast that with the original, which requires examining several lines of code to recognize a usage pattern.<\/p>\n<p>As far as how to make this less ugly, I am concerned that removing that visual cue would take away meaning; remove that immediate knowledge &#8220;its a split-banana active pattern&#8221;. I suggest simply having the code editor recognize bananas and splits, and color them blue. Its not like full names of banana entities are going to be heavily used in ordinary code. Keeping them distinctive is a good thing!<\/p>\n","parent":0}],"attachments":[],"comment_count":8,"comment_status":"closed","custom_fields":{"dasblog_entryid":["127fab83-19f7-42a5-933a-5dd273fc3040"],"dasblog_compressedtitle":["Practical+F+Parsing+Recursion+And+Predicate+Functions"],"dasblog_compressedtitleunique":["2008\/01\/29\/Practical+F+Parsing+Recursion+And+Predicate+Functions"]}},"previous_url":"http:\/\/devhawk.net\/2008\/01\/28\/morning-coffee-140\/","next_url":"http:\/\/devhawk.net\/2008\/01\/31\/morning-coffee-141-lang-net-08-edition\/"}