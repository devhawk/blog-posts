<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>2022</wp:comment_id>
  <wp:comment_author><![CDATA[ToolmakerSteve]]></wp:comment_author>
  <wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
  <wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
  <wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
  <wp:comment_date>2008-03-14 15:48:27</wp:comment_date>
  <wp:comment_date_gmt>2008-03-14 22:48:27</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[http://devhawk.net/2007/12/19/Practical+F+Parsing+The+Abstract+Syntax+Tree.aspx
Would benefit from an example, showing a simple Abstract Syntax Tree being built up using these functions. In general, these talks would benefit from more examples of how all this looks to someone using what you are building up. This would give clear context to the reader. "black box" explain from the outside, THEN open the box to explain the insides.

At this point, perhaps showing the nested rule calls recognizing a single low level construct, wrapped in successively higher constructs:

(|Char|_|) !!"5"
--> Some ('5', [])

(|Range|_|) !!"5-9"
--> Some (Dual ('5', '9'), [])

(|Class|_|) !!"[5-9]"
--> Some ([Dual ('5', '9')], [])

(|Primary|_|) !!"[5-9]"
--> Some (Class [Dual ('5', '9')], [])

A talk or two later, once you have enough of the functions, describe a small PEG grammar, and show the AST for some sample inputs.

]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>