{"status":"ok","post":{"id":1268,"type":"post","slug":"__clrtype__-metaclasses-named-attribute-parameters","url":"http:\/\/devhawk.net\/2009\/06\/18\/__clrtype__-metaclasses-named-attribute-parameters\/","status":"publish","title":"__clrtype__ Metaclasses: Named Attribute Parameters","title_plain":"__clrtype__ Metaclasses: Named Attribute Parameters","content":"<p>In <a href=\"http:\/\/devhawk.net\/2009\/06\/17\/clrtype+Metaclasses+Positional+Attribute+Parameters.aspx\">my last post<\/a>, I added support for custom attribute positional parameters . To finish things off, I need to add support for named parameters as well. Custom attributes support named parameters for public fields and settable properties. It works kind of like C# 3.0\u2019s <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/bb384062.aspx\">object initalizers<\/a>. However, unlike object initalizers, the specific fields and properties to be set on a custom attribute as well as their values are passed to the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ex9y2dsf.aspx\">CustomAttributeBuilder constructor<\/a>. With six arguments \u2013 five of which are arrays \u2013 it\u2019s kind of an ugly constructor. But luckily, we can hide it away in the make_cab function by using Python\u2019s <a href=\"http:\/\/docs.python.org\/tutorial\/controlflow.html#keyword-arguments\">keyword arguments feature<\/a>.<\/p>\n<\/p>\n<pre class=\"brush: python\">\ndef make_cab(attrib_type, *args, **kwds):\n  clrtype = clr.GetClrType(attrib_type)\n  argtypes = tuple(map(lambda x:clr.GetClrType(type(x)), args))\n  ci = clrtype.GetConstructor(argtypes)\n\n  props = ([],[])\n  fields = ([],[])\n  \n  for kwd in kwds:\n    pi = clrtype.GetProperty(kwd)\n    if pi is not None:\n      props[0].append(pi)\n      props[1].append(kwds[kwd])\n    else:\n      fi = clrtype.GetField(kwd)\n      if fi is not None:\n        fields[0].append(fi)\n        fields[1].append(kwds[kwd])\n      else:\n        raise Exception, \"No %s Member found on %s\" % (kwd, clrtype.Name)\n  \n  return CustomAttributeBuilder(ci, args, \n    tuple(props[0]), tuple(props[1]), \n    tuple(fields[0]), tuple(fields[1]))\n\ndef cab_builder(attrib_type):\n  return lambda *args, **kwds:make_cab(attrib_type, *args, **kwds)\n<\/pre>\n<p>You\u2019ll notice that make_cab now takes a third parameter: the attribute type and the tuple of positional arguments we saw last post. This third parameter \u201c**kwds\u201d is a dictionary of named parameters. Python supports both positional and named parameter passing, like VB has for a while and C# will in 4.0. However, this **kwds parameter contains all the extra or leftover named parameters that were passed in but didn\u2019t match any existing function arguments. Think of it like the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/w5zay9db.aspx\">params<\/a> of named parameters.<\/p>\n<p>As I wrote earlier, custom attributes support setting named values of both fields and properties. We don\u2019t want the developer to have to know if given named parameter is a field or property, so make_cab iterates over all the named parameters, checking first to see if it\u2019s a property then if it\u2019s a field. It keeps a list of all the field \/ property infos as well as their associated values. Assuming all the named parameters are found, those lists are converted to tuples and passed into the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ex9y2dsf.aspx\">CustomAttributeBuilder constructor<\/a>.<\/p>\n<p>In addition to the change to make_cab, I also updated cab_builder slightly in order to pass the **kwds parameter on thru to the make_cab function. No big deal. So now, I can add an attribute with named parameters to my IronPython class and it still looks a lot like a C# attribute specification.<\/p>\n<pre class=\"brush: python\">\nclr.AddReference(\"System.Xml\")\nfrom System.Xml.Serialization import XmlRootAttribute \nfrom System import ObsoleteAttribute, CLSCompliantAttribute\nObsolete = cab_builder(ObsoleteAttribute)\nCLSCompliant = cab_builder(CLSCompliantAttribute)\nXmlRoot = cab_builder(XmlRootAttribute)\n\nclass Product(object):\n  __metaclass__ = ClrTypeMetaclass\n  _clrnamespace = \"DevHawk.IronPython.ClrTypeSeries\" \n  _clrclassattribs = [\n    Obsolete(\"Warning Lark's Vomit\"), \n    CLSCompliant(False),\n    XmlRoot(\"product\", Namespace=\"http:\/\/samples.devhawk.net\")]\n\n  # remainder of Product class omitted for clarity\n<\/pre>\n<p>As usual, sample code is <a href=\"http:\/\/cid-0d9bc809858885a4.skydrive.live.com\/self.aspx\/DevHawk%20Content\/IronPython%20Stuff\/%7C_%7C_clrtype%7C_%7C_\/custom%7C_attrib%7C_with%7C_named%7C_args.py\">up on my skydrive<\/a>.<\/p>\n<p>Now that I can support custom attributes on classes, it would be fairly straightforward to add them to methods, properties, etc as well. The hardest part at this point is coming up with a well designed API that works within the Python syntax. If you\u2019ve got any opinions on that, feel free to share them in the comments, via <a href=\"mailto:harry@devhawk.net\">email<\/a>, or on the <a href=\"http:\/\/lists.ironpython.com\/listinfo.cgi\/users-ironpython.com\">IronPython mailing list<\/a>.<\/p>\n","excerpt":"<p>In my last post, I added support for custom attribute positional parameters . To finish things off, I need to add support for named parameters as well. Custom attributes support named parameters for public fields and settable properties. It works kind of like C# 3.0\u2019s object initalizers. However, unlike object initalizers, the specific fields and [&hellip;]<\/p>\n","date":"2009-06-18 10:09:02","modified":"2009-06-18 10:09:02","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":281,"slug":"__clrtype__","title":"__clrtype__","description":"","post_count":9}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["6a3ede80-2a01-4f51-b49f-c90b262d71e5"],"dasblog_compressedtitle":["clrtype+Metaclasses+Named+Attribute+Parameters"],"dasblog_compressedtitleunique":["2009\/06\/18\/clrtype+Metaclasses+Named+Attribute+Parameters"]}},"previous_url":"http:\/\/devhawk.net\/2009\/06\/17\/__clrtype__-metaclasses-positional-attribute-parameters\/","next_url":"http:\/\/devhawk.net\/2009\/06\/18\/add-bcd-vhd-ps1\/"}