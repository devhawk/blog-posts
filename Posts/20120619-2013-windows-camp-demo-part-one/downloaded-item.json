{"status":"ok","post":{"id":2002,"type":"post","slug":"windows-camp-demo-part-one","url":"http:\/\/devhawk.net\/2012\/06\/19\/windows-camp-demo-part-one\/","status":"publish","title":"Windows Camp Demo, Part One","title_plain":"Windows Camp Demo, Part One","content":"<p>Several weeks ago, I did a talk on <a href=\"http:\/\/devhawk.net\/2012\/06\/08\/building-winrt-components-with-cpp-cx\/\">building Windows Runtime components in C++<\/a>. As part of that talk, I did a demo that showed accessing a WinRT component written in C++ from a C# XAML application. Like I did for <a href=\"http:\/\/devhawk.net\/2011\/09\/15\/using-winrt-from-csharp-build-demo\/\">my \/\/build talk<\/a>, I\u2019ve written this walkthrough so you can follow along at home without having to read code off the recorded video stream. I\u2019ve also published the source up on <a href=\"https:\/\/github.com\/devhawk\/WindowsCampDemo\">GitHub<\/a>.<\/p>\n<p>The demo had two parts \u2013 the first was a \u201cHello, world!\u201d style demo, the second demonstrated wrapping an <a href=\"http:\/\/bitmap.codeplex.com\/\">existing C++ library<\/a> in a WinRT component to make it callable from other languages. This post covers the first part of the demo. I\u2019ll post a walkthrough of the second part of the demo soon.<\/p>\n<p>In order to follow along, you\u2019ll need the <a href=\"http:\/\/windows.microsoft.com\/en-US\/windows-8\/release-preview\">Windows 8 Release Preview<\/a> as well as <a href=\"http:\/\/msdn.microsoft.com\/en-us\/windows\/apps\/hh852659\">Visual Studio 2012 Express RC for Windows 8<\/a>. You should be able to use the RC version of VS 2012 <a href=\"http:\/\/www.microsoft.com\/visualstudio\/11\/en-us\/professional\">Pro<\/a>, <a href=\"http:\/\/www.microsoft.com\/visualstudio\/11\/en-us\/premium\">Premium<\/a> or <a href=\"http:\/\/www.microsoft.com\/visualstudio\/11\/en-us\/ultimate\">Ultimate<\/a>, but I\u2019ve only tested with Express. Note, the original presentation was done on Win8 Consumer Preview \/ VS 11 Beta, but I figured it made more sense to write up the walkthrough on the latest bits.<\/p>\n<p>We\u2019re going to start by creating the C# XAML app we\u2019ll use as the component client. Fire up VS 2012 RC and select new project. Select Visual C# -&gt; Windows Metro Style -&gt; Blank App (XAML), name the project \u201cWindowsCamp\u201d and press OK. Once the project has been created, open up the MainPage.xaml file, replace the Grid element that\u2019s there by default with the following XAML code:<\/p>\n<pre class=\"brush:xml\">&lt;StackPanel Background=\"{StaticResource ApplicationPageBackgroundThemeBrush}\"&gt;\r\n    &lt;Button Click=\"Button_Click_1\"&gt;Click me&lt;\/Button&gt;\r\n    &lt;TextBlock x:Name=\"myText\" FontSize=\"20\"&gt;&lt;\/TextBlock&gt;\r\n    &lt;Image x:Name=\"myImage\"&gt;&lt;\/Image&gt;\r\n&lt;\/StackPanel&gt;<\/pre>\n<p>As you can see, my UX skills have not improved since \/\/build.<\/p>\n<p>Now, we need to add a project for the C++ WinRT component. Right click on solution in the Solution Explorer and select Add -&gt; New Project. In the New Project dialog, Select Visual C++ -&gt; Windows Metro Style -&gt; Windows Runtime Component, name the project \u201cWindowsCampComponent\u201d and press OK.<\/p>\n<p>Once the component project has been created, we\u2019re going to add some code to it. Open Class1.h if it\u2019s not already open. Update the file to read as follows:<\/p>\n<pre class=\"brush:cpp\">#pragma once\r\n\r\nusing namespace Platform;\r\n\r\nnamespace WindowsCampComponent\r\n{\r\n    public ref class Class1 sealed\r\n    {\r\n    public:\r\n        Class1();\r\n\r\n        String^ SayHello(String^ name) {\r\n            return String::Concat(\r\n                ref new String(L\"Hello there \"),\r\n                name);\r\n        };\r\n    };\r\n}<\/pre>\n<p>The code is a bit more complex than your typical Hello, world. The SayHello method takes a string parameter that represents someone\u2019s name. The method concatenates the provided name with a hard coded greeting string and returns the resulting string. Doesn\u2019t get much simpler. However, even though it\u2019s just a single line of code there are several concepts that are important to point out:<\/p>\n<ul>\n<li>ref class \u2013 WinRT objects are projected in C++\/CX as ref classes and vise-versa. Since we\u2019re building a WinRT component to consume from C#, we define it as a ref class. Note, unless you\u2019re writing a XAML control, all WinRT classes must be sealed.<\/li>\n<li>Hats \u2013 The \u2018^\u2019 character after the String type declarations is the handle-to-object modifier. It\u2019s basically the pointer-to-object modifier (aka \u2018*\u2019) but for ref classes. We\u2019ll see in the second part of the demo that you invoke members on a ref class using the same \u2018-&gt;\u2019 syntax that you use in vanilla C++.<\/li>\n<li>ref new \u2013 You create instances of ref clases using \u201cref new\u201d instead of \u201cnew\u201d as you do in vanilla C++. Ref new returns a handle to the newly created ref class \u2013 a String^ in this case.<\/li>\n<li>Platform::String \u2013 C++\/CX projects some non-class WinRT types as ref classes in the Platform namespace. In this case, C++\/CX projects the new language interoperable string type <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/br205775(v=vs.85).aspx\">HSTRING<\/a> as a Platform::String ref class. HSTRINGS are UTF-16, so Platform::String provides a constructor that takes a wide string literal. We imported the Platform namespace via the \u201cusing namespace\u201d directive so we wouldn\u2019t have to type \u201cPlatform::\u201d multiple times.<\/li>\n<\/ul>\n<p>For more information about the design of the C++\/CX language, check out <a href=\"http:\/\/blogs.msdn.com\/b\/vcblog\/archive\/2011\/10\/20\/10228473.aspx\">Jim Springfield\u2019s post<\/a> on the <a href=\"http:\/\/blogs.msdn.com\/b\/vcblog\/\">Visual C++ team blog<\/a>.<\/p>\n<p>Now that we\u2019ve written our WinRT component, we\u2019ll write the code to consume it in C#. First, we need to add a reference to the C++ WinRT component project in our C# Metro style XAML app. WinRT references are added just like traditional CLR references \u2013 via the Add Reference dialog. Right click on the WindowsCamp node of the Solution explorer, select \u201cAdd Reference\u2026\u201d from the menu, click the check box next to the WindowsCampComponent project from the solution and press OK.<\/p>\n<p>Go back to MainPage.xaml and double click on the button labeled \u201cClick Me\u201d in the designer. This will add a click event handler named Button_Click_1 and take you to MainPage.xaml.cs so you can write the code for it. Type in \u201cvar wcc = new Windows\u201d and look at the resulting intellisense list. Notice that WindowsCampComponent is missing.<\/p>\n<p><img class=\"alignnone size-full wp-image-2004\" title=\"WCDemo1-Intellisense1\" src=\"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense1.png\" alt=\"\" width=\"496\" height=\"241\" \/><\/p>\n<p>This is because the C++ component hasn\u2019t been compiled yet. We need compile the C++ component project in order to generate the Windows metadata file (aka the file with the .winmd extension) that is used to drive intellisense. Delete the line of code you just added and compile the solution. Now type that line of code again, and you\u2019ll notice that the WindowsCampComponent namespace is available.<\/p>\n<p><img class=\"alignnone size-full wp-image-2005\" title=\"WCDemo1-Intellisense2\" src=\"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense2.png\" alt=\"\" width=\"490\" height=\"238\" \/><\/p>\n<p>Now, update the button click event handler to read as follows:<\/p>\n<pre class=\"brush:csharp\">private void Button_Click_1(object sender, RoutedEventArgs e)\r\n{\r\n    var wcc = new WindowsCampComponent.Class1();\r\n    myText.Text = wcc.SayHello(\"Herb Sutter\");\r\n}<\/pre>\n<p><img class=\"size-thumbnail wp-image-2008 alignleft\" title=\"WCDemo1-RunningApp\" src=\"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-RunningApp-e1340161688130-150x74.png\" alt=\"\" width=\"150\" height=\"74\" \/>Now, run the app, click the \u201cClick Me\u201d button and marvel at the wonder of WinRT language interop to print a greeting to Herb Sutter. I used <a href=\"http:\/\/herbsutter.com\/\">Herb Sutter<\/a> from the C++ team since he was the keynote speaker at the Windows Camp event and was standing in the back of the room when I did the demo.<\/p>\n<p>And that\u2019s it for the Hello, world demo. Kind of a lot of steps for essentially 3 lines of code \u2013 1 line of component code and 2 lines of client code. However, we did get the infrastructure set up so we add more substantial code in the next post.<\/p>\n","excerpt":"<p>Several weeks ago, I did a talk on building Windows Runtime components in C++. As part of that talk, I did a demo that showed accessing a WinRT component written in C++ from a C# XAML application. Like I did for my \/\/build talk, I\u2019ve written this walkthrough so you can follow along at home [&hellip;]<\/p>\n","date":"2012-06-19 20:13:34","modified":"2012-06-19 20:13:34","categories":[{"id":204,"slug":"development","title":"Development","description":"","parent":0,"post_count":165},{"id":283,"slug":"windows","title":"Windows","description":"","parent":0,"post_count":16},{"id":357,"slug":"windows-runtime","title":"Windows Runtime","description":"","parent":0,"post_count":12}],"tags":[{"id":221,"slug":"c-plus-plus","title":"C++","description":"","post_count":9},{"id":368,"slug":"c-plus-plus-cx","title":"C++\/cx","description":"","post_count":3},{"id":369,"slug":"channel-9","title":"Channel 9","description":"","post_count":3},{"id":364,"slug":"metro-style-apps","title":"Metro style apps","description":"","post_count":5},{"id":366,"slug":"windows-8","title":"Windows 8","description":"","post_count":6},{"id":367,"slug":"windows-camp","title":"Windows Camp","description":"","post_count":3},{"id":370,"slug":"winrt-components","title":"WinRT Components","description":"","post_count":3}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[{"id":2004,"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense1.png","slug":"wcdemo1-intellisense1","title":"WCDemo1-Intellisense1","description":"","caption":"","parent":2002,"mime_type":"image\/png","images":{"full":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense1.png","width":496,"height":241},"thumbnail":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense1-150x150.png","width":150,"height":150},"medium":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense1-300x145.png","width":300,"height":145},"large":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense1.png","width":496,"height":241},"slider-full":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense1.png","width":496,"height":241},"slider":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense1.png","width":496,"height":241}}},{"id":2005,"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense2.png","slug":"wcdemo1-intellisense2","title":"WCDemo1-Intellisense2","description":"","caption":"","parent":2002,"mime_type":"image\/png","images":{"full":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense2.png","width":490,"height":238},"thumbnail":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense2-150x150.png","width":150,"height":150},"medium":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense2-300x145.png","width":300,"height":145},"large":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense2.png","width":490,"height":238},"slider-full":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense2.png","width":490,"height":238},"slider":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-Intellisense2.png","width":490,"height":238}}},{"id":2008,"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-RunningApp.png","slug":"wcdemo1-runningapp","title":"WCDemo1-RunningApp","description":"","caption":"","parent":2002,"mime_type":"image\/png","images":{"full":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-RunningApp.png","width":1280,"height":800},"thumbnail":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-RunningApp-e1340161688130-150x74.png","width":150,"height":74},"medium":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-RunningApp-300x187.png","width":300,"height":187},"large":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2012\/06\/WCDemo1-RunningApp-1024x640.png","width":1024,"height":640}}}],"comment_count":2,"comment_status":"closed","custom_fields":{}},"previous_url":"http:\/\/devhawk.net\/2012\/06\/08\/building-winrt-components-with-cpp-cx\/","next_url":"http:\/\/devhawk.net\/2012\/06\/20\/ambiguous-extensionattribute-errors\/"}