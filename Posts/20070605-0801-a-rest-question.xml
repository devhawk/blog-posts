<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>A REST Question</title>
  <link>http://devhawk.net/2007/06/05/a-rest-question/</link>
  <pubDate>Tue, 05 Jun 2007 08:01:43 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://87ae6135-942f-4476-9dd7-9992cf073a7a</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Since there appears to be at least a handful of RESTifarians among my readership, I'm just going to throw this half-formed thought / almost question out there. Maybe it's a FAQ, in which case I'd appreciate a pointer in the right direction.</p><p>My observations about REST are:</p><ol><li>REST is a an "<a href="http://roy.gbiv.com/pubs/dissertation/rest_arch_style.htm">architectural style for distributed hypermedia systems</a>". </li><li>REST "<a href="http://roy.gbiv.com/pubs/dissertation/evaluation.htm">has been used to guide the design and development</a>" of HTTP and URI.</li><li>Therefore REST as an architectural style is independent of HTTP and URI.</li><li>Yet, I get the feeling that the REST community would consider a solution that uses the REST architectural style but not HTTP and/or URI as "not RESTful".</li></ol><p>Am I wrong in observation #4 above? If you're addressing resources by resource identifiers [aka URIs] but transferring those resource representations over a durable duplex protocol [aka not HTTP], are you still RESTing?</p><p>(Note, such a RESTful durable duplex protocol doesn't exist to my knowledge, though I would be very happy to be wrong about that. SSB does durable duplex, but it doesn't support URI style resource addressing. Granted, if I was going to build a durable duplex RESTful protocol, I would build on SSB - much the same way that HTTP builds on TCP. Though I am a huge fan of SSB, I'm specifically <em>not</em> suggesting that SSB is RESTful.)</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">976</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2007-06-05 08:01:43</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2007-06-05 08:01:43</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">a-rest-question</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[87ae6135-942f-4476-9dd7-9992cf073a7a]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[A+REST+Question]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2007/06/05/A+REST+Question]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2522</wp:comment_id>
    <wp:comment_author><![CDATA[Alex James]]></wp:comment_author>
    <wp:comment_author_email>Alex@base4.net</wp:comment_author_email>
    <wp:comment_author_url>http://www.base4.net/Blog.aspx?ID=447</wp:comment_author_url>
    <wp:comment_author_IP>219.89.81.114</wp:comment_author_IP>
    <wp:comment_date>2007-06-05 14:14:56</wp:comment_date>
    <wp:comment_date_gmt>2007-06-05 21:14:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The sample code that Alan points to is remarkably like something I have implemented recently to seperate the HTTP facing endpoints for REST from the actual implementation endpoints. This seperation / encapsulation allows me to do things like Transactions and program RESTful in-process too.

See a huge chunk of the benefit of REST comes from the formulation of a namespace of URI's. Why should you need to incur protocol costs to use a namespace? If that where the case it is kind of like saying all access to a HDD needs to be through network shares? (i.e. \localhostc$ instead of C:)

And yes there does seem to be a fair bit of equating REST to HTTP going on recently, although typically, it must be said, by SOAP people just coming to grips with REST. I did a post on this very topic:

http://www.base4.net/Blog.aspx?ID=447]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2523</wp:comment_id>
    <wp:comment_author><![CDATA[Erik Johnson]]></wp:comment_author>
    <wp:comment_author_email>ejohnson@epicor.com</wp:comment_author_email>
    <wp:comment_author_url>http://appside.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>65.248.23.250</wp:comment_author_IP>
    <wp:comment_date>2007-06-05 14:28:24</wp:comment_date>
    <wp:comment_date_gmt>2007-06-05 21:28:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think you can separate REST from HTTP, but you ought to call it something other than "REST".

http://appside.blogspot.com/2007/06/rest-over-http.html
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2524</wp:comment_id>
    <wp:comment_author><![CDATA[John Tullis]]></wp:comment_author>
    <wp:comment_author_email>John.Tullis@cna.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>159.10.4.170</wp:comment_author_IP>
    <wp:comment_date>2007-06-19 09:05:33</wp:comment_date>
    <wp:comment_date_gmt>2007-06-19 16:05:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Clearly REST is not dependent upon HTTP and URI. When the Web was growing, another protocol could have been used for HTTP, and another content type than HTML. But the URI is key -- REST bounded the verbs (HTTP) and content types (MIME in Web world), but the nouns (URIs) are unbounded. It was the unboundedness of the URIs that was key. So -- sure you could replace the URIs with some other noun based approach -- but why?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2521</wp:comment_id>
    <wp:comment_author><![CDATA[John Heintz]]></wp:comment_author>
    <wp:comment_author_email>jheintz@pobox.com</wp:comment_author_email>
    <wp:comment_author_url>http://johnheintz.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>70.112.219.249</wp:comment_author_IP>
    <wp:comment_date>2007-06-05 13:54:24</wp:comment_date>
    <wp:comment_date_gmt>2007-06-05 20:54:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The author of REST himself is working on a non-HTTP protocol to better support REST. Search Google for "roy fielding waka". (There is only a tiny bit of information available...)

A discussion of building a REST-constrained system on top of SSB is perfectly legitimate discussion.

One caveat, (looking for link... looking for link...) because HTTP is so widely deployed and available (plus DNS) there is a huge immediate value in using "http:" based URIs. The simple benefit of an already deployed and free naming infrastructure is huge.

Ah! Found the link: Norman Walsh here: http://norman.walsh.name/2006/07/25/namesAndAddresses]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2520</wp:comment_id>
    <wp:comment_author><![CDATA[Alan Dean]]></wp:comment_author>
    <wp:comment_author_email>alan.dean@thoughtpad.net</wp:comment_author_email>
    <wp:comment_author_url>http://thoughtpad.net/alan-dean</wp:comment_author_url>
    <wp:comment_author_IP>86.130.246.148</wp:comment_author_IP>
    <wp:comment_date>2007-06-05 11:39:20</wp:comment_date>
    <wp:comment_date_gmt>2007-06-05 18:39:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The short answer to your question is that REST is not bound to HTTP.

To quote from Roy's dissertation:

"REST does not restrict communication to a particular protocol, but it does constrain the interface between components, and hence the scope of interaction and implementation assumptions that might otherwise be made between components ..."
http://www1.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_3_2
http://simplewebservices.org/index.php?title=Connector_View

There has, in fact, come up in conversation on [rest-discuss] very recently, see http://tech.groups.yahoo.com/group/rest-discuss/message/8781]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2519</wp:comment_id>
    <wp:comment_author><![CDATA[Larry O'Brien]]></wp:comment_author>
    <wp:comment_author_email>lobrien@knowing.net</wp:comment_author_email>
    <wp:comment_author_url>http://www.knowing.net/</wp:comment_author_url>
    <wp:comment_author_IP>70.95.167.197</wp:comment_author_IP>
    <wp:comment_date>2007-06-05 11:01:27</wp:comment_date>
    <wp:comment_date_gmt>2007-06-05 18:01:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is the "Do you believe in  evolution?" question for the faithful RESTafarians. I've had conversations about RESTful architectures in desktop applications that I felt were extremely useful. But without a doubt such a conversation would immediately be condemned by certain elements, probably combined with a suspicion that even asking the question is the first step in tricking / co-opting REST for your nefarious, Borg-like ends. 

It's odd that an architectural style, the sort of thing that you might expect to see fruitfully discussed at PLoP, is so prone to dogma and passion. One wonders what people are so wound up about. ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>