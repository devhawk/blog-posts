{"status":"ok","post":{"id":1145,"type":"post","slug":"deserializing-xml-with-ironpython","url":"http:\/\/devhawk.net\/2008\/05\/06\/deserializing-xml-with-ironpython\/","status":"publish","title":"Deserializing XML with IronPython","title_plain":"Deserializing XML with IronPython","content":"<p>Now that I can <a href=\"http:\/\/devhawk.net\/2008\/05\/06\/Stream+Processing+XML+In+IronPython.aspx\">stream process XML<\/a>, the next logical step is to deserialize it into some type of object graph. As I said in my last post, there are at least three different DOM-esque options on the .NET platform as well as two in the Python library (<a href=\"http:\/\/docs.python.org\/lib\/module-xml.dom.html\">xml.dom<\/a> and <a href=\"http:\/\/docs.python.org\/lib\/module-xml.dom.minidom.html\">xml.minidom<\/a>)<\/p>\n<p>However, anyone who&#8217;s ever programmed against the <a href=\"http:\/\/www.w3.org\/DOM\/\">DOM<\/a> knows just what a major PITA it is. <\/p>\n<p>Instead, you could deserialize the XML into a custom object tree, based on the nodes in the XML stream. In .NET, there are at least two libraries for doing this: the old-school <a href=\"http:\/\/msdn.microsoft.com\/library\/system.xml.serialization.xmlserializer\">XmlSerializer<\/a> as well as the new-fangled <a href=\"http:\/\/msdn.microsoft.com\/library\/system.runtime.serialization.datacontractserializer\">DataContractSerializer<\/a>. In these libraries, the PITA comes in defining the static types with all the various custom attribute adornments you need to tell the deserializer how to do it&#8217;s job. Actually, if you&#8217;re defining your code first, all those adornments aren&#8217;t that big a deal. However, if you&#8217;re starting from the XML, especially XML with lots of different namespaces &#8211; like say <a href=\"http:\/\/feeds.feedburner.com\/Devhawk\">my RSS feed<\/a> &#8211; defining a static type for this gets old fast. <\/p>\n<p>Of course, if you&#8217;re not using a statically typed language&#8230; <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_wink.gif\" alt=\";)\" class=\"wp-smiley\" \/> <\/p>\n<p>One of the cool aspects of dynamic languages is the ability to easily generate new types on the fly. In Python, you can create a new type by calling the type function. Here&#8217;s an example of creating a new type for a XML node:<\/p>\n<pre class=\"brush: python\">\ndef create_type(node, parent):  \n  return type(node.name, (parent,), {'xmlns':node.namespace})\n<\/pre>\n<p>Since I&#8217;m working with XML, I wanted to make sure I handled namespaces. Thus, I add the namespace to the class definition (the third parameter in the type function above). This lets me walk up to any arbitrary object created from an XML element and check it&#8217;s namespace. <\/p>\n<p>I used this dynamic type creation functionality in my <a href=\"http:\/\/cid-0d9bc809858885a4.skydrive.live.com\/self.aspx\/DevHawk%20Content\/IronPython%20Stuff\/xml2py.py\">xml2py<\/a> module, which I added to my <a href=\"http:\/\/cid-0d9bc809858885a4.skydrive.live.com\/self.aspx\/DevHawk%20Content\/IronPython%20Stuff\">IronPython SkyDrive folder<\/a>. It leverages <a href=\"http:\/\/cid-0d9bc809858885a4.skydrive.live.com\/self.aspx\/DevHawk%20Content\/IronPython%20Stuff\/ipypulldom.py\">ipypulldom<\/a>, so make sure you get both. The heart of the module is the xml2py function, which recursively iterates thru the node stream and builds the tree. Attributes and child elements become named attributes on the object, so I can write code that looks like this:<\/p>\n<pre class=\"brush: python\">\nimport xml2py  \nrss = xml2py.parse('http:\/\/feeds.feedburner.com\/Devhawk')  \nfor item in rss.channel.item:  \n  print item.title\n<\/pre>\n<p>You see? No screwing around with childNodes or getAttribute here.<\/p>\n<p>The basic processing loop of xml2py creates a new instance of a new type when it encounters a start element tag. It then collects all the attributes and children of that element, and adds them as attributes on the element object, using the name of the type as name of the attribute. If there are multiple children with the same type name, xml2py converts that attribute to a list of values. For example, in an RSS feed, there will be likely be many rss.channel.item elements. In xml2py, the item attribute of the channel object will be a list of item objects. <\/p>\n<p>Since attributes and child elements are getting slotted together, I added a _nodetype attribute on each so I can later tell (if I care) if the value was originally an attribute or element. I haven&#8217;t written py2xml yet, but that might be important then.<\/p>\n<p>I do one optimization for simple string elements like &lt;foo&gt;bar&lt;\/foo&gt;. In this case, I create a type that inherits from string (hence the need for the parent parameter in the create_type function above) and contains the string text. It still has the xmlns and _nodetype attributes, so I could write item.title.xmlns (which is empty since RSS is in the default namespace) or item.title._nodetype (which would be XmlNodeType.Element)<\/p>\n<p>It&#8217;s not much code &#8211; about 100 lines of code split evenly between the xml2py function and the _type_factory object. Given that you usually see the same element in an XML stream over an over, I didn&#8217;t want to create multiple types for the same element. So _type_factory caches types in a dictionary so I can reuse them. One of the cool things is that it&#8217;s a callable type (i.e. it implements __call__ so I can use the instance like a function. I started by defining a xtype function that didn&#8217;t cache anything, but then later switched xtype to be a _type_factory instance, but none of my code that called xtype had to change!<\/p>\n<p>One other quick note. If you put xml2py.py and ipypylldom.py in a folder, you can experiment with them by launching &#8220;ipy -i xml2py&#8221;. This runs xml2py.py as a script, but dumps you into the interactive console when you&#8217;re thru. It will run the little snippet of code above which runs xml2py on my <a href=\"http:\/\/feeds.feedburner.com\/Devhawk\">FeedBurner feed<\/a>, but then you can play around with the rss object and see what it contains. Be sure to check out the xmlns attribute for each object in the rss.channel.link list.<\/p>\n","excerpt":"<p>Now that I can stream process XML, the next logical step is to deserialize it into some type of object graph. As I said in my last post, there are at least three different DOM-esque options on the .NET platform as well as two in the Python library (xml.dom and xml.minidom) However, anyone who&#8217;s ever [&hellip;]<\/p>\n","date":"2008-05-06 17:37:25","modified":"2008-05-06 17:37:25","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":238,"slug":"xml","title":"XML","description":"","post_count":11}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2074,"name":"Bryant Likes","url":"http:\/\/blogs.sqlxml.org\/BryantLikes","date":"2008-05-06 18:25:23","content":"<p>I&#8217;m using my statically typed language and I&#8217;m not screwing around with childNodes or getAttribute either (thankfully!):<\/p>\n<p>XElement rss = XElement.Load(&#8220;http:\/\/feeds.feedburner.com\/Devhawk&#8221;);<br \/>\nforeach (XElement item in rss.Element(&#8220;channel&#8221;).Elements(&#8220;item&#8221;))<br \/>\n    Console.WriteLine(item.Element(&#8220;title&#8221;).Value);<\/p>\n<p>Not quite as elegant as yours, but not too far off. <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" \/> <\/p>\n","parent":0},{"id":2075,"name":"Seo Sanghyeon","url":"","date":"2008-05-06 18:30:50","content":"<p>For a mature Python library to do XML to object serialization, take a look at lxml.objectify.<\/p>\n<p><a href=\"http:\/\/codespeak.net\/lxml\/objectify.html\" rel=\"nofollow\">http:\/\/codespeak.net\/lxml\/objectify.html<\/a><\/p>\n<p>You really should try FePy. FePy doesn&#8217;t run lxml.objectify yet (this one is a monster), but it does run gnosis.xml.objectify. And it runs same on CPython too.<\/p>\n<p>It is impressive that you could cook up XML to object serializer in relative short time and code, but I personally won&#8217;t use any IronPython-only solution when there are lots of mature Python solutions.<\/p>\n","parent":0},{"id":2076,"name":"DevHawk","url":"","date":"2008-05-06 20:23:25","content":"<p>@Bryant, XDocument + LINQ is a HUGE improvement over XmlDocument. But support for late binding is what makes the Python version so much more readable. <\/p>\n<p>@Seo, Don&#8217;t worry, I plan to take a very long look at FePy. Just haven&#8217;t had the time yet. <\/p>\n<p>As for my code, it&#8217;s more about me learning Python not really about providing a definitive solution to any specific problem. I think xml2py could be tweaked to support pulldom with little effort. I just know .NET FX very well, so it&#8217;s easier for me to focus on learning the language with a library I know then it is to learn the language and library at the same time. <\/p>\n<p>Thanks for the link to lxml.objectify. I&#8217;ll take a look at that too. I figure there must be other (and better) libraries out there that do something similar to xml2py. <\/p>\n","parent":0},{"id":2077,"name":"Oran","url":"http:\/\/orand.blogspot.com","date":"2008-05-06 21:20:33","content":"<p>Looks like LINQ to XSD!<\/p>\n","parent":0},{"id":2078,"name":"DevHawk","url":"","date":"2008-05-06 23:53:11","content":"<p>@Oran, except there&#8217;s no XSD required &#8211; xml2py works with any arbitrary XML stream<\/p>\n","parent":0}],"attachments":[],"comment_count":5,"comment_status":"closed","custom_fields":{"dasblog_entryid":["6eb7375a-4ee7-4846-a1ba-15f4abde9b98"],"dasblog_compressedtitle":["Deserializing+XML+With+IronPython"],"dasblog_compressedtitleunique":["2008\/05\/07\/Deserializing+XML+With+IronPython"]}},"previous_url":"http:\/\/devhawk.net\/2008\/05\/06\/stream-processing-xml-in-ironpython\/","next_url":"http:\/\/devhawk.net\/2008\/05\/08\/debugging-ironpython-code-in-visual-studio\/"}