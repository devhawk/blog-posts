{"status":"ok","post":{"id":1234,"type":"post","slug":"writing-an-ironpython-debugger-a-little-hack-err-cleanup","url":"http:\/\/devhawk.net\/2009\/03\/21\/writing-an-ironpython-debugger-a-little-hack-err-cleanup\/","status":"publish","title":"Writing an IronPython Debugger: A Little Hack&#8230;err&#8230;Cleanup","title_plain":"Writing an IronPython Debugger: A Little Hack&#8230;err&#8230;Cleanup","content":"<p>Yesterday, I pushed out two commits to <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/\">ipydbg<\/a>. <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/commit\/41285e5c6a639708b9ae9e4886f2f8f4ae159540\">The first<\/a> was simple, I removed all of the embedded ConsoleColorMgr code in favor of the separate <a href=\"http:\/\/devhawk.net\/2009\/03\/19\/IronPython+ConsoleColorMgr.aspx\">consolecolor.py module<\/a> I blogged about Thursday. The <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/commit\/b53ac99f95e0018db782abd52efea8e1fa56abd8\">second commit<\/a>\u2026well, let\u2019s just say it\u2019s not quite so simple.<\/p>\n<p>Last weekend, I was experimenting with breakpoints when I discovered that the <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/5858695ff85ed4740ad06466d4f54394e7f00f9b\/CorDebug\/CorDebug\/BreakpointEnumerator.cs#L53\">MoveNext method<\/a> of BreakpointEnumerator was throwing a NotImplementedException. Up to that point, I hadn\u2019t modified any of the MDbg C# source code except to merge the <a href=\"http:\/\/devhawk.net\/2009\/02\/27\/Writing+An+IronPython+Debugger+MDbg+101.aspx\">corapi and raw assemblies<\/a> into a single assembly. But since I had to <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/commit\/4ca5f2af90b73950f85cadfed7f3ca07cb783bba\">fix BreakpointEnumerator<\/a>, I figured I should make some improvements to the C# code as well. For example, I <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/commit\/0b50760d522c71be78839d3c38bc9f3e2ee2a168\">added helper functions<\/a> to easily retrieve the metadata for a <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/0b50760d522c71be78839d3c38bc9f3e2ee2a168\/CorDebug\/CorDebug\/Class.cs#L79\">class<\/a> or <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/0b50760d522c71be78839d3c38bc9f3e2ee2a168\/CorDebug\/CorDebug\/Thread.cs#L1102\">function<\/a>. <\/p>\n<p>In my latest commit, I\u2019ve added a <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/b53ac99f95e0018db782abd52efea8e1fa56abd8\/CorDebug\/CorDebug\/Module.cs#L132\">SymbolReader property to CorModule<\/a>. Previously, I managed the mapping from CorModules to SymbolReaders in my IPyDebugProcess class via the symbol_readers field. However, since mapping CorModules to SymbolReaders is something pretty much any debugger app would have to do, it made more sense to have that be a part of CorModule directly. So now, you can set and retrieve the SymbolReader directly on the module. Furthermore, I moved the logic to retrieve a SymbolReader from the IStream provided in the OnUpdateModuleSymbols event into the CorModule class as well.<\/p>\n<p>I wouldn\u2019t have bothered to blog this change at all, except that if you look at how the SymbolReader property is implemented under the hood, it\u2019s not what you would expect. Instead of having SymbolReader as an instance variable on CorModule \u2013 as you might expect -CorModule has a static dictionary mapping CorModules to SymbolReaders. The instance SymbolReader property simply then access to the underlying static dictionary. <\/p>\n<pre class=\"brush: csharp\">\n\/\/code taken from CorModule class in CorModule.cs \nprivate static Dictionary&lt;CorModule, ISymbolReader&gt; _symbolsMap =    \n                             new Dictionary&lt;CorModule, ISymbolReader&gt;();    \n\npublic ISymbolReader SymbolReader     \n{    \n    get    \n    {    \n        if (_symbolsMap.ContainsKey(this))    \n            return _symbolsMap[this];    \n        else    \n            return null;    \n    }    \n    set    \n    {    \n        _symbolsMap[this] = value;    \n    }    \n}\n<\/pre>\n<p>Now obviously, this the way you typically implement properties. However, the problem is that there isn\u2019t a 1-to-1 mapping between the underlying debugger COM object instances and the managed objects instances that wrap them. For example, if you look at the <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/b53ac99f95e0018db782abd52efea8e1fa56abd8\/CorDebug\/CorDebug\/Class.cs#L25\">CorClass:Module<\/a> property, it constructs a new managed wrapper for the COM interface it gets back from <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/b53ac99f95e0018db782abd52efea8e1fa56abd8\/CorDebug\/CorDebug\/NativeApi\/ICorDebugWrappers.cs#L727\">ICorDebugClass.GetModule<\/a>. That means that I can\u2019t store the symbol reader as an instance field in the managed wrapper since I probably will never see a given managed wrapper module instance ever again.<\/p>\n<p>All of the debugger API wrapper classes including CorModule inherit from a class named <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/b53ac99f95e0018db782abd52efea8e1fa56abd8\/CorDebug\/CorDebug\/WrapperBase.cs\">WrapperBase<\/a> which overrides Equals and GetHashCode. The overridden implementations defer to the wrapped COM interface, which means that two separate managed wrapper instances of the same COM interface will have the same hash code and will evaluate as equal. The upshot is that object uniqueness is determined by the wrapped COM object rather that the managed object instance itself. <\/p>\n<p>Using a static dictionary to store a module instance property provides the necessary \u201cit doesn\u2019t matter what managed object instance you use as long as they all wrap the same COM object underneath\u201d semantics. If I create multiple instances CorModule that all wrap the same underlying COM interface pointer, they\u2019ll all share the same SymbolReader instance from the dictionary. <\/p>\n<p>Yeah, it\u2019s feels kinda hacky, but it works.<\/p>\n","excerpt":"<p>Yesterday, I pushed out two commits to ipydbg. The first was simple, I removed all of the embedded ConsoleColorMgr code in favor of the separate consolecolor.py module I blogged about Thursday. The second commit\u2026well, let\u2019s just say it\u2019s not quite so simple. Last weekend, I was experimenting with breakpoints when I discovered that the MoveNext [&hellip;]<\/p>\n","date":"2009-03-21 16:27:18","modified":"2009-03-21 16:27:18","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":279,"slug":"debugger","title":"Debugger","description":"","post_count":23}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["aa1b0968-0c35-4e95-86f7-62b943d3474a"],"dasblog_compressedtitle":["Writing+An+IronPython+Debugger+A+Little+HackhelliperrhellipCleanup"],"dasblog_compressedtitleunique":["2009\/03\/21\/Writing+An+IronPython+Debugger+A+Little+HackhelliperrhellipCleanup"]}},"previous_url":"http:\/\/devhawk.net\/2009\/03\/19\/ironpython-consolecolormgr\/","next_url":"http:\/\/devhawk.net\/2009\/03\/23\/ironruby-0-3\/"}