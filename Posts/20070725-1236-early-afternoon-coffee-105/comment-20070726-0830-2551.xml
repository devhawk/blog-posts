<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>2551</wp:comment_id>
  <wp:comment_author><![CDATA[J Perseo]]></wp:comment_author>
  <wp:comment_author_email>jperseo@hotmail.com</wp:comment_author_email>
  <wp:comment_author_url>http://N/A</wp:comment_author_url>
  <wp:comment_author_IP>72.245.126.230</wp:comment_author_IP>
  <wp:comment_date>2007-07-26 08:30:44</wp:comment_date>
  <wp:comment_date_gmt>2007-07-26 15:30:44</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[Re: New XML draft

Here we go again ...

A long time ago in a galaxy far far away during the tech boom ...
I worked at a little company called XML Solutions that was made up of 1/2 of the XML 1.0 board.

Granted, I was a sys admin and hardly dealt with the language unless it was getting the Tomcat ISAPI to work with it, but I digress ...

The problem that I forsee with this course of action is thus :

- By restricting / reclassifying the XML, It has the effect of proprietizing XML. And of course, XML was created because companies couldn't agree on standards in the first place.

- By adding the Binary Elements to XML, the only good I could see coming from this is *possibly* additional layers / levels of security of data within the XML Structure.

One of the earliest issues / problems that my former company had was that potential clients / customers would demand that their version be unique to them. For Example: AmEx demanded certain portions of the XML structure be included while others were dis-cluded (?) resulting in a slightly proprietary new AMEXML .

Several others complained about the inherant openness of XML and how to secure the information in transit. This lead to a high utilization of EDI as more or less a transport layer or encryption of XML. This brought on a small boom for products such as XEDI (Pronounced Zee-Tea) to perform the EDI <-> XML translations.

Whoopie. Back to the present.

So now they want to re-invent the wheel so that binary code can be brought through a structured text file all over again. I think that people have "been there / done that". It's called UUENCODE. Get used to it.

The problem itself seems to lie in that no-one has noticed that a similar company generic structure and way of allowing standard information passing and notification has been around for years in a slightly modified form. Is anyone familiar with a SNMP Walker ? Has anyone addressed the issues with transporting information / transforming data within the confines of SNMP yet ?

I don't think so, but then again, a Pessimist is never disappointed ;-)
]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>