<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>3190</wp:comment_id>
  <wp:comment_author><![CDATA[Volker Hetzer]]></wp:comment_author>
  <wp:comment_author_email>volker.hetzer@ts.fujitsu.com</wp:comment_author_email>
  <wp:comment_author_url></wp:comment_author_url>
  <wp:comment_author_IP>80.70.169.36</wp:comment_author_IP>
  <wp:comment_date>2011-09-19 09:49:43</wp:comment_date>
  <wp:comment_date_gmt>2011-09-19 16:49:43</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[Hi!
Great talk, even it I only saw the recording!
Only, I still have some problems understanding the plumbing behind the WinRT/CLR stuff:
Given, for example a WinRT call that returns a vector or a Map, what do I really get?
Like, will the CLR GC be able to move it around, like native .NET objects?
Will a
<code>
foreach (WinRTObject O in X.GetWinRTCollection())
{
dowomethingWith(O;)
}
</code>
involve COM interop and RTW stuff?
I've asked this in <a href="http://social.msdn.microsoft.com/forums/en-us/vblanguage/thread/04955BA7-C940-46EB-8F55-374600AE262C" / rel="nofollow"> but so far didn't get enlightened very much.

Very nice talk!
Volker]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>