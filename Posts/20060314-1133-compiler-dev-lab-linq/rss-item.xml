<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Compiler Dev Lab - LINQ</title>
  <link>http://devhawk.net/2006/03/14/compiler-dev-lab-linq/</link>
  <pubDate>Tue, 14 Mar 2006 11:33:14 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://d8d60ca8-7b41-4d46-9cc6-e6a4cc05dfc3</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p></p><p>Even though I haven't finished my ETech postings, I'm already onto another event. This week, thanks to an invite from <a href="http://blogs.msdn.com/mglehman/">Michael Lehman</a>, I'm sitting in on a Compiler Lab discussing implementing other languages for CLR. The first day was about <a href="http://msdn.microsoft.com/netframework/future/linq/">LINQ</a>. Much of the info is rehashed from PDC or the docs up on MSDN. However, I have learned a few new things.</p><ul><li>One of the standard features of LINQ is Extension Methods. That enables you to declare a static method like "static void Foo(this string source)" and then use it like "stringvar.Foo()". Apparently, they are considering adding other types of extension members including properties and fields. The idea of extension fields is somewhat scary but powerful. </li><li>LINQ uses something Anders called deferred query execution. The query isn't executed until the values are asked for (typically by calling foreach on the query). That means you can compose queries to your hearts content with no perf impact until you actually invoke the query. </li><li><a href="http://msdn.microsoft.com/vbasic/Future/default.aspx?pull=/library/en-us/dnvs05/html/vb9overview.asp#vb9overview_topic7">Query Comprehensions</a> in C# and VB is a pattern implementation in a similar vein to foreach. Foreach is relatively simple shorthand for iterating through an collection by calling IEnumerator.MoveNext until it returns false. While LINQ enables arbitrary composition of queries, there is obvious gravitational pull towards the SELECT / FROM / WHERE / ORDER BY / GROUP BY approach favored by SQL. So if you build your own query operator, you can include it in a LINQ query, but C# and VB won't be able to include it in the Query Comprehension syntax. Probably not a big deal, given the breadth of standard query operators as well as the deferred query execution, but it's good to understand how the abstraction works.</li><li>I want to know more about how <a href="http://download.microsoft.com/download/c/f/b/cfbbc093-f3b3-4fdb-a170-604db2e29e99/DLinq%20Overview.doc">DLinq</a> is implemented. I've been refining my thinking about data since <a href="http://devhawk.net/2006/02/27/Experimenting+With+Ning.aspx">working with Ning's content store</a> and I'm convinced of the need for a simplified datastore. SQL is designed for significantly complex database schemas, which means a significantly complex development environment. </li><li>I'm looking much more closely at VB, given the new features in <a href="http://msdn.microsoft.com/vbasic/Future/default.aspx?pull=/library/en-us/dnvs05/html/vb9overview.asp">VB 9.0</a>. Not only the LINQ stuff from C# like type inference, extension methods and anonymous types but also VB specific stuff like <a href="http://msdn.microsoft.com/vbasic/Future/default.aspx?pull=/library/en-us/dnvs05/html/vb9overview.asp#vb9overview_topic6">XML Literals</a> and <a href="http://msdn.microsoft.com/vbasic/Future/default.aspx?pull=/library/en-us/dnvs05/html/vb9overview.asp#vb9overview_topic12">Duck Typing</a>. Combined with VB's existing support for late binding, there are compelling features to make VB attractive over C#. </li><li>I've been hanging out with <a href="http://weblogs.asp.net/brianbec">Brian Beckman</a>. He's a hoot. </li><li>I think I need to take a deeper look at <a href="http://research.microsoft.com/fsharp/">F#</a>.</li></ul>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">722</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2006-03-14 11:33:14</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2006-03-14 11:33:14</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">compiler-dev-lab-linq</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[d8d60ca8-7b41-4d46-9cc6-e6a4cc05dfc3]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Compiler+Dev+Lab+LINQ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2006/03/14/Compiler+Dev+Lab+LINQ]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2330</wp:comment_id>
    <wp:comment_author><![CDATA[Sam Gentile]]></wp:comment_author>
    <wp:comment_author_email></wp:comment_author_email>
    <wp:comment_author_url>http://codebetter.com/blogs/sam.gentile/</wp:comment_author_url>
    <wp:comment_author_IP>131.107.167.9</wp:comment_author_IP>
    <wp:comment_date>2006-03-14 17:18:01</wp:comment_date>
    <wp:comment_date_gmt>2006-03-15 00:18:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[What, no mention of hanging out with me today at the F# thing? -))]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2331</wp:comment_id>
    <wp:comment_author><![CDATA[Keith J. Farmer]]></wp:comment_author>
    <wp:comment_author_email>kfarmer@microsoft.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>70.89.126.54</wp:comment_author_IP>
    <wp:comment_date>2006-03-15 00:20:13</wp:comment_date>
    <wp:comment_date_gmt>2006-03-15 07:20:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, it's not like us DLinq devs are exactly hiding.. ;)
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>