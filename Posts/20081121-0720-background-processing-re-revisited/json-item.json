{"status":"ok","post":{"id":1193,"type":"post","slug":"background-processing-re-revisited","url":"http:\/\/devhawk.net\/2008\/11\/21\/background-processing-re-revisited\/","status":"publish","title":"Background Processing Re-Revisited","title_plain":"Background Processing Re-Revisited","content":"<p>OK, here\u2019s the last word on this whole background processing \/ concurrency decorators thing. I went back and re-wrote the <a href=\"http:\/\/devhawk.net\/2008\/11\/19\/IronPython+And+WPF+Part+4+Background+Processing.aspx\">original decorators<\/a>, but using the approach I used with the <a href=\"http:\/\/devhawk.net\/2008\/11\/20\/IronPython+And+WPF+Background+Processing+Revisited.aspx\">SyncContext version<\/a>. I don\u2019t want to rehash it again, here are the main points:<\/p>\n<ul>\n<li>Instead of using a property to retrieve the dispatcher, I get it via Application.Current.MainWindow.Dispatcher (checking to be sure Current and MainWindow aren\u2019t null\u2026err, None). This way, I pick up the dispatcher automatically rather than forcing a specific interface on the class with decorated methods. In fact, this approach should work with pure functions as well.<\/li>\n<li>Since I don\u2019t have a convenient function like SetSynchronizationContext, I store the dispatcher in thread local storage for later use in calling back to the UI thread.<\/li>\n<li>Unlike the SyncContext version, this version propagates the return value of @UIThread decorated functions. I don\u2019t propagate the return value of @BGThread functions \u2013 there\u2019d be no point farming a task to a background thread then blocking the UI thread waiting for a response.<\/li>\n<\/ul>\n<p>As usual, the code is <a href=\"http:\/\/cid-0d9bc809858885a4.skydrive.live.com\/self.aspx\/DevHawk%20Content\/IronPython%20Stuff\/WpfThreadDemo3.zip\">on my SkyDrive<\/a>. It includes both the SyncContext and Dispatcher version of the decorators. <\/p>\n","excerpt":"<p>OK, here\u2019s the last word on this whole background processing \/ concurrency decorators thing. I went back and re-wrote the original decorators, but using the approach I used with the SyncContext version. I don\u2019t want to rehash it again, here are the main points: Instead of using a property to retrieve the dispatcher, I get [&hellip;]<\/p>\n","date":"2008-11-21 07:20:28","modified":"2008-11-21 07:20:28","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":272,"slug":"parallel-programming","title":"Parallel Programming","description":"","post_count":3},{"id":271,"slug":"wpf","title":"WPF","description":"","post_count":8}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["04bd475a-9970-4b13-9380-eae294617f5d"],"dasblog_compressedtitle":["Background+Processing+ReRevisited"],"dasblog_compressedtitleunique":["2008\/11\/21\/Background+Processing+ReRevisited"]}},"previous_url":"http:\/\/devhawk.net\/2008\/11\/21\/introducing-ironpython-article\/","next_url":"http:\/\/devhawk.net\/2008\/11\/21\/resolver-one-1-3-released\/"}