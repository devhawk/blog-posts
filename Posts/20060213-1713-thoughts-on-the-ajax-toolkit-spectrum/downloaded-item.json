{"status":"ok","post":{"id":691,"type":"post","slug":"thoughts-on-the-ajax-toolkit-spectrum","url":"http:\/\/devhawk.net\/2006\/02\/13\/thoughts-on-the-ajax-toolkit-spectrum\/","status":"publish","title":"Thoughts on the AJAX Toolkit Spectrum","title_plain":"Thoughts on the AJAX Toolkit Spectrum","content":"<p>Last week, <a href=\"http:\/\/web2.wsj2.com\/\">Dion<\/a> wrote about the <a href=\"http:\/\/web2.wsj2.com\/web_20_design_the_ajax_spectrum.htm\">spectrum of AJAX tookits<\/a>. He ended with a question, wondering which end of the spectrum will dominate? Will it be lightweight composable toolkits like <a href=\"http:\/\/prototype.conio.net\/\">prototype<\/a>, <a href=\"http:\/\/script.aculo.us\/\">script.aculo.us<\/a> or <a href=\"http:\/\/dojotoolkit.org\/\">Dojo<\/a>? Or a more comprehensive toolkit like <a href=\"http:\/\/atlas.asp.net\/\">Atlas<\/a>?<\/p>\n<p>This came up in a chat I had w\/ <a href=\"http:\/\/www.jnsk.se\/weblog\/\">Jimmy Nilsson<\/a> today. Well, not specifically about AJAX toolkits. Rather, we were talking about <a href=\"http:\/\/www.jnsk.se\/weblog\/posts\/SemanticsLater.htm\">what he called<\/a> technicalities vs. semantics:<\/p>\n<blockquote><p>I have noticed that there seems to be a focus first on the technicalities and then on the semantics. Take Indigo (or WCF) for example. There has been sooo much talk about its technical aspects, but very little talk about how to design for it. I&#8217;m pretty sure that when the technicalities have been sorted, it&#8217;s time for the semantic side. I&#8217;m not thinking about technical semantics, but rather business semantics. <\/p>\n<\/blockquote>\n<p>On more than one occasion, I&#8217;ve had a head-beating-wall conversations with WCF folks who are completely obsessed with the secure, reliable and transactional delivery of messages, but have given exactly zero thought to the actual contents of said message. So I know where Jimmy is coming from. <\/p>\n<p>With respect to AJAX toolkits, the question becomes just how easy will these lightweight toolkits compose? Because while Dion describes Google Maps as &#8220;a simple JavaScript include&#8221;, that&#8217;s just the technicalities, it doesn&#8217;t begin to deal with the semantics. For example, Dojo has <a href=\"http:\/\/manual.dojotoolkit.org\/collections\/Dictionary.html\">Dictionary object<\/a>, prototype has a <a href=\"http:\/\/www.sergiopereira.com\/articles\/prototype.js.html#Reference.Hash\">Hash object<\/a>. Dojo <a href=\"http:\/\/manual.dojotoolkit.org\/collections\/ArrayList.html\">extends the Javascript Array<\/a>, so <a href=\"http:\/\/www.sergiopereira.com\/articles\/prototype.js.html#Reference.Array\">does prototype<\/a>. Both libraries wrap the XmlHttpRequest object. In each of these cases, it appears to me\u00a0that the library authors have focused on the technicalities, but not thought about the semantics. These implementations are all semantically similar, but incompatible. So I don&#8217;t buy that these lightweight toolkits will compose well. What do I do if I&#8217;m using prototype but want the rich text editor in Dojo? <\/p>\n<p>The network effect that Dion doesn&#8217;t consider is the component ecosystem phenomenon that Microsoft has a ton of experience with. Old school VB, COM\/ActiveX and .NET have all had large ecosystems of components and controls evolve that extend the functionality of the baseline development platform. There&#8217;s no reason to believe that won&#8217;t happen with Atlas. I think it&#8217;s wrong to describe Atlas as a monolith or self-contained or enclosing. It&#8217;s an extensible baseline platform &#8211; i.e. the baseline functionality is set down once at the development platform and the ecosystem can extend it from there. Sure, overlapping extensions happen (how many rich text editor components are there for ASP.NET?) but at least they all have basic compatibility.<\/p>\n<p><strong>Update<\/strong> &#8211; Fixed link to Dojo Toolkit in the first paragraph.<\/p>\n","excerpt":"<p>Last week, Dion wrote about the spectrum of AJAX tookits. He ended with a question, wondering which end of the spectrum will dominate? Will it be lightweight composable toolkits like prototype, script.aculo.us or Dojo? Or a more comprehensive toolkit like Atlas? This came up in a chat I had w\/ Jimmy Nilsson today. Well, not [&hellip;]<\/p>\n","date":"2006-02-13 17:13:53","modified":"2006-02-13 17:13:53","categories":[{"id":177,"slug":"architecture","title":"Architecture","description":"","parent":0,"post_count":296}],"tags":[{"id":188,"slug":"web-2-0","title":"Web 2.0","description":"","post_count":67}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2900,"name":"Tom Trenka","url":"http:\/\/dojotoolkit.org","date":"2006-02-16 11:12:56","content":"<p>Hi,<\/p>\n<p>Just a couple of Dojo clarifications:<br \/>\na. the URL is <a href=\"http:\/\/dojotoolkit.org\" rel=\"nofollow\">http:\/\/dojotoolkit.org<\/a> (I think you&#8217;ve got .com there).<br \/>\nb. The Dojo Dictionary and ArrayList classes are actually derived from\/influenced by the .NET framework (with adjustments); ArrayList doesn&#8217;t extend the Javascript array as much as wraps it and imparts .NET ArrayList type functionality on it.<\/p>\n<p>As far as technicalities vs. semantics, I have to agree with you <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" \/> <\/p>\n","parent":0},{"id":2901,"name":"Rob Sanheim","url":"http:\/\/www.robsanheim.com","date":"2006-05-08 12:56:57","content":"<p>To answer your question about using prototype and also using the dojo rich text editor &#8211; you just use prototype, and require the dojo widget package.  They work fine together.  Dojo plays in its own namespace, and Prototype works in its own.  There could be issues if Dojo uses the for..in construct with objects that Prototype extends, but besides that there they should be fine together.  <\/p>\n<p>So in the real world, you see these libraries used together when appropriate, and they work fine.<\/p>\n","parent":0}],"attachments":[],"comment_count":2,"comment_status":"closed","custom_fields":{"dasblog_entryid":["58c50049-f42d-4b2d-9dd7-7dc9c5117cc0"],"dasblog_compressedtitle":["Thoughts+On+The+AJAX+Toolkit+Spectrum"],"dasblog_compressedtitleunique":["2006\/02\/14\/Thoughts+On+The+AJAX+Toolkit+Spectrum"]}},"previous_url":"http:\/\/devhawk.net\/2006\/02\/13\/the-next-mainstream-programming-language\/","next_url":"http:\/\/devhawk.net\/2006\/02\/13\/yet-another-ajax-toolkit\/"}