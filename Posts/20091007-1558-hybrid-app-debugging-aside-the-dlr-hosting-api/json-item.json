{"status":"ok","post":{"id":1292,"type":"post","slug":"hybrid-app-debugging-aside-the-dlr-hosting-api","url":"http:\/\/devhawk.net\/2009\/10\/07\/hybrid-app-debugging-aside-the-dlr-hosting-api\/","status":"publish","title":"Hybrid App Debugging Aside &#8211; The DLR Hosting API","title_plain":"Hybrid App Debugging Aside &#8211; The DLR Hosting API","content":"<p>In my series on <a href=\"http:\/\/devhawk.net\/2009\/10\/06\/Lightweight+Debugging+For+Hybrid+CIronPython+Apps.aspx\">Hybrid App Debugging<\/a>, I showed the following code for executing a Python file in a hybrid C#\/IronPython app.<\/p>\n<pre class=\"brush: csharp\">\nprivate void Window_Loaded(object sender, RoutedEventArgs e)\n{\n    ScriptEngine engine = Python.CreateEngine();\n    ScriptScope  scope = engine.CreateScope();\n    scope.SetVariable(\"items\", lbThings.Items);\n    engine.ExecuteFile(\"getthings.py\", scope);\n}\n<\/pre>\n<p>The <a href=\"javascript:window.location.href='http:\/\/dlr.codeplex.com\/Project\/Download\/FileDownload.aspx?DownloadId=84001';\">DLR Hosting API<\/a> has three distinct levels of functionality. As simple as this is, technically it\u2019s level 2 since it\u2019s using a ScriptEngine directly. If you wanted to use the simplest level 1 hosting API, you could use runtimes instead of engines and save a line of code.<\/p>\n<pre class=\"brush: csharp\">\nprivate void Window_Loaded(object sender, RoutedEventArgs e)\n{\n    ScriptRuntime runtime = Python.CreateRuntime();\n    runtime.Globals.SetVariable(\"items\", lbThings.Items);\n    runtime.ExecuteFile(\"getthings.py\");\n}\n<\/pre>\n<p>The ScriptRuntime version of ExecuteFile doesn\u2019t include an overload that takes a ScriptScope like ScriptEngine does, so instead you add the items variable to the globals scope. However, this doesn\u2019t automatically add the items object to every child scope \u2013 you have to explicitly import items into the local scope if you want to use it. So for Python, that means you need to add \u201cimport items\u201d to the top of the GetThings.py script. Nothing else changes.<\/p>\n<p>Personally, I find DLR Hosting API Level 2 to be straightforward and easy enough to understand, so I tend to code to that level by default. I actually had to go read the doc to discover the ScriptRuntime.Globals property and talk to Dino about importing those variables into a local scope. However, I wanted to point out that nothing in my Hybrid App Debugging sample so far is really dependent on the level 2 API. If you just want to execute some Python files in the context of your C# application, you can stick with the simpler level 1 API if you want. You can even use lightweight debugging with the level 1 API \u2013 there\u2019s an overload of the SetTrace extension method for ScriptRuntimes just as there is for ScriptEngines. Just something to keep in mind.<\/p>\n","excerpt":"<p>In my series on Hybrid App Debugging, I showed the following code for executing a Python file in a hybrid C#\/IronPython app. private void Window_Loaded(object sender, RoutedEventArgs e) { ScriptEngine engine = Python.CreateEngine(); ScriptScope scope = engine.CreateScope(); scope.SetVariable(&#8220;items&#8221;, lbThings.Items); engine.ExecuteFile(&#8220;getthings.py&#8221;, scope); } The DLR Hosting API has three distinct levels of functionality. As simple as [&hellip;]<\/p>\n","date":"2009-10-07 15:58:15","modified":"2009-10-07 15:58:15","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":231,"slug":"dlr","title":"DLR","description":"","post_count":25},{"id":292,"slug":"hosting-api","title":"Hosting API","description":"","post_count":1},{"id":291,"slug":"lightweight-debugger","title":"Lightweight Debugger","description":"","post_count":5}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["96e3d1b3-5adc-4e69-b414-e69a6e5a05d0"],"dasblog_compressedtitle":["Hybrid+App+Debugging+Aside+The+DLR+Hosting+API"],"dasblog_compressedtitleunique":["2009\/10\/07\/Hybrid+App+Debugging+Aside+The+DLR+Hosting+API"]}},"previous_url":"http:\/\/devhawk.net\/2009\/10\/07\/hybrid-app-debugging-tracebackdelegate-and-settrace\/","next_url":"http:\/\/devhawk.net\/2009\/10\/08\/hybrid-app-debugging-threading\/"}