{"status":"ok","post":{"id":1233,"type":"post","slug":"writing-an-ironpython-debugger-showing-source-code","url":"http:\/\/devhawk.net\/2009\/03\/19\/writing-an-ironpython-debugger-showing-source-code\/","status":"publish","title":"Writing an IronPython Debugger: Showing Source Code","title_plain":"Writing an IronPython Debugger: Showing Source Code","content":"<p>It\u2019s been almost a week since my <a href=\"http:\/\/devhawk.net\/2009\/03\/13\/Writing+An+IronPython+Debugger+Debugging+Just+My+Code.aspx\">last ipydbg post<\/a>. I\u2019m not done, I just needed to catch my breath for a few days and get some other work done. Contrary to popular believe, my day job revolves around more than just ipydbg! <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_smile.gif\" class=\"grouped_elements\" rel=\"tc-fancybox-group1233\" alt=\":)\" class=\"wp-smiley\" \/> <\/p>\n<p>Actually, I\u2019ve made ten commit since my last post, but it\u2019s been a mostly minor changes. For example, I was hacking around with breakpoints and restored a bunch of <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/commit\/4ca5f2af90b73950f85cadfed7f3ca07cb783bba\">commented out code in BreakpointEnumerator<\/a>. Since I was changing the original C# CorDebug wrapper source, I decided to add a <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/commit\/0b50760d522c71be78839d3c38bc9f3e2ee2a168\">few helper functions<\/a> to return metadata for functions and classes as well as cleaning up some C# filenames. On the Python side, I <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/commit\/0cc6f38db56f4b6cc35acc75f8a28aae070c615a\">added an active_appdomain field<\/a> to IPyDebugProcess to go along with active_thread. <\/p>\n<p>Today, I added what started as a fairly minor feature \u2013 showing the current line of source code at the start of the input loop. The <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/commit\/2e7681966be3aebbcfb7cefd6488d34fc62427cd\">initial code<\/a> for this was cake, simply getting the sequence point for the current location and mapping that to a source file. In order to avoid hitting the file system over and over, I cache source files the first time they are accessed.<\/p>\n<pre class=\"brush: python\">\ndef _get_file(self,filename):     \n    filename = Path.GetFileName(filename)     \n    if not filename in self.source_files:     \n      self.source_files[filename] = File.ReadAllLines(filename)     \n    return self.source_files[filename]  \n\ndef _input(self):     \n    offset, sp = self._get_location(self.active_thread.ActiveFrame)     \n    lines = self._get_file(sp.doc.URL)     \n    print \"%d:\" % sp.start_line, lines[sp.start_line-1]     \n    #input loop ommited for clarity\n<\/pre>\n<p>However, when I did this, I discovered a slight issue. When you step into a Python function, the CLR debugger breaks at the very beginning of the function being stepped into. In C#, the function start is mapped to the opening curly brace of the function. IronPython, on the other hand, doesn\u2019t map the start of the function to anything since there\u2019s a bunch of infrastructure code at the start of every function that has no correlation to the python source. This means _get_location return a null sequence point when I first step into a function and thus I wouldn\u2019t be able to show any source code.<\/p>\n<p>I could make the argument that start of the function should be mapped to the colon that starts the function block. However, I\u2019m not in a position to make changes to how the shipping version of IronPython emits debug symbols. So instead, I decided to insert an automatic step whenever I step into a function by modifying OnStepComplete:<\/p>\n<pre class=\"brush: python\">\ndef OnStepComplete(self, sender,e):     \n    offset, sp = self._get_location(e.Thread.ActiveFrame)     \n    print \"OnStepComplete Reason:\", e.StepReason,      \n           \"Location:\", sp if sp != None else \"offset %d\" % offset     \n    if e.StepReason == CorDebugStepReason.STEP_CALL:     \n      self._do_step(e.Thread, False)     \n    else:     \n      self._do_break_event(e)\n<\/pre>\n<p>I have this nagging feeling that a simple step won\u2019t suffice and I\u2019ll need to add logic to ensure that I\u2019m only auto-stepping when the start of the function doesn\u2019t have a matching sequence point. But I have tested this with a few different python scripts and it appears to work fine. If I need something more sophisticated, I can always add it later. BTW, notice I modified the signature of _do_step so that it takes the thread as an argument rather than picking it up as an IPyDebugProcess field.<\/p>\n<p>As usual, <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/tree\/2e7681966be3aebbcfb7cefd6488d34fc62427cd\">latest ipydbg<\/a> (including new compiled version of CorDebug.dll) is available at GitHub.<\/p>\n","excerpt":"<p>It\u2019s been almost a week since my last ipydbg post. I\u2019m not done, I just needed to catch my breath for a few days and get some other work done. Contrary to popular believe, my day job revolves around more than just ipydbg! Actually, I\u2019ve made ten commit since my last post, but it\u2019s been [&hellip;]<\/p>\n","date":"2009-03-19 14:58:25","modified":"2009-03-19 14:58:25","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":279,"slug":"debugger","title":"Debugger","description":"","post_count":23}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["b77d89ec-e843-428a-824f-2719f11b88ee"],"dasblog_compressedtitle":["Writing+An+IronPython+Debugger+Showing+Source+Code"],"dasblog_compressedtitleunique":["2009\/03\/19\/Writing+An+IronPython+Debugger+Showing+Source+Code"]}},"previous_url":"http:\/\/devhawk.net\/2009\/03\/13\/writing-an-ironpython-debugger-debugging-just-my-code\/","next_url":"http:\/\/devhawk.net\/2009\/03\/19\/writing-an-ironpython-debugger-colorful-console\/"}