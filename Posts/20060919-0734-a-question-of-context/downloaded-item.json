{"status":"ok","post":{"id":796,"type":"post","slug":"a-question-of-context","url":"http:\/\/devhawk.net\/2006\/09\/19\/a-question-of-context\/","status":"publish","title":"A Question of Context","title_plain":"A Question of Context","content":"<\/p>\n<p>A couple of weeks ago, <a href=\"http:\/\/www.davidchappell.com\">David Chappell<\/a> posted a great article on <a href=\"http:\/\/www.davidchappell.com\/HTML_email\/Opinari_No16_8_06.html\">SOA and the Reality of Reuse<\/a>. When someone mentions the idea of using SOA for reuse, I cringe. David does a great job blowing the &#8220;SOA for Reuse&#8221; argument out of the water. In the future, I will just send that link rather than spending the time arguing out the point.<\/p>\n<p>But something nagged at the back of my brain about that post. David starts by talking about object reuse before making the parallel to services. The problem with that comparison is that object reuse <em>hasn&#8217;t<\/em> been a failure. When was the last time you wrote a String class? A Linked List? A Button? There&#8217;s been support for <a href=\"http:\/\/msdn.microsoft.com\/library\/en-us\/shellcc\/platform\/commctls\/buttons\/buttons.asp\">Buttons<\/a> in\u00a0Windows\u00a0since at least the 3.x days (probably longer, but that&#8217;s before my time). Whatever your OO language of choice, there&#8217;s a big collection of reusable objects to go with it.<\/p>\n<p>Given his position as &#8220;famous technology author&#8221;, I&#8217;m assuming David is well aware of successes of object reuse. Furthermore, I doubt it was an accident that in his article he writes that &#8220;reuse of <strong>business<\/strong>\u00a0objects failed&#8221; (emphasis added). While there has been success around object reuse, essentially none of those successes have been in a business scenario. In fact, there have been some high profile projects such as <a href=\"http:\/\/www.microsoft-watch.com\/article2\/0,1995,1875024,00.asp\">Microsoft&#8217;s Business Framework<\/a> and <a href=\"http:\/\/www.research.ibm.com\/journal\/sj\/373\/rubin.html\">IBM&#8217;s San Francisco Project<\/a>\u00a0that have <strike>crashed and burned<\/strike> been significantly less than successful.<\/p>\n<p>So here&#8217;s the question: given that general object reuse has seen some success, what&#8217;s so different about business objects that causes reuse to fail utterly? Since we&#8217;re really interested in service reuse, knowing why some object reuse succeeds and other reuse fails will help us understand which services are likely to be reusable and which wont. I would say that success of object reuse hinges on context.<\/p>\n<p>Wikipedia gives this definition of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Context\">context<\/a>: &#8220;The <b>context<\/b> of an event, word, paradigm, change or other reality includes the circumstances and conditions which <i><b>surround<\/b><\/i> it.&#8221; (emphasis in original) For example, the word &#8220;order&#8221; is ambiguous. If you&#8217;re using a procurement system for the military, you could conceivably be given an order to place an order. (OK, that&#8217;s silly. But you get the idea.) The word &#8220;order&#8221; has two different meanings. However, the words that surround the ambiguous\u00a0term make the meaning clear. An order that you place is different that an order that you give. That&#8217;s context.<\/p>\n<p>A string or a linked list or a button has very little in the way of contextual needs. That is to say you can use it the exact same way in a wide variety of environments. A business object on the other hand has significant contextual requirements, which makes reuse difficult or impossible. For example, a Purchase Order object from the above-mentioned military procurement system sounds like it might be reusable. At least until you take into account the differences between branches of the military, between ordering\u00a0tanks and ordering uniforms, between active units and reserve units, etc. Once the generic Purchase Order has been specialized to the point of practical usability for a given scenario, it&#8217;s no longer reusable in the general case.<\/p>\n<p>Taking this back to the service realm, likewise I figure the reusable services will be the ones with little or no contextual needs. A good example is the identity and directory services such as <a href=\"http:\/\/www.microsoft.com\/windowsserver2003\/technologies\/directory\/activedirectory\">Active Directory<\/a> and its competitors. Sure, you use LDAP not SOAP to access it, but AD is certainly both reusable and a service plus it&#8217;s in wide usage. Other candidates for reusable services my team is looking at are service directory, management and operations, business activity monitoring and provisioning.<\/p>\n<p>I actually think there will be <em>less<\/em> reuse in services than there was with objects. The value of reuse of services has to exceed not only the contextual issues but also the overhead of distributed access. Calling across the network is an expensive operation &#8211; whatever&#8217;s on the other side better be worth the drive. I&#8217;m guessing for services, more often than not, reuse won&#8217;t be worth the trip (if it&#8217;s possible at all).<\/p>\n<p><strong>Update <\/strong>- David pointed out to me that the last paragraph of his article begins:<\/p>\n<blockquote><p>Object reuse has been successful in some areas. The large class libraries in J2EE and the .NET Framework are perhaps the most important examples of this.<\/p>\n<\/blockquote>\n<p>Doh! I guess my &#8220;assumption&#8221; that David is aware of successful object reuse was correct. <\/p>\n","excerpt":"<p>A couple of weeks ago, David Chappell posted a great article on SOA and the Reality of Reuse. When someone mentions the idea of using SOA for reuse, I cringe. David does a great job blowing the &#8220;SOA for Reuse&#8221; argument out of the water. In the future, I will just send that link rather [&hellip;]<\/p>\n","date":"2006-09-19 07:34:07","modified":"2006-09-19 07:34:07","categories":[{"id":177,"slug":"architecture","title":"Architecture","description":"","parent":0,"post_count":296}],"tags":[{"id":316,"slug":"object-oriented","title":"Object Oriented","description":"","post_count":4},{"id":220,"slug":"reuse","title":"Reuse","description":"","post_count":5},{"id":183,"slug":"soa","title":"SOA","description":"","post_count":94}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2406,"name":"Thomas Beck","url":"http:\/\/www.beckshome.com","date":"2006-09-19 19:00:22","content":"<p>Great follow-up to David&#8217;s original post. I think your addition of the &#8220;context&#8221; idea to the discussion has really added a lot. In my opnion, this brings us right back to the old black box, grey box, white box discussion.<\/p>\n<p>I elaborate in my post <a href=\"http:\/\/www.beckshome.com\/PermaLink,guid,7b0aa555-c37a-44e9-baf3-b69f6b1efc30.aspx\" rel=\"nofollow\">http:\/\/www.beckshome.com\/PermaLink,guid,7b0aa555-c37a-44e9-baf3-b69f6b1efc30.aspx<\/a><\/p>\n","parent":0}],"attachments":[],"comment_count":1,"comment_status":"closed","custom_fields":{"dasblog_entryid":["f78c8901-b413-4200-b824-cdb1f7bc936f"],"dasblog_compressedtitle":["A+Question+Of+Context"],"dasblog_compressedtitleunique":["2006\/09\/19\/A+Question+Of+Context"]}},"previous_url":"http:\/\/devhawk.net\/2006\/09\/17\/managed-lex-and-yacc\/","next_url":"http:\/\/devhawk.net\/2006\/09\/20\/hard-on-hardware\/"}