{"status":"ok","post":{"id":1031,"type":"post","slug":"datareaders-linq-to-xml-and-range-generation","url":"http:\/\/devhawk.net\/2007\/08\/17\/datareaders-linq-to-xml-and-range-generation\/","status":"publish","title":"DataReaders, LINQ to XML and Range Generation","title_plain":"DataReaders, LINQ to XML and Range Generation","content":"<p>I&#8217;m doing a bunch of database \/ XML stuff @ work, so I decided to use to <a href=\"http:\/\/msdn2.microsoft.com\/en-us\/vstudio\/aa700831.aspx\" target=\"_blank\">VS08 beta 2<\/a> so I can use LINQ. For reasons I don&#8217;t want to get into, I needed a way to convert arbitrary database rows, read using a SqlDataReader, into XML. LINQ to SQL was out, since the code has to work against arbitrary tables (i.e. I have no compile time schema knowledge). But <span style=\"text-decoration: line-through;\">XLinq<\/span> LINQ to XML helped me out a ton. Check out this example:<\/p>\n<pre class=\"brush: csharp\">const string ns = \"{http:\/\/some.sample.namespace.schema}\";\r\n\r\nwhile (dr.Read())\r\n{\r\n    XElement rowXml = new XElement(ns + tableName,\r\n        from i in GetRange(0, dr.FieldCount)\r\n        select\r\n            new XElement(ns + dr.GetName(i), dr.GetValue(i)));\r\n}<\/pre>\n<p>That&#8217;s pretty cool. The only strange thing in there is the GetRange method. I needed an easy way to build a range of integers from zero to the number of fields in the data reader. I wasn&#8217;t sure of any standard way, so I wrote this little two line function:<\/p>\n<pre class=\"brush: csharp\">IEnumerable&lt;int&gt; GetRange(int min, int max)\r\n{\r\n    for (int i = min; i &lt; max; i++)\r\n        yield return i;\r\n}<\/pre>\n<p>It&#8217;s simple enough, but I found it strange that I couldn&#8217;t find a standard way to generate a range with a more elegant syntax. Ruby has standard range syntax that looks like (1..10), but I couldn&#8217;t find the equivalent C#. Did I miss something, or am I really on my own to write a GetRange function?<\/p>\n<p><span style=\"text-decoration: underline;\">Update<\/span> &#8211; As expected, I missed something. John Lewicki pointed me to the static <a href=\"http:\/\/msdn2.microsoft.com\/en-us\/library\/system.linq.enumerable.range(VS.90).aspx\">Enumerable.Range<\/a> method that does exactly what I needed.<\/p>\n","excerpt":"<p>I&#8217;m doing a bunch of database \/ XML stuff @ work, so I decided to use to VS08 beta 2 so I can use LINQ. For reasons I don&#8217;t want to get into, I needed a way to convert arbitrary database rows, read using a SqlDataReader, into XML. LINQ to SQL was out, since the [&hellip;]<\/p>\n","date":"2007-08-17 16:55:01","modified":"2011-04-17 00:28:57","categories":[{"id":204,"slug":"development","title":"Development","description":"","parent":0,"post_count":165}],"tags":[{"id":203,"slug":"ado-net","title":"ADO.NET","description":"","post_count":5},{"id":214,"slug":"database","title":"Database","description":"","post_count":13},{"id":224,"slug":"linq","title":"LINQ","description":"","post_count":24},{"id":190,"slug":"ruby","title":"Ruby","description":"","post_count":23},{"id":238,"slug":"xml","title":"XML","description":"","post_count":11}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2573,"name":"Andres Aguiar","url":"http:\/\/weblogs.asp.net\/aaguiar","date":"2007-08-17 17:56:34","content":"<p>AFAIK there&#8217;s no standard way of doing it, but you could add an extension method to &#8216;Int32&#8242; <\/p>\n<p>public static IEnumerable<int> RangeFromZero(this int number)<br \/>\n{<br \/>\n   for (int i = 0; i < number; i++)<br \/>\n   {<br \/>\n      yield return i;<br \/>\n   }<br \/>\n}<\/p>\n<p>and have something like<\/p>\n<p>from i in dr.FieldCount.RangeFromZero()<\/p>\n<p>or<\/p>\n<p>from i in dr.FieldCount.Range(0)<\/p>\n<p>with a &#8216;Range&#8217; extension method, which is the same that you wrote but a little cooler ;).<\/p>\n<p><\/int><\/p>\n","parent":0},{"id":2574,"name":"Alex James","url":"http:\/\/www.base4.net\/blog.aspx?ID=409","date":"2007-08-17 22:04:41","content":"<p>Even better is to add an Extension method to IDataReader to make it enumerable of IDataRecord, I mean semantically it is anyway&#8230;<\/p>\n<p>public static IEnumerable<idatarecord> Enumerate(this IDataReader reader)<br \/>\n{<\/p>\n<p>using (reader)<br \/>\n    {<\/p>\n<p>while (reader.Read())<\/p>\n<p>yield return reader;<\/p>\n<p>    }<br \/>\n}<\/p>\n<p>Then you can do from r in reader.Enumerate() from i in GetRange(&#8230;) etc&#8230;.<\/idatarecord><\/p>\n","parent":0},{"id":2575,"name":"John Lewicki","url":"","date":"2007-08-18 05:22:32","content":"<p>I believe System.Linq.Enumerable.Range() is exactly the same as your GetRange method.<\/p>\n","parent":0},{"id":2576,"name":"Anonymous","url":"","date":"2007-08-21 10:16:04","content":"<p>Another minor improvement:<\/p>\n<p>XNamespace ns = &#8220;http:\/\/some.sample.namespace.schema&#8221;;<br \/>\nwhile (dr.Read())<br \/>\n{<br \/>\n    XElement rowXml = new XElement(ns + tableName,<br \/>\n                          from i in Enumerable.Range(0, dr.FieldCount)<br \/>\n                          select new XElement(ns + dr.GetName(i), dr.GetValue(i)));<br \/>\n}<\/p>\n","parent":0}],"attachments":[],"comment_count":4,"comment_status":"closed","custom_fields":{"dasblog_entryid":["90dc9487-d2bc-436b-8446-25b249f1539d"],"dasblog_compressedtitle":["DataReaders+LINQ+To+XML+And+Range+Generation"],"dasblog_compressedtitleunique":["2007\/08\/17\/DataReaders+LINQ+To+XML+And+Range+Generation"]}},"previous_url":"http:\/\/devhawk.net\/2007\/08\/17\/morning-coffee-112\/","next_url":"http:\/\/devhawk.net\/2007\/08\/23\/morning-coffee-113\/"}