<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Monadic Philosophy</title>
  <link>http://devhawk.net/2008/07/29/monadic-philosophy/</link>
  <pubDate>Wed, 30 Jul 2008 00:10:16 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://2ab057d0-cfbb-4941-a275-e5decbd1838c</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>(Since I accidentally <a href="http://devhawk.net/2008/07/30/Pushed+The+Wrong+Button.aspx">published part one</a> of this series a few minutes ago, I figured I might as well start publishing the series.)</p><p>If you start learning functional programming, eventually you'll come across the idea of a <a href="http://en.wikipedia.org/wiki/Monad_%28functional_programming%29">monad</a>. Coming from the object/imperative world of languages like C#, I've had a hard time wrapping my head around this concept. There's no shortage of <a href="http://en.wikipedia.org/wiki/Monad_%28functional_programming%29#External_links">monad tutorials</a> out there, but most use <a href="http://www.prairienet.org/~dsb/monads.htm">Haskell's IO</a> as the prototypical example of a monad. Given that I don't know Haskell very well, I found it hard to separate the Haskell stuff from monad stuff. So I set monads on the back burner and decided not to worry about them.</p><p>However, all that changed when Stephan Tolksdorf alerted me to his very cool monadic parser combinator library <a href="http://www.quanttec.com/fparsec">FParsec</a>. I found the FParsec parsers much easier to read <a href="http://devhawk.net/2007/12/10/Practical+Parsing+In+F.aspx">my F# parser efforts</a>, so I became very interested in monadic parser combinators. As you might guess, a "monadic parser combinator library" makes heavy use of monads. Time to switch burners.</p><p>The problem with learning monads with FParsec is that it's really designed for production use. I needed to break monads down to first principles, so I rolled my own monadic parser library. Make no mistake, if I were looking to build a production parser in F# right now, I'd use with FParsec. My monadic parser library might "get there" eventually, but right now it's a toy. </p><p>Over a series of posts, I'm going to describe what I know about monads. I didn't set out to write a tutorial on monads - as I said, there are plenty of them out there. However, I found most of the the many monad tutorials I read lacking because the did a good job explaining the "how", but not such a good job on the "why". Coming from an imperative world, I wanted to understand the philosophy better. That being said, there's a lot of tutorial in and around the philosophy. Hopefully, you'll find both useful.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1162</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2008-07-29 17:10:16</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2008-07-30 00:10:16</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">monadic-philosophy</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
  <category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="post_tag" nicename="monads"><![CDATA[Monads]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[2ab057d0-cfbb-4941-a275-e5decbd1838c]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Monadic+Philosophy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2008/07/30/Monadic+Philosophy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2101</wp:comment_id>
    <wp:comment_author><![CDATA[ilanchelian]]></wp:comment_author>
    <wp:comment_author_email>ilanchelian.kannan@cognizant.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>203.99.197.2</wp:comment_author_IP>
    <wp:comment_date>2008-07-30 06:03:13</wp:comment_date>
    <wp:comment_date_gmt>2008-07-30 13:03:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It is interesting to know that you are going to blog about monads. i am curiously looking forward.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2102</wp:comment_id>
    <wp:comment_author><![CDATA[Anthony Mills]]></wp:comment_author>
    <wp:comment_author_email></wp:comment_author_email>
    <wp:comment_author_url>http://amills.net/</wp:comment_author_url>
    <wp:comment_author_IP>66.46.108.118</wp:comment_author_IP>
    <wp:comment_date>2008-07-30 07:26:34</wp:comment_date>
    <wp:comment_date_gmt>2008-07-30 14:26:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I remember having trouble with monads until I understood that monads made things quasi-imperative by taking advantage of the fact that in order to evaluate the body of a function, you have to evaluate the parameters first.

So, imperative form:

function1(state); function2(state); function3(state);

And monadic form:

function3(function2(function1(state), state), state)

Something like that, anyway. The point being, in both forms function1 must execute before function2, which must execute before function3.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>