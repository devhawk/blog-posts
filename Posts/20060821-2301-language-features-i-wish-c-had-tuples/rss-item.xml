<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Language Features I Wish C# Had - Tuples</title>
  <link>http://devhawk.net/2006/08/21/language-features-i-wish-c-had-tuples/</link>
  <pubDate>Mon, 21 Aug 2006 23:01:53 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://ead6b18d-9203-4d86-a7ad-7e1e6c6277d6</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Several languages, such as <a href="http://www.python.org/doc/current/tut/node7.html#SECTION007300000000000000000">Python</a>, have the concept of a <a href="http://en.wikipedia.org/wiki/Tuple#Usage_in_computer_science">Tuple</a> built into the lanugage. One of things it's used for in Python is multiple return values. So you can call "return x,y" to return two values. Of course, C# can only return one. If you need to return more values, you have to define out parameters.</p><p>LINQ / C# 3.0 / VB 9 support the idea of <a href="http://msdn.microsoft.com/library/en-us/dnvs05/html/vb9overview.asp?frame=true#vb9overview_topic5">anonymous types</a>, which is similar to a tuple. The big difference is that, because they're anonymous, they can't leave the scope they're defined in. In other words, they're great within a function, but if you want to pass them out of your function type-safely, you have to define a non-anonymous type for them.</p><p>Interestingly enough, <a href="http://research.microsoft.com/fsharp/fsharp.aspx">F#</a> supports <a href="http://research.microsoft.com/fsharp/manual/quicktour.aspx#QuickTourTuples">tuples</a>, though it a bit of a hack. Since the CLR doesn't support tuples, F# basically <a href="http://research.microsoft.com/fsharp/manual/export-interop.aspx#Tuples">defines different Tuple classes</a> for up to seven tuple parameters (i.e. Tuple&lt;t1,t2,t3,t4,t5,t6,t7&gt;), For .NET 1.x, it's even worse - they have to define different type names (Tuple2, Tuple3, etc). Ugh.</p><p><strong>Update</strong> - <a href="http://strangelights.com/blog/">Robert Pickering</a> pointed out that F#'s tuple implementation is entirely transparent inside of F#. He's right - I was writing from the perspective of a C# developer using F#'s implementation of tuples. Maybe I need to be looking closer at F#?</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">784</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2006-08-21 23:01:53</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2006-08-21 23:01:53</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">language-features-i-wish-c-had-tuples</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2006/08/22/Language+Features+I+Wish+C+Had+Tuples]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Language+Features+I+Wish+C+Had+Tuples]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[ead6b18d-9203-4d86-a7ad-7e1e6c6277d6]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2402</wp:comment_id>
    <wp:comment_author><![CDATA[Tom Vande Stouwe]]></wp:comment_author>
    <wp:comment_author_email>tomv@conpro.net</wp:comment_author_email>
    <wp:comment_author_url>http://architecturematters.net</wp:comment_author_url>
    <wp:comment_author_IP>24.148.176.174</wp:comment_author_IP>
    <wp:comment_date>2006-08-22 05:41:18</wp:comment_date>
    <wp:comment_date_gmt>2006-08-22 12:41:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Harry,

How does a Truples diffe from an 'object' in .NET core. Could I not return an object from a routine, and define the structure dynamically? What about a collection? It seem that Truples appear to be nothing more then a UDT model, and that already is there.

I may be missing something, so if I am off base, just let me know :)

Tom]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2403</wp:comment_id>
    <wp:comment_author><![CDATA[Robert Pickering]]></wp:comment_author>
    <wp:comment_author_email></wp:comment_author_email>
    <wp:comment_author_url>http://strangelights.com/blog</wp:comment_author_url>
    <wp:comment_author_IP>87.64.24.124</wp:comment_author_IP>
    <wp:comment_date>2006-08-22 07:42:58</wp:comment_date>
    <wp:comment_date_gmt>2006-08-22 14:42:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I don’t the implementation of tuples in F# is a hack; you are simply talking about the implementation details. If you are passing the tuple between two functions in F# then it is totally transparent you do not see the implantation details you describe. Sure if you pass a tuple between F# and C# then you are forced to deal with the Tuple classes that F# provides, and this is a little ugly, but I can see another way this could be supported in languages that don’t support tuples.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2404</wp:comment_id>
    <wp:comment_author><![CDATA[Robert Pickering]]></wp:comment_author>
    <wp:comment_author_email></wp:comment_author_email>
    <wp:comment_author_url>http://strangelights.com/blog</wp:comment_author_url>
    <wp:comment_author_IP>87.64.24.124</wp:comment_author_IP>
    <wp:comment_date>2006-08-22 07:49:39</wp:comment_date>
    <wp:comment_date_gmt>2006-08-22 14:49:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Tom, 

Tuples are different to what you describe. A tuple is just a way of returning two values from a method with out having to define a type to contain them. For instance in F# you can say:

let my_tuple = 1, 2

To create a tuple, then to retrive a value from a tuple you would say:

let _, x = my_tuple

And then x would hold the value 2.

Wikipedia has a good definition:
http://en.wikipedia.org/wiki/Tuple

Cheers,
Rob
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2405</wp:comment_id>
    <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
    <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>24.16.92.194</wp:comment_author_IP>
    <wp:comment_date>2006-08-22 08:16:10</wp:comment_date>
    <wp:comment_date_gmt>2006-08-22 15:16:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Robert, you're right. I think it feels like a hack if you use F# tuples outside of F#, which was the context of my post in the first place.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>