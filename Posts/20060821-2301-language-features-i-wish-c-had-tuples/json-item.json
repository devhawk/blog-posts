{"status":"ok","post":{"id":784,"type":"post","slug":"language-features-i-wish-c-had-tuples","url":"http:\/\/devhawk.net\/2006\/08\/21\/language-features-i-wish-c-had-tuples\/","status":"publish","title":"Language Features I Wish C# Had &#8211; Tuples","title_plain":"Language Features I Wish C# Had &#8211; Tuples","content":"<p>Several languages, such as <a href=\"http:\/\/www.python.org\/doc\/current\/tut\/node7.html#SECTION007300000000000000000\">Python<\/a>, have the concept of a <a href=\"http:\/\/en.wikipedia.org\/wiki\/Tuple#Usage_in_computer_science\">Tuple<\/a> built into the lanugage.\u00a0One of things it&#8217;s used for in Python is multiple return values. So you can call &#8220;return x,y&#8221; to return two values. Of course, C# can only return one. If you need to return more values, you have to define out parameters.<\/p>\n<p>LINQ \/ C# 3.0 \/ VB 9 support the idea of <a href=\"http:\/\/msdn.microsoft.com\/library\/en-us\/dnvs05\/html\/vb9overview.asp?frame=true#vb9overview_topic5\">anonymous types<\/a>, which is similar to a tuple. The big difference is that, because they&#8217;re anonymous, they can&#8217;t leave the scope they&#8217;re defined in. In other words, they&#8217;re great within a function, but if you want to pass them out of your function type-safely, you have to define a non-anonymous type for them.<\/p>\n<p>Interestingly enough, <a href=\"http:\/\/research.microsoft.com\/fsharp\/fsharp.aspx\">F#<\/a> supports <a href=\"http:\/\/research.microsoft.com\/fsharp\/manual\/quicktour.aspx#QuickTourTuples\">tuples<\/a>, though it a bit of a hack. Since the CLR doesn&#8217;t support tuples, F# basically <a href=\"http:\/\/research.microsoft.com\/fsharp\/manual\/export-interop.aspx#Tuples\">defines different Tuple classes<\/a> for up to seven tuple parameters (i.e. Tuple&lt;t1,t2,t3,t4,t5,t6,t7&gt;), For .NET 1.x, it&#8217;s even worse &#8211; they have to define different type names (Tuple2, Tuple3, etc). Ugh.<\/p>\n<p><strong>Update<\/strong> &#8211; <a href=\"http:\/\/strangelights.com\/blog\/\">Robert Pickering<\/a> pointed out that F#&#8217;s tuple implementation is entirely transparent\u00a0inside of F#. He&#8217;s right &#8211; I was writing from the perspective of a C# developer using F#&#8217;s implementation of tuples. Maybe I need to be looking closer at F#?<\/p>\n","excerpt":"<p>Several languages, such as Python, have the concept of a Tuple built into the lanugage.\u00a0One of things it&#8217;s used for in Python is multiple return values. So you can call &#8220;return x,y&#8221; to return two values. Of course, C# can only return one. If you need to return more values, you have to define out [&hellip;]<\/p>\n","date":"2006-08-21 23:01:53","modified":"2006-08-21 23:01:53","categories":[{"id":204,"slug":"development","title":"Development","description":"","parent":0,"post_count":165}],"tags":[{"id":235,"slug":"c-sharp","title":"C#","description":"","post_count":17},{"id":229,"slug":"lanugages","title":"Lanugages","description":"","post_count":43}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2402,"name":"Tom Vande Stouwe","url":"http:\/\/architecturematters.net","date":"2006-08-22 05:41:18","content":"<p>Harry,<\/p>\n<p>How does a Truples diffe from an &#8216;object&#8217; in .NET core. Could I not return an object from a routine, and define the structure dynamically? What about a collection? It seem that Truples appear to be nothing more then a UDT model, and that already is there.<\/p>\n<p>I may be missing something, so if I am off base, just let me know <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" \/> <\/p>\n<p>Tom<\/p>\n","parent":0},{"id":2403,"name":"Robert Pickering","url":"http:\/\/strangelights.com\/blog","date":"2006-08-22 07:42:58","content":"<p>I don\u2019t the implementation of tuples in F# is a hack; you are simply talking about the implementation details. If you are passing the tuple between two functions in F# then it is totally transparent you do not see the implantation details you describe. Sure if you pass a tuple between F# and C# then you are forced to deal with the Tuple classes that F# provides, and this is a little ugly, but I can see another way this could be supported in languages that don\u2019t support tuples.<\/p>\n","parent":0},{"id":2404,"name":"Robert Pickering","url":"http:\/\/strangelights.com\/blog","date":"2006-08-22 07:49:39","content":"<p>Tom, <\/p>\n<p>Tuples are different to what you describe. A tuple is just a way of returning two values from a method with out having to define a type to contain them. For instance in F# you can say:<\/p>\n<p>let my_tuple = 1, 2<\/p>\n<p>To create a tuple, then to retrive a value from a tuple you would say:<\/p>\n<p>let _, x = my_tuple<\/p>\n<p>And then x would hold the value 2.<\/p>\n<p>Wikipedia has a good definition:<br \/>\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Tuple\" rel=\"nofollow\">http:\/\/en.wikipedia.org\/wiki\/Tuple<\/a><\/p>\n<p>Cheers,<br \/>\nRob<\/p>\n","parent":0},{"id":2405,"name":"DevHawk","url":"","date":"2006-08-22 08:16:10","content":"<p>Robert, you&#8217;re right. I think it feels like a hack if you use F# tuples outside of F#, which was the context of my post in the first place.<\/p>\n","parent":0}],"attachments":[],"comment_count":4,"comment_status":"closed","custom_fields":{"dasblog_entryid":["ead6b18d-9203-4d86-a7ad-7e1e6c6277d6"],"dasblog_compressedtitle":["Language+Features+I+Wish+C+Had+Tuples"],"dasblog_compressedtitleunique":["2006\/08\/22\/Language+Features+I+Wish+C+Had+Tuples"]}},"previous_url":"http:\/\/devhawk.net\/2006\/08\/16\/business-processes-are-services-too\/","next_url":"http:\/\/devhawk.net\/2006\/08\/21\/language-features-i-wish-c-had-symbols\/"}