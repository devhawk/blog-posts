<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Monadic Philosophy Part 5 - Reader Comments</title>
  <link>http://devhawk.net/2008/08/08/monadic-philosophy-part-5-reader-comments/</link>
  <pubDate>Sat, 09 Aug 2008 00:20:06 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://c7d7d1db-0c17-4845-b30f-0fbed21e5741</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p><a href="http://barrkel.blogspot.com/">Barry Kelly</a> <a href="http://devhawk.net/CommentView,guid,6ce19647-2f6f-4d41-aff6-b202df528d21.aspx#commentstart">thinks</a> that "programmers would understand monads better if they were described as a design pattern". I agree 100% and would love to see a monad design pattern written out using p&amp;p's <a href="http://msdn.microsoft.com/en-us/library/ms979209.aspx">pattern form</a>. The one thing I would note on this is that certain language constructs can make working with certain design patterns easier. For example, C# obviously has great language level support for the <a href="http://en.wikipedia.org/wiki/Iterator_pattern">Iterator design pattern</a>. Once you've got language level support, it doesn't really feel like a design pattern anymore, it feels like a language feature. I mean, given that you can write OO code in a language like C, does that mean technically OO is a "design pattern". I don't think so. </p><p>A commenter named atp <a href="http://devhawk.net/CommentView,guid,6ce19647-2f6f-4d41-aff6-b202df528d21.aspx#commentstart">warned me</a> not to "fall into the newbie trap of thinking that monads are about sequencing operations. They aren't. A large number of monads (for example, Reader) are commutative and do not enforce any sort of statement ordering." Fair enough. For example, you switch the order of some LINQ operators and still end up with the same result. If you switch Where and Select, you should end up with the same output (assuming the where clause isn't invalidated by the select projection). But from a C#/F# perspective, I don't really care about monads for enforcing order anyway - the language has that natively. I care much more about the context flow aspect of monads, which it sounds like atp thinks we should be focused on anyway. Works for me. </p><p>Finally, <a href="http://elder_george.livejournal.com">Yuri K.</a> <a href="http://devhawk.net/CommentView,guid,f0fb5461-eb30-4268-a4b3-7262276768cb.aspx#commentstart">pointed out</a> that we aren't really stuck with the nested lambda expression syntax in C#. In Luke Hoban's <a href="http://blogs.msdn.com/lukeh/archive/2007/08/19/monadic-parser-combinators-using-c-3-0.aspx">Monadic Parser Combinators using C# 3.0</a> post, he implements a Where, Select and SelectMany extension method for his Parser delegate type, which allows him to plug into C#'s query comprehension syntax. He's 100% correct and I considered including this fact in my post. However, the mapping between query comprehension and the Bind and Result functions is a little murky, so I skipped it. </p><p>For C# query comprehensions, basically SelectMany does double duty, not only binding the parser and the parser generating function (which Luke called 'selector'), but also taking the two parse values and calling to a projector function and returning the projection return value in a Result. By implementing SelectMany, you can rewrite the TwoValues parser like this:</p><pre class="brush: csharp">
static Parser&lt;string&gt; QueryTwoItems()  
{  
    return from v1 in Item()   
           from v2 in Item()   
           select string.Format("{0}{1}", v1, v2);  
}
</pre><p>which looks pretty much identical to the F# monadic syntax version. Luke also implements Where, which I have in my F# parser library as Satisfy. Where takes a parser and only returns the parser result if the provided boolean predicate returns true. Select is a projection, similar to SelectMany but only used with a single parser. I have a couple of specific projectors in my F# library (Ignore which tosses the parse result and Listify which turns a single result into a single item list) but I haven't had any need for a generic projector like Select. I'm assuming Luke only implemented Select to make the query comprehension work when you don't have multiple from statements. </p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1169</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2008-08-08 17:20:06</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2008-08-09 00:20:06</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">monadic-philosophy-part-5-reader-comments</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
  <category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
  <category domain="post_tag" nicename="monads"><![CDATA[Monads]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[c7d7d1db-0c17-4845-b30f-0fbed21e5741]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Monadic+Philosophy+Part+5+Reader+Comments]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2008/08/09/Monadic+Philosophy+Part+5+Reader+Comments]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2118</wp:comment_id>
    <wp:comment_author><![CDATA[louis vuitton handbags]]></wp:comment_author>
    <wp:comment_author_email>lomotbiz@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.designerfaves.com</wp:comment_author_url>
    <wp:comment_author_IP>131.137.245.199</wp:comment_author_IP>
    <wp:comment_date>2008-08-12 11:29:03</wp:comment_date>
    <wp:comment_date_gmt>2008-08-12 18:29:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great article. Thank you for clearing that up!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>