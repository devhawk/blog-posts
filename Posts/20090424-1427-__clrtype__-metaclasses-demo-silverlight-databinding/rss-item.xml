<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>__clrtype__ Metaclasses Demo: Silverlight Databinding</title>
  <link>http://devhawk.net/2009/04/24/__clrtype__-metaclasses-demo-silverlight-databinding/</link>
  <pubDate>Fri, 24 Apr 2009 14:27:46 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://cef44285-b9e7-47c3-84b6-d79833c76875</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>I’ve gotten to the point where I can actually demo something interesting with __clrtype__ metaclasses: Silverlight Databinding. This is a trivial sample, data binding a list of Products (aka the sample class I’ve been using all week) to a list box. But according to <a href="http://blog.jimmy.schementi.com/">Jimmy</a>, this is something he gets asked about on a regular basis and there’s a <a href="http://www.codeplex.com/sdlsdk/WorkItem/View.aspx?WorkItemId=11844">AgDLR bug open for this</a>. The __clrtype__ feature is specific to IronPython but I bet the IronRuby guys could implement something similar if they wanted to.</p><p>When you install IronPython 2.6 (or 2.0.1 for that matter), it comes with the AgDLR bits in the Silverlight subfolder. This includes Silverlight compatible versions of the DLR and IronPython as well as the Silverlight DLR host and the development web server <a href="http://www.codeplex.com/sdlsdk/Wiki/View.aspx?title=Chiron">Chiron</a> in the Silverlightbin directory. There is also a script in the Silverlightscript directory that will generate a dynamic Silverlight application from a template. I ran “sl.bat python sldemo” in order to build the skeleton project.</p><p>In the generated app.xaml file, I removed the default text box and replaced it with this XAML code that I stole nearly-verbatim from my blog post on <a href="http://devhawk.net/2008/11/18/IronPython+And+WPF+Part+3+Data+Binding.aspx">data binding in WPF with IronPython</a>. The only thing I changed was the binding path for the text block (title became name).</p><pre class="brush: xml">
&lt;ListBox x:Name="listbox1" &gt; 
      &lt;ListBox.ItemTemplate&gt; 
        &lt;DataTemplate&gt; 
          &lt;TextBlock Text="{Binding Path=name}" /&gt; 
        &lt;/DataTemplate&gt; 
      &lt;/ListBox.ItemTemplate&gt; 
    &lt;/ListBox&gt;
</pre><p>Then in the App class, I set the ItemsSource of the ListBox to a hand-built a list of Products.</p><pre class="brush: python">
class App:
  def __init__(self):
    root = Application.Current.LoadRootVisual(UserControl(), "app.xaml")
    root.listbox1.ItemsSource = [
      Product("Crunchy Frog", 10, 12),
      Product("Rams Bladder Cup", 10, 12),
      Product("Cockroach Cluster", 10, 12),
      Product("Anthrax Ripple", 10, 12),
      Product("Spring Suprise", 10, 12)]
</pre><p>And that’s pretty much it. I used Chiron’s /z command to create a Silverlight XAP file, uploaded it to <a href="http://www.microsoft.com/silverlight/resources/streaming.aspx">Silverlight Streaming</a> and embedded it right here in this post. Code is <a href="http://cid-0d9bc809858885a4.skydrive.live.com/browse.aspx/DevHawk%20Content/IronPython%20Stuff/%7C_%7C_clrtype%7C_%7C_">up on my skydrive</a> as well. Uusing Silverlight Streaming for this app was very easy - basically upload the XAP file to their server and embed some iframe code in this post via the source view and that was it. I’m not sure I would use it for a production app, but it rocked for hosting this demo.</p><iframe style="width: 500px; height: 115px" src="http://silverlight.services.live.com/invoke/19454/SL%20Databinding%20Demo/iframe.html" frameborder="0" scrolling="no"></iframe><p>The XAP is a big download for such a trivial app - about 1.3MB. The vast majority of that is the DLR and IronPython assemblies. The XAP would only be 2.9kB if it was just the Python, XAML and manifest files. This kinda stinks, but there’s a new <a href="http://sdlsdk.codeplex.com/Wiki/View.aspx?title=Extensions">transparent platform extensions feature</a> in Silverlight 3 so we can at least break the DLR and IronPython DLLs out into their own separate XAPs. That way they only get downloaded once and cached in the browser instead of being included in every single IronPython Silverlight application anyone creates.</p><p>So that’s one scenario down, one to go. In order to be able to build WCF services in IronPython, I have to add a lot more infrastructure – notably emitting CLR methods that can invoke dynamic methods as well as emitting custom attributes. Invoking dynamic methods means understanding <a href="javascript:window.location.href='http://dlr.codeplex.com/Project/Download/FileDownload.aspx?DownloadId=51534';">DLR binders</a>, so look for more posts on __clrtype__ next week.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1255</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2009-04-24 14:27:46</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2009-04-24 14:27:46</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">__clrtype__-metaclasses-demo-silverlight-databinding</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <category domain="post_tag" nicename="silverlight"><![CDATA[Silverlight]]></category>
  <category domain="post_tag" nicename="__clrtype__"><![CDATA[__clrtype__]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[cef44285-b9e7-47c3-84b6-d79833c76875]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[clrtype+Metaclasses+Demo+Silverlight+Databinding]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2009/04/24/clrtype+Metaclasses+Demo+Silverlight+Databinding]]></wp:meta_value>
  </wp:postmeta>
</item>