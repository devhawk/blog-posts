<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>2393</wp:comment_id>
  <wp:comment_author><![CDATA[Max Lybbert]]></wp:comment_author>
  <wp:comment_author_email>mlybbert@users.sourceforge.net</wp:comment_author_email>
  <wp:comment_author_url></wp:comment_author_url>
  <wp:comment_author_IP>64.132.106.194</wp:comment_author_IP>
  <wp:comment_date>2006-08-09 09:40:09</wp:comment_date>
  <wp:comment_date_gmt>2006-08-09 16:40:09</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[Just because I've followed Chris Diggins for a little while, I'd like to point out that Cat isn't about compiler optimization so much as it's about making cross platform compilers easy to write.

Diggins has spent about a decade coming up with Heron, which in its current incarnation compiles to C++ (Heron.Standard) or can be run as an interpreted language (Heron.Script).  He wants it to compile to other platforms, and to interoperate well with other languages.  The way I understand things, he wants to compile Heron to Cat, and Cat to .Net, i386 assembly code, JVM, and whatever other platforms catch his eye.  It's a lot like GCC's register type language.

Yeah, Cat's supposed to make it possible to optimize according to whatever optimizations are available on that platform, but it's also supposed to make it easier to target several platforms.  And it should be reusabel for anyone else working on a language who doesn't want to do as much low-level dirty work.]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>