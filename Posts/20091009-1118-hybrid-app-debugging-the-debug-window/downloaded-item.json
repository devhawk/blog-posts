{"status":"ok","post":{"id":1294,"type":"post","slug":"hybrid-app-debugging-the-debug-window","url":"http:\/\/devhawk.net\/2009\/10\/09\/hybrid-app-debugging-the-debug-window\/","status":"publish","title":"Hybrid App Debugging &#8211; The Debug Window","title_plain":"Hybrid App Debugging &#8211; The Debug Window","content":"<p>In my <a href=\"http:\/\/devhawk.net\/2009\/10\/09\/Hybrid+App+Debugging+Ndash+Threading.aspx\">last installment<\/a>, I added support for a separate debug window on a separate thread from the main window thread. That way, I can pause the execution of the main window while the debug window stays responsive to user input. Now, let\u2019s add some functionality to the debug window. I\u2019m going to start by showing the source code of the python file being executed.<\/p>\n<pre class=\"brush: csharp\">\nprivate void OnTraceback(TraceBackFrame frame, string result, object payload)\n{\n    FunctionCode code = (FunctionCode)frame.f_code;\n    if (_curCode == null || _curCode.co_filename != code.co_filename)\n    {\n        _source.Inlines.Clear();\n        foreach (var line in System.IO.File.ReadAllLines(code.co_filename))\n        {\n            _source.Inlines.Add(new Run(line + \"rn\"));\n        }\n    }\n<\/pre>\n<p>The TraceBackFrame instance has a property f_code that represents the FunctionCode object being executed in this frame. We have to explicitly cast to FunctionCode type because currently we\u2019re exposing all properties that hang off TraceBackFrame as object type. Since Python is a dynamic language, we\u2019re going to use reflection against the instance itself anyway so it doesn\u2019t really matter what the return type is. However, I\u2019ve asked Dino to change the TraceBackFrame type to use explicit types in order to make it easier to use SetTrace from statically typed languages like C#. Look for that in RC2.<\/p>\n<p>After we cast the code object so it can be used from C#, we check to see if the currently loaded file matches the file currently loaded into the UI. I\u2019ve <a href=\"http:\/\/devhawk.net\/2009\/07\/09\/Syntax+Highlighting+TextBoxes+In+WPF+Ndash+A+Sad+Story.aspx\">ranted recently<\/a> about the limitations of WPF\u2019s TextBox but I didn\u2019t want to get hung up syntax highlighting for this sample so I just went ahead and used the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.windows.controls.richtextbox.aspx\">RichTextBox<\/a>. In the DebugWindow Loaded event handler, I create _source as a WPF <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.windows.documents.paragraph.aspx\">Paragraph<\/a> and then wrap it in a FlowDocument and use it as the RichTextBox\u2019s Document. I set the FlowDocument to be extremely wide, so as to avoid word wrapping. Then when I need to load a new source file, I clear _source of it\u2019s current contents and add a single line run for every line of code in the file. This convention becomes useful later when I go to highlight the current line of code. <\/p>\n<p>Once I load the current file, I save the current frame, code, result and payload in instance fields and then switch on result to determine what to do next. Currently, I\u2019m just highlighting the relevant line of code and setting a TextBlock control in the menu bar.<\/p>\n<pre class=\"brush: csharp\">\nprivate void TracebackCall()\n{\n    dbgStatus.Text = string.Format(\"Call {0}\", _curCode.co_name);\n    HighlightLine((int)_curFrame.f_lineno, \n        Brushes.LightGreen, Brushes.Black);\n}\n\nprivate void TracebackReturn()\n{\n    dbgStatus.Text = string.Format(\"Return {0}\", _curCode.co_name);\n    HighlightLine(_curCode.co_firstlineno, \n        Brushes.LightPink, Brushes.Black);\n}\n\nprivate void TracebackLine()\n{\n    dbgStatus.Text = string.Format(\"Line {0}\", _curFrame.f_lineno);\n    HighlightLine((int)_curFrame.f_lineno, \n        Brushes.Yellow, Brushes.Black);\n}\n<\/pre>\n<\/p>\n<p>In Visual Studio, we typically highlight the current line of code in yellow. However, that doesn\u2019t work as great in a language like Python that delineates code blocks with whitespace. In ipydbg, I <a href=\"http:\/\/devhawk.net\/2009\/03\/19\/Writing+An+IronPython+Debugger+Colorful+Console.aspx\">indicated function return<\/a> with three carets. But I didn\u2019t want to be modifying the text in the RichTextBox here so instead I used different colors for the different traceback event types: light green for call, light pink for return and yellow for line. The frame object contains the current line number, which I use for call and line, while the code object has the first line of the current code object, which I use for return. HighlightLine highlights the line in question with the colors provided and also scrolls that line into view if it isn\u2019t already visible.<\/p>\n<p>So now when a traceback is handled, it shows the text for the file being executed and highlights the appropriate line, based on the type of traceback event that happened. Now all we need is to have some way be able to continue execution. In the code, you\u2019ll see I\u2019ve <a href=\"http:\/\/github.com\/devhawk\/LightweightDebuggerDemo\/blob\/deac85aaf14b37352ce4248917fd857c173d8997\/LightweightDebuggerDemo\/DebugWindow.xaml.cs#L21\">defined a series<\/a> of RoutedUICommands for common debugger commands. I\u2019ve got the StepIn command wired up in the <a href=\"http:\/\/github.com\/devhawk\/LightweightDebuggerDemo\/blob\/deac85aaf14b37352ce4248917fd857c173d8997\/LightweightDebuggerDemo\/DebugWindow.xaml\">DebugWindow XAML<\/a> to a menu item and the \u201cS\u201d keystroke. All that remains is to define StepInExecuted.<\/p>\n<pre class=\"brush: csharp\">\nprivate void StepInExecuted(object sender, ExecutedRoutedEventArgs e)\n{\n    dbgStatus.Text = \"Running\";\n\n    foreach (var i in _source.Inlines)\n    {\n        i.Background = rtbSource.Background;\n        i.Foreground = rtbSource.Foreground;\n    }\n\n    _dbgContinue.Set();\n}\n<\/pre>\n<p>This function does three basic things: changes the dbgStatus text, resets all the text in the RichTextBox back to the default coloring, and sets the _dbgContinue AutoResetEvent which signals the main window thread that\u2019s been blocked in OnTracebackReceived to continue.<\/p>\n<p>With this post, I\u2019m about even with the code that\u2019s <a href=\"http:\/\/github.com\/devhawk\/LightweightDebuggerDemo\">up on GitHub<\/a>. That code has a few other capabilities \u2013 notably it will stop tracing if you close the debug window and it supports StepOut command which disables traceback for the current scope by returning null in OnTracebackReceived. But I haven\u2019t implemented things like:<\/p>\n<ul>\n<li>Set Next Statement<\/li>\n<li>Viewing and changing variables<\/li>\n<li>Debugger REPL<\/li>\n<li>Breakpoint Management<\/li>\n<\/ul>\n<p>Any suggestions on which of those would you like to see next? <\/p>\n","excerpt":"<p>In my last installment, I added support for a separate debug window on a separate thread from the main window thread. That way, I can pause the execution of the main window while the debug window stays responsive to user input. Now, let\u2019s add some functionality to the debug window. I\u2019m going to start by [&hellip;]<\/p>\n","date":"2009-10-09 11:18:35","modified":"2009-10-09 11:18:35","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":279,"slug":"debugger","title":"Debugger","description":"","post_count":23},{"id":291,"slug":"lightweight-debugger","title":"Lightweight Debugger","description":"","post_count":5},{"id":293,"slug":"polyglot","title":"Polyglot","description":"","post_count":3}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2279,"name":"Luiz","url":"","date":"2009-10-15 07:24:57","content":"<p>Where can We download the full sourcecode of this debug routines?<\/p>\n","parent":0},{"id":2280,"name":"DevHawk","url":"","date":"2009-10-21 19:07:29","content":"<p><a href=\"http:\/\/github.com\/devhawk\/LightweightDebuggerDemo\" rel=\"nofollow\">http:\/\/github.com\/devhawk\/LightweightDebuggerDemo<\/a><\/p>\n","parent":0},{"id":2281,"name":"A B","url":"","date":"2009-10-29 04:01:11","content":"<p>Great job, I&#8217;m happy to see settrace finally implemented and put into use.<br \/>\nThis actually makes IronPython a viable solution to a project we&#8217;re initiating over here.<\/p>\n<p>Though, someone expressed concern for how slow running a script may become when break point management is implemented in the debugger.<\/p>\n<p>I would like to hear your thoughts about that.<\/p>\n<p>Thanks.<\/p>\n","parent":0},{"id":2282,"name":"DevHawk","url":"","date":"2009-11-23 22:40:19","content":"<p>@AB, running the script under the debugger is slower, but I&#8217;m not sure how much slower exactly. I&#8217;d ask Dino on the IronPython mailing list &#8211; he implemented it so I&#8217;m sure he can speak to the amount of overhead there is.<\/p>\n","parent":0},{"id":2283,"name":"loge","url":"","date":"2009-11-25 12:41:51","content":"<p>Thank You very much for this excellent &#8220;debug&#8221; series.<br \/>\nIt would be good to see Your description of viewing variables during debug&#8230;<\/p>\n","parent":0}],"attachments":[],"comment_count":5,"comment_status":"closed","custom_fields":{"dasblog_entryid":["fe530c58-39d6-46d5-ad44-40acd2c1cfdc"],"dasblog_compressedtitle":["Hybrid+App+Debugging+Ndash+The+Debug+Window"],"dasblog_compressedtitleunique":["2009\/10\/09\/Hybrid+App+Debugging+Ndash+The+Debug+Window"]}},"previous_url":"http:\/\/devhawk.net\/2009\/10\/08\/hybrid-app-debugging-threading\/","next_url":"http:\/\/devhawk.net\/2009\/10\/21\/ironpython-and-ironruby-ctps-for-net-4-0-beta-2\/"}