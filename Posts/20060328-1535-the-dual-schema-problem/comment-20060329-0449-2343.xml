<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>2343</wp:comment_id>
  <wp:comment_author><![CDATA[David]]></wp:comment_author>
  <wp:comment_author_email>david.ing@gmail.com</wp:comment_author_email>
  <wp:comment_author_url>http://www.from9till2.com</wp:comment_author_url>
  <wp:comment_author_IP>81.159.21.197</wp:comment_author_IP>
  <wp:comment_date>2006-03-29 04:49:58</wp:comment_date>
  <wp:comment_date_gmt>2006-03-29 11:49:58</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[>So I believe that  for all the current interest in Rails, I think a Consus-style model will become dominant.

Hmm, I'm not so sure, in the long run the Rails 'model by convention' is the simplest form of solution, and we've seen how powerful/persuasive the 'simplest' can be in getting the mass adoption going, i.e. say RSS vs ATOM, RDBMS vs OODBMS, POX vs SOAP. So, not being a zealot but just pointing out that I've seen a lot of great ideas/tech fall away due to not being the 'shortest/simplest path'.

Also, just for thoughts, the 'Dual Schema' is often more than just 2 views on the same thing. If you think CLR -> XML, CLR -> RDB, myXML -> yourXML, then you end up with a few combinations. The 'canonical schema' could be defined in the code-first way, but that has always led to compromises for other non-OO representations. Hence the constant mapping issues. A model is needed, but getting the model accepted as part of a decent/productive dev process is the trick.

The impedance you talk about can refer to web services/xsd/messages just as much as it can mean RDB mapping. 

Also (since I'm typing), databases are, I agree, an overkill for a lot of apps, but they aren't just used for storage - aspects like concurrency (awkward in mainstream programming) and transactions come along for the ride and make it worth the while. Also, an app that doesnt require a full RDBMS at the beginning of its life tends to convert over badly when it does need it, hence the convention of just using the 'littlest RDBMS' you can find rather than changing paradigm when you get bigger.

PS See you at TechEd Harry.

- David]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>