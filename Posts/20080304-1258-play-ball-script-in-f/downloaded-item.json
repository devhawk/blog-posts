{"status":"ok","post":{"id":1115,"type":"post","slug":"play-ball-script-in-f","url":"http:\/\/devhawk.net\/2008\/03\/04\/play-ball-script-in-f\/","status":"publish","title":"Play Ball Script in F#","title_plain":"Play Ball Script in F#","content":"<p>Scott Hanselman <a href=\"http:\/\/www.hanselman.com\/blog\/2008WindowScriptingGamesAdvancedPowerShellEvent7.aspx\">wanted<\/a> an F# version of this <a href=\"http:\/\/www.microsoft.com\/technet\/scriptcenter\/funzone\/games\/games08\/aevent7.mspx\">Play Ball!<\/a> round-robin scheduling PowerShell script. Here&#8217;s what I came up with:<\/p>\n<pre class=\"brush: fsharp\">\nlet randomize list = \n    let random = new System.Random()\n    let list'=  \n        list  \n        |&gt; List.map (fun i -&gt; (random.Next(), i))\n        |&gt; List.sort (fun (i1,_) (i2,_) -&gt; Int32.compare i1 i2)  \n    let (_,list'') = List.unzip list' \n    list'' \n\nlet rec makeGames teams = \n    match teams with\n    | first :: rest -&gt;\n        [for team in rest -&gt; (first, team)] @ (makeGames rest)\n    | [] -&gt;  []\n\nlet teams = ['a'..'f']\nlet games = teams |&gt; makeGames |&gt; randomize\n<\/pre>\n<p>MakeGames uses pattern matching to see if the list of teams is empty or not. If the list is empty, we simply return an empty list of games. If not, we use F#&#8217;s list comprehension syntax to generate a list of games between the first team in the list and each of the remaining teams. This list is combined (via the &#8216;@&#8217; operator) with the results of calling makeGames recursively. This generates the un-randomized list of games. <\/p>\n<p>Once we have the list of games, we need to randomize it. I ported the randomize function above over from a <a href=\"http:\/\/wiki.trapexit.erlang-consulting.com\/RandomShuffle\">version I found in Erlang<\/a>. Basically, it attaches a random number to each element in the list to be randomized, sorts by those randomly generated numbers, then throws the numbers away and returns the just the randomized list. Note, the Erlang version I referenced runs randomize log(length of list) times to ensure a fair shuffle, but I thought once would be enough for this simple script.<\/p>\n<p>(Note to F# team: perhaps List.randomize should be a part of the standard F# library?)<\/p>\n","excerpt":"<p>Scott Hanselman wanted an F# version of this Play Ball! round-robin scheduling PowerShell script. Here&#8217;s what I came up with: let randomize list = let random = new System.Random() let list&#8217;= list |&gt; List.map (fun i -&gt; (random.Next(), i)) |&gt; List.sort (fun (i1,_) (i2,_) -&gt; Int32.compare i1 i2) let (_,list&#8221;) = List.unzip list&#8217; list&#8221; let [&hellip;]<\/p>\n","date":"2008-03-04 12:58:02","modified":"2008-03-04 12:58:02","categories":[],"tags":[{"id":198,"slug":"f-sharp","title":"F#","description":"","post_count":51},{"id":202,"slug":"functional-programming","title":"Functional Programming","description":"","post_count":18}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["a16f6c80-3bca-44bc-b679-7c0f8e29ca33"],"dasblog_compressedtitle":["Play+Ball+Script+In+F"],"dasblog_compressedtitleunique":["2008\/03\/04\/Play+Ball+Script+In+F"]}},"previous_url":"http:\/\/devhawk.net\/2008\/03\/04\/lunchtime-coffee-153\/","next_url":"http:\/\/devhawk.net\/2008\/03\/04\/kitchen-sink-variability\/"}