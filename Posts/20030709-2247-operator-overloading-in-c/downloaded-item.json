{"status":"ok","post":{"id":145,"type":"post","slug":"operator-overloading-in-c","url":"http:\/\/devhawk.net\/2003\/07\/09\/operator-overloading-in-c\/","status":"publish","title":"Operator Overloading in C#","title_plain":"Operator Overloading in C#","content":"<p>For a project I&#8217;ve been working on, I had to do some spelunking on C#&#8217;s operator overloading support. I discovered some interesting things about the equality and increment operators and how they are handled by the C# compiler in classes that do and do not overload them. I&#8217;ll be sharing the code soon, but I figured I&#8217;d share the learning right away.<\/p>\n<p><strong>Equality Operator<\/strong><\/p>\n<p>There are two main mechanisms for testing equality in the CLR: the System.Object.Equals method and the equality operator (i.e. the double equal sign ==). Every object in CLR has an Equals() method that it inherits from System.Object. The default implementation of this method uses bitwise equality for value types and referential\u00a0equality for reference types. The equality operator maps to the IL opcode &#8220;ceq&#8221; (check equality) which has similar semantics to the Equals() method. However, the equality operator only works with native value types and referential\u00a0types. You can&#8217;t use the equality operator with value types that you define (i.e. structs in C#) unless you create an overload for it.<\/p>\n<p>For some referential\u00a0types, the default behavior is inappropriate. For example, even though System.String is a referential type, its Equals() method has been overridden to provide value type semantics. So when you compare two strings that have the save character values, Equals() returns true even if they are two different string instances. Since Equals() is a virtual function, it gets <a href=\"http:\/\/msdn.microsoft.com\/library\/default.asp?url=\/library\/en-us\/cpgenref\/html\/cpconequals.asp\"> overridden in the standard fashion<\/a>.[1] However, the important thing to keep in mind is that while Equals() and the equality operator have similar semantics, <em>they are not the same operation<\/em>. You override and implement them separately. If you override the equality operator in your class, the C# compiler generates a call to that method instead of a ceq IL opcode. If you want Equals() and the equality operator to yield the same result, you can call one from the other. For example, the overloaded equality operator for System.String calls the overridden Equals() method under the hood.<\/p>\n<p>Having to semantically similar but separately overridable mechanisms for testing equality can get sticky. Not all languages support operator overloading. If I&#8217;m using VB.NET, there&#8217;s no way to override the equality operator (VB.NET uses a single = instead of C#&#8217;s double ==). It gets worse in cross language scenarios. I can consume a C# object that overrides Equals() and equality from VB.NET with no problem, but if I try to go the other way, the equality operator ends up with potentially different semantics than the Equals() method. This must be why, according to <a href=\"http:\/\/msdn.microsoft.com\/library\/en-us\/cpgenref\/html\/cpconimplementingequalsoperator.asp\"> MSDN<\/a>, it is recommended that most reference types not override the equality operator, even if they override Equals(). This way, you just get into the habit of always using Equals() I guess. Personally, I do all my work in C# so I decided to take full advantage of the language and overload the equality operator of my class to call Equals() under the hood, just like System.String.<\/p>\n<p>[1] Actually, String.Equals() is implemented in native code by the runtime for performance reasons.<\/p>\n<p><strong>Increment Operator<\/strong><\/p>\n<p>One of the tricky aspects about the increment operator (i.e. the double plus sign ++) is the difference between prefix and postfix notation. Both versions of the increment operator increment the current value and return a result. The difference between the two versions is the order in which these operations are applied. In prefix (i.e. ++foo), the value is incremented and then the incremented value is returned as the result. In postfix (i.e. foo++), the original value is saved, the value is incremented, and then the original value is returned as the result. In both cases, the value of the variable is the same after the operation is completed. C# supports both <a href=\"http:\/\/msdn.microsoft.com\/library\/en-us\/csspec\/html\/vclrfcsharpspec_7_6_5.asp\"> prefix<\/a> and <a href=\"http:\/\/msdn.microsoft.com\/library\/en-us\/csspec\/html\/vclrfcsharpspec_7_6_5.asp\"> postfix<\/a> notations as well as overloading the ++ operator. What it doesn&#8217;t support, however, is having different implementations of the prefix and postfix operations.<\/p>\n<p>In C++, the prefix and postfix versions overloads are specified separately, though there is a template that provides a standard implementation of the postfix version in terms of the prefix version. In pseudo-code, it reads &#8220;Save old version, call prefix increment operation, return saved version&#8221;. In C#, this pseudo-code is generated by the compiler, not the overloaded operator implementation. This means you only build the single increment operation and the C# compiler generates the appropriate IL to handle the pre- and post fix scenarios.<\/p>\n<p>For example, if I have an integer i and I call Console.Write(++i), the C# compiler generates the following IL:<\/p>\n<pre class=\"brush:plain\">ldloc.0  \/\/load i variable onto the stack\r\nldc.i4.1 \/\/load the value 1 onto the stack\r\nadd      \/\/add the two values on top of the stack\r\ndup      \/\/duplicate the value on the top of the stack\r\n\/\/This stack item gets passed to Console.Write\r\nstloc.0  \/\/store the result of the addition\r\ncall Console.Write<\/pre>\n<p>And if I call Console.Write(i++):<\/p>\n<pre class=\"brush:plain\">ldloc.0  \/\/load i variable onto the stack\r\n\/\/This stack item gets passed to Console.Write\r\ndup      \/\/duplicate the value on the top of the stack\r\nldc.i4.1 \/\/load the value 1 onto the stack\r\nadd      \/\/add the two values on top of the stack\r\nstloc.0  \/\/store the result of the addition\r\ncall Console.Write<\/pre>\n<p>As you can see, the incremented value is always stored back into the variable i\u00a0(loc.0 in the IL). However, what is left on the stack differs depending on the pre- or postfix version. In prefix, the value is incremented then duplicated. One duplicate is saved back to the variable while the other is passed to Console.Write. In postfix, it is duplicated then incremented. The incremented version is saved back to the variable while the original value is passed to Console.Write.<\/p>\n<p>The same rules apply for classes that override the increment operator. In that case, a call to the overloaded increment operator instead of directly loading 1 onto the stack and calling the add operand. Also, the same rules apply for decrement (i.e. double minus sign &#8211;).<\/p>\n","excerpt":"<p>For a project I&#8217;ve been working on, I had to do some spelunking on C#&#8217;s operator overloading support. I discovered some interesting things about the equality and increment operators and how they are handled by the C# compiler in classes that do and do not overload them. I&#8217;ll be sharing the code soon, but I [&hellip;]<\/p>\n","date":"2003-07-09 22:47:27","modified":"2011-04-16 22:57:50","categories":[],"tags":[],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2915,"name":"dbx viewer","url":"http:\/\/www.oemailrecovery.com\/dbx-viewer.html","date":"2005-10-06 22:36:39","content":"<p>Hello!I found here a plenty of useful information for myself! I will visit you soon&#8230;<\/p>\n","parent":0},{"id":2916,"name":"dbx file recovery","url":"http:\/\/mail-repair.com\/mailbox-restore.html","date":"2005-10-06 22:38:05","content":"<p>The interesting information located on your page<\/p>\n","parent":0},{"id":2917,"name":"philadelphia roofing contractor","url":"http:\/\/northeastunion.com","date":"2005-10-15 00:21:18","content":"<p>Hello. I just wanted to give a quick greeting and tell you I enjoyed reading your material<\/p>\n","parent":0}],"attachments":[],"comment_count":3,"comment_status":"closed","custom_fields":{"dasblog_entryid":["5d6cba05-c0e4-480e-a3fb-877ebcb3e25f"],"dasblog_compressedtitle":["Operator+Overloading+In+C"],"dasblog_compressedtitleunique":["2003\/07\/10\/Operator+Overloading+In+C"]}},"previous_url":"http:\/\/devhawk.net\/2003\/07\/09\/quickies\/","next_url":"http:\/\/devhawk.net\/2003\/07\/09\/stringiterator-utility\/"}