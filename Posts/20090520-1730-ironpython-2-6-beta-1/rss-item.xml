<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>IronPython 2.6 Beta 1</title>
  <link>http://devhawk.net/2009/05/20/ironpython-2-6-beta-1/</link>
  <pubDate>Wed, 20 May 2009 17:30:57 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://6af3ecd9-fef5-4181-9f8f-762b3ecdd575</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>In addition to the <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=27320">IronPython CTP for .NET Framework 4.0 Beta 1</a> I <a href="http://devhawk.net/2009/05/20/IronPython+26+CTP+For+NET+40+Beta+1.aspx">blogged about earlier</a>, we also released the <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25126">first beta of IronPython 2.6</a> today. How about that – two IronPython releases in one day! This is our second preview release as we work towards our 2.6 RTM in September. 2.6 Alpha 1 was <a href="http://devhawk.net/2009/03/27/IronPython+26+Alpha+1.aspx">released</a> back in March. </p><p>There are two big new features in this release. The first is our implementation of the <a href="http://docs.python.org/library/ctypes.html">ctypes module</a>. The ctypes module is like P/Invoke for Python. It allows Python code to call into unmanaged DLL functions. Here, for example, I’m calling into the standard <a href="http://msdn.microsoft.com/en-us/library/wc7014hz.aspx">wprintf function</a> from msvcrt.dll</p><pre class="brush: text">
IronPython 2.6 Beta 1 (2.6.0.10) on .NET 2.0.50727.4918
&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; libc = ctypes.cdll.msvcrt
&gt;&gt;&gt; ret = libc.wprintf("%sn", "hello")
hello
</pre><p>Between ctypes and <a href="http://code.google.com/p/ironclad/">Ironclad</a>, I think we’ll eventually be able to load most native Python extensions in IronPython. Woot!</p><p>The other big new feature in this release is a real implementation of <a href="http://docs.python.org/library/sys.html#sys._getframe">sys._getframe</a>. _getframe lets you write code that inspects the Python callstack. Previously, we supported _getframe only with a depth of zero which is to say you could inspect the current frame, but no others. Now, by default we don’t implement _getframe at all unless you pass in –X:Frames or –X:FullFrames on the command line. Removing the version of _getframe that only worked for depth zero fixes <a href="http://knowbody.livejournal.com/13271.html">an issue with collections.py</a> that broke much of the 2.6 standard library in IronPython 2.6 Alpha 1. </p><p></p><p>The difference between Frames and FullFrames is in what is returned by frame.f_locals member. If you’re running with FullFrames, we hoist all local variables into the heap so they can be accessed by our frame walker. If you’re running with Frames, our ability to access locals up the stack is limited. Sometimes they are available - If you called <a href="http://docs.python.org/library/functions.html#locals">locals()</a> in a frame up the stack for example, then f_locals will be available – but usually not. There’s a performance difference between the default (i.e. no Frames), –X:Frames and –X:FullFrames, hence why we provide the user fine grained control over the Frame support. </p><p>Our <a href="http://ironpython.codeplex.com/Wiki/View.aspx?title=IP26B1VsCPy26Perf&amp;referringTitle=Home">performance</a> has gotten better <a href="http://ironpython.codeplex.com/Wiki/View.aspx?title=IP26A1VsCPy26Perf&amp;referringTitle=Home">relative</a> to 2.6 Alpha 1. Our PyStone numbers have improved 80% from Alpha 1, similar to where we were in IronPython 2.0.1. We’ve also been able to cut our startup time about 25% from 2.0.1. We’re still an order of magnitude slower than CPython on startup, but we’re getting better. We’re significantly worse on PyBench than we were in 2.6 Alpha 1, but that’s primarily because there’s now a second exception test. As I <a href="http://devhawk.net/2009/03/27/IronPython+26+Alpha+1.aspx">described back in March</a>, we get killed on the exceptions benchmarks – the two combine to consume nearly 62% of our total run time. Ouch!</p><p>Finally, there are bug fixes. Of particular relevance to readers of this blog are a series of fixes that allow me to continue on with my <a href="http://devhawk.net/CategoryView,category,__clrtype__.aspx">__clrtype__ series</a>. Watch for that soon.</p><p>As I said back when we released Alpha 1, the <a href="http://ironpython.codeplex.com/Wiki/View.aspx?title=2.6%20Release%20Plan">release cycle on 2.6</a> will be much shorter than it was for 2.0. 2.0 had eight alphas, five betas and two release candidates over the course of around twenty months. We expect 2.6 to have one alpha, two betas and a release candidate over eight months. So please start trying <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25126">using the beta</a> as soon as you can so you can give us your feedback and we can fix your bugs!</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1262</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2009-05-20 17:30:57</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2009-05-20 17:30:57</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">ironpython-2-6-beta-1</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[6af3ecd9-fef5-4181-9f8f-762b3ecdd575]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[IronPython+26+Beta+1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2009/05/21/IronPython+26+Beta+1]]></wp:meta_value>
  </wp:postmeta>
</item>