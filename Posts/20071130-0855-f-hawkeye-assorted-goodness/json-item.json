{"status":"ok","post":{"id":1061,"type":"post","slug":"f-hawkeye-assorted-goodness","url":"http:\/\/devhawk.net\/2007\/11\/30\/f-hawkeye-assorted-goodness\/","status":"publish","title":"F# Hawkeye : Assorted Goodness","title_plain":"F# Hawkeye : Assorted Goodness","content":"<p><em>(Harry is @ DevTeach in Vancounver with his family this week. He was hoping to still do Morning Coffee posts, but that&#8217;s turned out to be infeasible. So instead, you get a series of pre-written posts about F#.)<\/em><\/p>\n<h3>Significant Whitespace<\/h3>\n<p>If you&#8217;re a Python programmer, you already know this one. Instead of delineating code blocks explicit with curly braces or begin\/end keywords, F# uses whitespace. Code blocks are indented relative to their parent. This enforces readability standards as well as conciseness. You can see that in the code Additive function above. Technically, this is optional in F# if you specify the #light compiler option, but pretty much all the docs and books assume this by default.<\/p>\n<h3>Custom Operators<\/h3>\n<p>This is minor, but cool nonetheless. Many languages let you overload existing operators like + and *. However, F# goes a step further and also lets you create custom operators. You just pick a combination of symbols that isn&#8217;t already being used and define a function for it. For example, in my parsing code I wanted a simple way to adorn my input parse strings in my tests so that I could later easily change their type if I changed the type of NextChar and CheckForToken as described above. I defined the &#8220;double bang&#8221; operator !!. Currently, double bang converts a string into a character list, but originally it simply returned the string since I had written my Char and Token classes in terms of string. <\/p>\n","excerpt":"<p>(Harry is @ DevTeach in Vancounver with his family this week. He was hoping to still do Morning Coffee posts, but that&#8217;s turned out to be infeasible. So instead, you get a series of pre-written posts about F#.) Significant Whitespace If you&#8217;re a Python programmer, you already know this one. Instead of delineating code blocks [&hellip;]<\/p>\n","date":"2007-11-30 08:55:39","modified":"2007-11-30 08:55:39","categories":[],"tags":[{"id":198,"slug":"f-sharp","title":"F#","description":"","post_count":51}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["dcca3951-656c-4f23-8b2e-7165d477f985"],"dasblog_compressedtitle":["F+Hawkeye+Assorted+Goodness"],"dasblog_compressedtitleunique":["2007\/11\/30\/F+Hawkeye+Assorted+Goodness"]}},"previous_url":"http:\/\/devhawk.net\/2007\/11\/29\/f-hawkeye-type-inference\/","next_url":"http:\/\/devhawk.net\/2007\/11\/30\/f-hawkeye-assorted-not-so-goodness\/"}