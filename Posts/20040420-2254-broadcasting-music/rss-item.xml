<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Broadcasting Music</title>
  <link>http://devhawk.net/2004/04/20/broadcasting-music/</link>
  <pubDate>Tue, 20 Apr 2004 22:54:15 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://64a18811-757d-4599-8363-6a277214d26f</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>The first thing I need for my DJ idea is to be able to broadcast content. This means a variety of things, but first and foremost is music. The  RIAA provides <a href="http://www.riaa.com/issues/music/webcasting.asp">special webcasting licenses</a> as long as the webcaster meets <a href="http://www.riaa.com/issues/licensing/webcasting_faq.asp#conditions">specific criteria</a>. (I'm guessing I'll have to talk to our legal dept. before I actually broadcast any music). The criteria is pretty acceptable - I could easily build a bot that streams music 24/7 from my own ripped CD collection in accordance with the RIAA's criteria. </p><p>Of course, all that ripped music is on my personal home machine and I have no interest in copying it all up to my media server. What I really want to do is broadcast from my home machine to the server, which in turn broadcasts to potential listeners. From what I understand, I need to use the <a href="http://www.microsoft.com/windows/windowsmedia/9series/encoder/default.aspx">Windows Media Encoder</a> (or an app built with the <a href="http://msdn.microsoft.com/library/en-us/wmencode/htm/windowsmediaencoderautomation.asp">WMEncoder SDK</a>) to <a href="http://www.microsoft.com/resources/documentation/WindowsServ/2003/standard/proddocs/en-us/wmserver/sourcingfromanencoder.asp">push media to the server</a> for rebroadcast. No problem - building a bot to do that should be no big deal. Except that it is a big deal.</p><p>WMEncoder can only work with <a href="http://msdn.microsoft.com/library/en-us/wmencode/htm/workingwithsourcesandsourcegroups.asp">two sources of media</a> (not including screen captures, HTML and script which are not applicable to this post) files and devices. Since I'm mixing together the contents of multiple files, I can't use a single file as a source. Which means a device. The problem lies in the fact that audio apps are designed to write to audio rendering devices (like the sound card) not to audio capture devices. What I need is a audio "loopback" device that takes the audio sent to the virtual audio rendering device and sends it directly to the virtual audio capture device. Thus, the output of the bot is fed as input into the encoder. So far, I've found <a href="http://www.ntonyx.com/vac.htm">Virtual Audio Cable</a> from NTONYX that looks like it will do the trick (I actually dug out the <a href="http://www.microsoft.com/MSPress/books/6262.asp">windows driver book</a> and entertained very brief thoughts of building my own, but in the end, I'd rather just spend the $50 for VAC).</p><p>I'm not sure if I'm going to use <a href="http://msdn.microsoft.com/library/en-us/directx9_m/directx/ref/microsoft.directx.directsound.asp">DirectSound</a> or <a href="http://msdn.microsoft.com/library/en-us/directx9_c/directX/htm/directshow.asp">DirectShow</a> to build my broadcast bot. I'm leaning towards DirectShow since it seems more suited to this sort of problem (even though it is the only piece of DirectX w/o a managed wrapper). I just wish there was a Windows Media Broadcast <a href="http://msdn.microsoft.com/library/en-us/directx9_c/directX/htm/aboutdirectshowfilters.asp">rendering filter</a> that didn't require the use of VAC or the encoder.</p><p>Anyone out there have any experience with DirectShow? </p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">353</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2004-04-20 22:54:15</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2004-04-20 22:54:15</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">broadcasting-music</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="media"><![CDATA[Media]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[64a18811-757d-4599-8363-6a277214d26f]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Broadcasting+Music]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2004/04/21/Broadcasting+Music]]></wp:meta_value>
  </wp:postmeta>
</item>