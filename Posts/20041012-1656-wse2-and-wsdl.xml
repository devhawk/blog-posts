<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>WSE2 and WSDL</title>
  <link>http://devhawk.net/2004/10/12/wse2-and-wsdl/</link>
  <pubDate>Tue, 12 Oct 2004 16:56:31 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://73fc65ae-b737-4005-861e-eaf77e96e519</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>I may be at Strategic Architect Forum, but I've actually been coding off and on today - using WSE2 to expose web services. I hadn't realized that <a href="http://msdn.microsoft.com/library/en-us/wseref/html/T_Microsoft_Web_Services2_Messaging_SoapService.asp">SoapService</a> supports auto generation of WSDL - pretty cool. I dug around with Reflector to figure out how it works. Turns out that <a href="http://msdn.microsoft.com/library/en-us/wseref/html/T_Microsoft_Web_Services2_Messaging_SoapReceiver.asp">SoapReceiver</a> (parent of SoapService) exposes a method called <a href="http://msdn.microsoft.com/library/en-us/wseref/html/M_Microsoft_Web_Services2_Messaging_SoapReceiver_GetDescription_1_19f87a31.asp">GetDescription</a> that returns the WSDL as an XmlDocument. The SoapReceiver version of GetDescription returns null, but the SoapService implementation uses an internal class called WsdlCreator to generate construct a <a href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWebServicesDescriptionServiceDescriptionClassTopic.asp">ServiceDescription</a> from SoapService type that you write. Pretty cool. </p><p>The only downside is that if you use raw <a href="http://msdn.microsoft.com/library/en-us/wseref/html/T_Microsoft_Web_Services2_SoapEnvelope.asp">SoapEnvelope</a>s as the input and output parameter of the SoapService methods, the WsdlCreator has no way to know what schema to use for the corrisponding SOAP messages. So, it punts and represents a SoapEnvelope as sequence of xsd:any tags. :( If you use XML serializable types for parameters, then the WsdlCreator generates the associated schema in the WSDL. Only issue, I gave up on XML serialization <a href="http://devhawk.net/PermaLink.aspx?guid=5643b052-f1f2-4c53-ac33-e33d0910f917">a while ago</a>. </p><p>I wish there was a way to adorn the SoapService methods with an attribute indicating the associated message schemas (with the ability to validate those messages automatically). </p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">449</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2004-10-12 16:56:31</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2004-10-12 16:56:31</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">wse2-and-wsdl</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="sop"><![CDATA[SOP]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[73fc65ae-b737-4005-861e-eaf77e96e519]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[WSE2+And+WSDL]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2004/10/12/WSE2+And+WSDL]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2689</wp:comment_id>
    <wp:comment_author><![CDATA[Chris Bilson]]></wp:comment_author>
    <wp:comment_author_email>cbilson@pobox.com</wp:comment_author_email>
    <wp:comment_author_url>http://weblogs.factored-software.com/chris</wp:comment_author_url>
    <wp:comment_author_IP></wp:comment_author_IP>
    <wp:comment_date>2005-03-21 21:57:50</wp:comment_date>
    <wp:comment_date_gmt>2005-03-22 04:57:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Did you ever find a suitable way of doing this? I have a web service that has types that are very ugly to work with when xsd.exe'd, not to mention that it takes xsd.exe eons to generate millions of lines of really bad code for the huge schemas I am trying to work with. My service works just fine without WSDL, but I would really like to have dressed up in an actual-factual WSDL document when it is exposed in the wild. I am starting to think my best bet is to override GetDescription and return a hand made WSDL. Any thoughts?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>