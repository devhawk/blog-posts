{"status":"ok","post":{"id":1218,"type":"post","slug":"writing-an-ironpython-debugger-introduction","url":"http:\/\/devhawk.net\/2009\/02\/27\/writing-an-ironpython-debugger-introduction\/","status":"publish","title":"Writing an IronPython Debugger: Introduction","title_plain":"Writing an IronPython Debugger: Introduction","content":"<p>A while back I <a href=\"http:\/\/devhawk.net\/2008\/05\/08\/Debugging+IronPython+Code+In+Visual+Studio.aspx\">showed how<\/a> you can use Visual Studio to debug IronPython scripts. While that works great, it\u2019s lots of steps and lots of mouse work. I yearned for something lighter weight and that I could drive from the command line. <\/p>\n<p>The .NET framework includes a command line debugger called <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms229861.aspx\">MDbg<\/a>, but after using it for a bit, I found it didn\u2019t like it very much for IronPython debugging. Mdbg automatically sets a breakpoint on the main entrypoint function, but only if it can find the debugging symbols. So when you use Mdbg with the released version of IPy, the breakpoint never gets set. Instead, you have to trap the module load event, set a breakpoint in the python file you\u2019re debugging, then stop trapping the module load event. Every Time. That gets tedious.<\/p>\n<p>Another problem with MDbg is that it\u2019s not <a href=\"http:\/\/blogs.msdn.com\/jmstall\/archive\/2004\/12\/31\/344832.aspx\">Just-My-Code<\/a> (aka JMC) aware. JMC is this awesome debugging feature that was introduced in .NET 2.0 that lets the debugger \u201cpaint\u201d the parts of the code that you want to step thru (aka \u201cMy Code\u201d). By default, Visual Studio marks code with symbols as \u201cmy code\u201d and code without symbols as \u201cnot my code\u201d. [1] We don\u2019t ship symbols with IronPython releases, so Visual Studio does only steps thru the python code. MDbg doesn\u2019t support JMC, so I often found myself stepping into random parts of the IronPython implementation. That\u2019s even more tedious.<\/p>\n<p>Luckily, the <a href=\"http:\/\/www.microsoft.com\/downloads\/details.aspx?familyid=38449a42-6b7a-4e28-80ce-c55645ab1310&amp;displaylang=en\">source code<\/a> to MDbg is available. So I got the wacky idea to build a debugger specifically for IronPython. CPython includes <a href=\"http:\/\/docs.python.org\/library\/pdb.html\">pdb<\/a> (aka Python Debugger, not <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/yd4f8bd1.aspx\">Program Database<\/a>) but we don\u2019t support it because we <a href=\"http:\/\/ironpython.codeplex.com\/WorkItem\/View.aspx?WorkItemId=1042\">haven\u2019t implemented<\/a><a href=\"http:\/\/docs.python.org\/library\/sys.html#sys.settrace\">settrace<\/a>. Thus, ipydbg was born.<\/p>\n<p>Over the course of this series of blog posts, I\u2019m going to build out ipydbg. I have built out a series of prototypes so I fairly confident that I know <em>how<\/em> to build it. However, I\u2019m not sure what it will look like at the end. If you\u2019ve got any strong opinions on it one way or the other, be sure to email me or leave me comments. <\/p>\n<p>BTW, major thanks to my VSL teammate <a href=\"http:\/\/blogs.msdn.com\/jmstall\">Mike Stall<\/a> (of Mike Stall&#8217;s .NET Debugging Blog). Without his help, I would probably still be trying to make heads or tails of the MDbg source.<\/p>\n<hr \/>\n<p>[1] VS uses the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.diagnostics.debuggernonusercodeattribute.aspx\">DebuggerNonUserCode<\/a> attribute to provide fine grained control of what is considered \u201cmy code\u201d and should be stepped thru. <\/p>\n","excerpt":"<p>A while back I showed how you can use Visual Studio to debug IronPython scripts. While that works great, it\u2019s lots of steps and lots of mouse work. I yearned for something lighter weight and that I could drive from the command line. The .NET framework includes a command line debugger called MDbg, but after [&hellip;]<\/p>\n","date":"2009-02-27 14:21:22","modified":"2009-02-27 14:21:22","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":279,"slug":"debugger","title":"Debugger","description":"","post_count":23}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["54503f67-9452-4f6b-aa28-a9978416ce5b"],"dasblog_compressedtitle":["Writing+An+IronPython+Debugger+Introduction"],"dasblog_compressedtitleunique":["2009\/02\/27\/Writing+An+IronPython+Debugger+Introduction"]}},"previous_url":"http:\/\/devhawk.net\/2009\/02\/21\/avalanche-4-caps-1\/","next_url":"http:\/\/devhawk.net\/2009\/02\/27\/writing-an-ironpython-debugger-mdbg-101\/"}