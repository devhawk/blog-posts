<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Reliably Beating a Dead Horse</title>
  <link>http://devhawk.net/2007/02/19/reliably-beating-a-dead-horse/</link>
  <pubDate>Mon, 19 Feb 2007 21:44:33 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://0e49d4c1-a278-4888-9abd-ea0b2dc899ae</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p></p><p><em>(Harry is on a secret mission in uncharted space this week, so instead of the daily Morning Coffee post, you get a series of autoposted essays. This post builds on Harry's <a href="http://devhawk.net/2007/02/06/How+I+Learned+To+Stop+Worrying+And+Love+WCF.aspx">recent epiphany</a> about WCF and long running services)</em></p><p>Way, way, <em>way </em>back in March of 2003, IBM and Microsoft published an "overview and roadmap" white paper entitled "<a href="http://msdn2.microsoft.com/en-us/library/ms951247.aspx">Reliable Message Delivery in a Web Services World</a>". It contained the following paragraph under the section "Exchanging Messages Reliably":</p><blockquote><p>WS-ReliableMessaging is not bound to underlying transport protocols or sessions. <strong><em>This means that the lifetime of a WS-ReliableMessaging conversation can span long periods of time (days, weeks) even when one or both systems are rebooted. </em></strong>This allows conversations to be suspended mid-stream (for example, to allow system maintenance) and then resumed without needing to retransmit the entire conversation. [emphasis added]</p></blockquote><p>Now I know how I got <a href="http://devhawk.net/2007/02/06/How+I+Learned+To+Stop+Worrying+And+Love+WCF.aspx">confused about WCF and long running services</a> in the first place. <em>Support for long running services was part of the original web services vision!</em></p><p>About three years after that white paper was published, Shy Cohen wrote a post entitled <a href="http://blogs.msdn.com/shycohen/archive/2006/02/20/535717.aspx">Reliable Messaging Demystified</a> on his blog. Shy was at one time the feature owner of WS-RM in WCF (according to his post) and wrote the following:</p><blockquote><p>Reliable sessions [in WCF] are implemented using the WS-ReliableMessaging protocol. This protocol is yet another misnamed WS-* protocol, as it actually only deals with the reliability of the transfer and says nothing about durability, delivery acknowledgments, TTL for a message, long running sessions where a particular message is lost forever, etc. </p></blockquote><p>At some point in the three years between March 2003 and February 2006, WS-RM went from being the enabler of long running services to "yet another misnamed WS-* protocol". And with it, WCF lost (never had?) the ability to support long running services (as I've <a href="http://devhawk.net/2006/10/29/Is+WCF+QuotStraightforwardquot+For+Long+Running+Tasks.aspx">written previously</a>).</p><p>Now all and all, this isn't a big deal. I agree with Shy that WS-RM is under specified as mechanism for durable messaging (Shy calls this "queued messaging"). Attempting to build durable messaging on top of WS-RM sounds like it would have been both difficult and unlike to broadly interoperate. So implementing WS-RM for TCP style reliability and leveraging MSMQ as a transport for people that need durable messaging sounds like a pretty good compromise, especially for a v1 product. Of course, it is not exactly unheard of for a project's end result not to completely live up to the original vision. But I have a specific requirements in this case, so I wanted to know more. </p><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/ReliablyBeatingaDeadHorse_131B9/image{0}[2].png" atomicselection="true"><img style="BORDER-RIGHT: 0px; BORDER-TOP: 0px; BORDER-LEFT: 0px; BORDER-BOTTOM: 0px" height="180" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/ReliablyBeatingaDeadHorse_131B9/image{0}_thumb.png" width="240" align="right" border="0" /></a> By calling it "misnamed", it sounds like WS-RM was never really intended to be used for durable messaging. However, the July 2003 <a href="http://msdn2.microsoft.com/en-us/webservices/aa740628.aspx">Reliable Messaging Feedback Workshop</a> indicates that it was. In particular, Rodney Limprecht's <a href="http://download.microsoft.com/download/6/d/4/6d48120a-878e-4f0d-af20-3e900b004c3d/presentations-july2003-ws-wkshp.zip">"Reliable Messaging Scenarios" deck</a> describes WS-RM as supporting scenarios requiring "either volatile or durable endpoint state". His list of scenarios included both an "Intermittent Connectivity" scenario where "messages pending transfer are staged to disk and exchanged when connected" as well as a "Message Queue Integration" scenario that used WS-RM to interop between <a href="http://java.sun.com/products/jms/">JMS</a> and MSMQ. Seems safe to say that WS-RM was originally intended to support durable messaging. So what happened? How did it become "misnamed"?</p><p>Rodney's deck describes WS-RM as having the "flexibility to meet scenario requirements". But flexibility comes at a cost. For example, the flexibility of WCF's configuration comes at the cost of <a href="http://www.winterdom.com/weblog/2007/02/12/WCFConfigurationComplexity.aspx">significant complexity</a>. In the case of WS-RM, it appears that by trying to make it flexible enough to support both volatile and durable reliability, the authors might have made it <em>too </em>flexible. WS-RM implementers have broad latitude in building the capabilities Shy mentions (durability, acknowledgements, TTL, etc) as well as describing said capabilities in policy. By providing that latitude, we lost the ability to broadly interop durable messaging, which I would suspect is why it ended up out of scope for WCF v1.</p><p>As I said before, lack of support for WS-RM based durable messaging isn't that big a deal. As long as you understand <a href="http://devhawk.net/2007/02/06/How+I+Learned+To+Stop+Worrying+And+Love+WCF.aspx">WCF's sweet spot</a> - the current version's sweet spot anyway - and don't try and make it be something it's not, you should be fine. Furthermore, Shy mentions the need for an "interoperable Queued Messaging specification" and wrote that it's something he "expect[s] that we will get to it in the near future". Here's hoping that spec is less flexible than WS-ReliableMessaging.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">889</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2007-02-19 21:44:33</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2007-02-19 21:44:33</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">reliably-beating-a-dead-horse</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[0e49d4c1-a278-4888-9abd-ea0b2dc899ae]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Reliably+Beating+A+Dead+Horse]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2007/02/20/Reliably+Beating+A+Dead+Horse]]></wp:meta_value>
  </wp:postmeta>
</item>