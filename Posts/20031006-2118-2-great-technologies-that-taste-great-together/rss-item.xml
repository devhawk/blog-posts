<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>2 Great Technologies that Taste Great Together</title>
  <link>http://devhawk.net/2003/10/06/2-great-technologies-that-taste-great-together/</link>
  <pubDate>Mon, 06 Oct 2003 21:18:53 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://a6428efe-595e-479a-a3df-3897d6679977</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>If you like C++ and CLI, you're going to love <a href="http://www.ecma-international.org">ECMA</a> TG5 of TC39. Task Group 5 of Technical Committee 39 is going to tackle <a href="http://www.ecma-international.org/news/ecma-TG5-PR.htm">C++ bindings for CLI</a>. Since it's starting from a draft to be submitted by Microsoft, I assume they will be using all the existing keywords like __gc, __value and __property. I wonder if they'll strip out the double underscore prefix?</p><p>BTW, if you think the C++ / CLI combination is a waste of time, I say don't knock it 'till you try it. If you're wrapping an existing codebase with a C or C++ API, it's much easier to expose a managed interface with MC++ than C#. Don't believe me? Go take a complicated C structure like <a href="http://msdn.microsoft.com/library/en-us/winsock/winsock/wsaqueryset_2.asp"> WSAQUERYSET</a> and implement it via C#.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">202</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2003-10-06 21:18:53</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2003-10-06 21:18:53</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">2-great-technologies-that-taste-great-together</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2003/10/07/2+Great+Technologies+That+Taste+Great+Together]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[2+Great+Technologies+That+Taste+Great+Together]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[a6428efe-595e-479a-a3df-3897d6679977]]></wp:meta_value>
  </wp:postmeta>
</item>