{"status":"ok","post":{"id":1201,"type":"post","slug":"ironpython-and-linq-to-xml-part-4-generating-xml","url":"http:\/\/devhawk.net\/2008\/12\/01\/ironpython-and-linq-to-xml-part-4-generating-xml\/","status":"publish","title":"IronPython and Linq to XML Part 4: Generating XML","title_plain":"IronPython and Linq to XML Part 4: Generating XML","content":"<p>Now that I have my <a href=\"http:\/\/devhawk.net\/2008\/11\/27\/IronPython+And+Linq+To+XML+Part+2+Screen+Scraping.aspx\">list of Rock Band songs<\/a> and I can <a href=\"http:\/\/devhawk.net\/2008\/11\/27\/IronPython+And+Linq+To+XML+Part+3+Consuming+Atom+Feeds.aspx\">get the right Zune metadata<\/a> for most of them, I just need to write out the playlist XML. This is very straight forward to do with the classes in System.Xml.Linq.<\/p>\n<pre class=\"brush: python\">\ndef GenMediaElement(song):\n  try:\n    trackurl = zune_catalog_url + song.search_string     \n    trackfeed = XDocument.Load(trackurl)\n    trackentry = First(trackfeed.Descendants(atomns+'entry'))\n    trk = ScrapeEntry(trackentry)\n    return XElement('media', (XAttribute(key, trk[key]) for key in trk))\n  except:\n    print \"FAILED\", song     \n     \nzpl = XElement(\"smil\",     \n  XElement(\"head\",  \n    XElement(\"title\", \"Rock Band Generated Playlist\")),     \n  XElement(\"body\",     \n    XElement(\"seq\", (GenMediaElement(song) for song in songs))))\n\nsettings = XmlWriterSettings()\nsettings.Indent = True     \nsettings.Encoding = Encoding.UTF8     \nwith XmlWriter.Create(\"rockband.zpl\", settings) as xtw:\n  zpl.WriteTo(xtw)\n<\/pre>\n<\/p>\n<p>XElement\u2019s <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/bb302741.aspx\">constructor<\/a> takes a name (<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.xml.linq.xname.aspx\">XName<\/a> to be precise) and any number of <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/bb943882.aspx\">child objects<\/a>. These child objects can be XML nodes (aka <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.xml.linq.xobject.aspx\">XObjects<\/a>) or simple content objects like strings or numbers. If you pass an IEnumerable, the XElement constructor will iterate the collection and add all the items as children of the element. If you\u2019ve had the displeasure of building an XML tree using the <a href=\"http:\/\/www.w3.org\/DOM\/\">DOM<\/a>, you\u2019ll really appreciate XElements\u2019s fluent interface. I was worried that Python\u2019s significant whitespace would force me to put all the nested XElements on a single line, but luckily Python doesn\u2019t treat whitespace inside parenthesis as significant.\u00a0 <\/p>\n<p>Creating collections in Python is even easier than it is in C#. Python\u2019s supports a <a href=\"http:\/\/www.python.org\/doc\/2.5.2\/ref\/yield.html\">yield keyword<\/a> which is basically the equivalent of C#\u2019s <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/9k7k7cf0(VS.80).aspx\">yield return<\/a>. However, Python also supports list comprehensions (known as <a href=\"http:\/\/www.python.org\/doc\/2.5.2\/ref\/genexpr.html\">generator expressions<\/a>), which are similar to <a href=\"http:\/\/research.microsoft.com\/fsharp\/manual\/lexyacc.aspx#_Toc207785615\">F#\u2019s sequence expressions<\/a>. These are nice because you can specify a collection in a single line, rather than having to create a separate function, which is what you have to do to use yield. I have two generator expressions: (XAttribute(key, trk[key]) for key in trk) creates a collection of XAttributes, one for every item in the trk dictionary and (GenMediaElement(song) for song in songs) which generates a collection of XElements, one for every song in the song collection.<\/p>\n<p>Once I\u2019ve finished building the playlist XML, I need to write it out to a file. Originally, I used Python\u2019s built in open function, but the playlist file had to be UTF-8 because of band names like M\u00f6tley Cr\u00fce. Zune\u2019s software appears to always use UTF-8. In addition to setting the encoding, I also specify to use indentation, so the resulting file is somewhat readable by humans.<\/p>\n<p>The playlist works great in the Zune software, but since it\u2019s a <a href=\"http:\/\/www.mjefferson.net\/2008\/04\/03\/zune-streaming-playlists\/\">streaming playlist<\/a> there\u2019s no easy way to automatically download all the songs and sync them to your Zune device. I expected to be able to right click on the playlist and select \u201cdownload all&#8221;, but there\u2019s no such option. Zune does have a concept called <a href=\"http:\/\/www.zune.net\/NR\/rdonlyres\/51AE197B-221B-4192-AC4A-7CA1CBFC8312\/0\/channels.wmv\">Channels<\/a> where the songs from a regularly updated feed are downloaded locally and synced to the device. However, the Zune software appears to be hardcoded to only download channels from the catalog service so I couldn\u2019t tap into that. If anyone knows how to sign up to become a Zune partner channel, please drop me a line. <\/p>\n<p>Otherwise, that\u2019s So there you have it. As usual, I\u2019ve stuck the code <a href=\"http:\/\/cid-0d9bc809858885a4.skydrive.live.com\/self.aspx\/DevHawk%20Content\/IronPython%20Stuff\/RockBandZunePass.zip\">up on my SkyDrive<\/a>. If I can remember, I\u2019ll try and run the script once a week and upload <a href=\"http:\/\/cid-0d9bc809858885a4.skydrive.live.com\/self.aspx\/DevHawk%20Content\/Zune\/rockband.zpl\">the new playlist<\/a> to my SkyDrive as well. <\/p>\n","excerpt":"<p>Now that I have my list of Rock Band songs and I can get the right Zune metadata for most of them, I just need to write out the playlist XML. This is very straight forward to do with the classes in System.Xml.Linq. def GenMediaElement(song): try: trackurl = zune_catalog_url + song.search_string trackfeed = XDocument.Load(trackurl) trackentry [&hellip;]<\/p>\n","date":"2008-12-01 23:13:39","modified":"2008-12-01 23:13:39","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":224,"slug":"linq","title":"LINQ","description":"","post_count":24},{"id":273,"slug":"rock-band","title":"Rock Band","description":"","post_count":4},{"id":238,"slug":"xml","title":"XML","description":"","post_count":11},{"id":274,"slug":"zune","title":"Zune","description":"","post_count":4}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["ef4d7cdf-1c52-4f62-8aec-5a7e9c278a09"],"dasblog_compressedtitle":["IronPython+And+Linq+To+XML+Part+4+Generating+XML"],"dasblog_compressedtitleunique":["2008\/12\/02\/IronPython+And+Linq+To+XML+Part+4+Generating+XML"]}},"previous_url":"http:\/\/devhawk.net\/2008\/11\/27\/ironpython-and-linq-to-xml-part-3-consuming-atom-feeds\/","next_url":"http:\/\/devhawk.net\/2008\/12\/10\/ipy-rtw-ftw\/"}