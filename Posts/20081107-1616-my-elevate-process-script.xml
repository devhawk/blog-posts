<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>My Elevate-Process Script</title>
  <link>http://devhawk.net/2008/11/07/my-elevate-process-script/</link>
  <pubDate>Fri, 07 Nov 2008 16:16:40 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://044cf2d4-cc92-4d0d-8b5e-2b5d15a29982</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>I used to use the <a href="http://technet.microsoft.com/en-us/magazine/cc162321.aspx">Script Elevation PowerToys</a> to provide a simple way to launch an elevated command window from a Powershell prompt. However, that required installing said PowerToys in order to work, which I invariably forgot to install when paving my machine. That got annoying, so I went in search of a pure Powershell solution, which <a href="http://www.peterprovost.org/blog/post/Powershell-Sudo-(sort-of)-for-Vista-UAC-REDUX.aspx">Peter Provost conveniently provided</a> on his blog. </p><p>However, one of the benefits of the Script Elevation PowerToys was the ability to launch an admin command prompt in a specific directory – including the current one. I wanted the ability to default to launching Powershell when the user doesn’t specify a command to run. I thought I could just set $psi.WorkingDirectory, but as I’ve <a href="http://devhawk.net/2008/07/28/DevHawks+Slightly+Useful+Powershell+Configuration.aspx">described previously</a>, I update $home in my profile script to D:HPierson.Files (I keep my important files on my D: drive so I can pave C: with impunity) then set my current location to $home. So I can’t set the current location by using $psi.WorkingDirectory – it just gets overridden by my profile script.</p><p>However, it turns out you can pass arbitrary script code to Powershell via the –Command arguments. You also have to pass –NoExit to keep the command window around. The script passed in via -Command is executed after the profile script, so I can pass in a little script code to set the current location to the right location. </p><p>I modified Peter’s elevate-process script to launch a new Powershell command window when zero arguments or one folder argument are passed in. In those cases, elevate-process sets the location to the specified directory (current directory as the default when no arguments are provided) via the –NoExit and –Command arguments.</p><p>I’ve <a href="http://cid-0d9bc809858885a4.skydrive.live.com/self.aspx/DevHawk%20Content/Powershell/elevate-process.ps1">posted the script</a> to my SkyDrive as well as providing it below. Feel free to <strike>steal</strike> use it as you need. </p><pre class="brush: powershell">
function elevate-process  
{  
  $psi = new-object System.Diagnostics.ProcessStartInfo     
  $psi.Verb = "runas";     

  #if we pass no parameters, then launch PowerShell in the current location
  if ($args.length -eq 0)     
  {     
    $psi.FileName = 'powershell'
    $psi.Arguments =  
      "-NoExit -Command &amp;{set-location '" + (get-location).Path + "'}"
  }     

  #if we pass in a folder location, then launch powershell in that location
  elseif (($args.Length -eq 1) -and  
          (test-path $args[0] -pathType Container))     
  {     
    $psi.FileName = 'powershell'
    $psi.Arguments =  
        "-NoExit -Command &amp;{set-location '" + (resolve-path $args[0]) + "'}"
  }     

  #otherwise, launch the application specified in the arguments
  else
  {     
    $file, [string]$arguments = $args;     
    $psi.FileName = $file   
    $psi.Arguments = $arguments
  }     
     
  [System.Diagnostics.Process]::Start($psi) | out-null
}
</pre><p><strong><u>Update</u></strong>: I tried to run my elevate-process script from c:Program Files and discovered a bug. The set-location scripts need the path parameter to be encapsulated in single quotes in order to handle paths with spaces. I’ve updated both the code above as well as the copy on my SkyDrive.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1185</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2008-11-07 16:16:40</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2008-11-07 16:16:40</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">my-elevate-process-script</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[044cf2d4-cc92-4d0d-8b5e-2b5d15a29982]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[My+ElevateProcess+Script]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2008/11/08/My+ElevateProcess+Script]]></wp:meta_value>
  </wp:postmeta>
</item>