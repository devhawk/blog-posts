{"status":"ok","post":{"id":297,"type":"post","slug":"soa-vs-oo-in-business-process","url":"http:\/\/devhawk.net\/2004\/01\/30\/soa-vs-oo-in-business-process\/","status":"publish","title":"SOA vs. OO in Business Process","title_plain":"SOA vs. OO in Business Process","content":"<p>Ram <a href=\"http:\/\/weblogs.asp.net\/ramkoth\/archive\/2004\/01\/30\/64753.aspx\">blogs on abstraction<\/a> and Simon <a href=\"http:\/\/weblogs.asp.net\/smguest\/archive\/2004\/01\/29\/64871.aspx\">blogs on intimacy<\/a> of SOA vs. OO. Here are my two cents on control and process of SOA vs. OO.<\/p>\n<p>I came across this blog entry by <a href=\"http:\/\/today.java.net\/pub\/au\/80\">Michael Santos<\/a> who wants to <a href=\"http:\/\/weblogs.java.net\/pub\/wlg\/891\">stop the hype about web services<\/a>. I forwarded his post to my entire team. I feel that it represents the typical old-school, 20th-century, industrial-revolution, application-centric mindset that we encounter regularly when discussing XML Web Services. He talks a lot about using binary protocols instead of XML because of performance. What&#8217;s interesting is that his over-focus on performance leads down a path to tight coupling (or intimacy as Simon called it).<\/p>\n<blockquote><p>So, maybe you intend to keep your systems loosely coupled. I understand that. But let me ask you&#8230;Should they be loosely coupled in first place? Sometimes two systems are so tightly coupled that they should be just one system, to begin with. This usually happens in big companies, where political reasons force two groups to buy two solutions from two different vendors to solve two parts of the same indivisible problem that cannot be addressed separately. [<a href=\"http:\/\/today.java.net\/pub\/au\/80\">Michael Santos<\/a> : <a href=\"http:\/\/weblogs.java.net\/pub\/wlg\/891\">Stop the hype about webservices!<\/a>]<\/p><\/blockquote>\n<p>The thing is, there is no such thing as the &#8220;indivisible problem&#8221; in the enterprise. Enterprises don&#8217;t solve problems per se, they execute business processes. Developers tend to think in terms of nouns, which map nicely to objects, while business people tend to think in terms of verbs. For example, taking the canonical order processing scenario, the developer sees a single object &#8211; the order. Business people see the processes that surround that order &#8211; placing it, fulfilling it, paying for it. Typically, the developer sees these processes as methods: Order.Place(), Order.Fulfill(), Order.ProcessPayment(). However, these business processes don&#8217;t represent things the business object is doing, rather things being done to the business object. It&#8217;s a subtle difference, but it&#8217;s very important. <\/p>\n<p>In Ivar Jacobson&#8217;s <a href=\"http:\/\/search.barnesandnoble.com\/textbooks\/booksearch\/isbnInquiry.asp?userid=2VDXOKG2RS&amp;isbn=0201544350&amp;TXT=Y&amp;itm=11\">Object-Oriented Software Engineering<\/a>, he talks about how over time objects tend to evolve to have methods that are only used in a single use case. He separated the concepts of the &#8220;entity&#8221; object &#8211; which represents a business object that has persistent state &#8211; and the &#8220;control&#8221; object\u00a0 &#8211; which represents a process that modifies the state of one or more entities. (Note, control objects in this context are different from the controller object in the <a href=\"http:\/\/msdn.microsoft.com\/architecture\/patterns\/DesMVC\/\">MVC pattern<\/a>). In my experience, mapping use cases to control objects is a good first order approximation of your final system design. <\/p>\n<p>However, implementing controls and entities with objects implies an intimate relationship as part of a single autonomous system. In practice, this is very difficult to maintain over time. First off, it&#8217;s a bad model of reality. Going back to the order processing scenario, different departments and people are responsible for executing the &#8220;fulfill order&#8221; and &#8220;process order payment&#8221; business processes. The departments don&#8217;t have an intimate relationship for good reasons, like trust and security. Those reasons should be reflected in the code. Secondly, business process changes much more often than business entities. You never know when you&#8217;ll want to change a step, modify the order of steps or completely rethink the process in the face of market and \/ or technology changes. In other words, you want the connections between the processes and the entities to be loosely coupled. If you tightly couple everything together, then you&#8217;ll need to change everything every time something changes. This leads to a stagnation that a customer of mine once compared this to carrying a big pile of cow manure &#8211; once you put it down, you don&#8217;t want to pick it back up!<\/p>\n<p>If you step back from the OO mindset, you can model controls and entities in terms services pretty effectively. At PDC, <a href=\"http:\/\/microsoft.sitestream.com\/PDC2003\/ARC\/ARCSYM2_files\/Botto_files\/ARCSYM2_Campbell.ppt\">we discussed<\/a> the idea of resource vs. activity oriented data and the idea of service-masters vs. service-agents. These ideas are very similar conceptually to the control \/ entity separation. Control objects become business process services (also known as service agents or sometimes emissaries). However, when using services instead of objects, you gain power and flexibility that you just don&#8217;t get from the OO model.\u00a0\u00a0\u00a0 <\/p>\n","excerpt":"<p>Ram blogs on abstraction and Simon blogs on intimacy of SOA vs. OO. Here are my two cents on control and process of SOA vs. OO. I came across this blog entry by Michael Santos who wants to stop the hype about web services. I forwarded his post to my entire team. I feel that [&hellip;]<\/p>\n","date":"2004-01-30 13:34:34","modified":"2004-01-30 13:34:34","categories":[{"id":177,"slug":"architecture","title":"Architecture","description":"","parent":0,"post_count":296}],"tags":[{"id":183,"slug":"soa","title":"SOA","description":"","post_count":94}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2978,"name":"Chris Keyser","url":"","date":"2004-01-30 17:22:15","content":"<p>Sorry, Harry, I just can&#8217;t hold back responding to this barrage of OO hate mail <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" \/>   Maybe since I started in real-time where OO is most appropriately matched.<\/p>\n<p>First off, I never get what people mean when they rail against OO.  After all, isn&#8217;t the .NET framework OO?  Would you rather go back to c and win32 APIs?   OO can be applied at different levels, and the question is where is the approach appropriate and where is it not.<\/p>\n<p>Getting back to one of Ram&#8217;s points, I think services and objects should operate at different levels of abstraction.  Objects work fine and for me are a preferred approach to implementing logic within a service.  I honestly don&#8217;t understand how one would implement complex business logic &#8211; such as a pricing engine &#8211; more effectively using a bunch of loosely coupled fine grained services, or what benefit &#8220;loose coupling&#8221; brings for logic that will never be externalized.  Additionally ideas have moved in the OO world over the years (multiple inheritence is bad, shallow inheritence hierarchies are good, aggregration of behavior is generally preferred over inheritence, etc) &#8211; there is nothing about an object model that requires state to be mixed with behavior, and maybe that&#8217;s the next evolution for a class of problems.  It&#8217;s ironic that you quote an OO book to make your point.  I guess at least some OO guys can evolve.<\/p>\n<p>The question what is the right conceptual level for services and objects.  I believe SOA is all about how the right way to model and externalize business capabilities &#8211; they are appropriate at the boundaries.  I don&#8217;t think it has to be my way or the hiway when it comes to services and objects.<\/p>\n","parent":0},{"id":2979,"name":"DevHawk","url":"","date":"2004-01-30 23:32:38","content":"<p>Chris, we&#8217;re in violent agreement. OO is the way to go inside the service and you KNOW I am a big fan of the .NET framework. Ram&#8217;s opinion on abstraction levels was right on the money &#8211; I didn&#8217;t reiterate since he did such a great job. Part of what I&#8217;m saying is that some OO ideas &#8211; i.e. the entity \/ control seperation &#8211; also work in an Service-Oriented (SO?) world. <\/p>\n<p>The problem is that many people still don&#8217;t see the value of SO systems. Advocating an OO\/SO balanced viewpoint over a pure OO one does sometimes look like OO hatemail. I didn&#8217;t mean it to be. <\/p>\n<p>Hey, shouldn&#8217;t you be writing this on a blog of your own? <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" \/> <\/p>\n","parent":0}],"attachments":[],"comment_count":2,"comment_status":"closed","custom_fields":{"dasblog_entryid":["df0547d3-c573-4824-941b-25360860615a"],"dasblog_compressedtitle":["SOA+Vs+OO+In+Business+Process"],"dasblog_compressedtitleunique":["2004\/01\/30\/SOA+Vs+OO+In+Business+Process"]}},"previous_url":"http:\/\/devhawk.net\/2004\/01\/30\/article-on-ward\/","next_url":"http:\/\/devhawk.net\/2004\/02\/02\/my-work-bookshelf\/"}