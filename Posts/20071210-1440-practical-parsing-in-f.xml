<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Practical Parsing in F#</title>
  <link>http://devhawk.net/2007/12/10/practical-parsing-in-f/</link>
  <pubDate>Mon, 10 Dec 2007 14:40:10 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://e65ad3ba-088c-4b8b-88e6-e3d273fb7711</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[I'm interested in parsing because I'm interested in Domain Specific Languages. F# is <a href="http://tomasp.net/blog/fsharp-iv-lang.aspx">pretty good for internal DSLs</a>, but internal DSLs are obviously limited by the syntax of the host language. If you want complete control over the language, you've got to build your own parser.

The defacto standard for parser development is <a href="http://en.wikipedia.org/wiki/Yacc">Yet Another Compiler Compiler</a>, or yacc. There's a version of <a href="http://devhawk.net/2006/09/17/Managed+Lex+And+Yacc.aspx">yacc for .NET</a> as well as one <a href="http://research.microsoft.com/fsharp/manual/parsing.aspx">specifically for F#</a>. However, I'm not a fan of yacc. Yacc parsers are specified using <a href="http://en.wikipedia.org/wiki/Context-free_grammar">context-free grammar</a> (aka CFG). But CFG's can be ambiguous - actually, it's <a href="http://en.wikipedia.org/wiki/Dangling_else">nearly impossible</a> to build an unambiguous CFG. Personally, I'm a big fan of <a href="http://pdos.csail.mit.edu/~baford/packrat/">Parsing Expression Grammars</a> (or PEGs) which among other advantages makes it impossible to develop ambiguous grammars. Furthermore, PEGs don't require a separate lexical analyzer like <a href="http://en.wikipedia.org/wiki/Lex_programming_tool">lex</a>, so I think they're more suitable for building <a href="http://devhawk.net/2006/08/15/Modular+Compilers.aspx">modular compilers</a>.

Since I like PEGs and F# so much, I developed a parser for the PEG grammar from the <a href="http://pdos.csail.mit.edu/~baford/packrat/popl04/">original PEG whitepaper</a> using F#. The grammar is much simpler than a language like C#, but with twenty nine grammar productions it's certainly not trivial. The F# implementation is fairly straightforward backtracking recursive decent parser, which makes it easy to understand even if you're not a parser guru. It's also small - around 400 lines of code including comments. But I think the code illustrates both the general value of Functional Programming as well as the specific value of F#. Here's how the series is shaping up (though this is subject to change):
<ul>
	<li><a href="http://devhawk.net/2007/12/11/Practical+F+Parsing+The+Parse+Buffer.aspx" target="_blank">The Parse Buffer</a></li>
	<li><a href="http://devhawk.net/2007/12/12/Practical+F+Parsing+Unit+Testing.aspx" target="_blank">Unit Testing</a></li>
	<li><a href="http://devhawk.net/2007/12/13/Practical+F+Parsing+Syntactical+Productions+1.aspx" target="_blank">Syntactical Productions (1)</a></li>
	<li><a href="http://devhawk.net/2007/12/14/Practical+F+Parsing+Active+Patterns.aspx">Active Patterns</a></li>
	<li><a href="http://devhawk.net/2007/12/17/Practical+F+Parsing+Syntactical+Productions+2.aspx" target="_blank">Syntactical Productions (2)</a></li>
	<li><a href="http://devhawk.net/2007/12/18/Practical+F+Parsing+Semantic+Productions+1.aspx" target="_blank">Semantic Productions (1)</a></li>
	<li><a href="http://devhawk.net/2007/12/18/Practical+F+Parsing+Semantic+Productions+1.aspx" target="_blank"></a><a href="http://devhawk.net/2007/12/19/Practical+F+Parsing+The+Abstract+Syntax+Tree.aspx" target="_blank">The Abstract Syntax Tree</a></li>
	<li><a href="http://devhawk.net/2007/12/20/Practical+F+Parsing+Semantic+Productions+2.aspx" target="_blank">Semantic Productions (2)</a></li>
	<li><a class="TitleLinkStyle" rel="bookmark" href="http://devhawk.net/2008/01/29/Practical+F+Parsing+Recursion+And+Predicate+Functions.aspx"><span style="color: #017cbc;">Recursion and Predicate Functions</span></a></li>
	<li>Caching and Tracing</li>
	<li>C# Interop</li>
</ul>
I was originally planning to post the code for the parser itself with this post. However, i find that I'm revising the code as I write the articles in this series, so I'm going to hold off for now. If you're really desperate, <a href="mailto:harry@devhawk.net" target="_blank">drop me a line</a> and I'll see what I can do.

Update - Almost forgot, if you're going to follow along at home, I'm using the <a href="http://research.microsoft.com/research/downloads/Details/e8478d6b-49c0-4750-80eb-0e424d1631a3/Details.aspx">latest version of F#, v1.9.3.7</a>. Note, the <a href="http://research.microsoft.com/fsharp/release.aspx">F# Downloads page</a> on the MS Research is woefully out of date, so go to the <a href="http://research.microsoft.com/research/downloads/Browse.aspx?categoryID=0&amp;sortCriteria=releaseDate&amp;sortOrder=descending">MS Research Downloads page</a>. Currently, it's the most recent release. It snaps into VS 2005 and 2008 plus has command line tools. If you're an VS Express user, Douglas Stockwell <a href="http://11011.net/archives/000721.html">explained</a> how to roll your own F# Express.

Much Later Update - The code is now available <a href="http://cid-0d9bc809858885a4.skydrive.live.com/browse.aspx/DevHawk%20Content/Projects/Practical%20Parsing%20in%20F%7C3" target="_blank">on my Skydrive</a>.]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1070</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2007-12-10 14:40:10</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2007-12-10 14:40:10</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">practical-parsing-in-f</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="domain-specific-languages"><![CDATA[Domain Specific Languages]]></category>
  <category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
  <category domain="post_tag" nicename="parsing-expression-grammar"><![CDATA[Parsing Expression Grammar]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[e65ad3ba-088c-4b8b-88e6-e3d273fb7711]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Practical+Parsing+In+F]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2007/12/10/Practical+Parsing+In+F]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2004</wp:comment_id>
    <wp:comment_author><![CDATA[Tomas Restrepo]]></wp:comment_author>
    <wp:comment_author_email>tomas@winterdom.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.winterdom.com/weblog/</wp:comment_author_url>
    <wp:comment_author_IP>200.116.141.224</wp:comment_author_IP>
    <wp:comment_date>2007-12-10 15:38:24</wp:comment_date>
    <wp:comment_date_gmt>2007-12-10 23:38:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Pretty cool Harry, looking forward to the rest of the posts and the code!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>