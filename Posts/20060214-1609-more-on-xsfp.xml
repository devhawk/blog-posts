<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>More on XSFP</title>
  <link>http://devhawk.net/2006/02/14/more-on-xsfp/</link>
  <pubDate>Tue, 14 Feb 2006 16:09:57 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://72f184eb-d99a-47f3-b395-182314447338</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p><a href="http://gonze.com/weblog/">Lucas Gonze</a> left me a <a href="http://devhawk.net/CommentView,guid,32bca2ee-e564-4151-af30-e1d23e7f517e.aspx#85758f3a-8ba4-431e-8efe-77370dc7d4a9">comment</a> indicating they had in fact <a href="http://gonze.com/rss_plus_time.html">investigated using RSS</a> for XSFP instead of starting from scratch. Good to know they considered the possibility. Unfortunately, it looks like they were using RSS 1.0 so it has all the extra RDF stuff which really hasn't caught on. The document doesn't really go into the reasons they chose to go a different way, though Lucas does say the following:</p><blockquote><p>RSS didn't make sense for a lot of reasons. We were paving cowpaths, and RSS for playlists was very much not a cowpath. Playlists are about sequence, while RSS has no concept of sequence except reverse chronological order. We needed abstractions to deal with the fact that music and movies frequently don't have URLs, and RSS didn't have them. If not starting from scratch was critical, HTML preceded RSS and would be the default to work from. </p></blockquote><p>I'm not sure I get Lucas' point about sequence. Both RSS and XSFP have sequence. Sure, RSS is typically describing web site content, thus it's a reverse chronological order. But the RSS spec doesn't mandate and specific meaning to the items in the feed. In fact, the items typically have a pubDate element making the order in the feed somewhat irrelevant. According to the <a href="http://www.xspf.org/xspf-v1.html">spec</a>, XSFP uses the order of the tracks in the file as the implicit playback order. Why that wouldn't work with RSS is a mystery to me. </p><p>As for the "needed abstractions" missing from RSS, I'd be curious to know what those are and why they couldn't be added via <a href="http://www.rssboard.org/rss-2-0#extendingRss">RSS extensions</a>. </p><p>Lucas, please don't take these comments as criticisms. I'm new in this space and I'm trying to get my head around stuff. Furthermore, if the success of RSS proves anything, it's that number of users matters a lot more than the perceived technical merit of a given approach.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">693</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2006-02-14 16:09:57</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2006-02-14 16:09:57</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">more-on-xsfp</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="music"><![CDATA[Music]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="web-2-0"><![CDATA[Web 2.0]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[72f184eb-d99a-47f3-b395-182314447338]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[More+On+XSFP]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2006/02/15/More+On+XSFP]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2902</wp:comment_id>
    <wp:comment_author><![CDATA[Lucas Gonze]]></wp:comment_author>
    <wp:comment_author_email>lucas@gonze.com</wp:comment_author_email>
    <wp:comment_author_url>http://gonze.com</wp:comment_author_url>
    <wp:comment_author_IP>67.72.118.244</wp:comment_author_IP>
    <wp:comment_date>2006-02-15 18:26:56</wp:comment_date>
    <wp:comment_date_gmt>2006-02-16 02:26:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[RSS is not about lists so much as it's about reverse-chronological journals.  There are assumptions about the weblog form buried deep in the format, for example the idea that all entries would have some sensible reason to have a pubDate.

We could indeed do playlists as an RSS extension, and at the time we started on XSPF some people were experimenting with that.  Those experiments didn't work out for three reasons.  One, many RSS features just weren't applicable to playlists and would create needless verbosity.  Two, many playlist features weren't already in RSS and would have to be invented no matter what we did.  Three, our target user base was developers of MP3 players, who would be actively turned off by having to deal with RSS.  XSPF is much much much simpler than RSS.  On the whole, an RSS-based approach would have been buggier, harder, and hard to sell.  

Now my question for you: why are you looking at multimedia through RSS-colored glasses?  Why should web logs be the model for playlists?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2903</wp:comment_id>
    <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
    <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
    <wp:comment_date>2006-02-16 10:39:41</wp:comment_date>
    <wp:comment_date_gmt>2006-02-16 18:39:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I believe your understanding of RSS to be flawed. If you read the 2.0 spec, you'll notice that there are no assumptions baked into the spec. Sure, it's primarily used for weblogs, but RSS doesn't mandate weblogs. For example, your point about pubDate is incorrect. PubDate, like all other defined item elements, is optional. 

From the link you left in your last post, it's pretty clear you were looking at the 1.0 version of the RSS spec which was significantly more verbose. Have you looked at the 2.0 spec?

I'm not looking at multimedia through RSS-colored glasses. I'm seeing yet another list format that is semantically similar but syntactically different from RSS. That means that instead of using well known (and well tested) RSS libraries to process playlist feeds, I have to write everything from scratch. That creates more bugs, not less.

Given the popularity of podcasting - which of course uses RSS as the feed format - RSS for multimedia seems to be working well already. From my reading of the spec, an XPSF feed is basically an RSS feed without some of the elements that are optional in RSS anyway. ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2904</wp:comment_id>
    <wp:comment_author><![CDATA[Lucas Gonze]]></wp:comment_author>
    <wp:comment_author_email>lucas@gonze.com</wp:comment_author_email>
    <wp:comment_author_url>http://gonze.com</wp:comment_author_url>
    <wp:comment_author_IP>67.72.118.244</wp:comment_author_IP>
    <wp:comment_date>2006-02-16 11:54:34</wp:comment_date>
    <wp:comment_date_gmt>2006-02-16 19:54:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That's XSPF, not XPSF.

It is silly to say that there are no assumptions baked into the spec.

]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>