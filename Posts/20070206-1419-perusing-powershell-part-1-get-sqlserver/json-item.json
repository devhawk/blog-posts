{"status":"ok","post":{"id":875,"type":"post","slug":"perusing-powershell-part-1-get-sqlserver","url":"http:\/\/devhawk.net\/2007\/02\/06\/perusing-powershell-part-1-get-sqlserver\/","status":"publish","title":"Perusing Powershell Part 1: Get-SQLServer","title_plain":"Perusing Powershell Part 1: Get-SQLServer","content":"<p>I <a href=\"http:\/\/devhawk.net\/2007\/02\/06\/Morning+Coffee+25.aspx\">wrote this morning<\/a> that I&#8217;ve shifted my new language focus from F# to PowerShell. I did this for a variety of reasons, but primarily because PowerShell is the future of Microsoft administration while F# is a research project. The thing that interests&nbsp;me most about F# is its support for hybrid OO\/functional programing. Turns out, PS uses a different approach, but accomplishes much of the same goal.<\/p>\n<p>In OO, most of the focus is on objects, naturally. However, administrators (i.e. the target audience of PS) tend to be much more task or action focused than object focused. Most OO languages don&#8217;t have actions as a first class citizens within the language. C# and Java don&#8217;t even allow stand alone functions &#8211; they always have to be at least static members of a class.<\/p>\n<p>I&#8217;m fairly sure there are many reasons why strongly typed OO languages aren&#8217;t popular among administrators. I&#8217;m not going to go down the static\/dynamic typing rat hole here, but I would guess the object\/action language tradeoff is almost as important as the typing tradeoff. What&#8217;s nice about PowerShell is that while it has strong object support, it also has strong action support as well. In PS, actions are called Cmdlets. While I&#8217;m not a big fan of the name, having first class support for them in PS is one of the things I find most interesting.<\/p>\n<p>PS is designed to be extended. And while there is support for defining functions in PS directly, for the most part PS is designed to be extended in a&nbsp;.NET OO language like C#. I have mixed feeling on this. Languages like F# and Ruby allow for these sorts of extensions to be built within the language itself. On the other hand, having a strong separation between scripting the shell and extending the shell simplifies the scripting experience without sacrificing capability of building extensions.<\/p>\n<p>Here&#8217;s a simple cmdlet I wrote called Get-SQLServer. SQL Server already comes with a <a href=\"http:\/\/msdn2.microsoft.com\/en-us\/library\/ms162169.aspx\">robust object oriented administration library<\/a>, but no support for PS (no surprise, since PS just shipped). I imagine future versions of SQL will have PS support, but to me this represents a great opportunity to get deep understanding of PS as well as focus on PS cmdlet design without having to do much of the grunt work.<\/p>\n<pre class=\"brush:csharp\">using System;\r\nusing System.Management.Automation;\r\nusing Microsoft.SqlServer.Management.Smo.Wmi;\r\nusing Microsoft.SqlServer.Management.Smo; \r\n\r\n[Cmdlet(VerbsCommon.Get, \"SQLServer\")]\r\npublic class GetSqlServerCommand : Cmdlet\r\n{\r\n  private string _Name;\r\n  [Parameter]\r\n  public string Name\r\n  {\r\n    get { return _Name; }\r\n    set { _Name = value; }\r\n  }\r\n\r\n  private string _MachineName;\r\n  [Parameter]\r\n  public string MachineName\r\n  {\r\n    get { return _MachineName; }\r\n    set { _MachineName = value; }\r\n  }\r\n\r\n  private SwitchParameter _Default;\r\n  [Parameter]\r\n  public SwitchParameter Default\r\n  {\r\n    get { return _Default; }\r\n    set { _Default = value; }\r\n  }\r\n\r\n  protected override void ProcessRecord()\r\n  {\r\n    string machine = string.IsNullOrEmpty(_MachineName) ? \".\" : _MachineName;\r\n\r\n    if (string.IsNullOrEmpty(_Name) &amp;&amp; !_Default.IsPresent)\r\n    {\r\n      \/\/write all server instances on specified machine\r\n      \/\/if _machineName is null or empty, the local machine is used\r\n      ManagedComputer mc =  new ManagedComputer(machine);\r\n\r\n      foreach (ServerInstance si in mc.ServerInstances)\r\n      {\r\n        if (si.Name == \"MSSQLSERVER\")\r\n          WriteObject(new Server(machine));\r\n        else\r\n          WriteObject(new Server(machine + \"\\\" + si.Name));\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!string.IsNullOrEmpty(_Name) &amp;&amp; _Default.IsPresent)\r\n    {\r\n      WriteError(\r\n        new ErrorRecord(\r\n          new ArgumentException(\"Default and Name parameters can't both be specified\"),\r\n          \"DefaultAndName\",\r\n          ErrorCategory.InvalidArgument,\r\n          null));\r\n\r\n      return;\r\n    }\r\n\r\n    if (_Default.IsPresent)\r\n      WriteObject(new Server(machine));\r\n    else\r\n      WriteObject(new Server(machine + \"\\\" + _Name));\r\n  }\r\n}<\/pre>\n<p>As you can see, it&#8217;s fairly simple. The cmdlet takes three parameters &#8211; Name, MachineName and Default. MachineName represents the windows server machine the SQL server instance is running on. Name is a common PS parameter, and here is used to specify the SQL instance name you&#8217;re interested in. However, since the default instance of SQL on a given server doesn&#8217;t have a name, I had to add a Default flag. Since the cmdlet can return a collection of SMO Server objects, I needed a way to distinguish between &#8220;Give me the default instance on a machine&#8221; and &#8220;Give me all instances on a machine&#8221;. I couldn&#8217;t use a null or empty Name parameter to mean both. If neither Name or Default are specified, it means the user wants a collection. If both are specified, it&#8217;s an error. Otherwise, the cmdlet returns a single Server object &#8211; either the default or a named instance as specified.<\/p>\n<p>Using the cmdlet is fairly straight forward.&nbsp;If you simply specify &#8220;Get-SQLServer&#8221;, it gives you a collection of all the SQL Server instances on the local machine. If you specify &#8220;Get-SQLServer -Default&#8221;, it gives you just the default SQL Server instance on the local machine. And if you specify &#8220;Get-SQLServer -Name sqlexpress&#8221;, it gives you just the SQL Express instance on the local machine. Using the -MachineName parameter allows you to connect to a remote SQL server box, but is otherwise the same.<\/p>\n<p>Of course, this is a very simple cmdlet. It doesn&#8217;t even change the current state of the system. But now that we have a reference to a SQL Server instance, we can call methods on that instance. In the next post (whenever that is), I&#8217;ll build some cmdlets to let me create and drop databases on that instance.<\/p>\n<p><em><span style=\"text-decoration: underline;\">Update<\/span><\/em>: Removed syntax coloring from code because it looked bad in my news reader.<\/p>\n<p><em><span style=\"text-decoration: underline;\">Later Update<\/span><\/em>: Fixed the syntax coloring<\/p>\n","excerpt":"<p>I wrote this morning that I&#8217;ve shifted my new language focus from F# to PowerShell. I did this for a variety of reasons, but primarily because PowerShell is the future of Microsoft administration while F# is a research project. The thing that interests&nbsp;me most about F# is its support for hybrid OO\/functional programing. Turns out, [&hellip;]<\/p>\n","date":"2007-02-06 14:19:52","modified":"2011-04-17 00:10:10","categories":[],"tags":[{"id":230,"slug":"powershell","title":"PowerShell","description":"","post_count":41}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2452,"name":"Jeffrey Snover","url":"","date":"2007-02-06 19:43:52","content":"<p>You get it.  I&#8217;m looking forward to seeing what you like and don&#8217;t like about PowerShell and any ideas you have about how we can make it better and\/or more powerful.<\/p>\n<p>Cheers!<br \/>\nJeffrey Snover [MSFT]<br \/>\nWindows PowerShell\/MMC Architect<br \/>\nVisit the Windows PowerShell Team blog at:    <a href=\"http:\/\/blogs.msdn.com\/PowerShell\" rel=\"nofollow\">http:\/\/blogs.msdn.com\/PowerShell<\/a><br \/>\nVisit the Windows PowerShell ScriptCenter at:  <a href=\"http:\/\/www.microsoft.com\/technet\/scriptcenter\/hubs\/msh.mspx\" rel=\"nofollow\">http:\/\/www.microsoft.com\/technet\/scriptcenter\/hubs\/msh.mspx<\/a><\/p>\n","parent":0}],"attachments":[],"comment_count":1,"comment_status":"closed","custom_fields":{"dasblog_entryid":["a73ea4af-97ef-4574-94f1-8f928e5be84f"],"dasblog_compressedtitle":["Perusing+Powershell+Part+1+GetSQLServer"],"dasblog_compressedtitleunique":["2007\/02\/06\/Perusing+Powershell+Part+1+GetSQLServer"]}},"previous_url":"http:\/\/devhawk.net\/2007\/02\/06\/how-i-learned-to-stop-worrying-and-love-wcf\/","next_url":"http:\/\/devhawk.net\/2007\/02\/07\/morning-coffee-26\/"}