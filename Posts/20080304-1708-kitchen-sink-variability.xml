<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Kitchen Sink Variability</title>
  <link>http://devhawk.net/2008/03/04/kitchen-sink-variability/</link>
  <pubDate>Tue, 04 Mar 2008 17:08:37 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://08a8504d-71dd-4a36-a79c-4bfbf3dc4f95</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Nick Malik forwarded the <a href="http://www.zapthink.com/report.html?id=ZAPFLASH-2008228">last ZapFlash newsletter</a> to me. I gave up on analyst newsletters like this long ago, but Nick shared it with me because it "hit directly on what [Nick] thinks an ESB is and does, and why an ESB is not a hub." I'm <a href="http://devhawk.net/2007/04/25/Enterprise+Service+Bus+Give+Me+An+Extra+Special+Bitter+Instead.aspx">not a fan of the whole ESB concept</a> and frankly this article didn't do much to change my opinion. However, this passage did sorta jump out at me.</p><blockquote><p>[T]he main concept of SOA is that we want to deal with frequent and unpredictable change by constructing an architectural model, discipline, and abstraction that loosely-couples the providers of capability from the consumers of capability in an environment of continuous heterogeneity. This means that we have to somehow develop capabilities without the knowledge of how they might be used...[T]his means that we need to have significant variability at a variety of aspects including the implementation, infrastructure, contract, process, policy, data schema, and semantic aspects. Having this variability allows companies to have stability in their business and IT even though the IT and business continue to change. Agility, predictability, reliability, visibility, and cost-effectiveness all become that much more realistic when we can achieve that sort of abstraction. </p></blockquote><p>My reading of this is that the author, <a href="http://www.zapthink.com/management.html">Ronald Schmelzer</a>, is advising organizations to introduce "significant variability at a variety of aspects" in their services in order to deal with what he openly admits is "unpredictable change". </p><p>This sounds like a mind-boggling awful idea to me.</p><p>At it's heart, any practical design - including a service-oriented one - needs to be an exercise in tradeoff analysis. You can't add "significant variability" without also adding significant complexity, effort, time and cost. So the real question is: Is the significant variability Ronald describes worth the inevitable tradeoff in significant time, effort, cost and complexity?</p><p>I seriously doubt it.</p><p>Since unpredictable change is - by definition - unpredictable, you have no way of knowing if you will actually need any specific aspect of variability down the road. Ronald's strategy - if you can call it that - seems to be let everything he can think of vary except the kitchen sink. That way, when said unpredictable change happens, you might get lucky and have already enabled the variability you need to handle the change with a minimum of effort.</p><p>Getting lucky is not a strategy.</p><p>Chances are, a specific aspect of variability won't ever be needed. In other words, most of the the time, effort and money you spent building these aspects of variability will be wasted. And remember, this isn't just a one time cost - the increased complexity from including this significant variability means you'll pay the price in additional time, effort and money every time you have to change the system.</p><p>I wonder if Ronald is familiar with the term "<a href="http://xp.c2.com/YouArentGonnaNeedIt.html">You Aren't Gonna Need It</a>". He talks about increasing business agility, but he eschews many of the principles of <a href="http://en.wikipedia.org/wiki/Agile_software_development">agile development</a>. I realize they aren't the same thing, but I have a hard time believing that they are so diametrically opposed that a <a href="http://www.extremeprogramming.org/rules/early.html">core principle</a> of agile development should be readily violated in order to enable business agility.</p><p>Maybe it's cliche, but I try to always come back to "<a href="http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html">What's the simplest thing that could possibly work?</a>". I would think that building a ton of currently-unnecessary variability into your system on the off chance that someday you'll need it fails the "simplest thing that could possibly work" test spectacularly. </p><p>Personally, given the choice of taking advice from <a href="http://c2.com/cgi/wiki?WardCunningham">Ward Cunningham</a> or pretty much any enterprise analyst on the planet, I'll pick Ward every time.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1117</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2008-03-04 17:08:37</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2008-03-04 17:08:37</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">kitchen-sink-variability</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[08a8504d-71dd-4a36-a79c-4bfbf3dc4f95]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Kitchen+Sink+Variability]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2008/03/05/Kitchen+Sink+Variability]]></wp:meta_value>
  </wp:postmeta>
</item>