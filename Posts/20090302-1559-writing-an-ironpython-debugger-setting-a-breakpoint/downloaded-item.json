{"status":"ok","post":{"id":1222,"type":"post","slug":"writing-an-ironpython-debugger-setting-a-breakpoint","url":"http:\/\/devhawk.net\/2009\/03\/02\/writing-an-ironpython-debugger-setting-a-breakpoint\/","status":"publish","title":"Writing an IronPython Debugger: Setting a Breakpoint","title_plain":"Writing an IronPython Debugger: Setting a Breakpoint","content":"<p>Now that we have a debugger process <a href=\"http:\/\/devhawk.net\/2009\/02\/28\/Writing+An+IronPython+Debugger+Hello+Debugger.aspx\">up and running<\/a>, let start adding some actual features. First up, we want to be able to set breakpoints. One of the nice things MDbg does is auto-set a breakpoint on the entrypoint function. For ipydbg, we\u2019re going to auto-set a breakpoint on the first line of the python file being debugged.<\/p>\n<p>In order to set a breakpoint, we need debugger symbols. They allow us to translate between \u201cline one of simpletest.py\u201d and the actual location in the code and back. We\u2019re all used to seeing the PDB files that are produced when we compile a C# assembly. Unsurprisingly, the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms232451.aspx\">symbol store binder<\/a> provides a method to <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms230866.aspx\">load these PDB files from disk<\/a>. But where do IronPython debug symbols come from? I know from my extensive reading of the ipy.exe command line parameters that you pass \u2013D to enable application debugging, but since all the IL is being generated in memory, how does the debugger get access to the PDB files?<\/p>\n<p>It turns out the debugger API includes a <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms230148.aspx\">UpdateModuleSymbols callback method<\/a> that the runtime uses to notify the debugger when the symbols change. The debugger symbols are provided in an IStream, and then you <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms232101.aspx\">use the symbol binder<\/a> to get a <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.diagnostics.symbolstore.isymbolreader.aspx\">symbol reader<\/a>. The .NET Framework already provides a <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.diagnostics.symbolstore.aspx\">managed API<\/a> for reading and writing debug symbols. However, that API doesn\u2019t support loading symbols from a stream, so the MDbg code includes it\u2019s own <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/5858695ff85ed4740ad06466d4f54394e7f00f9b\/CorDebug\/CorSymbolStore\/symbinder.cs\">wrapper<\/a> around the symbol binder API to include that functionality. Here\u2019s some code to get the debug symbol reader for an updated module and iterate through the associated files:<\/p>\n<pre class=\"brush: python\">\nsym_binder = SymbolBinder()   \n     \ndef OnUpdateModuleSymbols(s,e):   \n  print \"OnUpdateModuleSymbols\"   \n     \n  metadata_import = e.Module.GetMetaDataInterface[IMetadataImport]()   \n  reader = sym_binder.GetReaderFromStream(metadata_import, e.Stream)   \n\n  for doc in reader.GetDocuments():    \n    print \"t\", doc.URL     \n\nprocess.OnUpdateModuleSymbols += OnUpdateModuleSymbols\n<\/pre>\n<p>If we run <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/965e2fbf4834177cb7aa7816dd5d0d729672dec6\/ipydbg.py\">this version of ipydbg<\/a> on simpletest.py with the <a href=\"http:\/\/ironpython.codeplex.com\/Release\/ProjectReleases.aspx?ReleaseId=12481\">IPy 2.0.1 release<\/a> and the Python standard library installed, OnUpdatedModuleSymbols gets called six times, once for each python file that gets loaded when simpletest runs. (site.py, os.py, ntpath.py, stat.py, UserDict.py and simpletest.py). BTW, I tried running this code on the <a href=\"http:\/\/nbs.blob.core.windows.net\/ironpython\/IronPython.47624.release.zip\">latest build of IPy<\/a> (<a href=\"http:\/\/www.codeplex.com\/IronPython\/SourceControl\/changeset\/view\/47624\">changeset 47624<\/a>) and I\u2019m getting a COM Interop exception. So for now, stick with 2.0.1.<\/p>\n<p>Now that we can get these dynamically generated debug symbols, we can use them to create a breakpoint on the first line of the script being debugged. Everytime OnUpdateModuleSympols is called, I try to bind the initial breakpoint (unless it\u2019s already been bound of course) by calling the following create_breakpoint function.<\/p>\n<pre class=\"brush: python\">\ndef create_breakpoint(doc, line, module, reader):     \n  line = doc.FindClosestLine(line)     \n  method = reader.GetMethodFromDocumentPosition(doc, line, 0)     \n  function = module.GetFunctionFromToken(method.Token.GetToken())     \n   \n  for sp in get_sequence_points(method):     \n    if sp.doc.URL == doc.URL and sp.start_line == line:     \n      bp = function.ILCode.CreateBreakpoint(sp.offset)     \n      bp.Activate(True)     \n      return bp     \n       \n  bp = function.CreateBreakpoint()     \n  bp.Activate(True)     \n  return bp\n<\/pre>\n<p>This code translates a given document\/line into a function\/offset where we can set a breakpoint. To do this, we use sequence points which <a href=\"http:\/\/blogs.msdn.com\/rmbyers\/archive\/2005\/09\/08\/debuggingmodes-ignoresymbolstoresequencepoints.aspx\">as per Rick Byers<\/a> are \u201cused to mark a spot in the IL code that corresponds to a specific location in the original source\u201d. So once we find the function that corresponds to a given line of code, we iterate over the sequence points until we find the one that matches the line we want to break on. If we find a matching sequence point, we set the breakpoint there. If we don\u2019t, we set the breakpoint on the function itself. get_sequence_points is a simple wrapper around <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.diagnostics.symbolstore.isymbolmethod.getsequencepoints.aspx\">ISymbolMethod GetSequencePoints<\/a>. The original API is pretty ugly to use \u2013 managing six separate arrays of information \u2013 so get_sequence_points turns it into a generator function you can iterate over.<\/p>\n<p>Now that the breakpoint is set, we want to trap the breakpoint event as well. That\u2019s easy enough, we create an event handler for process.OnBreakpoint similar to the OnUpdateModuleSymbols event above. Eventually, we\u2019ll have the ability to step when we break, but for now I\u2019m just going to print out the current location when the breakpoint is hit. This is kind of the reverse of the operation above. Setting a breakpoint means going from a source location to an IL offset within a function. Printing the current location means going from an IL offset in a function back to the source location. Here\u2019s the function to do that:<\/p>\n<pre class=\"brush: python\">\ndef get_location(reader, thread):  \n  frame = thread.ActiveFrame  \n  function = frame.Function  \n    \n  offset, mapping_result = frame.GetIP()  \n  method = reader.GetMethod(SymbolToken(frame.Function.Token))  \n    \n  real_sp = None  \n  for sp in get_sequence_points(method):  \n    if sp.offset &gt; offset:   \n      break  \n    if sp.start_line != 0xfeefee:   \n      real_sp = sp  \n        \n  if real_sp == None:  \n    return \"Location (offset %d)\" % (offset)  \n    \n  return \"Location %s:%d (offset %d)\" % (  \n    Path.GetFileName(real_sp.doc.URL), real_sp.start_line, offset)  \n\ndef OnBreakpoint(s,e):     \n  print \"OnBreakpoint\", get_location(     \n    symbol_readers[e.Thread.ActiveFrame.Function.Module], e.Thread)\n<\/pre>\n<\/p>\n<p>Given a symbol reader and a debug thread, get_location returns a location string. It loops thru the sequence points, similar to create_breakpoint, in order to find the closest corresponding line of python code to the current offset (check out Mike Stall\u2019s blog as for <a href=\"http:\/\/blogs.msdn.com\/jmstall\/archive\/2005\/06\/19\/FeeFee_SequencePoints.aspx\">why I\u2019m checking for 0xfeefee<\/a>). In order to make this work, I need the symbol reader for the module that I retrieved in OnUpdateModuleSymbols. For now, I\u2019m stashing the reader in a global dictionary keyed by the module named symbol_readers where OnBreakpoint can access it. <\/p>\n<p>Ipydbg isn\u2019t interactive yet, but it is now running, setting a breakpoint and successfully breaking at that breakpoint. As usual, the <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/commit\/92521a59c3d6a4679a30bb019bda26a4eff8c894#diff-0\">latest version of ipydbg<\/a> is up on GitHub.<\/p>\n","excerpt":"<p>Now that we have a debugger process up and running, let start adding some actual features. First up, we want to be able to set breakpoints. One of the nice things MDbg does is auto-set a breakpoint on the entrypoint function. For ipydbg, we\u2019re going to auto-set a breakpoint on the first line of the [&hellip;]<\/p>\n","date":"2009-03-02 15:59:04","modified":"2009-03-02 15:59:04","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":279,"slug":"debugger","title":"Debugger","description":"","post_count":23}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["08c13b80-ad18-43f8-955d-6fa5fd5d9714"],"dasblog_compressedtitle":["Writing+An+IronPython+Debugger+Setting+A+Breakpoint"],"dasblog_compressedtitleunique":["2009\/03\/02\/Writing+An+IronPython+Debugger+Setting+A+Breakpoint"]}},"previous_url":"http:\/\/devhawk.net\/2009\/02\/28\/codehtmler-language-definition-for-python\/","next_url":"http:\/\/devhawk.net\/2009\/03\/04\/writing-and-ironpython-debugger-adding-interactivity\/"}