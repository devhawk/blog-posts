<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Messenger.NET Futures</title>
  <link>http://devhawk.net/2003/07/21/messenger-net-futures/</link>
  <pubDate>Mon, 21 Jul 2003 17:57:39 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://f5a2c0c2-f96b-44f2-8a75-fc4d8e03993e</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Two things have revived my interest in <a href="prj_messenger.aspx"> Messenger.NET</a> (though it needs a new name - <a href="mailto:harry@devhawk.net">any suggestions</a>?). <a href="http://weblogs.asp.net/NUnitAddin/">Jamie's</a><a href="http://www.managedaddins.net/gallery/">addin</a> and the upcoming release of <a href="http://msdn.microsoft.com/library/en-us/rtcclnt/rtc/real_time_communications_rtc_client_start_page.asp"> RTC Client API v1.2</a>. The new client API is designed lockstep with <a href="http://www.microsoft.com/office/preview/rtcserver/default.asp"> Microsoft Office Real-Time Communication Server 2003</a> (otherwise known as just RTC Server). </p><p align="left">The current version of Messenger.NET is built on <a href="http://www.sellsbrothers.com/tools/#imcli">imcli</a>, an implementation of MSNP7 - the IM protocol used by MSN Messenger prior to v5. While <a href="http://messenger.msn.com/">MSN Messenger</a> still uses later versions of that protocol, <a href="http://www.microsoft.com/windowsxp/windowsmessenger/default.asp"> Windows Messenger</a> can support other protocols as well, such as <a href="http://www.microsoft.com/exchange/evaluation/features/instantmessage.asp"> Exchange 2000's IM Service</a>. The new RTC Server and Client API are using the <a href="http://www.ietf.org/home.html">IETF's</a><a href="http://www.ietf.org/html.charters/sip-charter.html">Session Initiation Protocol</a> (SIP) and the <a href="http://www.ietf.org/html.charters/simple-charter.html">SIP Instant Messaging and Presence Language Extensions</a> (SIMPLE). That seems like a much more interesting foundation to build an app / addin around. </p><p align="left">One quick downside of the new RTC Client API - it's still COM based. The v1 shipped with Windows XP way way back before CLR and the new v1.2 is a refinement to that model. Of course, part of a "next-gen" Messenger.NET implementation could include a managed wrapper around that COM API. I've been diving into Code Access Security (CAS) recently, so building such a library would be a good opportunity to practice <a href="http://msdn.microsoft.com/security/default.aspx?pull=/library/en-us/dnnetsec/html/THCMCh07.asp"> building secure assemblies</a>.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">150</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2003-07-21 17:57:39</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2003-07-21 17:57:39</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">messenger-net-futures</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2003/07/22/MessengerNET+Futures]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[MessengerNET+Futures]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[f5a2c0c2-f96b-44f2-8a75-fc4d8e03993e]]></wp:meta_value>
  </wp:postmeta>
</item>