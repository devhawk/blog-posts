<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Practical F# Parsing: Active Patterns</title>
  <link>http://devhawk.net/2007/12/14/practical-f-parsing-active-patterns/</link>
  <pubDate>Fri, 14 Dec 2007 18:11:03 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://7de99b32-179f-4e17-9478-be16febc4bec</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[In the <a href="http://devhawk.net/2007/12/13/Practical+F+Parsing+Syntactical+Productions+1.aspx" target="_blank">last post</a>, I gave you a sneak preview of what the EndOfLine production would look like using Active Patterns. But before we get to how to build that, let me give you a little background on why. If you want the full explanation, check out <a href="http://blogs.msdn.com/dsyme/archive/2007/04/07/draft-paper-on-f-active-patterns.aspx" target="_blank">the whitepaper</a>.

Basically, Active Patterns (aka AP) are a way to use the pattern matching of functional languages with abstractions rather than native language types. If you'll recall, I <a href="http://devhawk.net/2007/12/11/Practical+F+Parsing+The+Parse+Buffer.aspx" target="_blank">built functions to abstract the parse buffer</a> so I could later change it's implementation if I needed to. The problem is that since the parse buffer is an abstraction, you can't use it in the match clauses. For example, here's a version of EndOfLine that uses a native char list.
<pre class="brush:fsharp">///EndOfLine &lt;- ‘rn’ / ‘n’ / ‘r’
let EndOfLine input =
    match input with
    | ‘r’ :: ‘n’ :: input -&gt; Some(input)
    | ‘n’ :: input -&gt; Some(input)
    | ‘r’ :: input -&gt; Some(input)
    | _ -&gt; None</pre>
That's straightforward like the AP preview at the end of the last post, but I've lost the benefit of the parse buffer abstraction. In other words, if I wanted to change the implementaiton of the parse buffer to a string, or some other type, I'd be screwed if I wrote EndOfLine this way. Traditionally, functional language developers had an either/or choice when it came to abstractions vs. pattern matching. AP let's you use both.

Using a special syntax, you can indicate that an F# function is an AP by surrounding the name in what Don calls "bananas". Here's the AP version of NC:
<pre class="brush: fsharp">let (|NC|_|) input =
    match input with
    | i :: input -&gt; Some(i, input)
    | [] -&gt; None</pre>
This function is identical to the one defined in <a href="http://devhawk.net/2007/12/11/Practical+F+Parsing+The+Parse+Buffer.aspx" target="_blank">the first post</a>, except for the name. By surrounding the actual name in paren/pipe "bananas", you're indicating the function can be used in match clauses, not just the match input. The trailing underscore in the name indicates this is a partial pattern, which means it returns an option value (aka Some(_) or None).

There's no reason why you can't use an AP function like any other function. I find I do this often in my unit tests. Here's an updated version of an NC unit test.
<pre class="brush: fsharp">[&lt;Fact&gt;]
let test_NC_empty_string () =
    let ret = (|NC|_|) !!""
    Assert.Equal(None, ret)</pre>
While you can still call the function like this, the primary benefit of using Active Patterns is so you can use the function in pattern match clauses directly. This allows the production clauses to mirror the actual grammar rules directly. For simple productions like EndOfFile and EndOfLine, the AP F# implementation isn't much more complex than the grammar rule itself:
<pre class="brush: fsharp">///EndOfFile &lt;- !.
let (|EndOfFile|_|) input =
    match input with
    | NC (_) -&gt; None
    | _ -&gt; Some()  

///EndOfLine &lt;- 'rn' / 'n' / 'r'
let (|EndOfLine|_|) input =
    match input with
    | TOKEN "rn" (input) -&gt; Some(input)
    | TOKEN "n" (input) -&gt; Some(input)
    | TOKEN "r" (input) -&gt; Some(input)
    | _ -&gt; None</pre>
You see in these functions, the calls to NC and TOKEN are used in the match clauses (i.e. after the pipe) rather than the match input (i.e. between match and with). Note, when used in a match clause, you just use the name directly without the bananas.

You'll notice that for TOKEN, the token string to match goes outside the parentheses. This is because "rn" is an input parameter to the TOKEN AP function. Alternatively, I could have written EndOfLine using only the NC function, though I find TOKEN version easier to read.
<pre class="brush: fsharp">///EndOfLine &lt;- 'rn' / 'n' / 'r'
let (|EndOfLine|_|) input =
    match input with
    | NC ('r', NC ('n', (input))) -&gt; Some(input)
    | NC ('n', input) -&gt; Some(input)
    | NC ('r', input) -&gt; Some(input)
    | _ -&gt; None</pre>
In this version, the values of 'r' and 'n' are pattern matched against the result of calling NC, so they go inside the parentheses. In other words, the TOKEN clauses are matched if TOKEN returns some value. However, the NC clauses are only matched if the returned result matches the value specified in the match clause. inside the parentheses. TOKEN has two parameters, the token string and the parse buffer, while NC only has the parse buffer. When you write an AP function, the last parameter gets bound to the match clause input. Additional parameters, like TOKEN's token, much be specified in the match clause.

Notice I've defined these grammar productions as active patterns as well, which will make them compose nicely with higher-order productions. For example, here's the Space grammar production, which reuses EndOfLine:
<pre class="brush: fsharp">///Space &lt;- ' ' / 't' / EndOfLine
let (|Space|_|) input =
    match input with
    | TOKEN " " (input) -&gt; Some(input)
    | TOKEN "t" (input) -&gt; Some(input)
    | EndOfLine (input) -&gt; Some(input)
    | _ -&gt; None</pre>
It's DSL-esque, wouldn't you say? Active Patterns is a little parens-heavy - the NC version of EndOfLine has three nested APs which isn't exactly easy on the eyes. However, the concept is very solid and it make the parsing code almost easier to write by hand than it would be to use a parser generator like yacc. Almost.]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1076</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2007-12-14 10:11:03</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2007-12-14 18:11:03</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">practical-f-parsing-active-patterns</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
  <category domain="post_tag" nicename="parsing-expression-grammar"><![CDATA[Parsing Expression Grammar]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[7de99b32-179f-4e17-9478-be16febc4bec]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Practical+F+Parsing+Active+Patterns]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2007/12/14/Practical+F+Parsing+Active+Patterns]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2006</wp:comment_id>
    <wp:comment_author><![CDATA[addendum]]></wp:comment_author>
    <wp:comment_author_email></wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>213.244.12.100</wp:comment_author_IP>
    <wp:comment_date>2007-12-17 07:19:56</wp:comment_date>
    <wp:comment_date_gmt>2007-12-17 15:19:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[let (|TOKEN|_|) token input =
  let rec f token input =
    match token, input with
    | hd::[], NC (i, itail) when hd = i -> Some itail
    | hd::tl, NC (i, itail) when hd = i -> f tl itail
    | _ -> None
  f !!token !!input]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2007</wp:comment_id>
    <wp:comment_author><![CDATA[Jon Harrop]]></wp:comment_author>
    <wp:comment_author_email>jon@ffconsultancy.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.ffconsultancy.com</wp:comment_author_url>
    <wp:comment_author_IP>80.229.56.224</wp:comment_author_IP>
    <wp:comment_date>2007-12-20 12:20:32</wp:comment_date>
    <wp:comment_date_gmt>2007-12-20 20:20:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Have you tried using parser combinators? A recent F#.NET Journal article described them in detail and they should be a lot faster but just as extensible as active patterns...
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>