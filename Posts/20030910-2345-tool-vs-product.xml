<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Tool vs. Product</title>
  <link>http://devhawk.net/2003/09/10/tool-vs-product/</link>
  <pubDate>Wed, 10 Sep 2003 23:45:15 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://154024b0-11d1-42a3-b79f-0baa68f2e57e</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>One of the things that makes ASP.NET great is it's "no black box" approach. Rob Howard describes the approach this way: "Provide customers with the ability to replace/customize/extend the core product" [<a href="http://www.gotdotnet.com/team/rhoward/ASP.NET%20Overview%20v0219.ppt">ASP.NET Overview</a>, Slide 25]. You can see this approach all over ASP.NET. For example, ASP.NET ships with three built-in authentication modules: Windows, Forms and Passport. Don't like those? Want something custom? Fine, write a module that handles the <a href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWebHttpApplicationClassAuthenticateRequestTopic.asp"> AuthenticateRequest</a> event and handle authentication however you want. Heck, if you're doing a one-off solution, you can even skip the module and stick the code in Global.asax.</p><p>As is probably apparent to anyone reading this weblog, I've been playing around with Windows SharePoint Services quite a bit recently. WSS seems to be made up of three distinct layers:</p><ul><li><a href="http://msdn.microsoft.com/library/en-us/spptsdk/html/SPPTWSSSection.asp"> Low-level services</a> for DB management of pages and lists</li><li><a href="http://msdn.microsoft.com/library/en-us/spptsdk/html/SPPTWPFWPPInf.asp"> Web Part Pages Infrastructure</a></li><li>Site templates, List templates and web parts that ship with WSS by default</li></ul><p>You would think these would be mostly independent, but they're not. For example, the WSS docs describe how you can <a href="http://msdn.microsoft.com/library/en-us/spptsdk/html/tsptAddingFieldType.asp"> add a new field type</a> to the default templates that ship with WSS. However, there's a <a href="http://msdn.microsoft.com/library/en-us/spptsdk/html/tsenSPFieldType.asp"> field type enumeration</a> that's part of the WSS object model. Obviously, adding a custom field to the template does not change the enumeration. What's interesting is that if you follow the instructions to add a new field type and then add that field to a list template, you can create a list instance from that template that features the field type you defined. But if you want to modify the column with the custom field type, the WSS site admin pages (i.e. under the _layout vdir) has no idea about the new field type. Likewise, you can't add your new field type to an existing or custom list since the WSS site admin pages are coded against the object model and the default enumeration of field types. This makes it very hard to black box replace/customize/extend the core WSS product due to it's tightly coupled nature.</p><p>Of course, one of the reasons that ASP.NET has been more successful at extensibility is because it is a tool and WSS is a product. There is no out-of-the-box experience with ASP.NET for end users the way that WSS has. Is shipping a product harder that shipping a tool? Is targeting end users harder than targeting developers? I would think the answer to both of these questions is yes. In the end, the WSS team had to ship something that works OOB, even if that means building something that's more tightly coupled and thus harder to extend. I hope that over future releases, WSS continues to improve (certainly v2 is a huge improvement over v1) and that it becomes easier to replace/customize/extend the core product.</p><p>UPDATE - Of course, it's <a href="http://weblogs.asp.net/RHoward/">Rob Howard</a> not <a href="http://www.imdb.com/name/nm0000165/">Ron Howard</a>. Rob - Great job on ASP.NET. Ron - Great job on <a href="http://www.imdb.com/title/tt0112384/">Apollo 13</a>. </p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">191</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2003-09-10 23:45:15</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2003-09-10 23:45:15</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">tool-vs-product</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2003/09/11/Tool+Vs+Product]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Tool+Vs+Product]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[154024b0-11d1-42a3-b79f-0baa68f2e57e]]></wp:meta_value>
  </wp:postmeta>
</item>