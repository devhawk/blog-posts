{"status":"ok","post":{"id":1249,"type":"post","slug":"introducing-__clrtype__-metaclasses","url":"http:\/\/devhawk.net\/2009\/04\/20\/introducing-__clrtype__-metaclasses\/","status":"publish","title":"Introducing __clrtype__ Metaclasses","title_plain":"Introducing __clrtype__ Metaclasses","content":"<p>Everyone knows <a href=\"http:\/\/channel9.msdn.com\/pdc2008\/TL16\/\">Anders announced at PDC08<\/a> that <a href=\"http:\/\/code.msdn.microsoft.com\/csharpfuture\/Release\/ProjectReleases.aspx?ReleaseId=1686\">C# 4.0<\/a> will include new features (aka the dynamic keyword + the DLR) that makes it much easier for C# to call into dynamically typed code. What you probably don\u2019t know is that IronPython 2.6 includes a new feature that makes it easier for IronPython code to be called by statically typed code. <\/p>\n<p>While the vast majority of .NET is available to IronPython, there are certain APIs that just don\u2019t work with dynamic code. In particular, any code that uses Reflection over an object\u2019s CLR type metadata won\u2019t work with IronPython. For example, while <a href=\"http:\/\/devhawk.net\/2008\/11\/18\/IronPython+And+WPF+Part+3+Data+Binding.aspx\">WPF supports<\/a><a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.componentmodel.icustomtypedescriptor.aspx\">ICustomTypeDescriptor<\/a>, Silverlight only supports data binding against reflectable properties. Furthermore, any code that uses custom attributes inherently uses Reflection. For example, Darrel Hawley recently blogged a <a href=\"http:\/\/www.darrellhawley.com\/2009\/03\/writing-ironpython-wcf-host.html\">WCF host he wrote in IronPython<\/a>, but he wrote the WCF service in C#. You can\u2019t write WCF services in IronPython because WCF expects service classes <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms731835.aspx\">to be adorned<\/a> with <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.servicemodel.servicecontractattribute.aspx\">ServiceContract<\/a> and <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.servicemodel.operationcontractattribute.aspx\">OperationContract<\/a> attributes (among <em>many<\/em> others). IronPython users want access to use these APIs. Support for custom attributes is one of the most <a href=\"http:\/\/lists.ironpython.com\/pipermail\/users-ironpython.com\/2008-July\/007733.html\">common requests<\/a> we get &#8211; it\u2019s currently the <a href=\"http:\/\/ironpython.codeplex.com\/WorkItem\/View.aspx?WorkItemId=20489\">5th highest vote getter among open issues<\/a>. <\/p>\n<p>In IronPython 2.6, we\u2019re adding the ability to customize the CLR type of Python classes. This means you can add custom attributes, emit properties, whatever you want. For those of you who\u2019ve been dreaming of implementing WCF services or databinding in Silverlight purely in IronPython, then this is the feature for you. <\/p>\n<p>In a nutshell, IronPython 2.6 extends Python\u2019s <a href=\"http:\/\/docs.python.org\/reference\/datamodel.html#customizing-class-creation\">metaclass<\/a> feature that lets you to customize the creation of classes. In the metaclass, you can implement an IronPython-specific method __clrtype__ which returns a custom <a href=\"http:\/\/msdn.microsoft.com\/library\/system.type.aspx\">System.Type<\/a> of your own creation that IronPython will then use as the underlying CLR type of the Python class. Implementing __clrtype__ gives you the chance to implement whatever reflectable metadata you need: constructors, fields, properties, methods, events, custom attributes, nested classes, whatever. <\/p>\n<p>Over a series of posts, I\u2019ll be demonstrating this new feature and implement some common scenario requests \u2013 including Silverlight databinding and WCF services \u2013 purely in Python. Quick warning: __clrtype__ uses low level features like Python metaclasses, <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.reflection.emit.aspx\">Reflection.Emit<\/a> and <a href=\"javascript:window.location.href='http:\/\/dlr.codeplex.com\/Project\/Download\/FileDownload.aspx?DownloadId=51534';\">DLR Binders<\/a> so these posts will be deeper technically than usual. Don\u2019t worry \u2013 this isn\u2019t the API interface we expect everyone to use. Eventually, we want to have an easy to use API that will sit on top of the low-level __clrtype__ hook. <\/p>\n","excerpt":"<p>Everyone knows Anders announced at PDC08 that C# 4.0 will include new features (aka the dynamic keyword + the DLR) that makes it much easier for C# to call into dynamically typed code. What you probably don\u2019t know is that IronPython 2.6 includes a new feature that makes it easier for IronPython code to be [&hellip;]<\/p>\n","date":"2009-04-20 10:17:14","modified":"2009-04-20 10:17:14","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":281,"slug":"__clrtype__","title":"__clrtype__","description":"","post_count":9}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["22f9ffee-74be-4b8c-8ea6-c95e75508344"],"dasblog_compressedtitle":["Introducing+Clrtype+Metaclasses"],"dasblog_compressedtitleunique":["2009\/04\/20\/Introducing+Clrtype+Metaclasses"]}},"previous_url":"http:\/\/devhawk.net\/2009\/04\/16\/issue-tracking-for-my-github-projects\/","next_url":"http:\/\/devhawk.net\/2009\/04\/20\/the-lounge-survey\/"}