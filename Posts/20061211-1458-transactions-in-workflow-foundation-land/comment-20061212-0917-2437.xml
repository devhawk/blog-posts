<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>2437</wp:comment_id>
  <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
  <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
  <wp:comment_author_url></wp:comment_author_url>
  <wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
  <wp:comment_date>2006-12-12 09:17:56</wp:comment_date>
  <wp:comment_date_gmt>2006-12-12 17:17:56</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[I'm not very deep on BizTalk, but I'm working on it. That said, comparing the high-level TX capabilities of a product like BizTalk to the low-level TX capabilities of a technology like WF is an apples to oranges comparison. From what I understand about MessageBox, it sounds fairly similar to SSB, which would make a SSB/WF implementation conceptually similar to BizTalk. But I need to learn much more about BizTalk.

I agree 100% that dealing with poison messages need to be fixed before you can resume processing. But the silver lining of the two transaction approach to SSB & WF is that you're only stalling the instance with the poision message. If you left the poison message in the SSB queue, it would keep getting picked up until and throwing an exception until an operator came along to do something. If you move it to WF, then it will only effect the instance that message is intended for.

I'm not dismissing in-order processing at all. It's one of the primary values of SSB in my opinon. Assuming WF doesn't reorder messages in a queue, moving them from SSB to WF wouldn't break the in order semantics.

]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>