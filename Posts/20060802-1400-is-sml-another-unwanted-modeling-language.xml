<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Is SML Another Unwanted Modeling Language?</title>
  <link>http://devhawk.net/2006/08/02/is-sml-another-unwanted-modeling-language/</link>
  <pubDate>Wed, 02 Aug 2006 14:00:50 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://60f69211-7e93-4175-bc70-431d479688e6</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Piyush Pant <a href="http://unhandledx.blogspot.com/2006/08/modelling-overload.html">wonders</a> if SML solves a problem that nobody has? He also points out <a href="http://www.sysml.org/">SysML</a> project, which recently got folded into the <a href="http://omg.org/">OMG</a>. Well, that explains why we called it "Service" instead of "System" modeling language.</p><p>Now that I work in IT, I can definitely say that SML will <em>eventually </em>solve a problem that I have. Most people agree that operations today is way to dependent on manual processes to scale effectively. Now SML doesn't solve that issue directly - as Piyush pointed out SML is a meta-modeling specification. However, SML is the foundation for the next generation of operational modeling tools like what we see in <a href="http://msdn.microsoft.com/vstudio/teamsystem/architect/">Visual Studio Team System for Architects</a>. As I <a href="http://devhawk.net/2004/02/03/Being+A+Model+Citizen.aspx">wrote several years ago</a>, VSTS:A solves a very common problem - developers lack of understanding about the deployment environment. Piyush, haven't you ever had a long weekend going back to the drawing board because the solution you had built was undeployable and you didn't discover that fact until the operations team attempted to deploy it? If you haven't, I envy you.</p><p>On the surface, I agree with Piyush when he says that "history of software is littered with unsuccessful attempts to impose monolithic modeling constructs". However, the fact that it keeps happening indicates the problem hasn't been solved. Wanting to solve a problem and being able to solve a problem are two different things. Furthermore, the history of software is also littered with very successful attempts to raise the level of abstraction by the introduction of new programming languages: C, C++, VB and Ruby are all examples of this. Given that <a href="http://devhawk.net/2005/10/05/Code+Is+Model.aspx">Code is Model</a>, what we have is a history of software littered with some successful and some unsuccessful modeling constructs. I would argue that the successful modeling constructs have taken a bottom up approach - build a language a small abstraction step above something that actually runs and compile down. These unsuccessful modeling constructs (*cough* UML *cough*) take a top down approach - build a language way above anything that actually runs and hope a miracle happens to keep it in sync with the stuff you actually build.</p><p>The question is whether SML will be top-down (i.e. a failure) or bottoms-up (i.e. a success). So far, it's to early to tell, but I have high hopes.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">777</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2006-08-02 14:00:50</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2006-08-02 14:00:50</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">is-sml-another-unwanted-modeling-language</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
  <category domain="post_tag" nicename="modelling"><![CDATA[Modelling]]></category>
  <category domain="post_tag" nicename="operations"><![CDATA[Operations]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[60f69211-7e93-4175-bc70-431d479688e6]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Is+SML+Another+Unwanted+Modeling+Language]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2006/08/02/Is+SML+Another+Unwanted+Modeling+Language]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2394</wp:comment_id>
    <wp:comment_author><![CDATA[Piyush]]></wp:comment_author>
    <wp:comment_author_email>piyushpant@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url>http://unhandledx.blogspot.com/</wp:comment_author_url>
    <wp:comment_author_IP>80.187.146.114</wp:comment_author_IP>
    <wp:comment_date>2006-08-02 16:27:37</wp:comment_date>
    <wp:comment_date_gmt>2006-08-02 23:27:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting points re: top down and bottom up - hadn't thought of things that way and in general I agree. For this to work, though, these things need mass adoption and in an increasingly heterogenous world where systems are not all written on the technology stack of one vendor, a bottom up approach that is trying to solve a problem with a large surface area has limitations. Also, an ambitious undertaking like this seems to assume that the solution to a communication problem ( which is essentially what a modelling language solves in my opinion) , is to teach everyone to talk the same language. It doesn't happen in the real world and I am sceptical it will happen in IT.

]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2395</wp:comment_id>
    <wp:comment_author><![CDATA[Piyush Pant]]></wp:comment_author>
    <wp:comment_author_email>piyushpant@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url>http://unhandledx.blogspot.com/</wp:comment_author_url>
    <wp:comment_author_IP>194.75.129.200</wp:comment_author_IP>
    <wp:comment_date>2006-08-07 06:35:00</wp:comment_date>
    <wp:comment_date_gmt>2006-08-07 13:35:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have responded to some of your ( and Pratul Dublish's) points at
http://unhandledx.blogspot.com/2006/08/further-on-sml-debate.html

]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>