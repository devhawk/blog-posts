{"status":"ok","post":{"id":543,"type":"post","slug":"thoughts-on-factories","url":"http:\/\/devhawk.net\/2005\/02\/14\/thoughts-on-factories\/","status":"publish","title":"Thoughts on Factories","title_plain":"Thoughts on Factories","content":"<p>Last week, I had a great discussion with the Product Unit Manager (or PUM) of <a href=\"http:\/\/lab.msdn.microsoft.com\/teamsystem\/teamcenters\/architect\/default.aspx\">VSTA<\/a>. She wanted my perspective on a few things related to Software Factories and I figured I&#8217;d share some of them here. <\/p>\n<p>First off, while I appreciate the vision of factories, I&#8217;m also focused on the short term gains of automating software construction. Today, most of that automation is in terms of code generation. For example, <a href=\"http:\/\/blogs.msdn.com\/jdevados\/\">John<\/a> asked the other day if I thought <a href=\"http:\/\/www.mkssoftware.com\/products\/ly\/\">Yacc<\/a> is a software factory. It certainly is a domain specific language! However, I&#8217;m not sure I&#8217;d go so far as to say it&#8217;s a factory. But on the other hand, I&#8217;m not sure it matters that much if it&#8217;s a factory or not. When the other <a href=\"http:\/\/blogs.msdn.com\/jevdemon\">John<\/a> on my team blogged his <a href=\"http:\/\/blogs.msdn.com\/jevdemon\/archive\/2004\/12\/17\/323889.aspx\">thoughts on SOA<\/a>, he included one I wrote: &#8220;Eventually we\u2019ll stop talking about SOA and go back to talking about Architecture&#8221;. I feel sort of the same way about factories. As long as we&#8217;re talking about it as if it is something different from what we&#8217;re already doing, we&#8217;re not there yet. But if we keep taking steps in the right direction, eventually we&#8217;ll get to the point where the process of building software doesn&#8217;t look the way it does today. Sorta the same way that building software today doesn&#8217;t look like it did pre-.NET, pre-VB, pre-Windows or pre-C++ (I could keep going, but I think you get the point). That&#8217;s the thing about visions, you never really get there, it just provides a way to keep you going in the right direction. <\/p>\n<p>Secondly, I think that one aspect of Software Factories that at least I haven&#8217;t focused on is reusable frameworks. The <a href=\"http:\/\/www.amazon.com\/o\/ASIN\/0471202843\">book<\/a> is called &#8220;Software Factories: Assembling Applications with Patterns, Models, Frameworks, and Tools&#8221; but I think the focus has been mostly on models and tools. This is partially because of the whole DSL vs. UML flack (quick side note &#8211; how about we have both?) and partially because the <a href=\"http:\/\/lab.msdn.microsoft.com\/teamsystem\/Workshop\/DSLTools\/default.aspx\">DSL toolkit<\/a> is the first factory-esque thing that we&#8217;re shipping. However, DSLs big value, IMO, is to automate the construction of applications built on top of well designed reusable frameworks. For example, the <a href=\"http:\/\/devhawk.net\/OOPSLA+Day+1.aspx\">OOPSLA keynote demo<\/a> was a DSL that would sit on top of a UI process framework such as the <a href=\"http:\/\/msdn.com\/library\/en-us\/dnpag\/html\/uipab.asp\">p&amp;p UIP block<\/a>. But if there is not a good framework, there&#8217;s little point in having a language. I&#8217;ve pointed out in the past that the big gap to cross for organizations to start using DSLs is the leap from building abstractions to building languages that automate that abstractions. However, that&#8217;s not really true. The really big gap is the leap from building one-off abstractions to building reusable frameworks of abstractions. Once you have the reusable framework, building the DSL is an easier step IMO. <\/p>\n<p>Even though I didn&#8217;t figure out the framework \/ factory connection until last week, it must have been there in the back of my mind when I was working on the ARC track for TechEd. We&#8217;re having a <a href=\"http:\/\/www.msteched.com\/content\/sessions.aspx\">session<\/a> on &#8220;Design Considerations for Enterprise Application Frameworks&#8221; with <a href=\"http:\/\/hyperthink.net\/blog\/\">Steve Maine<\/a> as the speaker.<\/p>\n","excerpt":"<p>Last week, I had a great discussion with the Product Unit Manager (or PUM) of VSTA. She wanted my perspective on a few things related to Software Factories and I figured I&#8217;d share some of them here. First off, while I appreciate the vision of factories, I&#8217;m also focused on the short term gains of [&hellip;]<\/p>\n","date":"2005-02-14 21:29:26","modified":"2005-02-14 21:29:26","categories":[{"id":177,"slug":"architecture","title":"Architecture","description":"","parent":0,"post_count":296}],"tags":[{"id":225,"slug":"modelling","title":"Modelling","description":"","post_count":61}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["195132d4-52fe-4dc8-93ac-4d8e57c6f954"],"dasblog_compressedtitle":["Thoughts+On+Factories"],"dasblog_compressedtitleunique":["2005\/02\/15\/Thoughts+On+Factories"]}},"previous_url":"http:\/\/devhawk.net\/2005\/02\/13\/another-vector-option-xamlon-flash\/","next_url":"http:\/\/devhawk.net\/2005\/02\/14\/speaking-of-steve\/"}