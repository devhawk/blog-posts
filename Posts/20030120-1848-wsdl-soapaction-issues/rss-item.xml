<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>WSDL soapAction Issues</title>
  <link>http://devhawk.net/2003/01/20/wsdl-soapaction-issues/</link>
  <pubDate>Mon, 20 Jan 2003 18:48:42 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://c2eeb3f8-ca88-4627-bea7-ec49e75f0a1f</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Why does <a href="http://www.w3.org/TR/2001/NOTE-wsdl-20010315">WSDL</a> expressly forbid the use of the soapAction attribute with protocols other than HTTP? How else are you supposed to map incoming messages across non-HTTP protocols to SOAP endpoints? <a href="http://msdn.microsoft.com/webservices/understanding/specs/default.aspx?pull=/library/en-us/dnglobspec/html/ws-routing.asp"> WS-Routing</a> provides a simple mechanism for including action information inside any SOAP message - in the message rather than some out-of-band mechanism like HTTP headers.</p><blockquote><p>The "action" element is used to indicate the intent of the WS-Routing message in a manner similar to the SOAPAction HTTP header field defined for SOAP (see [<a target="_self" href="http://www.w3.org/TR/SOAP/">15</a>], section 6.1.1). The value is a URI identifying the intent. Similar to the SOAPAction header field, WS-Routing places no restrictions on the format or specificity of the URI or requires that it can be dereferenced. There is no mechanism for computing the value based on the message and there is no default value. [<a href="http://msdn.microsoft.com/webservices/understanding/specs/default.aspx?pull=/library/en-us/dnglobspec/html/ws-routing.asp">WS-Routing spec</a>, section 5.1.1]</p></blockquote><p>WSDL provides a soap binding operation element that maps the HTTP soapAction header to a specific operation, providing a simple way to route an incoming method to a SOAP endpoint. However, WSDL expressly forbids specifying the soapAction attribute when you're not using HTTP! </p><blockquote><p>The <b>soapAction</b> attribute specifies the value of the SOAPAction header for this operation. This URI value should be used directly as the value for the SOAPAction header; no attempt should be made to make a relative URI value absolute when making the request. For the HTTP protocol binding of SOAP, this is value required (it has no default value). For other SOAP protocol bindings, it MUST NOT be specified, and the soap:operation element MAY be omitted. [<a href="http://www.w3.org/TR/2001/NOTE-wsdl-20010315">WSDL 1.1 spec</a>, section 3.4]</p></blockquote><p>Argh! I see three possible ways of resolving this:</p><ul><li>Ignore WSDL spec and use soapAction anyway.</li><li>Use a body root element QName / WS-Routing action naming scheme to map message to SOAP endpoint based on message and operation names.</li><li>Include the equivalent of soapAction in a routing oriented WSDL extension as a child of wsdl:operation (i.e. duplicate soap:operation@soapAction w/o the only HTTP limitation)</li></ul><p>Additionally, you might be able to use <a href="http://msdn.microsoft.com/webservices/understanding/specs/default.aspx?pull=/library/en-us/dnglobspec/html/wspolicyspecindex.asp"> WS-Policy</a> to specify this. The question is: Which is the best? Go against the spec, use an opaque name mapping scheme, or extend the spec? And if you're going to extend the spec, which is better to extend? WSDL or WS-Policy?</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">8</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2003-01-20 18:48:42</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2003-01-20 18:48:42</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">wsdl-soapaction-issues</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[c2eeb3f8-ca88-4627-bea7-ec49e75f0a1f]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[WSDL+SoapAction+Issues]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2003/01/21/WSDL+SoapAction+Issues]]></wp:meta_value>
  </wp:postmeta>
</item>