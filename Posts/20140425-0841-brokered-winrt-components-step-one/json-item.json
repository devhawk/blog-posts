{"status":"ok","post":{"id":2088,"type":"post","slug":"brokered-winrt-components-step-one","url":"http:\/\/devhawk.net\/2014\/04\/25\/brokered-winrt-components-step-one\/","status":"publish","title":"Brokered WinRT Components Step One","title_plain":"Brokered WinRT Components Step One","content":"<p>In this step, we\u2019ll build the brokered component itself. Frankly, the only thing that makes a brokered component different than a normal WinRT component is some small tweaks to the project file to enable access to the full .NET Runtime and Base Class Library. The <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/windows\/apps\/dn630195.aspx\">brokered component whitepaper<\/a> describes the these tweaks in detail, but the new <a href=\"http:\/\/visualstudiogallery.msdn.microsoft.com\/527286e4-b06a-4234-adde-d313c9c3c23e\">brokered component template<\/a>\u00a0takes care of these small tweaks for you.<\/p>\n<p><a href=\"http:\/\/devhawk.net\/wp-content\/uploads\/2014\/04\/BRT_NewProject.png\" class=\"grouped_elements\" rel=\"tc-fancybox-group2088\"><img class=\"wp-image-2096 alignleft\" alt=\"BRT_NewProject\" src=\"http:\/\/devhawk.net\/wp-content\/uploads\/2014\/04\/BRT_NewProject-300x207.png\" width=\"180\" height=\"124\" \/><\/a>Start by selecting File -&gt; New -&gt; Project in Visual Studio. With the sheer number of templates to choose from these days, I find it\u2019s easier to just search for the one I want. Type \u201cbroker\u201d in the search box in the upper left, you\u2019ll end up with two choices \u2013 the brokered WinRT component and the brokered WinRT proxy\/stub. For now, choose the brokered component. We\u2019ll be adding a brokered proxy\/stub <a href=\"http:\/\/devhawk.net\/2014\/04\/25\/brokered-winrt-components-step-two\">in step two<\/a>. Name the project whatever you want. I named mine \u201cHelloWorldBRT\u201d.<\/p>\n<p>This is probably the easiest step of the three as there\u2019s nothing really special you have to do \u2013 just write managed code like you always do. In my keynote demo, this is where I wrote the code that wrapped the existing ADO.NET based data access library. For the purposes of this walkthrough, let\u2019s do something simpler. We\u2019ll use P\/Invoke to retrieve the current <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/windows\/apps\/ms683180.aspx\">process<\/a> and <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/windows\/apps\/ms683183.aspx\">thread<\/a> IDs. These Win32 APIs are <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/windows\/apps\/br205762.aspx\">supported for developing WinRT apps<\/a> and will make it obvious that the component is running in a separate process than the app. Here\u2019s the simple code to retrieve those IDs (hat tip to <a href=\"http:\/\/www.pinvoke.net\">pinvoke.net<\/a> for the interop signatures):<\/p>\n<pre class=\"brush:csharp\">public sealed class Class\r\n{\r\n    [DllImport(\"kernel32.dll\")]\r\n    static extern uint GetCurrentThreadId();\r\n\r\n    [DllImport(\"kernel32.dll\")]\r\n    static extern uint GetCurrentProcessId();\r\n\r\n    public uint CurrentThreadId\r\n    {\r\n        get { return GetCurrentThreadId(); }\r\n    }\r\n\r\n    public uint CurrentProcessId\r\n    {\r\n        get { return GetCurrentProcessId(); }\r\n    }\r\n}<\/pre>\n<p>That\u2019s it! I didn\u2019t even bother to change the class name for this simple sample.<\/p>\n<p>Now, to be clear, there\u2019s no reason why this code needs to run in a broker process. As I pointed out, the Win32 functions I\u2019m wrapping here are supported for use in Windows Store apps. For this walkthrough, I\u2019m trying to keep the code simple in order to focus on the specifics of building brokered components. If you want to see an example that actually leverages the fact that it\u2019s running outside of the App Container, check out the NorthwindRT sample.<\/p>\n<p>In the <a href=\"http:\/\/devhawk.net\/2014\/04\/25\/brokered-winrt-components-step-two\">next step<\/a>, we&#8217;ll add the proxy\/stub that enables this component to communicate across a process boundary.<\/p>\n","excerpt":"<p>In this step, we\u2019ll build the brokered component itself. Frankly, the only thing that makes a brokered component different than a normal WinRT component is some small tweaks to the project file to enable access to the full .NET Runtime and Base Class Library. The brokered component whitepaper describes the these tweaks in detail, but [&hellip;]<\/p>\n","date":"2014-04-25 08:41:29","modified":"2014-04-25 08:45:02","categories":[{"id":204,"slug":"development","title":"Development","description":"","parent":0,"post_count":165},{"id":283,"slug":"windows","title":"Windows","description":"","parent":0,"post_count":16},{"id":357,"slug":"windows-runtime","title":"Windows Runtime","description":"","parent":0,"post_count":12}],"tags":[{"id":374,"slug":"brokered-components","title":"brokered components","description":"","post_count":6},{"id":373,"slug":"sideload","title":"sideload","description":"","post_count":6},{"id":378,"slug":"tutorial","title":"tutorial","description":"","post_count":4}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":3715,"name":"ErikEJ","url":"http:\/\/erikej.blogspot.com","date":"2014-04-26 01:58:31","content":"<p>Great walkthrough, thanks, finally I feel confident to get started with this feature not being a C++ developer.<\/p>\n<p>I the demo and whitepaper you mention implementing interfaces and adhering to async in the brokered component &#8211; is this just recommended or a requirement?<\/p>\n","parent":0},{"id":3716,"name":"DevHawk","url":"","date":"2014-04-26 07:15:20","content":"<p>Implementing interfaces and marking them as [ComVisible(true)] is not needed. The managed compilers automatically generate the interfaces under the hood as needed.<\/p>\n<p>Using async is highly recommended to avoid blocking the UI thread. As I showed in the NorthwindRT demo, it&#8217;s fairly easy to take a synchronous method call, wrap in in a .NET Task and then project the task as an WinRT IAsyncOperation.<\/p>\n","parent":3715,"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""}}],"attachments":[{"id":2096,"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2014\/04\/BRT_NewProject.png","slug":"brt_newproject","title":"BRT_NewProject","description":"","caption":"","parent":2088,"mime_type":"image\/png","images":{"full":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2014\/04\/BRT_NewProject.png","width":955,"height":660},"thumbnail":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2014\/04\/BRT_NewProject-150x150.png","width":150,"height":150},"medium":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2014\/04\/BRT_NewProject-300x207.png","width":300,"height":207},"large":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2014\/04\/BRT_NewProject.png","width":955,"height":660},"tc-thumb":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2014\/04\/BRT_NewProject-270x250.png","width":270,"height":250},"slider-full":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2014\/04\/BRT_NewProject-955x500.png","width":955,"height":500},"slider":{"url":"http:\/\/devhawk.net\/wp-content\/uploads\/2014\/04\/BRT_NewProject-955x500.png","width":955,"height":500}}}],"comment_count":2,"comment_status":"closed","custom_fields":{"layout_key":[""],"post_slider_check_key":["0"]}},"previous_url":"http:\/\/devhawk.net\/2014\/04\/25\/brokered-winrt-components-step-by-step\/","next_url":"http:\/\/devhawk.net\/2014\/04\/25\/brokered-winrt-components-step-two\/"}