<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>3716</wp:comment_id>
  <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
  <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
  <wp:comment_author_url></wp:comment_author_url>
  <wp:comment_author_IP>73.53.36.104</wp:comment_author_IP>
  <wp:comment_date>2014-04-26 07:15:20</wp:comment_date>
  <wp:comment_date_gmt>2014-04-26 14:15:20</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[Implementing interfaces and marking them as [ComVisible(true)] is not needed. The managed compilers automatically generate the interfaces under the hood as needed.

Using async is highly recommended to avoid blocking the UI thread. As I showed in the NorthwindRT demo, it's fairly easy to take a synchronous method call, wrap in in a .NET Task and then project the task as an WinRT IAsyncOperation.]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>3715</wp:comment_parent>
  <wp:comment_user_id>1</wp:comment_user_id>
  <wp:commentmeta>
    <wp:meta_key>akismet_result</wp:meta_key>
    <wp:meta_value><![CDATA[false]]></wp:meta_value>
  </wp:commentmeta>
  <wp:commentmeta>
    <wp:meta_key>akismet_history</wp:meta_key>
    <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398521720.9800779819488525390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"devhawk";}]]></wp:meta_value>
  </wp:commentmeta>
</wp:comment>