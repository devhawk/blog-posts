{"status":"ok","post":{"id":1073,"type":"post","slug":"practical-f-parsing-unit-testing","url":"http:\/\/devhawk.net\/2007\/12\/12\/practical-f-parsing-unit-testing\/","status":"publish","title":"Practical F# Parsing: Unit Testing","title_plain":"Practical F# Parsing: Unit Testing","content":"<p>Now that I have <a href=\"http:\/\/devhawk.net\/2007\/12\/11\/Practical+F+Parsing+The+Parse+Buffer.aspx\" target=\"_blank\">functions to access the parse buffer<\/a>, I better write some tests for them. Yes, I realize I should have written the tests first, but the articles flow better this way.<\/p>\n<p>I&#8217;ve written before that one of the benefits to side-effect free functional programming is that it makes unit testing a breeze. But I still need some type of <a href=\"http:\/\/en.wikipedia.org\/wiki\/XUnit\" target=\"_blank\">xUnit testing framework<\/a>. I could write my own native F# xUnit framework, but given the availability of mature xUnit frameworks on .NET, I&#8217;d really rather just use one of them. <\/p>\n<p>Traditionally, I&#8217;ve used <a href=\"http:\/\/nunit.com\" target=\"_blank\">NUnit<\/a> or <a href=\"http:\/\/msdn2.microsoft.com\/library\/ms243147.aspx\" target=\"_blank\">Visual Studio&#8217;s unit testing framework<\/a>, but they&#8217;re designed to work with OO languages like C#. In order to use them from F#, we have to use the OO features of F#. Here&#8217;s an example of some F# unit tests using NUnit.<\/p>\n<pre class=\"brush: fsharp\">\r\ntype [&lt;TestFixture&gt;] parser_tests =    \r\n    class    \r\n        new () = {}    \r\n           \r\n        [&lt;Test&gt;]   \r\n        member this.test_NC() =    \r\n            let Some(c,text) = NC !!\"test\"  \r\n            Assert.Equal(c, 't')    \r\n            Assert.Equal(text, !!\"est\")\r\n\r\n        [&lt;Test&gt;]   \r\n        member this.test_NC_empty_string() =    \r\n            let ret = NC !!\"\"  \r\n            Assert.Equal(None, ret)\r\n    end\r\n<\/pre>\n<p>While this works, there&#8217;s an awful lot of extraneous text needed to make this work. Test functions need to be methods on a Test Fixture class (note, F# uses [&lt; &gt;] to indicate attributes) and that class needs a default constructor. F# doesn&#8217;t add one by default, so we have to do so manually. And every test function needs to be marked with &#8220;member this&#8221;.<\/p>\n<p>I&#8217;d really rather write tests that looks like this:<\/p>\n<pre class=\"brush: fsharp\">\r\n[&lt;Test&gt;]    \r\nlet test_NC =     \r\n    let Some(c,text) = NC !!\"test\"  \r\n    Assert.Equal(c, 't')    \r\n    Assert.Equal(text, !!\"est\")\r\n\r\n[&lt;Test&gt;]    \r\nlet test_NC_empty_string =     \r\n    let ret = NC !!\"\"  \r\n    Assert.Equal(None, ret)\r\n<\/pre>\n<p>That&#8217;s a lot more straightforward. If only I could write my test code like that&#8230;<\/p>\n<p>It turns out there&#8217;s a new kid on the .NET unit testing block. <a href=\"http:\/\/www.codeplex.com\/xunit\" target=\"_blank\">xUnit.net<\/a> is the brainchild of <a href=\"http:\/\/jamesnewkirk.typepad.com\/posts\/\" target=\"_blank\">Jim Newkirk<\/a> (one of the original NUnit developers) and <a href=\"http:\/\/www.agileprogrammer.com\/dotnetguy\/\" target=\"_blank\">Brad Wilson<\/a> (aka the .NET Guy). Among other things, xUnit.net does away with the TestFixture attribute. All public methods in all public classes are checked for tests in xUnit.net. <\/p>\n<p>Since we don&#8217;t need the TestFixture, does that mean I can write the tests as F# functions if I use xUnit.net? Not quite. xUnit.net only checks for public <em>instance <\/em>methods on the public classes in a test assembly. But F# functions get compiled as <em>static <\/em>methods. Luckily, xUnit.net is simple enough to change. I submitted a patch to xUnit.net that enables it to find both static and instance test methods (and to skip creating and disposing an object instance for static test methods). I&#8217;m hoping it will be accepted and ship as part of their next release. Until then, I&#8217;m running my own private build with those changes included.<\/p>\n<p>Now that I&#8217;ve settled on a unit test framework, let&#8217;s look at some tests. For my parser solution, I have two projects: PegParser and PegParser.Tests. The tests project depends both on the PegParser assembly as well as xunit.dll, so I need to set a reference to both in my project. F# projects in VS don&#8217;t have the References node in the project tree, you have to either add the references on the project property page or directly within the code. Not sure which is better, but it&#8217;s easier to show the code syntax:<\/p>\n<pre class=\"brush: fsharp\">\r\n#R @\"....xUnit.netMainxunitbinDebugxunit.dll\"\r\n#R @\"..PegParserpegparser.dll\"\r\n\r\nopen Xunit \r\nopen Parser\r\n<\/pre>\n<p>The #R compiler directive is used to reference an external assembly. F#&#8217;s open statement acts like C#&#8217;s using statement, so I can reference types without specifying their full namespace. You&#8217;ll notice that the parser is implemented in a dll called pegparser.dll while the namespace is simply Parser. Actually, it&#8217;s not really a namespace. If you open PegParser.dll in Reflector, you&#8217;ll notice that Parser is actually a type, and the functions are all implemented as static methods. F# hides that from you, though you&#8217;d have to know that if you wanted to invoke the parser from C# or VB.net. By default, F# uses the filename as the namespace\/class name and I haven&#8217;t changed that default in my parser code (though I probably should).  <\/p>\n<p>Once we&#8217;ve referenced the correct assemblies, I need to write the tests. Here are two tests for NC (aka Next Char) function I wrote in the <a href=\"http:\/\/devhawk.net\/2007\/12\/11\/Practical+F+Parsing+The+Parse+Buffer.aspx\" target=\"_blank\">last post<\/a>.<\/p>\n<pre class=\"brush: fsharp\">\r\n[&lt;Fact&gt;]    \r\nlet test_NC_empty_string () =     \r\n    let ret = NC !!\"\"   \r\n    Assert.Equal(None, ret)  \r\n\r\n[&lt;Fact&gt;]    \r\nlet test_NC_simple_string () =     \r\n    let Some(c,text) = NC !!\"test\"   \r\n    Assert.Equal(c, 't')     \r\n    Assert.Equal(text, !!\"est\")\r\n<\/pre>\n<p>You&#8217;ll notice this code is almost identical to my wish test code above. Almost. There are a few syntax changes &#8211; In xUnit.net, tests are called facts and Assert.AreEqual is simply Assert.Equal. I&#8217;ve also had to add empty parentheses after each test function name. Remember that functions in FP are like math functions. If there&#8217;s no independent value to pass in, the result of a math function is is constant. F# compiles parameter-less functions as static properties instead of a static methods. In order to make the test functions compile as static methods, we have to pass in at least one parameter. In F#, the unit type is the equivalent of the void type in C#. Unit has exactly one valid value &#8211; the empty parens. Adding the empty parens to the parameter list of the test functions ensures they get compiled into static methods. <\/p>\n<p>Note, it&#8217;s really really easy to forget to add those empty parens. If you don&#8217;t add them, the code will still compile, but the tests won&#8217;t be found or run. I&#8217;ve been bit by that once already, so if you have a bunch of tests not running, make sure they have the empty parens!<\/p>\n<p>So each test method feeds a parse buffer (converted from a string with the custom !! operator) into the NC function and makes assertions about the result. In the first test, NC should return None if the parse buffer is empty, so I simply compare the function result to None via Assert.Equals. In the second test, I use F#&#8217;s pattern matching capability to assign the result of NC to the value Some(c,text). Basically, this is doing simple pattern matching to bind the two value names to the two parts of the tuple returned from NC. Those two values are then asserted to be a specific values as you would expect.<\/p>\n<p>Note, in the current version of F#, the line let Some(c,text) = NC !!&#8221;test&#8221; yields two warnings. The first (FS0062) warns that a future version of the language will require parens around Some(c,text). I sure hope they change their minds on this, since active patterns are already so parens-heavy. The second (FS0025) warns that this is an incomplete pattern match. If NC returns None, the pattern wont match and the function will throw a MatchFailureException. Of course, since these are unit tests, that&#8217;s exactly the behavior I want! Given the nature of these warnings, personally, I turn them both off (only in my unit tests, mind you). This is done via the #nowarn compiler directives at the top of the file.<\/p>\n<pre class=\"brush: fsharp\">\r\n#nowarn \"25\" \/\/Turn off Incomplete Pattern Match warning\r\n#nowarn \"62\" \/\/Turn off Some contruct needs parens warning\r\n<\/pre>\n<p>Obviously, there are more tests than just these (though my total code coverage is pretty poor, shame on me) but they&#8217;re all pretty similar. As you can see, there&#8217;s tests are very straight forward. The nature of FP functions makes them fairly simple to test, and xUnit.net (with a couple of minor changes) makes it easy to write your unit tests in F#.<\/p>\n","excerpt":"<p>Now that I have functions to access the parse buffer, I better write some tests for them. Yes, I realize I should have written the tests first, but the articles flow better this way. I&#8217;ve written before that one of the benefits to side-effect free functional programming is that it makes unit testing a breeze. [&hellip;]<\/p>\n","date":"2007-12-12 11:40:37","modified":"2011-04-17 16:03:55","categories":[{"id":204,"slug":"development","title":"Development","description":"","parent":0,"post_count":165}],"tags":[{"id":198,"slug":"f-sharp","title":"F#","description":"","post_count":51},{"id":202,"slug":"functional-programming","title":"Functional Programming","description":"","post_count":18},{"id":209,"slug":"parsing-expression-grammar","title":"Parsing Expression Grammar","description":"","post_count":16},{"id":211,"slug":"unit-testing","title":"Unit Testing","description":"","post_count":5}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2005,"name":"James","url":"","date":"2007-12-18 10:53:19","content":"<p>Using the implicit class construction syntax reduces things by a few lines, but still retains a stable fixture object which gets recreated for each test (fixup the indenting as appropriate)&#8230;<\/p>\n<p>type [<testfixture>] parser_tests() =    <\/p>\n<p>        [<test>]<br \/>\n        member x.test_NC() =<br \/>\n            let Some(c,text) = NC !!&#8221;test&#8221;<br \/>\n            Assert.Equal(c, &#8216;t&#8217;)<br \/>\n            Assert.Equal(text, !!&#8221;est&#8221;) <\/p>\n<p>        [<\/test><test>]<br \/>\n        member x.test_NC_empty_string() =<br \/>\n            let ret = NC !!&#8221;\"<br \/>\n            Assert.Equal(None, ret)<br \/>\n<\/test><\/testfixture><\/p>\n","parent":0}],"attachments":[],"comment_count":1,"comment_status":"closed","custom_fields":{"dasblog_entryid":["c195cf67-9986-4b53-863a-6e4897517809"],"dasblog_compressedtitle":["Practical+F+Parsing+Unit+Testing"],"dasblog_compressedtitleunique":["2007\/12\/12\/Practical+F+Parsing+Unit+Testing"]}},"previous_url":"http:\/\/devhawk.net\/2007\/12\/11\/practical-f-parsing-the-parse-buffer\/","next_url":"http:\/\/devhawk.net\/2007\/12\/13\/morning-coffee-130\/"}