{"status":"ok","post":{"id":1043,"type":"post","slug":"throwing-gasoline-on-the-fire","url":"http:\/\/devhawk.net\/2007\/10\/09\/throwing-gasoline-on-the-fire\/","status":"publish","title":"Throwing Gasoline on the Fire","title_plain":"Throwing Gasoline on the Fire","content":"<p>Steve Vinoski has raised a bit of a <a href=\"http:\/\/www.technorati.com\/search\/http%3A%2F%2Fsteve.vinoski.net%2Fblog%2F2007%2F10%2F04%2Fthe-esb-question%2F\" target=\"_blank\">flame war<\/a> by admitting he has <a href=\"http:\/\/steve.vinoski.net\/blog\/2007\/10\/04\/the-esb-question\/\" target=\"_blank\">lost the ESB religion<\/a>. Given that I&#8217;ve <a href=\"http:\/\/devhawk.net\/2007\/04\/25\/Enterprise+Service+Bus+Give+Me+An+Extra+Special+Bitter+Instead.aspx\" target=\"_blank\">never been a fan of ESB&#8217;s<\/a> anyway, there&#8217;s a lot there that I agree with. In particular I liked the description of &#8220;magical framework&#8221; middleware, blaming enterprise architects for driving ESB&#8217;s as the &#8220;single integration architecture&#8221; even though a single *anything* in the enterprise is untenable and his point that flexibility means you don&#8217;t do any one thing particularly well. <\/p>\n<p>However, Steve goes on to bash compiled languages and WS-* while suggesting the One True Integration Strategy\u2122 is REST + &lt;insert your favorite dynamic language here&gt;, then <a href=\"http:\/\/steve.vinoski.net\/blog\/2007\/10\/06\/the-degenerating-esb-discussion\/\" target=\"_blank\">acts surprised<\/a> that the conversation denigrates into &#8220;us vs. them&#8221;. When you start by saying that compiled language proponents &#8220;natter on pointlessly&#8221;, I think you lose your right to later lament the depreciating level of conversation .<\/p>\n<p>All programming languages provide their own unique model of the execution environment.\u00a0 Dynamic languages have a very different model than compiled languages. Arguing that this or that model is better for everyone, everywhere, in all circumstances seems unbelievably naive and arrogant at the same time. <\/p>\n<p>On the other hand, I do agree with Steve&#8217;s point that most developers only know a single programming language, to their detriment. One language developers often miss a better solution because their language of choice doesn&#8217;t provide the right semantics to solve the problem at hand. Developers could do a lot worse than learn a new language. And I don&#8217;t mean a C# developer should learn VB. <\/p>\n<p>The most pressing example of picking the right language for the right problem today is multi-threading. Most languages &#8211; including dynamic languages &#8211; have shitty concurrency semantics. If you&#8217;re building an app to take advantage of many-core processing, &#8220;mainstream&#8221; apps like C#, Java and Ruby won&#8217;t help you much. But we&#8217;re starting to see languages with native concurrency semantics like Erlang. Erlang is dynamically typed, but that&#8217;s not what makes it interesting. It&#8217;s interesting because of it&#8217;s native primitives for spawning tasks. I don&#8217;t see why you couldn&#8217;t add similar primitives for task spawning to a compiled functional language like <a href=\"http:\/\/research.microsoft.com\/fsharp\/fsharp.aspx\" target=\"_blank\">F#<\/a>. <\/p>\n<p>As for REST vs. SOAP\/WS-*, I thought it was interesting that Steve provided no rationale whatsoever for why you should avoid them. The more I listen to this <strike>pissing match <\/strike>debate, the more I think the various proponents are arguing over unimportant syntactical details when the semantics are basically the same. SOAP is just a way to add metadata to an XML message, much as HTTP headers are. WS-* provides a set of <em><u>optional<\/u><\/em> message-level capabilities for handling cross-cutting concerns like security. Past that, are the models really that different? Nope. <\/p>\n<p>For system integration scenarios like Steve is talking about, I&#8217;m not sure how important any of the WS-* capabilities are. Security? I can get that at the transport layer (aka HTTPS). Reliable Messaging? If I do request\/response (which REST excels at), I don&#8217;t need RM. Transactions? Are you kidding me? Frankly, the only capability you <em>really<\/em> need in this scenario is idempotence, and neither REST or SOAP provides any standard mechanism to achieve that. (more on that in a later post)<\/p>\n<p>I understand that some vendors are taking the WS-* specs and building out huge centralized infrastructure products and calling them ESBs. I think Steve is primarily raging against that, and on that point I agree 100%. But Steve sounds like he&#8217;s traded one religion for another &#8211; &#8220;Born Again REST&#8221;. For me, picking the right tool for the job implies much less fanaticism than Steve displays in his recent posts. <\/p>\n","excerpt":"<p>Steve Vinoski has raised a bit of a flame war by admitting he has lost the ESB religion. Given that I&#8217;ve never been a fan of ESB&#8217;s anyway, there&#8217;s a lot there that I agree with. In particular I liked the description of &#8220;magical framework&#8221; middleware, blaming enterprise architects for driving ESB&#8217;s as the &#8220;single [&hellip;]<\/p>\n","date":"2007-10-09 12:56:11","modified":"2007-10-09 12:56:11","categories":[{"id":177,"slug":"architecture","title":"Architecture","description":"","parent":0,"post_count":296}],"tags":[{"id":181,"slug":"rest","title":"REST","description":"","post_count":18},{"id":183,"slug":"soa","title":"SOA","description":"","post_count":94},{"id":290,"slug":"web-services","title":"Web Services","description":"","post_count":12}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2581,"name":"Erik Johnson","url":"http:\/\/appside.blogspot.com","date":"2007-10-12 10:02:35","content":"<p>> I think the various proponents are arguing over unimportant syntactical<br \/>\n> details when the semantics are basically the same.<\/p>\n<p>That was my point when I regurgitated some SOAP history a while back (<a href=\"http:\/\/appside.blogspot.com\/2007\/09\/rest-by-way-of-soap.html\" rel=\"nofollow\">http:\/\/appside.blogspot.com\/2007\/09\/rest-by-way-of-soap.html<\/a>).  <\/p>\n<p>If you avoid the optional stuff and use good URI practices Doc-Lit is pretty much REST. <\/p>\n","parent":0}],"attachments":[],"comment_count":1,"comment_status":"closed","custom_fields":{"dasblog_entryid":["1458334d-e700-44fc-9100-35a602ca3449"],"dasblog_compressedtitle":["Throwing+Gasoline+On+The+Fire"],"dasblog_compressedtitleunique":["2007\/10\/09\/Throwing+Gasoline+On+The+Fire"]}},"previous_url":"http:\/\/devhawk.net\/2007\/10\/09\/morning-coffee-117\/","next_url":"http:\/\/devhawk.net\/2007\/10\/18\/morning-coffee-118-itarc-socal-edition\/"}