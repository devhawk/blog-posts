<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Throwing Gasoline on the Fire</title>
  <link>http://devhawk.net/2007/10/09/throwing-gasoline-on-the-fire/</link>
  <pubDate>Tue, 09 Oct 2007 12:56:11 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://1458334d-e700-44fc-9100-35a602ca3449</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Steve Vinoski has raised a bit of a <a href="http://www.technorati.com/search/http%3A%2F%2Fsteve.vinoski.net%2Fblog%2F2007%2F10%2F04%2Fthe-esb-question%2F" target="_blank">flame war</a> by admitting he has <a href="http://steve.vinoski.net/blog/2007/10/04/the-esb-question/" target="_blank">lost the ESB religion</a>. Given that I've <a href="http://devhawk.net/2007/04/25/Enterprise+Service+Bus+Give+Me+An+Extra+Special+Bitter+Instead.aspx" target="_blank">never been a fan of ESB's</a> anyway, there's a lot there that I agree with. In particular I liked the description of "magical framework" middleware, blaming enterprise architects for driving ESB's as the "single integration architecture" even though a single *anything* in the enterprise is untenable and his point that flexibility means you don't do any one thing particularly well. </p><p>However, Steve goes on to bash compiled languages and WS-* while suggesting the One True Integration Strategy™ is REST + &lt;insert your favorite dynamic language here&gt;, then <a href="http://steve.vinoski.net/blog/2007/10/06/the-degenerating-esb-discussion/" target="_blank">acts surprised</a> that the conversation denigrates into "us vs. them". When you start by saying that compiled language proponents "natter on pointlessly", I think you lose your right to later lament the depreciating level of conversation .</p><p>All programming languages provide their own unique model of the execution environment.  Dynamic languages have a very different model than compiled languages. Arguing that this or that model is better for everyone, everywhere, in all circumstances seems unbelievably naive and arrogant at the same time. </p><p>On the other hand, I do agree with Steve's point that most developers only know a single programming language, to their detriment. One language developers often miss a better solution because their language of choice doesn't provide the right semantics to solve the problem at hand. Developers could do a lot worse than learn a new language. And I don't mean a C# developer should learn VB. </p><p>The most pressing example of picking the right language for the right problem today is multi-threading. Most languages - including dynamic languages - have shitty concurrency semantics. If you're building an app to take advantage of many-core processing, "mainstream" apps like C#, Java and Ruby won't help you much. But we're starting to see languages with native concurrency semantics like Erlang. Erlang is dynamically typed, but that's not what makes it interesting. It's interesting because of it's native primitives for spawning tasks. I don't see why you couldn't add similar primitives for task spawning to a compiled functional language like <a href="http://research.microsoft.com/fsharp/fsharp.aspx" target="_blank">F#</a>. </p><p>As for REST vs. SOAP/WS-*, I thought it was interesting that Steve provided no rationale whatsoever for why you should avoid them. The more I listen to this <strike>pissing match </strike>debate, the more I think the various proponents are arguing over unimportant syntactical details when the semantics are basically the same. SOAP is just a way to add metadata to an XML message, much as HTTP headers are. WS-* provides a set of <em><u>optional</u></em> message-level capabilities for handling cross-cutting concerns like security. Past that, are the models really that different? Nope. </p><p>For system integration scenarios like Steve is talking about, I'm not sure how important any of the WS-* capabilities are. Security? I can get that at the transport layer (aka HTTPS). Reliable Messaging? If I do request/response (which REST excels at), I don't need RM. Transactions? Are you kidding me? Frankly, the only capability you <em>really</em> need in this scenario is idempotence, and neither REST or SOAP provides any standard mechanism to achieve that. (more on that in a later post)</p><p>I understand that some vendors are taking the WS-* specs and building out huge centralized infrastructure products and calling them ESBs. I think Steve is primarily raging against that, and on that point I agree 100%. But Steve sounds like he's traded one religion for another - "Born Again REST". For me, picking the right tool for the job implies much less fanaticism than Steve displays in his recent posts. </p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1043</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2007-10-09 12:56:11</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2007-10-09 12:56:11</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">throwing-gasoline-on-the-fire</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
  <category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
  <category domain="post_tag" nicename="soa"><![CDATA[SOA]]></category>
  <category domain="post_tag" nicename="web-services"><![CDATA[Web Services]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[1458334d-e700-44fc-9100-35a602ca3449]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Throwing+Gasoline+On+The+Fire]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2007/10/09/Throwing+Gasoline+On+The+Fire]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2581</wp:comment_id>
    <wp:comment_author><![CDATA[Erik Johnson]]></wp:comment_author>
    <wp:comment_author_email>ejohnson@epicor.com</wp:comment_author_email>
    <wp:comment_author_url>http://appside.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>206.114.176.75</wp:comment_author_IP>
    <wp:comment_date>2007-10-12 10:02:35</wp:comment_date>
    <wp:comment_date_gmt>2007-10-12 17:02:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[> I think the various proponents are arguing over unimportant syntactical
> details when the semantics are basically the same.

That was my point when I regurgitated some SOAP history a while back (http://appside.blogspot.com/2007/09/rest-by-way-of-soap.html).  

If you avoid the optional stuff and use good URI practices Doc-Lit is pretty much REST. ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>