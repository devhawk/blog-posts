{"status":"ok","post":{"id":1276,"type":"post","slug":"i-hate-global-asax","url":"http:\/\/devhawk.net\/2009\/08\/06\/i-hate-global-asax\/","status":"publish","title":"I Hate Global.asax","title_plain":"I Hate Global.asax","content":"<p>One of the things I\u2019ve always loved about ASP.NET is how easily extensible it is. Back in 2000, I had a customer that wanted to \u201cskin\u201d their website using XML and XSLT \u2013 an approach Martin Fowler later called <a href=\"http:\/\/martinfowler.com\/eaaCatalog\/transformView.html\">Transform View<\/a>. We were working with classic ASP at the time, so the solution we ended up with was kind of ugly. But I was able to implement this approach in ASP.NET in a few hundred lines of code, which I wrote up in <a href=\"http:\/\/msdn.microsoft.com\/en-us\/magazine\/dvdarchive\/cc164164.aspx\">an MSDN article<\/a> published back in 2003. In the conclusion of that article, I wrote the following:<\/p>\n<blockquote><p>Using ASP.NET is kind of like having your mind read. If you ever look at a site and think &#8220;I need something different,&#8221; you&#8217;ll most likely find that the ASP.NET architects have considered that need and provided a mechanism for you to hook in your custom functionality. In this case, I&#8217;ve bypassed the built-in Web Forms and Web Services support to build an entire engine that services Web requests in a unique way.<\/p>\n<\/blockquote>\n<p>Nearly ten years later, I finally ran into a situation where ASP.NET failed to read my mind and doesn\u2019t provide a mechanism to hook in custom functionality: Global.asax.<\/p>\n<p>I always thought of global.asax as an obsolete construct primarily intended to ease migration from classic ASP. After all, ASP.NET has first class support for customizing request handling at various points throughout the execution pipeline via <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.web.ihttpmodule.aspx\">IHttpModule<\/a>. Handling those events in global.asax always felt vaguely hacky to me. <\/p>\n<p>However, what I didn\u2019t realize is that there are some events that can only be handled via global.asax (or its code behind). In particular, Application_Start\/End and Session_Start\/End can only be handled in global.asax. Worse, these aren\u2019t true events. For reasons I\u2019m sure made sense at the time but that I don\u2019t understand, the HttpApplicationFactory discovers these methods via reflection rather than by an interface or other more typical mechanism. You can check it out for yourself with <a href=\"http:\/\/reflector.red-gate.com\">Reflector<\/a> or the <a href=\"http:\/\/referencesource.microsoft.com\/\">Reference Source<\/a> \u2013 look for the method with the wonderful name ReflectOnMethodInfoIfItLooksLikeEventHandler. No, I\u2019m not making that up.<\/p>\n<p>The reason I suddenly care about global.asax is because Application_Start is where ASP.NET MVC apps configure their route table. But if you want to access the Application_Start method in a dynamic language like IronPython, you\u2019re pretty much out of luck. The only way to receive the Application_Start pseudo-event is via a custom HttpApplication class. But you can\u2019t implement your custom HttpApplication in a dynamically typed language like IronPython since it finds the Application_Start method via Reflection. Ugh.<\/p>\n<p>If someone can explain to me why ASP.NET uses reflection to fire the Application_Start event, I\u2019d love to understand why it works this way. Even better &#8211; I\u2019d love to see this fixed in some future version of ASP.NET. You come the only way to configure a custom HttpApplication class is to specify it via global.asax? Wouldn\u2019t it make sense to specify it in web.config instead?<\/p>\n<p>In order to support Application_Start for dynamic languages you basically have two choices:<\/p>\n<ol>\n<li>Build a custom HttpApplication class in C# and reference it in global.asax. This is kind of the approach used by Jimmy\u2019s ironrubymvc project. He\u2019s got a <a href=\"http:\/\/github.com\/jschementi\/ironrubymvc\/blob\/939319febe205a43d6837e50fe3fe4740708fd58\/IronRubyMvc\/Core\/RubyMvcApplication.cs\">RubyMvcApplication<\/a> which he inherits his <a href=\"http:\/\/github.com\/jschementi\/ironrubymvc\/blob\/939319febe205a43d6837e50fe3fe4740708fd58\/IronRubyMvcWeb\/Global.asax.cs\">GlobalApplication<\/a> from. Given that GlobalApplication is empty, I think he could remove his global.asax.cs file and just reference RubyMvcApplication from global.asax directly. <\/li>\n<li>Build custom Application_Start\/End-like events out of IHttpModule Init and Dispose. You can have multiple IHttpModule instances in a given web app, so you\u2019d need to make sure you ran fired Start and End only once. This is the approach taken by the <a href=\"http:\/\/aspnet.codeplex.com\/Wiki\/View.aspx?title=Dynamic%20Language%20Support\">ASP.NET Dynamic Language Support<\/a>. [1] <\/li>\n<\/ol>\n<p>So here\u2019s the question Iron Language Fans: Which of these approaches is better? I lean towards Option #1, since it traps exactly the correct event though it does require a global.asax file to be hanging around (kind of like how the ASP.NET MVC template has a blank default.aspx file \u201cto ensure that ASP.NET MVC is activated by IIS when a user makes a &#8220;\/&#8221; request\u201d). But I\u2019m curious what the Iron Language Community at large thinks. Feel free to leave me a comment or <a href=\"mailto:harry.pierson@microsoft.com\">drop me an email<\/a> with your thoughts.<\/p>\n<hr \/>\n<p>[1] FYI, I\u2019m working on getting the code for ASP.NET Dynamic Language Support released. In the meantime, you can verify what I\u2019m saying via Reflector.<\/p>\n","excerpt":"<p>One of the things I\u2019ve always loved about ASP.NET is how easily extensible it is. Back in 2000, I had a customer that wanted to \u201cskin\u201d their website using XML and XSLT \u2013 an approach Martin Fowler later called Transform View. We were working with classic ASP at the time, so the solution we ended [&hellip;]<\/p>\n","date":"2009-08-06 11:58:58","modified":"2009-08-06 11:58:58","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":178,"slug":"asp-net","title":"ASP.NET","description":"","post_count":27},{"id":253,"slug":"ironruby","title":"IronRuby","description":"","post_count":16}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2245,"name":"Parag Mehta","url":"http:\/\/www.jpinfoworld.com","date":"2009-08-09 22:02:00","content":"<p>That&#8217;s a really interesting find <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" \/>  I didn&#8217;t realize this since I didn&#8217;t use Dynamic language as yet.<\/p>\n","parent":0},{"id":2246,"name":"Sea Cat","url":"","date":"2009-08-10 09:16:37","content":"<p>What I don&#8217;t understand is why you would want to use dynamic languages for asp.net development in the first place. Sounds like a bastardization of the environment to me.<\/p>\n","parent":0},{"id":2247,"name":"Joe Chung","url":"","date":"2009-08-22 13:04:08","content":"<p>The reason Application_Start, Application_End, Session_Start, and Session_End are like that is because of legacy.  ASP worked like that &#8211; <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms525965.aspx\" rel=\"nofollow\">http:\/\/msdn.microsoft.com\/en-us\/library\/ms525965.aspx<\/a><\/p>\n<p>Would it be possible to the route table in an  HttpApplication&#8217;s Init method override instead?  Or is that too soon in the application&#8217;s lifecycle to muck around with the ASP.NET routing table?<\/p>\n","parent":0},{"id":2248,"name":"Michael Foord","url":"http:\/\/htto:\/\/www.ironpythoninaction.com","date":"2009-08-23 14:34:43","content":"<p>@Sea cat<br \/>\nOnce you done *anything* in a dynamic language you tend to want to use them wherever possible&#8230; <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_wink.gif\" alt=\";-)\" class=\"wp-smiley\" \/> <\/p>\n","parent":0},{"id":2249,"name":"Dody Gunawinata","url":"","date":"2009-08-26 14:08:36","content":"<p>1st approach. It seems to be it&#8217;s more straightforward. <\/p>\n","parent":0},{"id":2250,"name":"DevHawk","url":"","date":"2009-08-26 23:14:26","content":"<p>@Dody, I was leaning that way as well.<\/p>\n<p>@Joe, I don&#8217;t see why you couldn&#8217;t setup the route table in HttpApplication::Init. And since Init is virtual, that would solve the App_Start reflection problem. However, I&#8217;m not sure how to inject IronPython into the ASP.NET pipeline that early or how to configure an HttpApplication subclass without using global.asax. I&#8217;ll ask around with my friends on the ASP.NET team though. Thanks for the suggestion!<\/p>\n","parent":0}],"attachments":[],"comment_count":6,"comment_status":"closed","custom_fields":{"dasblog_entryid":["f8806ba3-a1bb-4c6f-8a39-a0ca8a81ef58"],"dasblog_compressedtitle":["I+Hate+Globalasax"],"dasblog_compressedtitleunique":["2009\/08\/06\/I+Hate+Globalasax"]}},"previous_url":"http:\/\/devhawk.net\/2009\/07\/28\/functions-that-create-functions-in-powershell\/","next_url":"http:\/\/devhawk.net\/2009\/08\/07\/pygments-for-windows-live-writer-v1-0-2\/"}