{"status":"ok","post":{"id":1301,"type":"post","slug":"fixing-powershells-busted-resolve-path-cmdlet","url":"http:\/\/devhawk.net\/2010\/01\/21\/fixing-powershells-busted-resolve-path-cmdlet\/","status":"publish","title":"Fixing Powershell&#8217;s Busted Resolve-Path Cmdlet","title_plain":"Fixing Powershell&#8217;s Busted Resolve-Path Cmdlet","content":"<div>Usually, my <a href=\"http:\/\/devhawk.net\/CategoryView,category,PowerShell.aspx\">PowerShell posts<\/a> are effusive in their praise. However, who thought up this \u201cfeature\u201d gets no praise from me:<\/div>\n<pre class=\"brush: text\">PS\u00bbResolve-Path ~missing.file\r\nResolve-Path : Cannot find path 'C:Usershpiersonmissing.file' because it does not exist.<\/pre>\n<div>In my opinion, this is a bad design. Resolve-Path assumes that if the filename being resolved doesn\u2019t exist, then it must be an error. But in the script I\u2019m building, I\u2019m resolving the path of a file that I\u2019m going to create. In other words, I know a priori that the file doesn\u2019t exist. Yet Resolve-Path insists on throwing an error. I would have expected there to be some switch you could pass to Resolve-Path telling it to skip path validation, but there\u2019s not.<\/div>\n<div>And the worst thing is, I can see that Resolve-Path came up with the \u201cright\u201d answer \u2013 it\u2019s right there in the error message!<\/div>\n<div>Searching around, I found <a href=\"http:\/\/www.vistax64.com\/powershell\/24603-resolve-path-non-existing-file.html\">a thread<\/a> where someone else was having the same problem. Jeffrey Snover \u2013 aka Distinguished Engineer, inventor of Powershell and <a href=\"http:\/\/www.langnetsymposium.com\/2009\/talks\/23-ErikMeijer-LiveLabsReactiveFramework.html\">target of Erik Meijer\u2019s Lang.NET coin throwing stunt<\/a> \u2013 suggested using <a href=\"http:\/\/blogs.msdn.com\/powershell\/archive\/2006\/11\/03\/erroraction-and-errorvariable.aspx\">\u2013ErrorAction and \u2013ErrorVariable<\/a> to ignore the error and retrieve the resolved path from the TargetObject property error variable. Like Maximilian from the thread, using this approach feels fragile and frankly kinda messy, but I needed a solution. So I wrote the following function that wraps up access to the error variable so at least I don\u2019t have fragile messy code sprinkled through out my script.<\/div>\n<pre class=\"brush: powershell\">function force-resolve-path($filename)\r\n{\r\n  $filename = Resolve-Path $filename -ErrorAction SilentlyContinue\r\n                                     -ErrorVariable _frperror\r\n  if (!$filename)\r\n  {\r\n    return $_frperror[0].TargetObject\r\n  }\r\n  return $filename\r\n}<\/pre>\n<div>The script is pretty straightforward. \u2013ErrorAction SilentlyContinue is PowerShell\u2019s version of <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/5hsw66as.aspx\">On Error Resume Next<\/a> in Visual Basic. If the cmdlet encounters an error, it gets stashed away in the variable specified by ErrorVariable (it\u2019s also added to $Error so you can still retrieve the error object if ErrorVariable isn\u2019t specified) and continues processing. Then I manually check to see if resolve-path succeeded \u2013 i.e. did it return a value \u2013 and return the TargetObject of the Error object if it didn\u2019t.<\/div>\n<div>As I said, fragile and kinda messy. But it works.<\/div>\n","excerpt":"<p>Usually, my PowerShell posts are effusive in their praise. However, who thought up this \u201cfeature\u201d gets no praise from me: PS\u00bbResolve-Path ~missing.file Resolve-Path : Cannot find path &#8216;C:Usershpiersonmissing.file&#8217; because it does not exist. In my opinion, this is a bad design. Resolve-Path assumes that if the filename being resolved doesn\u2019t exist, then it must be [&hellip;]<\/p>\n","date":"2010-01-21 23:38:51","modified":"2011-04-17 20:43:49","categories":[{"id":204,"slug":"development","title":"Development","description":"","parent":0,"post_count":165}],"tags":[{"id":230,"slug":"powershell","title":"PowerShell","description":"","post_count":41}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2294,"name":"Richard Siddaway","url":"http:\/\/msmvps.com\/blogs\/RichardSiddaway\/Default.aspx","date":"2010-01-28 10:58:13","content":"<p>I&#8217;m presuming two things here:<br \/>\n1) you want to test the path to the folder containing the file<br \/>\n2) you want to test if the file already exists before attempting the creation<\/p>\n<p>Why not use a couple of calls to test-path<\/p>\n","parent":0}],"attachments":[],"comment_count":1,"comment_status":"closed","custom_fields":{"dasblog_entryid":["0f11ab8d-df0d-458c-8ee5-105b1fdedcd3"],"dasblog_compressedtitle":["Fixing+Powershellrsquos+Busted+ResolvePath+Cmdlet"],"dasblog_compressedtitleunique":["2010\/01\/22\/Fixing+Powershellrsquos+Busted+ResolvePath+Cmdlet"]}},"previous_url":"http:\/\/devhawk.net\/2009\/12\/07\/job-opening-on-my-team\/","next_url":"http:\/\/devhawk.net\/2010\/02\/17\/weakly-typed-dynamic-languages-and-natural-selection\/"}