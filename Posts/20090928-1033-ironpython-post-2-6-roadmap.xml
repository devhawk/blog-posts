<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>IronPython Post 2.6 Roadmap</title>
  <link>http://devhawk.net/2009/09/28/ironpython-post-2-6-roadmap/</link>
  <pubDate>Mon, 28 Sep 2009 10:33:02 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://dbf7d543-5a65-4642-a1f0-44f25aa1ff37</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>It’s not quite out the door yet, but things have gotten quieter around here since we shipped the <a href="http://devhawk.net/2009/09/23/IronPython+26+Release+Candidate.aspx">Release Candidate of 2.6</a>. But there’s no rest for the dynamic, so we’ve already started thinking about what we do next.</p><p>Since we shipped 2.0 last December, we’ve shipped two service releases: 2.0.1 two months later in February and 2.0.2 four months after that in June. We weren’t planning on doing a 2.0.3 release, but then we discovered the CLR folks made a breaking change to partial trust in Windows 7. David <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2009-September/011268.html">recently emailed</a> the IronPython mailing list looking for feedback on other must-fix bugs we can get to for 2.0.3. If you’ve got an opinion on 2.0.3 must-fix bugs, please respond to that thread.</p><p>For 2.6 service releases, we’re looking to tighten up the timeframe a bit from last time. We’re planning to ship service releases of 2.6 in December and February. However, since we don’t have a major release ship vehicle in the 2.x branch until Python 2.7 next summer, these service releases may contain new functionality in addition to bug fixes. In particular, we will look to include any missing modules work that I discussed in my <a href="http://devhawk.net/2009/09/23/IronPython+26+Release+Candidate.aspx">RC announcement post</a> in these service releases.</p><p>In addition to the IronPython 2.6 service releases, we’ll also continue to track the <a href="http://www.microsoft.com/visualstudio/2010">Visual Studio 2010</a> beta cycle as it heads to RTM. I can’t comment on VS2010 dates, but I can say that we will ship a CTP of IronPython 2.6 for .NET Framework 4.0 for Visual Studio 2010 Beta 2 and that we are committed to shipping the RTM of our .NET 4.0 version the day that Visual Studio 2010 is publicly available. Given that dynamic the <a href="http://msdn.microsoft.com/en-us/library/dd264736(VS.100).aspx">big new feature of C# 4.0</a>, we want to make sure IronPython is ready to go as soon as C# 4.0 is available. </p><p>BTW, we are well aware that “IronPython 2.6 for .NET Framework 4.0” is a long ugly name. Any suggestions on a different one? We’ve been thinking “IronPython 2.6 R2” since the “R2” nomenclature is <a href="http://technet.microsoft.com/en-us/windowsserver/bb428898.aspx">big</a><a href="http://www.microsoft.com/sqlserver/2008/en/us/R2.aspx">around</a><a href="http://www.microsoft.com/windowsserver2008/en/us/r2-editions-overview.aspx">here</a>. But “R2” doesn’t really capture the essence of the .NET 4.0 compatible release. Besides, when has the dynamic languages team at Microsoft ever done ANYTHING because it was popular with the Microsoft marketing folks? :)</p><p>At this point, we’ve got the next few months mapped out, but not much more beyond that. Specifically, we have two gaping holes in the roadmap:</p><ul><li>Visual Studio Integration </li><li>IronPython 3.x </li></ul><p>For now, I’m going to leave these holes unfilled. Currently, the rest of my VS Languages teammates (along with the rest of DevDiv) are heads down driving towards beta 2 of Visual Studio 2010. Once they reach that milestone, planning on Visual Studio v.next will begin. Those plans have the potential for impacting how the IronPython team proceeds going forward. </p><p>Frankly, several members of the dynamic languages team have been pitching in with the “drive to beta 2” effort so we’re a little more short handed than usual. If we get those people back, then we’re in a much better position to execute on both VS Integration and IronPython 3.x. If we don’t, then we have to make some hard choices about how to proceed. I’m guessing most would agree that VS integration is more important IronPython 3.x support. However, those aren’t equal efforts by any stretch of the imagination. How valuable is VS integration if, for example, we don’t have the bandwidth to build decent intellisense? As I said, hard choices.</p><p>If you want to make your voice heard on Microsoft’s level of commitment to IronPython, make sure you go rate the <a href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=475830">IronPython integration issue</a> on Microsoft Connect. (while you’re there, rate the <a href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=479957">IronRuby integration issue</a> too.) The IronPython integration is currently the top rated open issue on the VS Connect site and is the second highest vote getter out of all the Connect issues (active or otherwise) logged since VS 2010 shipped it’s first CTP! [1] </p><hr /><p>[1] Seriously, the next most recent Connect issue with more votes than IronPython integration is <a href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=308352">HttpRuntime.ProcessRequest() does not work in IIS7 Integrated Pipeline Mode</a> from November 2007. The next one before that was <a href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=106007">Create Service Pack for Visual Studio 2005</a> from November 2005. </p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1290</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2009-09-28 10:33:02</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2009-09-28 10:33:02</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">ironpython-post-2-6-roadmap</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[dbf7d543-5a65-4642-a1f0-44f25aa1ff37]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[IronPython+Post+26+Roadmap]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2009/09/28/IronPython+Post+26+Roadmap]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2273</wp:comment_id>
    <wp:comment_author><![CDATA[Alcides Fonseca]]></wp:comment_author>
    <wp:comment_author_email>me@alcidesfonseca.com</wp:comment_author_email>
    <wp:comment_author_url>http://alcidesfonseca.com</wp:comment_author_url>
    <wp:comment_author_IP>193.11.233.70</wp:comment_author_IP>
    <wp:comment_date>2009-09-28 10:39:56</wp:comment_date>
    <wp:comment_date_gmt>2009-09-28 17:39:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Just a small suggestion. Instead of R2 why not IronPython 2.6 n4, which stands for .net 4.0. Makes more sense than R2 to me since it reminds me of RC2.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2274</wp:comment_id>
    <wp:comment_author><![CDATA[Pedro Brown]]></wp:comment_author>
    <wp:comment_author_email>phs.brown@gmail.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>201.78.199.230</wp:comment_author_IP>
    <wp:comment_date>2009-09-28 14:41:30</wp:comment_date>
    <wp:comment_date_gmt>2009-09-28 21:41:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi,

In my opinion VS integration is, indeed, more important then Python 3.x. 

If the model of choice for this integration is a VS Addin, maybe you could release a CTP with some of the features, even if it doesn't include a decent intellisense.

My company is considering moving a code generator written in Delphi Win32 to a VS Addin, embedding IronPython in it, using it to run the Models (somewhat like CodeSmith, but much more specific).

The problem is that VS doesn't even have syntax highlighting. 

Thanks. ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2275</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Meinhardt]]></wp:comment_author>
    <wp:comment_author_email>am_tomoni@yahoo.de</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>78.49.190.47</wp:comment_author_IP>
    <wp:comment_date>2009-09-29 06:43:03</wp:comment_date>
    <wp:comment_date_gmt>2009-09-29 13:43:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["IronPython 2.6 D4"

"D" for "Dynamic" and "4" stands for ".NET v4".]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2276</wp:comment_id>
    <wp:comment_author><![CDATA[anon]]></wp:comment_author>
    <wp:comment_author_email>aaa@aa.gr</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>88.218.48.85</wp:comment_author_IP>
    <wp:comment_date>2009-09-29 06:57:08</wp:comment_date>
    <wp:comment_date_gmt>2009-09-29 13:57:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ironpython 4.2.6]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>