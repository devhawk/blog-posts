{"status":"ok","post":{"id":335,"type":"post","slug":"analysis-vs-design-modeling","url":"http:\/\/devhawk.net\/2004\/03\/30\/analysis-vs-design-modeling\/","status":"publish","title":"Analysis vs. Design Modeling","title_plain":"Analysis vs. Design Modeling","content":"<\/p>\n<p>Keith <a href=\"http:\/\/blogs.msdn.com\/keith_short\/archive\/2004\/03\/05\/84989.aspx\">posted<\/a> a couple of <a href=\"http:\/\/www.softwarefactories.com\/ScreenShots\/CD-1.JPG\" class=\"grouped_elements\" rel=\"tc-fancybox-group335\">screen<\/a><a href=\"http:\/\/www.softwarefactories.com\/ScreenShots\/CD-2.JPG\" class=\"grouped_elements\" rel=\"tc-fancybox-group335\">shots<\/a> of the Whidbey class designer a few weeks ago. Two things about this designer leapt out at me. First, it&#8217;s not a UML class designer (though it borrows heavily from UML&#8217;s graphical syntax). Second, it doesn&#8217;t provide much abstraction over the raw code. This lead me to think about the role of class modeling in the analysis and design process. How similar are the analysis and design models? UML doesn&#8217;t have an analysis model syntax, so typically the analysis phase uses the class diagram as well, but with less details. Are design models just analysis models with more details? Or is there a need \/ opportunity for higher-abstraction analysis modeling separate from (but transformable to) design models?<\/p>\n<p>(Note, much of my thinking expressed in this post comes from a discussion with my father. If you <a href=\"http:\/\/blogs.msdn.com\/pathelland\/archive\/2004\/03\/18\/91826.aspx\">read Pat&#8217;s blog<\/a>, you know that Dad&#8217;s an architect for the FAA. Not that he agrees with me &#8211; actually, just the opposite. I also discussed this at length with an ex-teammate Tim Mallalieu. I&#8217;m hoping they&#8217;ll both respond in the comments since neither has their own blog&#8230;yet.)<\/p>\n<p>I&#8217;m a big fan of Ivar Jacobson&#8217;s book <a href=\"http:\/\/devhawk.net\/PermaLink.aspx?guid=dd06efd1-cf51-4eed-927a-c82a01273b47\">Object Oriented Software Engineering<\/a> &#8211; it&#8217;s one of the few on my <a href=\"http:\/\/devhawk.net\/PermaLink.aspx?guid=dd06efd1-cf51-4eed-927a-c82a01273b47\">office bookshelf<\/a>. However, like many OO methodologies, dealing with the relational database is mostly left as an exercise for the user. In a 500+ page book, Jacobson dedicates a scant 15 pages on the topic of persisting objects in a relational database. <a href=\"http:\/\/www.martinfowler.com\/\">Fowler<\/a> acknowledges this in <a href=\"http:\/\/www.martinfowler.com\/books.html#eaa\">PoEAA<\/a> when he points out that the database is often treated like the &#8220;crazy aunt who&#8217;s shut up in an attic and whom nobody wants to talk about&#8221; in OO design. However, in almost all enterprise development today, the database is a reality and a process that doesn&#8217;t formally deal with databases is fundamentally incomplete. That also means that the database needs to be included in the model. <\/p>\n<p>From my experience, you typically start including the database in the model during the design phase. In the analysis phase, I want to work at a higher level of abstraction. Jacobson writes about Entity, Boundary and Control objects. Entity objects are used to model long-lived information &#8211; i.e. information that is stored in the database. Entities share a lot of similarities with classes &#8211; they have names, methods, and associated state &#8211; but are built at a higher level of abstraction. By ignoring implementation details (like database persistence strategy) you can focus better at the problem at hand. When you move from analysis to design, entities get mapped to both code design elements (classes, interfaces, enumerations, etc) and database design elements (tables, procs, views, etc). <\/p>\n<p>This mapping from analysis to design is influenced by several decisions. Fowler details three domain logic patterns in PoEAA: <a href=\"http:\/\/www.martinfowler.com\/eaaCatalog\/domainModel.html\">Domain Model<\/a>, <a href=\"http:\/\/www.martinfowler.com\/eaaCatalog\/transactionScript.html\">Transaction Script<\/a> and <a href=\"http:\/\/www.martinfowler.com\/eaaCatalog\/tableModule.html\">Table Module<\/a>. Your pattern choice has profound implication on your design model. Only when you use the domain model pattern is there a one-to-one mapping between entity analysis objects and class design objects. If you use the other patterns, that one-to-one mapping doesn&#8217;t exist. Transaction scripts don&#8217;t keep any state across method invocations and table modules are built as collections rather than distinct objects. To me, this implies that analysis and design models are fundamentally different and differentiated by more than the level of detail.<\/p>\n<p>Furthermore, the analysis to design mapping is influenced by the kind of data represented by your entities. The Information &amp; Application Architecture talk from the <a href=\"http:\/\/msdn.microsoft.com\/architecture\/overview\/series\/\">Architecture Strategy Series<\/a> discusses four types of data: Request\/Response (i.e. messages), Activity-Oriented, Resource-Oriented and Reference. Each has different usage and representation semantics. Reference and message data is read-only and almost always represented in XML. Reference data is also version-stamped. Activity and resource oriented data are private to the service and almost always stored in relational tables. However, resource-oriented data is usually highly concurrent while activity-oriented data is not. These differences in data semantics implies different design models for my entities. For example, O\/R mapping works great for read-only and low concurrent data but not well for highly concurrent data. Again, the lack of one-to-one mapping implies a true difference between analysis and design models.<\/p>\n<p>Personally, I&#8217;d like an analysis-domain-specific language to build my entities in (as well as my controls and boundaries). I&#8217;d also like to indicate what type of data each entity represents. When I map that model into the design model, I&#8217;d like to choose my domain logic strategy. The output of this mapping process would be both a class design model and a database design model based on the analysis model, the kinds of data in the analysis model as the persistence strategy chosen. In a perfect world, the design would be generated from the analysis model auto-magically.\u00a0 However, since I believe in <a href=\"http:\/\/blogs.msdn.com\/michael_platt\/archive\/2004\/03\/04\/83704.aspx\">Platt&#8217;s Second Law<\/a>, I&#8217;m not sure generating the design model is particularly feasible. I guess when I get my hands on the <a href=\"http:\/\/devhawk.net\/PermaLink.aspx?guid=0183b1e0-6a94-4b1a-9599-f8c5552db953\">Whidbey modeling engine<\/a>, I&#8217;ll get a chance to find out.<\/p>\n","excerpt":"<p>Keith posted a couple of screenshots of the Whidbey class designer a few weeks ago. Two things about this designer leapt out at me. First, it&#8217;s not a UML class designer (though it borrows heavily from UML&#8217;s graphical syntax). Second, it doesn&#8217;t provide much abstraction over the raw code. This lead me to think about [&hellip;]<\/p>\n","date":"2004-03-30 00:44:12","modified":"2004-03-30 00:44:12","categories":[{"id":177,"slug":"architecture","title":"Architecture","description":"","parent":0,"post_count":296}],"tags":[{"id":225,"slug":"modelling","title":"Modelling","description":"","post_count":61}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":3034,"name":"Jimmy Nilsson","url":"http:\/\/www.jnsk.se\/weblog\/","date":"2004-03-30 04:55:57","content":"<p>Hi Harry,<\/p>\n<p>Interesting! <\/p>\n<p>How would what you write here be affected if Eric Evans&#8217; book Domain-Driven Design is taken into account?<\/p>\n<p>Best Regards,<br \/>\nJimmy<br \/>\n<a href=\"http:\/\/www.jnsk.se\/weblog\/\" rel=\"nofollow\">http:\/\/www.jnsk.se\/weblog\/<\/a><br \/>\n###<\/p>\n","parent":0},{"id":3035,"name":"mearls@hotmail.com (Michael Earls)","url":"http:\/\/www.cerkit.com\/","date":"2004-04-01 09:19:35","content":"<p>Good question.  I think a tool to assist in a visual design of the analysis classes would be great.<\/p>\n<p>More here:<\/p>\n<p><a href=\"http:\/\/www.cerkit.com\/cerkitBlog\/PermaLink.aspx?guid=52cf475b-eb4f-4c48-aabd-475b788ff00a\" rel=\"nofollow\">http:\/\/www.cerkit.com\/cerkitBlog\/PermaLink.aspx?guid=52cf475b-eb4f-4c48-aabd-475b788ff00a<\/a><\/p>\n","parent":0},{"id":3036,"name":"stellenmarktplatz","url":"http:\/\/www.stellenmarktplatz.ch\/index.htm","date":"2004-05-20 03:24:42","content":"<p>hi<br \/>\nnice comment<\/p>\n<p>aff dan<br \/>\n<a href=\"http:\/\/www.stellenmarktplatz.ch\/index.htm\" rel=\"nofollow\">http:\/\/www.stellenmarktplatz.ch\/index.htm<\/a><\/p>\n","parent":0}],"attachments":[],"comment_count":3,"comment_status":"closed","custom_fields":{"dasblog_entryid":["266341a9-773f-44ce-b205-3f0b90812088"],"dasblog_compressedtitle":["Analysis+Vs+Design+Modeling"],"dasblog_compressedtitleunique":["2004\/03\/30\/Analysis+Vs+Design+Modeling"]}},"previous_url":"http:\/\/devhawk.net\/2004\/03\/29\/two-gaming-notes\/","next_url":"http:\/\/devhawk.net\/2004\/03\/31\/technology-roadmap\/"}