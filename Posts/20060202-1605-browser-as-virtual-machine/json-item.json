{"status":"ok","post":{"id":678,"type":"post","slug":"browser-as-virtual-machine","url":"http:\/\/devhawk.net\/2006\/02\/02\/browser-as-virtual-machine\/","status":"publish","title":"Browser as Virtual Machine","title_plain":"Browser as Virtual Machine","content":"<p><i>Note: this is the first in a series of Web 2.0 entries. I know I\u2019m <a href=\"http:\/\/devhawk.net\/2006\/01\/26\/Hating+The+Term+Web+20.aspx\">on record as hating the term Web 2.0<\/a>, but as I wrote in that post, I do belief there is a fundamental shift underway in computing. The industry is calling this Web 2.0, and I can either spit in the wind or go with the flow. Furthermore, for the more Web 2.0 savvy among my readership, much of what I write about in this series may be old news. But I want to blog what I learn as I learn it, so bear with me.<\/i><\/p>\n<p>Just as the dumb terminal was eventually replaced with more sophisticated personal computers, the dumb browser has been replaced on the modern desktop by something significantly more versatile. When the ability to process arbitrary script code was added to the browser, it became a virtual machine in its own right. Perhaps unique and special-purpose when compared to environments such as the .NET CLR, but a VM all the same. And while its unique nature makes the browser unusable for entire genres of applications \u2013 you\u2019d never use the browser to build a server application for example \u2013 it makes it well tailored for user-centric, software as a service style applications that have become commonplace. While the browser\u2019s scripting capabilities have been around since the mid 90s, the industry has only recently started to leverage those capabilities to build applications that run on the client inside the browser. Jesse James Garrett <a style=\"COLOR: blue; TEXT-DECORATION: underline; text-underline: single\" href=\"http:\/\/www.adaptivepath.com\/publications\/essays\/archives\/000385.php\">coined<\/a> the term \u201cAJAX\u201d \u2013 Asynchronous JavaScript and XML \u2013 to describe this style of application.<\/p>\n<p>If the browser is a virtual machine, that makes JavaScript the \u201cassembly language\u201d of the browser. That is, JavaScript is the lowest level of abstraction you can program the browser with. \u00a0This has pretty dramatic implications on the applications you build for the browser VM. For one, JavaScript is at a sufficiently high level of abstraction that you can use it directly and be productive. Writing an entire application in IL or Java byte code is unthinkable, but isn\u2019t really a big deal for JavaScript. Furthermore, Because JavaScript is a text-based scripting language, protecting your code as intellectual property is extremely difficult. While obfuscators exist, in the end they can only delay the reverse engineering of your code, not prevent it. This encourages business models where the in-browser code has little if any value.<\/p>\n<p>For example, the big mashup functionality these days is mapping. There are three big mapping services out there: <a href=\"http:\/\/www.google.com\/apis\/maps\/\">Google Maps<\/a>, <a href=\"http:\/\/viavirtualearth.com\/\">Microsoft Virtual Earth<\/a> and <a href=\"http:\/\/developer.yahoo.net\/maps\/\">Yahoo! Maps<\/a>. 266 of the 368 mashups listed on <a href=\"http:\/\/www.programmableweb.com\/\">ProgrammableWeb<\/a> as I write this include mapping functionality from one of those services. That&#8217;s nearly three out of four. Mapping is interesting because of the sheer amount of data involved. In fact, the code is pretty useless without the back-end data. So while I can get the code for Google Maps, it does me no good without access to the data for which I need the API key. Contrast this with the complete lack of market for browser-based rich text editors. Sure, there are various open-source script libraries like <a href=\"http:\/\/dojotoolkit.org\/docs\/rich_text.html\">Dojo<\/a>, <a href=\"http:\/\/www.richtexteditor.org\/\">Web Wiz RTE<\/a> and <a href=\"http:\/\/www.kevinroth.com\/rte\/demo.htm\">Kevin Roth&#8217;s RTE<\/a>. But no companies offering a rich text editor service like they offer map services. Why is that? I would think the value of rich text editing would be even more widely applicable than mapping. The problem is that, unlike the map service, there&#8217;s no back end associated with a rich text editor. There&#8217;s no way to protect a client-side-only solution such as these rich text editors. The only people who do sell rich text editor components are ones who have integrated into some back-end programming environment such as Richer Components&#8217; <a href=\"http:\/\/www.richercomponents.com\/asp-net-components\/rich-text-box-wysiwyg-editor.html\">RichTextBox for ASP.NET<\/a>. <\/p>\n<p>The browser as a VM also has broad implications with regard to extensibility. Similar capabilities are delivered by the four major browsers (IE, Firefox, Opera and Safari) across the major operating systems (Windows, MacOS, Linux, FreeBSD). So the question is, how will new capability evolve in the browser? Will the growing number of <a href=\"http:\/\/www.techcrunch.com\/company-index\/\">Web 2.0 companies<\/a> looking to provide compelling features and differentiate themselves in the marketplace demand new functionality in the browser VM? Will one of the browser vendors be willing to take the heat of building proprietary extensions to their browser? I realize that many people have a dim view of proprietary extensions, but many features we take for granted today are de facto standards that arose from Microsoft&#8217;s proprietary extensions to IE. Most notable of these of course is XMLHttpRequest, without which &#8220;AJAX&#8221; would just be &#8220;J&#8221;. And JavaScript itself started life as a proprietary extension to Netscape before eventually being turned over to ECMA for standardization.<\/p>\n","excerpt":"<p>Note: this is the first in a series of Web 2.0 entries. I know I\u2019m on record as hating the term Web 2.0, but as I wrote in that post, I do belief there is a fundamental shift underway in computing. The industry is calling this Web 2.0, and I can either spit in the [&hellip;]<\/p>\n","date":"2006-02-02 16:05:36","modified":"2006-02-02 16:05:36","categories":[{"id":177,"slug":"architecture","title":"Architecture","description":"","parent":0,"post_count":296}],"tags":[{"id":188,"slug":"web-2-0","title":"Web 2.0","description":"","post_count":67}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["565f1aec-0de9-4fef-880d-a363823e7b3e"],"dasblog_compressedtitle":["Browser+As+Virtual+Machine"],"dasblog_compressedtitleunique":["2006\/02\/03\/Browser+As+Virtual+Machine"]}},"previous_url":"http:\/\/devhawk.net\/2006\/02\/02\/no-go-on-developer-2-0\/","next_url":"http:\/\/devhawk.net\/2006\/02\/03\/flash-the-other-white-meat\/"}