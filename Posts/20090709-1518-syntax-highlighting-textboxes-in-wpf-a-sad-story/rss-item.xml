<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Syntax Highlighting TextBoxes in WPF - A Sad Story</title>
  <link>http://devhawk.net/2009/07/09/syntax-highlighting-textboxes-in-wpf-a-sad-story/</link>
  <pubDate>Thu, 09 Jul 2009 15:18:38 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://d1f69023-194b-4721-9293-855f6143b6de</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[One of the big new features in <a href="http://www.microsoft.com/visualstudio/en-us/products/2010/default.mspx">VS 2010</a> is the <a href="http://msdn.microsoft.com/en-us/library/dd885242(VS.100).aspx">WPF based editor</a>. With it, you can build all sorts of cool stuff like <a href="http://blogs.msdn.com/vseditor/archive/2009/05/13/visualizing-xml-doc-comments.aspx">control the visualization of XML doc comments</a>, <a href="http://editorsamples.codeplex.com/Wiki/View.aspx?title=IntelliSense%20Presenter">change how intellisense looks</a>, even <a href="http://code.msdn.microsoft.com/caretfisheye">scale the size of text based on the location of the caret</a>. Huzzah for the WPF Visual Studio editor!

However, as wicked awesome as the new editor is, AFAIK it’s not going to be released as a separate component. So while the <a href="http://blogs.msdn.com/powershell/archive/2008/10/31/powershell-ise-and-visual-studio.aspx">PowerShell</a>, <a href="http://blogs.msdn.com/intellipad/archive/2009/03/25/font-sizes-in-intellipad.aspx">Intellipad</a> and other teams inside Microsoft can reuse the VS editor bits, nobody else can. So if you want to do something like <a href="http://www.iunknown.com/2009/05/dynamic-languages-at-teched-2009.html">embed a colorizing REPL in your WPF app</a>, you’ll have to use something else.

I’ve <a href="http://devhawk.net/2009/02/27/Writing+An+IronPython+Debugger+MDbg+101.aspx">thought about</a> putting a WPF based UI on top of ipydbg (though now I’d probably use the new <a href="http://devhawk.net/2009/07/08/MicrosoftScriptingDebugging.aspx">lightweight debugger</a> instead). So I downloaded <a href="http://github.com/jflam/repl-lib/tree/master">John’s repl-lib code</a> to see how he was doing it. Turns out his <a href="http://github.com/jflam/repl-lib/blob/5b597ab4b92a6d85f3e7f22d3ae9af271444b1d4/Core/Repl.xaml">REPL control</a> is essentially a wrapper around WPF’s <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.richtextbox.aspx">RichTextBox control</a>. It works, but it seems kinda kludgy. For example, the RichTextBox supports bold, italics and underline hotkeys, so John’s REPL does too. Though it is possible to <a href="http://blogs.msdn.com/prajakta/archive/2006/10/12/customize-richtextbox-to-allow-only-plain-text-input.aspx">turn off these formatting commands</a>, I decided to take a look at modifying how the plain-old TextBox renders. After all, WPF controls are supposed to be <a href="http://www.drwpf.com/blog/Home/tabid/36/EntryID/53/Default.aspx">lookless</a>, right?

Well, apparently not all the WPF controls are lookless. In particular to this post, the TextBox is definitely NOT lookless. It looks like the text editing capabilities of TextBox are provided by the Sys.Win.Documents.TextEditor class while the text rendering is provided by the Sys.Win.Controls.TextBoxView class. Both of those classes are internal, so don’t even think about trying to customize or reuse them.

The best (and I use that term loosely) way I found for customizing the TextBox rendering was a <a href="http://www.codeproject.com/KB/WPF/CodeBox.aspx">couple</a> of <a href="http://www.codeproject.com/KB/WPF/CodeBox2.aspx">articles</a> on CodeProject by <a href="http://www.codeproject.com/Members/KenJohnson">Ken Johnson</a>. Ken’s CodeBox control inherits from TextBox and sets the Foreground and Background to transparent (to hide the result of TextBoxView) and then overloads OnRender to render the text with colorization. Rendering the text twice – once transparently and once correctly – seems like a better solution than using the RichTextBox, but it’s still pretty kludgy. (Note, I’m calling the TextBox design kludgy – Ken’s code is a pretty good work around).

So if you want a colorized text box in WPF, your choices are:
<ul>
	<li>Build your own class that inherits from RichTextBox, disabling all the formatting commands and handling the TextChanged event to do colorization</li>
	<li>Build your own class that inherits from TextBox, but set Foreground an Background colors to transparent and overload OnRender to do the visible text rendering.</li>
	<li>Use a 3rd party control. The only one I found was the <a href="http://www.aqistar.com">AqiStar TextBox</a>. No idea how good it is, but <a href="http://www.aqistar.com/FeaturesVisualization.aspx">they claim</a> to be a true lookless control. Any other syntax highlighting WPF controls around that I don’t know about?</li>
</ul>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1270</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2009-07-09 15:18:38</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2009-07-09 15:18:38</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">syntax-highlighting-textboxes-in-wpf-a-sad-story</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="wpf"><![CDATA[WPF]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[d1f69023-194b-4721-9293-855f6143b6de]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Syntax+Highlighting+TextBoxes+In+WPF+Ndash+A+Sad+Story]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2009/07/09/Syntax+Highlighting+TextBoxes+In+WPF+Ndash+A+Sad+Story]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2225</wp:comment_id>
    <wp:comment_author><![CDATA[Matthew Wilson]]></wp:comment_author>
    <wp:comment_author_email>diakopter@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://diakopter.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>129.237.222.1</wp:comment_author_IP>
    <wp:comment_date>2009-07-09 15:49:08</wp:comment_date>
    <wp:comment_date_gmt>2009-07-09 22:49:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sorta related: my strategy for my Silverlight mimic of Intellipad is basically the same as Ken's transparent overlay, except I'm writing my own RichTextBlock on top of TextBlock, and then FixedWidthRichTextBox on top of RichTextBlock (using the overlaid transparent TextBox for text selection and caret placement).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2226</wp:comment_id>
    <wp:comment_author><![CDATA[Brad]]></wp:comment_author>
    <wp:comment_author_email></wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>203.45.17.194</wp:comment_author_IP>
    <wp:comment_date>2009-07-09 16:54:27</wp:comment_date>
    <wp:comment_date_gmt>2009-07-09 23:54:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Actipro have recently released a WPF SyntaxEditor:
http://www.actiprosoftware.com/Products/DotNet/WPF/SyntaxEditor/Default.aspx]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2227</wp:comment_id>
    <wp:comment_author><![CDATA[Jesse Ezell]]></wp:comment_author>
    <wp:comment_author_email>jezell@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.iserviceoriented.com</wp:comment_author_url>
    <wp:comment_author_IP>98.173.13.58</wp:comment_author_IP>
    <wp:comment_date>2009-07-10 09:53:27</wp:comment_date>
    <wp:comment_date_gmt>2009-07-10 16:53:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Microsoft is great at providing frameworks, but horrible at providing tools for their frameworks. For example, WCF has almost zero quality tools from MS to work with. The WF editor blows goats. They are trying to foster all this language development with M and the DLR and the .NET framework itself, yet they don't make it easy for anyone to do anything other than build a language. If you actually want to build your own tools that don't ship inside of VS, all you will get is a big fuck you. The Java community is light years ahead on this front...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2228</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email></wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>24.24.82.42</wp:comment_author_IP>
    <wp:comment_date>2009-07-10 16:52:12</wp:comment_date>
    <wp:comment_date_gmt>2009-07-10 23:52:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[SharpDevelop has a WPF based editor called AvalonEdit.

http://wiki.sharpdevelop.net/Default.aspx?Page=AvalonEdit&AspxAutoDetectCookieSupport=1

Its still in development but the source is available from subversion and it was pretty easy to get built and working, including python highlighting.  I have a basic Python console working using and and so far it is working very well.
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2229</wp:comment_id>
    <wp:comment_author><![CDATA[jeff]]></wp:comment_author>
    <wp:comment_author_email>jeff.jarrell@gmail.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>71.172.36.183</wp:comment_author_IP>
    <wp:comment_date>2009-07-13 14:53:09</wp:comment_date>
    <wp:comment_date_gmt>2009-07-13 21:53:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Actipro has a WPF based Syntax editor.  We are looking at it for simple Python scripts.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2230</wp:comment_id>
    <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
    <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
    <wp:comment_date>2009-07-14 22:17:03</wp:comment_date>
    <wp:comment_date_gmt>2009-07-15 05:17:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mark, my understanding is that SharpDevelop is GPL licensed. Is AvalonEdit also GPL?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>