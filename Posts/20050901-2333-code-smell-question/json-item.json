{"status":"ok","post":{"id":625,"type":"post","slug":"code-smell-question","url":"http:\/\/devhawk.net\/2005\/09\/01\/code-smell-question\/","status":"publish","title":"Code Smell Question","title_plain":"Code Smell Question","content":"<p>So as a quick break from all this architecture talk, I&#8217;ve got a code smell question. Here&#8217;s a scenario, I&#8217;m interested in feedback on the best way to solve the issue.<\/p>\n<p>I&#8217;m writing some VSTO code for Word using VS05. I want to be able to add and update custom properties on the document. You do this via the CustomDocumentProperties property off the document object. This DocumentProperties collection supports the standard collection type operations such as Add and an indexer. However, it&#8217;s a little exception happy. If you attempt to access a property that doesn&#8217;t exist, it throws an exception. And if you attempt to add a property that already exists, it throws an exception. So the first time you set a custom property you use the Add method and then after that you use the indexer to access the existing item in the collection and update it&#8217;s value. <\/p>\n<p>Of course, the way my code is written, I want to hide this ugliness behind a method so that the rest of my code can simply set custom properties with ease. However, I want to use the same method regardless if the item already exists in the collection. So what&#8217;s the best way to implement the method? I can think of two primary ways.<\/p>\n<ol>\n<li>Attempt to access the custom property via the indexer. If it throws an exception, trap it and call Add instead.<\/li>\n<li>Manually iterate through the existing custom properties. If the property exists, update it directly. If it doesn&#8217;t, call Add instead.<\/li>\n<\/ol>\n<p>Neither of these is particularly fragrant from a code smell perspective, but which is less odorous? The first one is more direct to write, but since this is all COM interop code, the COM exception is pretty generic. Theoretically, if something else caused an exception to be thrown, I&#8217;d still assume the custom property was just missing and swallow the exception, potentially causing an error somewhere else. However, writing the code to manually iterate through the collection just seems excessive. <\/p>\n<p>In the end, I went with #2 as I was more worried about swallowing exceptions than manual iterating though the collection. What do you think? Was that the right choice?<\/p>\n","excerpt":"<p>So as a quick break from all this architecture talk, I&#8217;ve got a code smell question. Here&#8217;s a scenario, I&#8217;m interested in feedback on the best way to solve the issue. I&#8217;m writing some VSTO code for Word using VS05. I want to be able to add and update custom properties on the document. You [&hellip;]<\/p>\n","date":"2005-09-01 23:33:28","modified":"2005-09-01 23:33:28","categories":[{"id":204,"slug":"development","title":"Development","description":"","parent":0,"post_count":165}],"tags":[],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2838,"name":"Harry Maes","url":"","date":"2005-09-02 02:50:30","content":"<p>I think #2 is the preferable solution.<\/p>\n<p>I&#8217;d recommend implementing an adapter for the collection wrapping it so you&#8217;re also not hit by future changes. I&#8217;ve for instance created a CacheManager to wrap the EntLib cachemanager.<br \/>\nDoes the COM collection have a Contains or an indexer (IndexOf) to check for an existing item? I would code something like this:<\/p>\n<p>if (collection.Contains(x)) \/\/or collection.IndexOf()<br \/>\n{<br \/>\n  collection.Remove(x);<br \/>\n  collection.Add(x);<br \/>\n}<\/p>\n<p>Trapping for a specific exception can be OK but I would assume the collection internally has to traverse or index the collection to find an already existing item. So this is not the solution IMO.<\/p>\n<p>Have fun!<\/p>\n<p>Harry<\/p>\n","parent":0},{"id":2839,"name":"mearls@hotmail.com (Michael Earls)","url":"http:\/\/www.cerkit.com\/","date":"2005-09-02 07:02:56","content":"<p>#2 &#8211; based on your drawbacks of #1 (generic exceptions), there&#8217;s a chance that your data could be corrupted.  I&#8217;d rather take the performance hit myself.<\/p>\n<p>It&#8217;s too bad it throws an exception rather than returning a null.  That does stink.<\/p>\n","parent":0}],"attachments":[],"comment_count":2,"comment_status":"closed","custom_fields":{"dasblog_entryid":["e499d380-948c-41f6-8138-6cb483ea28b7"],"dasblog_compressedtitle":["Code+Smell+Question"],"dasblog_compressedtitleunique":["2005\/09\/02\/Code+Smell+Question"]}},"previous_url":"http:\/\/devhawk.net\/2005\/09\/01\/architecture-innovation\/","next_url":"http:\/\/devhawk.net\/2005\/09\/02\/blah-blah-architecture\/"}