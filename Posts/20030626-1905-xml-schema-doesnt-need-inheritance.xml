<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>XML Schema Doesn't Need Inheritance</title>
  <link>http://devhawk.net/2003/06/26/xml-schema-doesnt-need-inheritance/</link>
  <pubDate>Thu, 26 Jun 2003 19:05:53 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://a948e2d7-2627-470d-bff6-17618bc87594</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Got a chance to talk to <a href="http://www.kuro5hin.org/user/Carnage4Life/diary">Dare</a> today about the XML vs. Objects stuff we've been blogging on. We started by talking about the convergence of objects, databases and XML. He mentioned a chapter of <a href="http://www.neward.net/ted/weblog"> Tim Neward's</a><a href="http://www.neward.net/ted/weblog/index.jsp?date=20030217#1045470771101"> Effective Enterprise Java</a> book where Ted recommends designing the data first. Ted started Effective Enterprise Java 2 days before <a href="http://winisp.net/harrypierson">Patrick</a> was born so I haven't been reading it. The issue with designing the data first is that typically, a developer is predisposed towards one of the three poles of data design (XML, objects or relational DB) that will color that design unintentionally.</p><p>I realized I still lean towards OO when Dare pointed out the fact that XML (actually, I should say XSD) doesn't really need derivation. Because of my OO background, it took me a while to digest that concept. But since XML is just data without behavior, it doesn't need polymorphism the way that objects do. Consider the following schema:</p><code> &lt;xs:complexType name="ctAddress"&gt;<br /> &lt;xs:sequence&gt;<br /> &lt;xs:element name="Street" type="xs:string" maxOccurs="1" minOccurs="1" /&gt;<br /> &lt;xs:element name="City" type="xs:string" maxOccurs="1" minOccurs="1" /&gt;<br /> &lt;xs:element name="State" type="xs:string" maxOccurs="1" minOccurs="1" /&gt;<br /> &lt;xs:element name="ZipCode" type="xs:string" maxOccurs="1" minOccurs="1" /&gt;<br /> &lt;xs:any namespace="##targetNamespace" /&gt;<br /> &lt;/xs:sequence&gt;<br /> &lt;/xs:complexType&gt;</code><p>This is version one of the address complex type schema for some arbitrary web service. Over time, we realize that we want to be more global in our addressing schema, so we want to add a country element. Since not all of the other services we interact with will be updating to the new schema, we need to make country an option element (i.e. minOccurs="0"). While we could use schema inheritance to do this, we could also just duplicate the existing elements and add a country element: </p><p><code> &lt;xs:complexType name="ctAddress"&gt;<br /> &lt;xs:sequence&gt;<br /> &lt;xs:element name="Street" type="xs:string" maxOccurs="1" minOccurs="1" /&gt;<br /> &lt;xs:element name="City" type="xs:string" maxOccurs="1" minOccurs="1" /&gt;<br /> &lt;xs:element name="State" type="xs:string" maxOccurs="1" minOccurs="1" /&gt;<br /> &lt;xs:element name="ZipCode" type="xs:string" maxOccurs="1" minOccurs="1" /&gt;<br /> &lt;xs:element name="Country" type="xs:string" maxOccurs="1" minOccurs="0" /&gt;<br /> &lt;xs:any namespace="##targetNamespace" /&gt;<br /> &lt;/xs:sequence&gt;<br /> &lt;/xs:complexType&gt;</code></p><p>What's interesting is that even though these two schema types are not related by inheritance, I can still validate XML addresses against either schemas. In fact, XML addresses with and without addresses validate against <u><b>both</b></u> schemas! That's difficult to model in a typing system where objects have a bound to a single specific type. Other types of changes can be introduced so that break validation to one of the schema but not the other. For example, if we changed the minOccurs of ZipCode to zero, all messages that validate to the first schema would also validate to the second, but the reverse would not always be true. This is like a IsA relationship in OO, but in the wrong direction (a base message "is a" derived message, but a derived message is not always a base message).</p><p>The upshot of all this is that I think my argument against XML Serialization as a general concept is strengthened. While it does work in many scenarios, I can easily build XML messages and XSD schemas that don't cleanly conform to an OO typing system. Since the flexibility in XML is critical (that's what I'm using for loosely coupled public interop interfaces), I know I don't want my schema design to be constrained to the limited set of scenarios that are supported by XML Serialization.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">138</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2003-06-26 19:05:53</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2003-06-26 19:05:53</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">xml-schema-doesnt-need-inheritance</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2003/06/27/XML+Schema+Doesnt+Need+Inheritance]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[XML+Schema+Doesnt+Need+Inheritance]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[a948e2d7-2627-470d-bff6-17618bc87594]]></wp:meta_value>
  </wp:postmeta>
</item>