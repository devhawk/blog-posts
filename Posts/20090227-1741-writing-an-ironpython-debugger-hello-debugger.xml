<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Writing an IronPython Debugger: Hello, Debugger!</title>
  <link>http://devhawk.net/2009/02/27/writing-an-ironpython-debugger-hello-debugger/</link>
  <pubDate>Fri, 27 Feb 2009 17:41:21 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://f7cea3aa-460b-4f8d-a76e-a24df4543e38</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[Since I’m guessing most of my readers have never build a debugger before (I certainly hadn’t), let’s start with the debugger equivalent of Hello, World!
<pre class="brush: python">import clr
clr.AddReference('CorDebug')   

import sys
from System.Reflection import Assembly
from System.Threading import AutoResetEvent
from Microsoft.Samples.Debugging.CorDebug import CorDebugger   

ipy = Assembly.GetEntryAssembly().Location
py_file = sys.argv[1]
cmd_line = ""%s" -D "%s"" % (ipy, py_file)   

evt = AutoResetEvent(False)   

def OnCreateAppDomain(s,e):
  print "OnCreateAppDomain", e.AppDomain.Name
  e.AppDomain.Attach()   

def OnProcessExit(s,e):
  print "OnProcessExit"
  evt.Set()   

debugger = CorDebugger(CorDebugger.GetDefaultDebuggerVersion())
process = debugger.CreateProcess(ipy, cmd_line)   

process.OnCreateAppDomain += OnCreateAppDomain
process.OnProcessExit += OnProcessExit   

process.Continue(False)   

evt.WaitOne()</pre>
I start by adding a reference to the CorDebug library I discussed at the end of <a href="http://devhawk.net/2009/02/27/Writing+An+IronPython+Debugger+MDbg+101.aspx">my last post</a> (that’s the low level managed debugger API plus the C# definitions of the various COM APIs). Then I need both the path to the IPy executable as well as the script to be run, which is passed in on the command line (sys.argv). For now, I just use Reflection to find the path to the current ipy.exe and use that. I use those to build a command line – you’ll notice I’m adding the –D on the command line to generate debugger symbols.

Next, I define two event handlers: OnCreateAppDomain and OnProcessExit. When the AppDomain is created, the debugger needs to explicitly attach to it. When the process exits, we signal an AutoResetEvent to indicate our program can exit.

Then it’s a simple process of creating the CorDebugger object, creating a process, setting up the process event handlers and then running the process via the call to Continue. We then wait on the AutoResetEvent for the debugged process to exit. And voila, you have the worlds simplest debugger in about 30 lines of code.

To run it, you run the ipy.exe interpreter and pass in the ipydbg script above and the python script to be debugged. You also have to pass –X:MTA on the command line, as the ICorDebug objects only work from a multi-threaded apartment. When you run it, you get something that looks like this:
<pre class="brush:plain">» ipy -X:MTA ipydbg.py simpletest.py 
OnCreateAppDomain DefaultDomain 
35 
OnProcessExit</pre>
Simpletest.py is a very simple script that prints the results of adding two numbers together. Here, you see the event handlers fire by writing text out to the console.

For those of you who’d like to see this code actually run on your machine, I’ve created an ipydbg project <a href="http://github.com/devhawk/ipydbg/tree/master">up on GitHub</a>. The tree version that goes with this blog post <a href="http://github.com/devhawk/ipydbg/tree/5858695ff85ed4740ad06466d4f54394e7f00f9b">is here</a>. If you’re not running <a href="http://git-scm.com/">Git</a>, you can download a tar or zip of the project via the “download” button at the top of the page. It includes both the CorDebug source as well as the ipydbg.py file (shown above) and the simpletest.py file. It also has a compiled version of CorDebug.dll, so you don’t have to compile it yourself (for those IPy only coders who don’t have VS on their machine).]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1221</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2009-02-27 17:41:21</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2009-02-27 17:41:21</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">writing-an-ironpython-debugger-hello-debugger</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[f7cea3aa-460b-4f8d-a76e-a24df4543e38]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Hello+Debugger]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2009/02/28/Writing+An+IronPython+Debugger+Hello+Debugger]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2176</wp:comment_id>
    <wp:comment_author><![CDATA[Steve Shaw]]></wp:comment_author>
    <wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
    <wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
    <wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
    <wp:comment_date>2009-04-11 21:07:57</wp:comment_date>
    <wp:comment_date_gmt>2009-04-12 04:07:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Harry,

Very cool. One question: I called this by writing a .bat file as follows:

cd ... -- (the place I installed the git-downloaded files).
"C:IronPython 2.0.1ipy.exe" -X:MTA ipydbg.py samplessimpletest.py

When I run the .bat file from VS 2008 Command Prompt window,
it stops at a prompt "ipydbg>>" from which I was able to hit 'o' to step out, in order to get the rest of the output.

It was cool to find myself in a place where I could enter commands, but if I want it to run straight thru, what do I need to change?

Thanks for your useful posts,
Steve]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2177</wp:comment_id>
    <wp:comment_author><![CDATA[Steve Shaw]]></wp:comment_author>
    <wp:comment_author_email>toolmakersteve98@shawstudio.com</wp:comment_author_email>
    <wp:comment_author_url>http://toolmakersteve.com</wp:comment_author_url>
    <wp:comment_author_IP>24.10.93.210</wp:comment_author_IP>
    <wp:comment_date>2009-04-11 21:13:12</wp:comment_date>
    <wp:comment_date_gmt>2009-04-12 04:13:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[NM, I found the next post in this series, which explained how to add an auto-breakpoint; the code I downloaded has that breakpoint set, LOL!
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>