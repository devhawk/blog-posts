{"status":"ok","post":{"id":1162,"type":"post","slug":"monadic-philosophy","url":"http:\/\/devhawk.net\/2008\/07\/29\/monadic-philosophy\/","status":"publish","title":"Monadic Philosophy","title_plain":"Monadic Philosophy","content":"<p>(Since I accidentally <a href=\"http:\/\/devhawk.net\/2008\/07\/30\/Pushed+The+Wrong+Button.aspx\">published part one<\/a> of this series a few minutes ago, I figured I might as well start publishing the series.)<\/p>\n<p>If you start learning functional programming, eventually you&#8217;ll come across the idea of a <a href=\"http:\/\/en.wikipedia.org\/wiki\/Monad_%28functional_programming%29\">monad<\/a>. Coming from the object\/imperative world of languages like C#, I&#8217;ve had a hard time wrapping my head around this concept. There&#8217;s no shortage of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Monad_%28functional_programming%29#External_links\">monad tutorials<\/a> out there, but most use <a href=\"http:\/\/www.prairienet.org\/~dsb\/monads.htm\">Haskell&#8217;s IO<\/a> as the prototypical example of a monad. Given that I don&#8217;t know Haskell very well, I found it hard to separate the Haskell stuff from monad stuff. So I set monads on the back burner and decided not to worry about them.<\/p>\n<p>However, all that changed when Stephan Tolksdorf alerted me to his very cool monadic parser combinator library <a href=\"http:\/\/www.quanttec.com\/fparsec\">FParsec<\/a>. I found the FParsec parsers much easier to read <a href=\"http:\/\/devhawk.net\/2007\/12\/10\/Practical+Parsing+In+F.aspx\">my F# parser efforts<\/a>, so I became very interested in monadic parser combinators. As you might guess, a &#8220;monadic parser combinator library&#8221; makes heavy use of monads. Time to switch burners.<\/p>\n<p>The problem with learning monads with FParsec is that it&#8217;s really designed for production use. I needed to break monads down to first principles, so I rolled my own monadic parser library. Make no mistake, if I were looking to build a production parser in F# right now, I&#8217;d use with FParsec. My monadic parser library might &#8220;get there&#8221; eventually, but right now it&#8217;s a toy. <\/p>\n<p>Over a series of posts, I&#8217;m going to describe what I know about monads. I didn&#8217;t set out to write a tutorial on monads &#8211; as I said, there are plenty of them out there. However, I found most of the the many monad tutorials I read lacking because the did a good job explaining the &#8220;how&#8221;, but not such a good job on the &#8220;why&#8221;. Coming from an imperative world, I wanted to understand the philosophy better. That being said, there&#8217;s a lot of tutorial in and around the philosophy. Hopefully, you&#8217;ll find both useful.<\/p>\n","excerpt":"<p>(Since I accidentally published part one of this series a few minutes ago, I figured I might as well start publishing the series.) If you start learning functional programming, eventually you&#8217;ll come across the idea of a monad. Coming from the object\/imperative world of languages like C#, I&#8217;ve had a hard time wrapping my head [&hellip;]<\/p>\n","date":"2008-07-29 17:10:16","modified":"2011-04-16 22:16:35","categories":[{"id":204,"slug":"development","title":"Development","description":"","parent":0,"post_count":165}],"tags":[{"id":235,"slug":"c-sharp","title":"C#","description":"","post_count":17},{"id":198,"slug":"f-sharp","title":"F#","description":"","post_count":51},{"id":202,"slug":"functional-programming","title":"Functional Programming","description":"","post_count":18},{"id":267,"slug":"monads","title":"Monads","description":"","post_count":5}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2101,"name":"ilanchelian","url":"","date":"2008-07-30 06:03:13","content":"<p>It is interesting to know that you are going to blog about monads. i am curiously looking forward.<\/p>\n","parent":0},{"id":2102,"name":"Anthony Mills","url":"http:\/\/amills.net\/","date":"2008-07-30 07:26:34","content":"<p>I remember having trouble with monads until I understood that monads made things quasi-imperative by taking advantage of the fact that in order to evaluate the body of a function, you have to evaluate the parameters first.<\/p>\n<p>So, imperative form:<\/p>\n<p>function1(state); function2(state); function3(state);<\/p>\n<p>And monadic form:<\/p>\n<p>function3(function2(function1(state), state), state)<\/p>\n<p>Something like that, anyway. The point being, in both forms function1 must execute before function2, which must execute before function3.<\/p>\n","parent":0}],"attachments":[],"comment_count":2,"comment_status":"closed","custom_fields":{"dasblog_entryid":["2ab057d0-cfbb-4941-a275-e5decbd1838c"],"dasblog_compressedtitle":["Monadic+Philosophy"],"dasblog_compressedtitleunique":["2008\/07\/30\/Monadic+Philosophy"]}},"previous_url":"http:\/\/devhawk.net\/2008\/07\/29\/pushed-the-wrong-button\/","next_url":"http:\/\/devhawk.net\/2008\/07\/30\/monadic-philosophy-part-2-the-linq-monad\/"}