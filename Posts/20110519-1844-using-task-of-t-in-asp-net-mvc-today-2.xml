<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Using Task in ASP.NET MVC Today</title>
  <link>http://devhawk.net/2011/05/19/using-task-of-t-in-asp-net-mvc-today-2/</link>
  <pubDate>Fri, 20 May 2011 01:44:07 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://devhawk.net/?p=1864</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[I've been experimenting with the <a href="http://msdn.microsoft.com/en-us/vstudio/async.aspx">new async support</a> coming in the next version of C# (and VB). I must say, I'm very impressed. Async is one of those things you know you're supposed to be doing. However, traditionally it has taken a lot of code and been hard to get right. The new await keyword changes all that.

For example, here's an async function to download the <a href="http://dev.twitter.com/doc/get/statuses/public_timeline">Twitter public timeline</a>:
<pre class="brush:csharp">public async Task PublicTimelineAsync()
{
  var url = "http://api.twitter.com/1/statuses/public_timeline.xml";
  var xml = await new WebClient().DownloadStringTaskAsync(url);
  return XDocument.Parse(xml);
}</pre>
That's not much more difficult that writing the synchronous version. By using the new async and await keywords, all the ugly async <a href="http://en.wikipedia.org/wiki/Continuation-passing_style">CPS</a> code you're supposed to write is generated for you automatically by the compiler. That's a huge win.

The only downside to async is that support for it is spotty in the .NET Framework today. Each major release of .NET to date has introduced a new async API pattern. .NET 1.0 had the <a href="http://msdn.microsoft.com/en-us/library/ms228963.aspx">Async Programming Model (APM)</a>. .NET 2.0 introduced the <a href="http://msdn.microsoft.com/en-us/library/wewwczdw.aspx">Event-based Async Pattern (EAP)</a>. Finally .NET 4.0 gave us the <a href="http://msdn.microsoft.com/en-us/library/dd537609.aspx">Task Parallel Library (TPL)</a>. The await keyword only works with APIs writen using the TPL pattern. APIs using older async patterns have to be wrapped as TPL APIs to work with await. The <a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=4738205d-5682-47bf-b62e-641f6441735b&amp;displaylang=en">Async CTP</a> includes a bunch of extension methods that wrap common async APIs, such as DownloadStringTaskAsync from the code above.

The async wrappers are nice, but there are a few places where we really need the TPL pattern plumbed deeper. For example, ASP.NET MVC supports <a href="http://msdn.microsoft.com/en-us/library/ee728598.aspx">AsyncControllers</a>. AsyncControllers are used to avoid blocking IIS threads waiting on long running I/O operations - such as getting the public timeline from Twitter. Now that I've been bitten by the <a href="http://blogs.msdn.com/b/lucian/archive/2011/04/15/async-ctp-refresh-design-changes.aspx">async zombie virus</a>, I want to write my async controller methods using await:
<pre class="brush:csharp">public async Task&lt;ActionResult&gt; Index()
{
    var t = new Twitter();
    var timeline = await t.PublicTimelineAsync();
    var data = timeline.Root.Elements("status")
        .Elements("text").Select(e =&gt; e.Value);
    return View(data);
}</pre>
Unfortunately, neither the main trunk of MVC nor the MVC futures project has support for the TPL model [1]. Instead, I have to manually write some semblance of the async code that await would have emitted on my behalf. In particular, I have to manage the outstanding operations, implement a continuation method and map the parameters in my controller manually.
<pre class="brush:csharp">public void IndexAsync()
{
    var twitter = new Twitter();

    AsyncManager.OutstandingOperations.Increment();
    twitter
        .PublicTimelineAsync()
        .ContinueWith(task =&gt;
        {
            AsyncManager.Parameters["timeline"] = task.Result;
            AsyncManager.OutstandingOperations.Decrement();
        });
}

public ActionResult IndexCompleted(XDocument timeline)
{
    var data = timeline.Root.Elements("status")
        .Elements("text").Select(e =&gt; e.Value);
    return View(data);
}</pre>
I promise you, writing that boilerplate code over and over gets old pretty darn quick. So I wrote the following helper function to eliminate as much boilerplate code as I could.
<pre class="brush:csharp">public static void RegisterTask&lt;T&gt;(
    this AsyncManager asyncManager,
    Task&lt;T&gt; task,
    Func&lt;T, object&gt; func)
{
    asyncManager.OutstandingOperations.Increment();
    task.ContinueWith(task2 =&gt;
    {
        //invoke the provided function with the
        //result of running the task
        var o = func(task2.Result);

        //use reflection to set asyncManager.Parameters
        //for the returned object's fields and properties
        var ty = o.GetType();
        foreach (var f in ty.GetFields())
        {
            asyncManager.Parameters[f.Name] = f.GetValue(o);
        }
        foreach (var p in ty.GetProperties())
        {
            var v = p.GetGetMethod().Invoke(o, null);
            asyncManager.Parameters[p.Name] = v;
        }

        asyncManager.OutstandingOperations.Decrement();
    });
}</pre>
With this helper function, you pass in the Task&lt;T&gt; that you are waiting on as well as a delegate to invoke when the task completes. RegisterTask takes care of incrementing and decrementing the outstanding operations count as appropriate. It also registers a continuation that reflects over the object returned from the invoked delegate to populate the Parameters collection.

With this helper function, you can write the async controller method like this:
<pre class="brush:csharp">public void IndexAsync()
{
    var twitter = new Twitter();

    AsyncManager.RegisterTask(
        twitter.PublicTimelineAsync(),
        data =&gt; new { timeline = data });
}

//IndexCompleted hasn't changed
public ActionResult IndexCompleted(XDocument timeline)
{
    var data = timeline.Root.Elements("status")
        .Elements("text").Select(e =&gt; e.Value);
    return View(data);
}</pre>
It's not as clean as the purely TPL based version. In particular, you still need to write separate Async and Completed methods for each controller method. You also need to build an object to map values from the completed tasks into parameters in the completed method. Mapping parameters is a pain, but the anonymous object syntax is terser than setting values in the AsyncManager Parameter collection.

It's not full TPL support, but it'll do for now. Here's hoping that the MVC team has async controller methods with TPL on their backlog.

<hr />

[1] I'm familiar with Craig Cavalier's <a href="http://craigcav.wordpress.com/2010/12/23/asynchronous-mvc-using-the-task-parallel-library/">Async MVC with TPL</a> post, but a fork of the MVC Futures project is a bit too bleeding edge for my needs at this point.]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1888</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2011-05-19 18:44:07</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2011-05-20 01:44:07</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">using-task-of-t-in-asp-net-mvc-today-2</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
  <category domain="post_tag" nicename="asp-net-mvc"><![CDATA[ASP.NET MVC]]></category>
  <category domain="post_tag" nicename="async"><![CDATA[Async]]></category>
  <category domain="post_tag" nicename="c-sharp"><![CDATA[C#]]></category>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3174</wp:comment_id>
    <wp:comment_author><![CDATA[Twitter Mirror]]></wp:comment_author>
    <wp:comment_author_email></wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/kartiksehgal/statuses/71951606014410752</wp:comment_author_url>
    <wp:comment_author_IP>66.129.67.214</wp:comment_author_IP>
    <wp:comment_date>2011-05-21 08:07:24</wp:comment_date>
    <wp:comment_date_gmt>2011-05-21 15:07:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<strong>Using Task in ASP.NET MVC Today - http://devhawk.net/2011/05/19/using-task-of-t-in-asp-net-mvc-today/ #dotnet...</strong>

Using Task&lt;T&gt; in ASP.NET MVC Today - http://devhawk.net/2011/05/19/using-task-of-t-in-asp-net-mvc...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>trackback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3175</wp:comment_id>
    <wp:comment_author><![CDATA[gautam kinkar]]></wp:comment_author>
    <wp:comment_author_email>kinkargautam91@gmail.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>117.197.96.190</wp:comment_author_IP>
    <wp:comment_date>2011-05-24 04:43:44</wp:comment_date>
    <wp:comment_date_gmt>2011-05-24 11:43:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[sir please guide me that c or c++ is nessesory for asp.net]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3176</wp:comment_id>
    <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
    <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>131.107.0.102</wp:comment_author_IP>
    <wp:comment_date>2011-05-24 09:39:51</wp:comment_date>
    <wp:comment_date_gmt>2011-05-24 16:39:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@gautam, The code in this post is C#. There is a managed version of C++ (aka <a href="http://en.wikipedia.org/wiki/C%2B%2B/CLI" rel="nofollow">C++/CLI</a>) but I don't think it works with ASP.NET.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>3175</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3177</wp:comment_id>
    <wp:comment_author><![CDATA[Rashmi]]></wp:comment_author>
    <wp:comment_author_email>rashmia@greatdevelopers.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.Beejak.com</wp:comment_author_url>
    <wp:comment_author_IP>147.114.249.109</wp:comment_author_IP>
    <wp:comment_date>2011-05-24 20:39:40</wp:comment_date>
    <wp:comment_date_gmt>2011-05-25 03:39:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That's nice. Will give it a try. I am sure the performance would increase.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3178</wp:comment_id>
    <wp:comment_author><![CDATA[Haacked]]></wp:comment_author>
    <wp:comment_author_email>haacked@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://haacked.com/</wp:comment_author_url>
    <wp:comment_author_IP>131.107.0.118</wp:comment_author_IP>
    <wp:comment_date>2011-05-25 09:27:30</wp:comment_date>
    <wp:comment_date_gmt>2011-05-25 16:27:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[We plan to support this in ASP.NET MVC 4.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3179</wp:comment_id>
    <wp:comment_author><![CDATA[Felix]]></wp:comment_author>
    <wp:comment_author_email>felix@rabinovich.org</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>66.74.77.43</wp:comment_author_IP>
    <wp:comment_date>2011-05-29 15:32:01</wp:comment_date>
    <wp:comment_date_gmt>2011-05-29 22:32:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ideally, I would like to use asynch controller for POST call where I pass a few parameters and await result. Async controller assumes that the service implements Event-based Asynchronous Pattern or BeginMethod/EndMethod Pattern (or at least documentation assumes). Your example here calls DownloadStringTaskAsync which assumes GET or REST service.
So, I am not sure if I can call WebRequest.GetResponse asynchronously and just don't know how; or it is only possible for specially crafted services (and then Async CTP just simplifies what is already available).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3180</wp:comment_id>
    <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
    <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>76.22.116.15</wp:comment_author_IP>
    <wp:comment_date>2011-06-01 22:08:17</wp:comment_date>
    <wp:comment_date_gmt>2011-06-02 05:08:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[With an async controller, you can choose which of your controller methods are async and which are sync - they don't all have to be sync.

As for DownloadStringTaskAsync, it's provided as part of the Async CTP and works with any site that DownloadString would work with AFAIK]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>3179</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
  </wp:comment>
</item>