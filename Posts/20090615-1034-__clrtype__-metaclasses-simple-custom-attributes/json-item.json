{"status":"ok","post":{"id":1265,"type":"post","slug":"__clrtype__-metaclasses-simple-custom-attributes","url":"http:\/\/devhawk.net\/2009\/06\/15\/__clrtype__-metaclasses-simple-custom-attributes\/","status":"publish","title":"__clrtype__ Metaclasses: Simple Custom Attributes","title_plain":"__clrtype__ Metaclasses: Simple Custom Attributes","content":"<p>I know it\u2019s been a while since my <a href=\"http:\/\/devhawk.net\/2009\/04\/24\/clrtype+Metaclasses+Demo+Silverlight+Databinding.aspx\">last __clrtype__ post<\/a>, but I was blocked on some bug fixes that shipped as part of <a href=\"http:\/\/devhawk.net\/2009\/05\/21\/IronPython+26+Beta+1.aspx\">IronPython 2.6 Beta 1<\/a>. So now let\u2019s start looking at one of the <a href=\"http:\/\/ironpython.codeplex.com\/WorkItem\/View.aspx?WorkItemId=20489\">most requested IronPython features<\/a> \u2013 custom attributes!<\/p>\n<p>Over the course of the next three blog posts, I\u2019m going to build out a mechanism for specifying custom attributes on the CLR type we\u2019re generating via __clrtype__. All the various Builder classes in <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.reflection.emit.aspx\">System.Reflection.Emit<\/a> support a <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.reflection.emit.typebuilder.setcustomattribute.aspx\">SetCustomAttribute<\/a> method that works basically the same way. There are two overloads \u2013 the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/sd003w15.aspx\">one I\u2019m going to use<\/a> takes a single <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.reflection.emit.customattributebuilder.aspx\">CustomAttributeBuilder<\/a> as a parameter.<\/p>\n<p>For this first post, I\u2019m going to focus on the basic custom attribute infrastructure, so we\u2019re going to use the extremely simple <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.obsoleteattribute.aspx\">ObsoleteAttribute<\/a>. While you can pass some arguments to the constructor, for this first post I\u2019m going to use the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/0xwcsd3h.aspx\">parameterless constructor<\/a>. To keep things less confusing, I\u2019m going back to the <a href=\"http:\/\/devhawk.net\/2009\/04\/22\/clrtype+Metaclasses+Customizing+The+Type+Name.aspx\">original version<\/a> of the Product class, before I introduced CLR <a href=\"http:\/\/devhawk.net\/2009\/04\/23\/clrtype+Metaclasses+Adding+CLR+Fields.aspx\">fields<\/a> and <a href=\"http:\/\/devhawk.net\/2009\/04\/24\/clrtype+Metaclasses+Adding+CLR+Properties.aspx\">properties<\/a>. The one change I\u2019m making is that I\u2019m adding a list of attributes I want to add to the class.<\/p>\n<pre class=\"brush: python\">\nfrom System import ObsoleteAttribute \n\nclass Product(object):\n  __metaclass__ = ClrTypeMetaclass\n  _clrnamespace = \"DevHawk.IronPython.ClrTypeSeries\"   \n  _clrclassattribs = [ObsoleteAttribute]\n  \n  # remainder of class omitted for clarity\n<\/pre>\n<p>Python <a href=\"http:\/\/docs.python.org\/reference\/expressions.html#list-displays\">list comprehensions<\/a> use the same square bracket syntax as C# properties, so it kinda looks right to someone with a C# eye \u2013 though having the attribute specifications inside the class, rather than above it, is totally different. I wish I could use Python\u2019s <a href=\"http:\/\/docs.python.org\/whatsnew\/2.6.html#pep-3129-class-decorators\">class decorators<\/a> for custom class attributes, but class decorators run after metaclasses so unfortunately that doesn\u2019t work. Also, I can\u2019t leave off the \u201cAttribute\u201d suffix like you can in C#. If I really wanted to, I could provide a new type name in the import statement (\u201cfrom System import ObsoleteAttribute as Obsolete\u201d) but I thought spelling it out was clearer for this post.<\/p>\n<p>Now that I have specified the class attributes, I can update the metaclass __clrtype__ method to set the attribute on the generated CLR class:<\/p>\n<pre class=\"brush: python\">\nif hasattr(cls, '_clrclassattribs'):\n      for attribtype in cls._clrclassattribs:\n        ci = clr.GetClrType(attribtype).GetConstructor(())\n        cab = CustomAttributeBuilder(ci, ())\n        typebld.SetCustomAttribute(cab)\n<\/pre>\n<p>I\u2019m simply iterating over the list of _clrclassattribs (if it exists), getting the default parameterless constructor for each attribute type, creating a CustomAttributeBuilder instance from that constructor and then calling SetCustomAttribute. Of course, this is very simple because we\u2019re not supporting any custom arguments or setting of named properties. We\u2019ll get to that in the next post. In the mean time, you can get the full code for this post <a href=\"http:\/\/cid-0d9bc809858885a4.skydrive.live.com\/self.aspx\/DevHawk%20Content\/IronPython%20Stuff\/%7C_%7C_clrtype%7C_%7C_\/simple%7C_custom%7C_attributes.py\">from my skydrive<\/a>.<\/p>\n<p>There is one significant issue with this custom attribute code. Attributes are typically marked with the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.attributeusageattribute.aspx\">AttributeUsage attribute<\/a> that specifies a set of constraints, such as the kind of targets a given attribute can be attached to and if it can be specified multiple times. For example, the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.mtathreadattribute.aspx\">MTAThread attribute<\/a> can\u2019t be specified multiple times and it can only be attached to methods. However, those attribute constraints are validated by the compiler, not the runtime. I haven\u2019t written any code yet to validate those constraints, so you can specify invalid combinations like multiple MTAThread attributes on a class. For now, I\u2019m just going to leave it to the developer <em>not<\/em> to specify invalid attribute combinations. Custom attributes are passive anyway so I\u2019m figure no one will come looking for a MTAThread attribute on a class or other such scenarios. <\/p>\n<p>However, I\u2019m interested in your opinion: When we get to actually productizing a higher-level API for __clrtype__, what kinds of attribute validation should we do, if any? <\/p>\n","excerpt":"<p>I know it\u2019s been a while since my last __clrtype__ post, but I was blocked on some bug fixes that shipped as part of IronPython 2.6 Beta 1. So now let\u2019s start looking at one of the most requested IronPython features \u2013 custom attributes! Over the course of the next three blog posts, I\u2019m going [&hellip;]<\/p>\n","date":"2009-06-15 10:34:18","modified":"2009-06-15 10:34:18","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":281,"slug":"__clrtype__","title":"__clrtype__","description":"","post_count":9}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["6cf6cd60-25ce-4704-8a55-305e1f0a2544"],"dasblog_compressedtitle":["clrtype+Metaclasses+Simple+Custom+Attributes"],"dasblog_compressedtitleunique":["2009\/06\/15\/clrtype+Metaclasses+Simple+Custom+Attributes"]}},"previous_url":"http:\/\/devhawk.net\/2009\/06\/03\/strengthening-the-microsoft-ecosystem-with-source-code\/","next_url":"http:\/\/devhawk.net\/2009\/06\/17\/__clrtype__-metaclasses-positional-attribute-parameters\/"}