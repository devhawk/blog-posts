{"status":"ok","post":{"id":1141,"type":"post","slug":"importing-static-methods-with-ipy","url":"http:\/\/devhawk.net\/2008\/04\/28\/importing-static-methods-with-ipy\/","status":"publish","title":"Importing Static Methods with IPy","title_plain":"Importing Static Methods with IPy","content":"<p>Like .NET, Python uses namespaces to avoid name collisions. However, the semantics are a bit different. If you want to use a type or function from a a given namespace in Python, you have to import it into your current scope. For example, if you want to use the Python datetime built-in module, you would import it into the current scope and use it like this:<\/p>\n<pre class=\"brush: python\">import datetime \r\nbush_last_day = datetime.date(2009,1,20)<\/pre>\n<p>Notice that when I import a Python module this way, it&#8217;s scoped into it&#8217;s namespace, which forces me to use the entire namespace scoped name to access the type. Of course, that gets tedious quickly, so Python provides a way to import a type from a specific namespace into your current scope like this:<\/p>\n<pre class=\"brush: python\">from datetime import date \r\nbush_last_day = date(2009,1,20)<\/pre>\n<p>With IronPython, you can do import .NET namespaces as well. Here&#8217;s that same code using the standard .NET <a href=\"http:\/\/msdn2.microsoft.com\/library\/System.DateTime\">DateTime class<\/a>.<\/p>\n<pre class=\"brush: python\">from System import DateTime \r\nbush_last_day = DateTime(2009,1,20)<\/pre>\n<p>What I didn&#8217;t know is that you can import static methods &amp; properties from .NET types into the current scope using the same syntax. Here&#8217;s an example:<\/p>\n<pre class=\"brush: python\">from System.DateTime import Now \r\n\r\nif Now &gt;= bush_last_day:\r\n    print 'celebrate'\r\nelse:\r\n    print (bush_last_day - Now).Days, 'days left'<\/pre>\n<p>Being able to import a static method into the current scope is pretty convenient. Thanks to <a href=\"http:\/\/blog.jimmy.schementi.com\/\">my teammate Jimmy<\/a> for cluing me into this IPy feature.<\/p>\n<p>One caveat though: in Python, you can import an entire namespace into your current scope. You can do that with .NET namespaces, but not with .NET types<\/p>\n<pre class=\"brush:py\">from datetime import *         # this works\r\nfrom System import *           # so does this\r\nfrom System.DateTime import *  # this doesn\u2019t work<\/pre>\n<p><strong><span style=\"text-decoration: underline;\">Update<\/span><\/strong>: <a href=\"http:\/\/www.voidspace.org.uk\/python\/weblog\/index.shtml\">Michael Foord<\/a> <a href=\"http:\/\/devhawk.net\/2008\/04\/28\/Importing+Static+Methods+With+IPy.aspx#commentstart\">pointed out<\/a> that if you import Now as I describe above, it places a DateTime object representing the time you imported it into local scope, rather than placing the underlying get_Now static method in local scope. So while DateTime.Now always returns a new value, Now never changes. Sounds like an <a href=\"http:\/\/www.codeplex.com\/IronPython\/WorkItem\/View.aspx?WorkItemId=16323\">IPy bug<\/a> to me, but I&#8217;ll have to circle back with the team to be sure.<\/p>\n","excerpt":"<p>Like .NET, Python uses namespaces to avoid name collisions. However, the semantics are a bit different. If you want to use a type or function from a a given namespace in Python, you have to import it into your current scope. For example, if you want to use the Python datetime built-in module, you would [&hellip;]<\/p>\n","date":"2008-04-28 15:09:45","modified":"2011-04-17 00:55:50","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":259,"slug":"python","title":"Python","description":"","post_count":7}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2065,"name":"Michael Foord","url":"http:\/\/www.ironpythoninaction.com\/","date":"2008-04-28 15:38:56","content":"<p>Well&#8230; personally I think it is a terrible abuse of the import mechanism. LOL <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_smile.gif\" alt=\":-)\" class=\"wp-smiley\" \/> <\/p>\n","parent":0},{"id":2066,"name":"Michael Foord","url":"http:\/\/www.ironpythoninaction.com\/","date":"2008-04-28 16:30:23","content":"<p>I was mostly being a troublemaker with that comment, but I know that this feature has confused at least one IronPython user.<\/p>\n<p>He did exactly as you did in your example:<\/p>\n<p>    from System.DateTime import Now <\/p>\n<p>and was then surprised that when he used Now it didn&#8217;t update as it should. This is because in Python you can&#8217;t use the import machinery to access static members on classes.<\/p>\n<p>When you import a class method from IronPython you are doing something not normally possible from Python &#8211; so what is actually happening may not be immediately obvious to anyone reading the code.<\/p>\n","parent":0},{"id":2067,"name":"DevHawk","url":"","date":"2008-04-28 20:26:20","content":"<p>No, I&#8217;d say that might be a bug. For example, if you import the static DateTime.Parse method, it works as you would expect. IPy appears to be placing the result if calling get_Now in the local scope, rather than the get_Now static method. I need to circle back with the team, but that seems wrong to me.<\/p>\n<p>I opened up a CodePlex bug for it. <a href=\"http:\/\/www.codeplex.com\/IronPython\/WorkItem\/View.aspx?WorkItemId=16323\" rel=\"nofollow\">http:\/\/www.codeplex.com\/IronPython\/WorkItem\/View.aspx?WorkItemId=16323<\/a><\/p>\n","parent":0},{"id":2068,"name":"matt","url":"","date":"2008-05-05 12:35:59","content":"<p>I have this simple code.  But it returns an error:<br \/>\n&#8220;TypeError: expected ProcessPriorityClass, got int&#8221;<\/p>\n<p>from System.Diagnostics import Process<br \/>\nprocs = Process.GetProcesses()<br \/>\nfor p in procs:<br \/>\n\tif p.ProcessName == &#8216;notepad&#8217;:<br \/>\n\t\tprint p.BasePriority<br \/>\n\t\tp.PriorityClass = 8<\/p>\n<p>I thought one of the main points of ironpython is not have to worry about typing variables.  But this seems to imply unless I do some sort of dim x as ProcessPriorityClass, I can&#8217;t call set the value of PriorityClass.<\/p>\n<p>I have searched hard for the answer to this, but it seems like maybe IP isn&#8217;t that widely used yet.  If you have some good links to where to go to get more help with IP that would be nice.<br \/>\nThanks,<br \/>\nMatt<\/p>\n","parent":0},{"id":2069,"name":"DevHawk","url":"","date":"2008-05-05 13:59:37","content":"<p>IronPython is dynamically typed, but the underlying types from the .NET framework are still statically typed. IronPython won&#8217;t auto convert an integer into an enumerated type, which is why you&#8217;re getting a type exception. BasePriority is an integer, but it&#8217;s read only. PriorityClass is read\/write, but it takes a ProcessPriorityClass enum value.<\/p>\n<p>You could write the code this way:<\/p>\n<p>from System.Diagnostics import Process, ProcessPriorityClass<br \/>\nprocs = Process.GetProcesses()<br \/>\nfor p in procs:<br \/>\n__if p.ProcessName == &#8216;notepad&#8217;:<br \/>\n____print p.BasePriority<br \/>\n____p.PriorityClass = ProcessPriorityClass.BelowNormal<\/p>\n<p>Note, I need to figure out how to get significant whitespace to work in comments. In the meantime, I&#8217;m using underscore as space in the code above. <\/p>\n","parent":0},{"id":2070,"name":"Matt","url":"","date":"2008-05-06 04:17:48","content":"<p>Well that worked for me.  It&#8217;s actually pretty amazing what can be done with a few lines of code.<\/p>\n<p>As per your original topic, I did import Process from System.Diagnostics.  I figured ProcessPriorityClass was part of Process.<\/p>\n<p>Is there a simple way to know what all is included when you import or try to import a .Net class.<\/p>\n<p>Thanks<\/p>\n","parent":0},{"id":2071,"name":"DevHawk","url":"","date":"2008-05-06 11:19:31","content":"<p>Yep, use Python&#8217;s built in dir function. You can also use the built-in help function to retrieve the built-in help and method signature for types and methods.<\/p>\n<p>from System import Diagnostics<br \/>\ndir(Diagnostics.Process)<br \/>\ndir(Diagnostics.Process.PriorityClass)<br \/>\nhelp(Diagnostics.Process.GetProcesses)<\/p>\n","parent":0}],"attachments":[],"comment_count":7,"comment_status":"closed","custom_fields":{"dasblog_entryid":["5b8ab5a9-be5c-4fbb-9c7d-dacdf801247b"],"dasblog_compressedtitle":["Importing+Static+Methods+With+IPy"],"dasblog_compressedtitleunique":["2008\/04\/28\/Importing+Static+Methods+With+IPy"]}},"previous_url":"http:\/\/devhawk.net\/2008\/04\/24\/morning-coffee-164\/","next_url":"http:\/\/devhawk.net\/2008\/05\/02\/ironpython-2-0-beta-2\/"}