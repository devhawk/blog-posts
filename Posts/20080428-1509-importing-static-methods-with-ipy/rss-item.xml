<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Importing Static Methods with IPy</title>
  <link>http://devhawk.net/2008/04/28/importing-static-methods-with-ipy/</link>
  <pubDate>Mon, 28 Apr 2008 15:09:45 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://5b8ab5a9-be5c-4fbb-9c7d-dacdf801247b</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[Like .NET, Python uses namespaces to avoid name collisions. However, the semantics are a bit different. If you want to use a type or function from a a given namespace in Python, you have to import it into your current scope. For example, if you want to use the Python datetime built-in module, you would import it into the current scope and use it like this:
<pre class="brush: python">import datetime 
bush_last_day = datetime.date(2009,1,20)</pre>
Notice that when I import a Python module this way, it's scoped into it's namespace, which forces me to use the entire namespace scoped name to access the type. Of course, that gets tedious quickly, so Python provides a way to import a type from a specific namespace into your current scope like this:
<pre class="brush: python">from datetime import date 
bush_last_day = date(2009,1,20)</pre>
With IronPython, you can do import .NET namespaces as well. Here's that same code using the standard .NET <a href="http://msdn2.microsoft.com/library/System.DateTime">DateTime class</a>.
<pre class="brush: python">from System import DateTime 
bush_last_day = DateTime(2009,1,20)</pre>
What I didn't know is that you can import static methods &amp; properties from .NET types into the current scope using the same syntax. Here's an example:
<pre class="brush: python">from System.DateTime import Now 

if Now &gt;= bush_last_day:
    print 'celebrate'
else:
    print (bush_last_day - Now).Days, 'days left'</pre>
Being able to import a static method into the current scope is pretty convenient. Thanks to <a href="http://blog.jimmy.schementi.com/">my teammate Jimmy</a> for cluing me into this IPy feature.

One caveat though: in Python, you can import an entire namespace into your current scope. You can do that with .NET namespaces, but not with .NET types
<pre class="brush:py">from datetime import *         # this works
from System import *           # so does this
from System.DateTime import *  # this doesn’t work</pre>
<strong><span style="text-decoration: underline;">Update</span></strong>: <a href="http://www.voidspace.org.uk/python/weblog/index.shtml">Michael Foord</a> <a href="http://devhawk.net/2008/04/28/Importing+Static+Methods+With+IPy.aspx#commentstart">pointed out</a> that if you import Now as I describe above, it places a DateTime object representing the time you imported it into local scope, rather than placing the underlying get_Now static method in local scope. So while DateTime.Now always returns a new value, Now never changes. Sounds like an <a href="http://www.codeplex.com/IronPython/WorkItem/View.aspx?WorkItemId=16323">IPy bug</a> to me, but I'll have to circle back with the team to be sure.]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1141</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2008-04-28 15:09:45</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2008-04-28 15:09:45</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">importing-static-methods-with-ipy</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[5b8ab5a9-be5c-4fbb-9c7d-dacdf801247b]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Importing+Static+Methods+With+IPy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2008/04/28/Importing+Static+Methods+With+IPy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2065</wp:comment_id>
    <wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
    <wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
    <wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
    <wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
    <wp:comment_date>2008-04-28 15:38:56</wp:comment_date>
    <wp:comment_date_gmt>2008-04-28 22:38:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well... personally I think it is a terrible abuse of the import mechanism. LOL :-)
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2066</wp:comment_id>
    <wp:comment_author><![CDATA[Michael Foord]]></wp:comment_author>
    <wp:comment_author_email>fuzzyman@voidspace.org.uk</wp:comment_author_email>
    <wp:comment_author_url>http://www.ironpythoninaction.com/</wp:comment_author_url>
    <wp:comment_author_IP>87.194.212.65</wp:comment_author_IP>
    <wp:comment_date>2008-04-28 16:30:23</wp:comment_date>
    <wp:comment_date_gmt>2008-04-28 23:30:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I was mostly being a troublemaker with that comment, but I know that this feature has confused at least one IronPython user.

He did exactly as you did in your example:

    from System.DateTime import Now 

and was then surprised that when he used Now it didn't update as it should. This is because in Python you can't use the import machinery to access static members on classes.

When you import a class method from IronPython you are doing something not normally possible from Python - so what is actually happening may not be immediately obvious to anyone reading the code.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2067</wp:comment_id>
    <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
    <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>24.16.91.67</wp:comment_author_IP>
    <wp:comment_date>2008-04-28 20:26:20</wp:comment_date>
    <wp:comment_date_gmt>2008-04-29 03:26:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No, I'd say that might be a bug. For example, if you import the static DateTime.Parse method, it works as you would expect. IPy appears to be placing the result if calling get_Now in the local scope, rather than the get_Now static method. I need to circle back with the team, but that seems wrong to me.

I opened up a CodePlex bug for it. http://www.codeplex.com/IronPython/WorkItem/View.aspx?WorkItemId=16323]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2068</wp:comment_id>
    <wp:comment_author><![CDATA[matt]]></wp:comment_author>
    <wp:comment_author_email>matthew.grab@tycoelectronics.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>198.175.154.212</wp:comment_author_IP>
    <wp:comment_date>2008-05-05 12:35:59</wp:comment_date>
    <wp:comment_date_gmt>2008-05-05 19:35:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have this simple code.  But it returns an error:
"TypeError: expected ProcessPriorityClass, got int"

from System.Diagnostics import Process
procs = Process.GetProcesses()
for p in procs:
	if p.ProcessName == 'notepad':
		print p.BasePriority
		p.PriorityClass = 8

I thought one of the main points of ironpython is not have to worry about typing variables.  But this seems to imply unless I do some sort of dim x as ProcessPriorityClass, I can't call set the value of PriorityClass.

I have searched hard for the answer to this, but it seems like maybe IP isn't that widely used yet.  If you have some good links to where to go to get more help with IP that would be nice.
Thanks,
Matt]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2069</wp:comment_id>
    <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
    <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>131.107.0.108</wp:comment_author_IP>
    <wp:comment_date>2008-05-05 13:59:37</wp:comment_date>
    <wp:comment_date_gmt>2008-05-05 20:59:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[IronPython is dynamically typed, but the underlying types from the .NET framework are still statically typed. IronPython won't auto convert an integer into an enumerated type, which is why you're getting a type exception. BasePriority is an integer, but it's read only. PriorityClass is read/write, but it takes a ProcessPriorityClass enum value.

You could write the code this way:

from System.Diagnostics import Process, ProcessPriorityClass
procs = Process.GetProcesses()
for p in procs:
__if p.ProcessName == 'notepad':
____print p.BasePriority
____p.PriorityClass = ProcessPriorityClass.BelowNormal

Note, I need to figure out how to get significant whitespace to work in comments. In the meantime, I'm using underscore as space in the code above. ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2070</wp:comment_id>
    <wp:comment_author><![CDATA[Matt]]></wp:comment_author>
    <wp:comment_author_email>matthew.grab@tycoelectronics.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>198.175.154.212</wp:comment_author_IP>
    <wp:comment_date>2008-05-06 04:17:48</wp:comment_date>
    <wp:comment_date_gmt>2008-05-06 11:17:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well that worked for me.  It's actually pretty amazing what can be done with a few lines of code.

As per your original topic, I did import Process from System.Diagnostics.  I figured ProcessPriorityClass was part of Process.

Is there a simple way to know what all is included when you import or try to import a .Net class.

Thanks
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2071</wp:comment_id>
    <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
    <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>131.107.0.108</wp:comment_author_IP>
    <wp:comment_date>2008-05-06 11:19:31</wp:comment_date>
    <wp:comment_date_gmt>2008-05-06 18:19:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yep, use Python's built in dir function. You can also use the built-in help function to retrieve the built-in help and method signature for types and methods.

from System import Diagnostics
dir(Diagnostics.Process)
dir(Diagnostics.Process.PriorityClass)
help(Diagnostics.Process.GetProcesses)

]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>