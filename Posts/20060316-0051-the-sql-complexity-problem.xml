<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>The SQL Complexity Problem</title>
  <link>http://devhawk.net/2006/03/16/the-sql-complexity-problem/</link>
  <pubDate>Thu, 16 Mar 2006 00:51:32 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://dc8da217-b67e-4aa0-9cb9-fe57d0ad28c1</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>I mentioned on the <a href="http://devhawk.net/2006/03/14/Compiler+Dev+Lab++LINQ.aspx">first day of the Compiler Dev Lab</a> that <a href="http://weblogs.asp.net/brianbec">Brian Beckman</a> is a hoot. He's also wicked smart. He <a href="http://weblogs.asp.net/brianbec/archive/2006/03/15/440293.aspx">posted</a> about his demo from Monday where he demonstrates building indexes for use in LINQ queries. In his words:</p><blockquote dir="ltr" style="MARGIN-RIGHT: 0px"><p>In the terminology of relational databases, a “join” is, semantically, like a nested loop over a pair of lists (or tables) of records, saving only those where some certain fields match. Unless we do something smart, this could be very expensive. Imagine searching a database of a million DNA profiles for the closest match to a sample that has 10,000 DNA features (I have no idea whether those are real numbers: I just made them up, but they sound ballpark to me). A dumb join would search all 1 million profiles for each of the 10,000 features, resulting in 10 billion match tests, almost all of which will fail – by design, of course. That’s going to hurt. </p><p>The “something smart” is to build an index and search through that. Your database doesn’t have to be large at all for this to pay off. In fact, even with just a few records, it’s cheaper to build an index, use it, and throw it away than it is to do a nested loop. </p></blockquote><p dir="ltr">He goes on to prove out his point about building an index. For his full dataset (joining 3053 cities with 195 countries) it is literally 65x slower not to build a one-off index. Even for smaller datasets, the time difference is less dramatic but still significant. For example, with 89 cities instead of 3053, it's 3x slower not to build the index. </p><p dir="ltr">The reason I'm so interested in Brian's post is because of my <a href="http://devhawk.net/2006/02/27/Experimenting+With+Ning.aspx">experiments with Ning</a>. As you might recall, in trying to build a .NET version of <a href="http://partisanhacks.ning.com/">Partisan Hacks</a>, I found ASP.NET 2.0 to be significantly simpler than PHP (which Ning uses). However, building even the trivial SQL Express database for Partisan Hacks was a non-trivial exercise. Sure, I've done it many times before, but it seems strange that ASP.NET makes it so easy to build a site while SQL Server makes it so complex to build a database. If I was a novice user, I would never be able to build a database for my web site.</p><p dir="ltr">Why is this? I think that the simple app or amateur developer is simply not the target audience for SQL Server (even SQL Express). If you don't know the difference between nvarchar(100) and varchar(max) you're pretty much out in the cold when it comes to SQL Server. Their target audience appears to be enterprise databases that are cared for by enterprise database administrators. Databases with scores of tables and millions of rows. Great for them, bad for novice users who just want to persist their data somewhere quickly and easily.</p><p dir="ltr">Why can't building my database be as simple as building my site?</p><p dir="ltr">Ning makes it easy to use their <a href="http://documentation.ning.com/post.php?Post:slug=XN-XN_Content">Content Store</a>. You create an instance of a content object, you set properties (dynamic ones), you hit save. No fuss, no muss, no db schema. Sure is an easier model to understand and program to. In that regard, it blows away everything, even <a href="http://www.rubyonrails.com/">Ruby on Rails</a>. RoR is pretty sweet, but it needs a real database schema on the back end in order to drive RoR's guiding principle of "convention over configuration<em>"</em>. If there's no DB schema to discover, I think much of the RoR model would break down. (but that may just be my lack of RoR experience talking)</p><p dir="ltr">I not sure what a simpler database system would look like, but one idea of mine is to use a schemaless database. Much of the complexity comes from having to define both an in memory as well as perseistant schema, as well as the translation between them. If you just stored managed .NET objects, you would eliminate the redundant schema specification. It's not a fully fleshed out concept, but it is a start of an idea.</p><p dir="ltr">What other ideas would make persistant data significantly easier to work with?</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">724</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2006-03-16 00:51:32</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2006-03-16 00:51:32</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">the-sql-complexity-problem</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="database"><![CDATA[Database]]></category>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[dc8da217-b67e-4aa0-9cb9-fe57d0ad28c1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[The+SQL+Complexity+Problem]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2006/03/16/The+SQL+Complexity+Problem]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2333</wp:comment_id>
    <wp:comment_author><![CDATA[Jonathan Aquino]]></wp:comment_author>
    <wp:comment_author_email>jon@ninginc.com</wp:comment_author_email>
    <wp:comment_author_url>http://jonathanaquino.com</wp:comment_author_url>
    <wp:comment_author_IP>24.68.122.80</wp:comment_author_IP>
    <wp:comment_date>2006-03-16 22:56:24</wp:comment_date>
    <wp:comment_date_gmt>2006-03-17 05:56:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Harry - Thanks for highlighting the beauty of the Ning content store. Right on!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2334</wp:comment_id>
    <wp:comment_author><![CDATA[Bob English]]></wp:comment_author>
    <wp:comment_author_email>bob_english@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>82.121.48.19</wp:comment_author_IP>
    <wp:comment_date>2006-03-17 15:01:09</wp:comment_date>
    <wp:comment_date_gmt>2006-03-17 22:01:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, it seems you've just discovered the language impedence mismatch (between databases and programming) C#3 is all about?
Solutions of diverse kinds have been around for some time, and a some interest into the Java community would help you grasp the ideas...
Have a look at db4objects and see for yourself!

To me, and to the knowledge I have so far with C#3 and LINQ, these are just going back to the goo' ol' days of Visual FoxPro and embedded SQL. If its true, then it's a backwards step. Forward step is, as you reckon, into direct object graphs persistence.

Cheers,
Bob]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2335</wp:comment_id>
    <wp:comment_author><![CDATA[Chris Sterling]]></wp:comment_author>
    <wp:comment_author_email>csterling@solutionsiq.com</wp:comment_author_email>
    <wp:comment_author_url>http://jroller.com/page/csterwa</wp:comment_author_url>
    <wp:comment_author_IP>67.183.212.122</wp:comment_author_IP>
    <wp:comment_date>2006-03-26 22:58:21</wp:comment_date>
    <wp:comment_date_gmt>2006-03-27 05:58:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This subject is probably what I find to be the most interesting problem we are dealing with today.  Ruby, Python, C#3, and other models for dealing with this problem don't seem to be solutions in my opinion.  I tend to agree with your second comenter, Bob, in regards to direct object graph persistence but I also see that we must deal with the duplication and communication channels within our organizations, as well.  This will take more than a better persistence mechanism.  It will take systems which can merge data and dynamically relate data based upon context.  My current understanding of this would be done using agents and well defined heuristics.

I posted my thoughts on this subject with a link back to this entry at http://jroller.com/page/csterwa?entry=data_our_technological_debt.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>