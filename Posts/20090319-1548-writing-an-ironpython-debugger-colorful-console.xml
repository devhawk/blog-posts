<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Writing an IronPython Debugger: Colorful Console</title>
  <link>http://devhawk.net/2009/03/19/writing-an-ironpython-debugger-colorful-console/</link>
  <pubDate>Thu, 19 Mar 2009 15:48:43 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://7a543ffb-0771-4124-9d94-08a29bb588ea</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[Now that I’ve added the <a href="http://devhawk.net/2009/03/19/Writing+An+IronPython+Debugger+Showing+Source+Code.aspx">current source code line</a> to the console output, I wanted to start using color in order to make it clearer to understand the various pieces of data that gets output. Now, the various event handler messages get output in dark grey while the current line of source is in yellow. Here’s what it looks like on my machine (note, the top line with the green [11] is PowerShell and ipy2 is a PowerShell alias to ipy.exe v2.0.1)

<a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerColorfulConso_D87F/image_4.png"><img style="display: block; float: none; margin-left: auto; margin-right: auto; border-width: 0px;" title="ipydbg on the console" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerColorfulConso_D87F/image_thumb_1.png" border="0" alt="ipydbg on the console" width="684" height="251" /></a>

Writing color to the windows console is a hassle because of the <a href="http://msdn.microsoft.com/en-us/library/system.console.foregroundcolor.aspx">stateful API</a> it uses. The problem is that I always want to return to the default color after I’ve written out a line of colored text. I wish there was an overload of Console.Write and WriteLine that took the foreground and background colors as arguments.

Of course, I could easily implement my own write and writeline methods that took color parameters. However, I was loath to do that as Python’s print statement is so convenient. So instead, I build a console color <a href="http://docs.python.org/reference/datamodel.html#context-managers">context manager</a>. I got the idea from Luis Fallas’ <a href="http://langexplr.blogspot.com/2009/02/writing-xml-with-ironpython-xmlwriter.html">XmlWriter context manager</a>.
<pre class="brush: python">class ConsoleColorMgr(object):  
  def __init__(self, color):  
    self.color = color  

  def __enter__(self):  
    self.temp = Console.ForegroundColor  
    Console.ForegroundColor = self.color  

  def __exit__(self, t, v, tr):  
    Console.ForegroundColor = self.temp  

CCDarkGray = ConsoleColorMgr(ConsoleColor.DarkGray)     
CCGray     = ConsoleColorMgr(ConsoleColor.Gray)     
CCYellow   = ConsoleColorMgr(ConsoleColor.Yellow)

def OnCreateAppDomain(self, sender,e):  
    with CCDarkGray:  
      print "OnCreateAppDomain", e.AppDomain.Name  
    e.AppDomain.Attach()</pre>
Python’s <a href="http://docs.python.org/reference/compound_stmts.html#the-with-statement">with statement</a> is similar to C#’s <a href="http://msdn.microsoft.com/en-us/library/yh598w02.aspx">using statement</a>. However, unlike IDisposable object, Python context managers support both an enter and exit method. This means I don’t have to construct an object in order to get a context (in this case, the console colors) managed. So far, I’ve got three console color context managers defined – Grey, DarkGrey and Yellow. I’m thinking that ConsoleColorMgr is a candidate for my <a href="http://github.com/devhawk/devhawk_ipy/tree/master">assorted module collection</a> at some point.

Now that I can print in color, I wanted to modify my <a href="http://devhawk.net/2009/03/19/Writing+An+IronPython+Debugger+Showing+Source+Code.aspx">line printer</a> to use color. Usually, the current sequence point corresponds to an entire line of python source. But as we see below, sometimes only part of a given line of source text is associated with a given sequence point.

<a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerColorfulConso_D87F/image_6.png"><img style="display: block; float: none; margin-left: auto; margin-right: auto; border-width: 0px;" title="image" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerColorfulConso_D87F/image_thumb_2.png" border="0" alt="image" width="684" height="115" /></a>

The other issue I ran into is that there’s a always a sequence point at the very end of a function. Unlike the break at the start of the function I wrote about in my last post, this one I didn’t want to automatically step over. This is the last breakpoint for a given scope, so I should give the user one last chance to inspect the scope (once I add the ability to do that, at any rate) before we step out of it. However, I wanted a way of showing that we’re about to step out in the source code line view. I decided on writing a series of carets ^^^ to indicate that we’re at the end of a function.

<a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerColorfulConso_D87F/image_8.png"><img style="display: block; float: none; margin-left: auto; margin-right: auto; border-width: 0px;" title="image" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/WritinganIronPythonDebuggerColorfulConso_D87F/image_thumb_3.png" border="0" alt="image" width="684" height="60" /></a>

As you can see in the dark grey line in the screenshot above, the current sequence point starts and ends at line 4 column 23. Column 23 is beyond the end of line 4, so that’s what I look for in order to draw the three carets. Here’s the final version of _print_source_line:
<pre class="brush: python">def _print_source_line(self, sp, lines):     
  line = lines[sp.start_line-1]     
  with CCGray:     
    Console.Write("%d: " % sp.start_line)     
    Console.Write(line.Substring(0, sp.start_col-1))     
    with CCYellow:     
      if sp.start_col &gt; len(line):     
        Console.Write(" ^^^")     
      else:     
        Console.Write(line.Substring(sp.start_col-1,     
                                     sp.end_col - sp.start_col))     
    Console.WriteLine(line.Substring(sp.end_col-1))</pre>
So colorizing the current line of source code turned out to be a little harder than I had expected. But hey, I got a start of a reusable module out of it. That’s pretty cool. Anyway, the <a href="http://github.com/devhawk/ipydbg/tree/ec6520e32cf3214ade646696a0d52448754daf07">latest bits</a> are, as always, up on GitHub.]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1232</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2009-03-19 15:48:43</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2009-03-19 15:48:43</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">writing-an-ironpython-debugger-colorful-console</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[7a543ffb-0771-4124-9d94-08a29bb588ea]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Colorful+Console]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2009/03/19/Writing+An+IronPython+Debugger+Colorful+Console]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>