<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>2562</wp:comment_id>
  <wp:comment_author><![CDATA[Thomas Eyde]]></wp:comment_author>
  <wp:comment_author_email>thomas.eyde@gmail.com</wp:comment_author_email>
  <wp:comment_author_url></wp:comment_author_url>
  <wp:comment_author_IP>195.0.195.197</wp:comment_author_IP>
  <wp:comment_date>2007-08-09 10:23:55</wp:comment_date>
  <wp:comment_date_gmt>2007-08-09 17:23:55</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[Here's a way to initialize last in the constructor:

namespace SnippetsFromBlogs.InitializeInConstructor
{
    [TestFixture]
    public class ClassTests
    {
        [Test]
        public void InitializeLastInContructor()
        {
            Base b = new Base(new Implementation(DateTime.Today));
            Assert.IsNotNull(b.ImportantThing);
        }

        [Test, ExpectedException(typeof (Exception))]
        public void FailFastOnMissingConstructorInitializing()
        {
            new Base(new FlawedImplementation());
        }
    }

    internal class Base
    {
        private string _importantThing;

        public Base(IInitializer implementation)
        {
            // Do initial setup
            InitImportantThing(implementation);
        }

        private void InitImportantThing(IInitializer implementation)
        {
            _importantThing = implementation.CreateImportantThing();
            if (_importantThing == null)
                throw new Exception();
        }

        public string ImportantThing
        {
            get { return _importantThing; }
        }
    }

    internal class Implementation : IInitializer
    {
        private readonly object _data;

        public Implementation(DateTime dt)
        {
            _data = dt;
        }

        public string CreateImportantThing()
        {
            return _data.ToString();
        }
    }

    internal class FlawedImplementation : IInitializer
    {
        public string CreateImportantThing()
        {
            return null;
        }
    }

    internal interface IInitializer
    {
        string CreateImportantThing();
    }
}]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>