<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Introducing the Guidance Automation Toolkit</title>
  <link>http://devhawk.net/2005/04/21/introducing-the-guidance-automation-toolkit/</link>
  <pubDate>Thu, 21 Apr 2005 13:51:17 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://78695b6d-d5a1-448f-92ad-eb8f5b44f209</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>We had a good crowd for today's webcast - including <a href="http://halpierson.blogspot.com/">my dad</a> as it turns out. The session was on packaging design and architecture guidance for Visual Studio. In the session, <a href="http://blogs.msdn.com/tomholl/">Tom</a> and Wojtek announced the newest p&amp;p deliverable - the Guidance Automation Toolkit. Frankly, I'm very excited about this project so it was very cool that I got to guest host today's webcast.</p><p>The on-demand version of the webcast will be up soon, and there is no other info available on GAT as of yet, so let me summarize the purpose of GAT. Everyone is very familiar with the template solutions, projects and items that are in Visual Studio today. You select New Project from the menu and you get a choice selecting between things like Class Library, Windows App and Web App. Within one of these application, you get some contextual guidance - if you create a windows app, you get item template choices like Add Windows Form and Add Windows User Control but not Add Web Form or Add Web Service. GAT takes this templating capability to the next level while also making it much easier to develop the contextual guidance.</p><p>In the demo we saw today, Wojtek executed a solution template for a distributed application - similar to ones that come in the enterprise templates feature of VS today. However, the solution template Wojtek demoed has the ability to create the contextual features described above. For example, the solution template created an empty project for the data access layer. From that empty project, you could invoke a project template to create the data access layer. The reason it's important to separate out the step of creating the solution from creating the DAL is that you can ask further questions at this time. For example, you could collect info about what database the DAL connects to. You might even want multiple DALs - one for each DB you're speaking to OK, maybe that's not the best architectural model, but bear with me. The point is that it becomes very difficult to ask all those questions during the initial solution creation step. Breaking it out into separate steps makes it much easier for the developer to tailor the solution as he goes along.</p><p>In addition to having contextual templates that can be executed, GAT projects also have the concept of recipes that can be attached to any node the the solution explorer tree (folders, files, etc). These recipes can gather information from the user in a wizard and then carry out a set of arbitrary actions. In the demo, Wojtek created an entity object within his created DAL project. In the wizard, he pointed it to a table in a database. The recipe then retrieved the schema of the table, executed a template that read that schema, and placed the resulting file into the project. What's really cool is that you can create files that themselves have recipes attached to them. So you could have one recipe that created a baseline entity class from the schema - simply writing out fields and properties for the columns in the table. The create entity class could then have additional recipes attached to it to do things like create insert/update/delete methods or to create finder methods. Of course, often times you want to create multiple finder methods, so you'd want to be able to run that recipe multiple times. Note, recipes can do all sorts of actions - anything that can be automated in VS - so you're not limited to simply creating new files. The create finder method example would need to modify an existing file. You could also delete or move around files as you needed to. It's quite powerful.</p><p>Of course, all this power is useless if it isn't easy to leverage. GAT provides a strong guidance package authoring environment in addition to the guidance usage experience described above. It has several default recipe actions for common scenarios (execute template, add file to solution, etc) plus you can build your own. We didn't get into it in the demos today, but send us feedback and we'll see about scheduling further webcasts to get more info. Additionally, the GAT will be available in a few weeks so I encourage you to get it and play with it when it ships.</p><p>As I said, I'm very excited about this toolkit. It's another small step towards Software Factories. Still have a long way to go, but it's awesome to see tangible progress.</p><p>BTW, there will be both a GAT breakout and hands-on lab at TechEd. We didn't publish the titles yet since the project hadn't been announced. The breakout is being presented by <a href="http://weblogs.asp.net/cazzu/archive">Daniel Cazzulino</a> who has been <a href="http://weblogs.asp.net/cazzu/archive/2005/04/20/GATAnnouncement.aspx">working on the GAT</a> for some time now. He's also written the GAT hands-on lab. Watch Daniel and Tom's blogs for more breaking news on GAT.</p><p>Major congrats to Tom, Wojtek and Daniel and everyone else involved on GAT. I can't wait to get my hands on it and start playing around. </p><p><strong>UPDATE</strong> - Looks like the <a href="http://msevents.microsoft.com/CUI/WebCastEventDetails.aspx?EventID=1032271518&amp;Culture=en-US">on-demand version</a> of the GAT webcast is live.</p><p><strong>ANOTHER UPDATE</strong> - I fixed the on-demand link and removed the live link (since the event's over, what's the point of linking to the live webcast site?)</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">592</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2005-04-21 13:51:17</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2005-04-21 13:51:17</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">introducing-the-guidance-automation-toolkit</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[78695b6d-d5a1-448f-92ad-eb8f5b44f209]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Introducing+The+Guidance+Automation+Toolkit]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2005/04/21/Introducing+The+Guidance+Automation+Toolkit]]></wp:meta_value>
  </wp:postmeta>
</item>