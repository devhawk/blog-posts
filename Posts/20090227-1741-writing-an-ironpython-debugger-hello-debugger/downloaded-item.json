{"status":"ok","post":{"id":1221,"type":"post","slug":"writing-an-ironpython-debugger-hello-debugger","url":"http:\/\/devhawk.net\/2009\/02\/27\/writing-an-ironpython-debugger-hello-debugger\/","status":"publish","title":"Writing an IronPython Debugger: Hello, Debugger!","title_plain":"Writing an IronPython Debugger: Hello, Debugger!","content":"<p>Since I\u2019m guessing most of my readers have never build a debugger before (I certainly hadn\u2019t), let\u2019s start with the debugger equivalent of Hello, World!<\/p>\n<pre class=\"brush: python\">import clr\r\nclr.AddReference('CorDebug')   \r\n\r\nimport sys\r\nfrom System.Reflection import Assembly\r\nfrom System.Threading import AutoResetEvent\r\nfrom Microsoft.Samples.Debugging.CorDebug import CorDebugger   \r\n\r\nipy = Assembly.GetEntryAssembly().Location\r\npy_file = sys.argv[1]\r\ncmd_line = \"\"%s\" -D \"%s\"\" % (ipy, py_file)   \r\n\r\nevt = AutoResetEvent(False)   \r\n\r\ndef OnCreateAppDomain(s,e):\r\n  print \"OnCreateAppDomain\", e.AppDomain.Name\r\n  e.AppDomain.Attach()   \r\n\r\ndef OnProcessExit(s,e):\r\n  print \"OnProcessExit\"\r\n  evt.Set()   \r\n\r\ndebugger = CorDebugger(CorDebugger.GetDefaultDebuggerVersion())\r\nprocess = debugger.CreateProcess(ipy, cmd_line)   \r\n\r\nprocess.OnCreateAppDomain += OnCreateAppDomain\r\nprocess.OnProcessExit += OnProcessExit   \r\n\r\nprocess.Continue(False)   \r\n\r\nevt.WaitOne()<\/pre>\n<p>I start by adding a reference to the CorDebug library I discussed at the end of <a href=\"http:\/\/devhawk.net\/2009\/02\/27\/Writing+An+IronPython+Debugger+MDbg+101.aspx\">my last post<\/a> (that\u2019s the low level managed debugger API plus the C# definitions of the various COM APIs). Then I need both the path to the IPy executable as well as the script to be run, which is passed in on the command line (sys.argv). For now, I just use Reflection to find the path to the current ipy.exe and use that. I use those to build a command line \u2013 you\u2019ll notice I\u2019m adding the \u2013D on the command line to generate debugger symbols.<\/p>\n<p>Next, I define two event handlers: OnCreateAppDomain and OnProcessExit. When the AppDomain is created, the debugger needs to explicitly attach to it. When the process exits, we signal an AutoResetEvent to indicate our program can exit.<\/p>\n<p>Then it\u2019s a simple process of creating the CorDebugger object, creating a process, setting up the process event handlers and then running the process via the call to Continue. We then wait on the AutoResetEvent for the debugged process to exit. And voila, you have the worlds simplest debugger in about 30 lines of code.<\/p>\n<p>To run it, you run the ipy.exe interpreter and pass in the ipydbg script above and the python script to be debugged. You also have to pass \u2013X:MTA on the command line, as the ICorDebug objects only work from a multi-threaded apartment. When you run it, you get something that looks like this:<\/p>\n<pre class=\"brush:plain\">\u00bb ipy -X:MTA ipydbg.py simpletest.py \r\nOnCreateAppDomain DefaultDomain \r\n35 \r\nOnProcessExit<\/pre>\n<p>Simpletest.py is a very simple script that prints the results of adding two numbers together. Here, you see the event handlers fire by writing text out to the console.<\/p>\n<p>For those of you who\u2019d like to see this code actually run on your machine, I\u2019ve created an ipydbg project <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/tree\/master\">up on GitHub<\/a>. The tree version that goes with this blog post <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/tree\/5858695ff85ed4740ad06466d4f54394e7f00f9b\">is here<\/a>. If you\u2019re not running <a href=\"http:\/\/git-scm.com\/\">Git<\/a>, you can download a tar or zip of the project via the \u201cdownload\u201d button at the top of the page. It includes both the CorDebug source as well as the ipydbg.py file (shown above) and the simpletest.py file. It also has a compiled version of CorDebug.dll, so you don\u2019t have to compile it yourself (for those IPy only coders who don\u2019t have VS on their machine).<\/p>\n","excerpt":"<p>Since I\u2019m guessing most of my readers have never build a debugger before (I certainly hadn\u2019t), let\u2019s start with the debugger equivalent of Hello, World! import clr clr.AddReference(&#8216;CorDebug&#8217;) import sys from System.Reflection import Assembly from System.Threading import AutoResetEvent from Microsoft.Samples.Debugging.CorDebug import CorDebugger ipy = Assembly.GetEntryAssembly().Location py_file = sys.argv[1] cmd_line = &#8220;&#8221;%s&#8221; -D &#8220;%s&#8221;\" % (ipy, [&hellip;]<\/p>\n","date":"2009-02-27 17:41:21","modified":"2011-04-17 01:05:20","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":279,"slug":"debugger","title":"Debugger","description":"","post_count":23}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2176,"name":"Steve Shaw","url":"http:\/\/toolmakersteve.com","date":"2009-04-11 21:07:57","content":"<p>Harry,<\/p>\n<p>Very cool. One question: I called this by writing a .bat file as follows:<\/p>\n<p>cd &#8230; &#8212; (the place I installed the git-downloaded files).<br \/>\n&#8220;C:IronPython 2.0.1ipy.exe&#8221; -X:MTA ipydbg.py samplessimpletest.py<\/p>\n<p>When I run the .bat file from VS 2008 Command Prompt window,<br \/>\nit stops at a prompt &#8220;ipydbg>>&#8221; from which I was able to hit &#8216;o&#8217; to step out, in order to get the rest of the output.<\/p>\n<p>It was cool to find myself in a place where I could enter commands, but if I want it to run straight thru, what do I need to change?<\/p>\n<p>Thanks for your useful posts,<br \/>\nSteve<\/p>\n","parent":0},{"id":2177,"name":"Steve Shaw","url":"http:\/\/toolmakersteve.com","date":"2009-04-11 21:13:12","content":"<p>NM, I found the next post in this series, which explained how to add an auto-breakpoint; the code I downloaded has that breakpoint set, LOL!<\/p>\n","parent":0}],"attachments":[],"comment_count":2,"comment_status":"closed","custom_fields":{"dasblog_entryid":["f7cea3aa-460b-4f8d-a76e-a24df4543e38"],"dasblog_compressedtitle":["Writing+An+IronPython+Debugger+Hello+Debugger"],"dasblog_compressedtitleunique":["2009\/02\/28\/Writing+An+IronPython+Debugger+Hello+Debugger"]}},"previous_url":"http:\/\/devhawk.net\/2009\/02\/27\/writing-an-ironpython-debugger-mdbg-101\/","next_url":"http:\/\/devhawk.net\/2009\/02\/28\/codehtmler-language-definition-for-python\/"}