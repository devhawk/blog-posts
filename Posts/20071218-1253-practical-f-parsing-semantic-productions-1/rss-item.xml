<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Practical F# Parsing: Semantic Productions (1)</title>
  <link>http://devhawk.net/2007/12/18/practical-f-parsing-semantic-productions-1/</link>
  <pubDate>Tue, 18 Dec 2007 20:53:10 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://fcd1d45b-ef40-4907-b4cf-5b9c000c2411</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p></p><p>All the <a href="http://devhawk.net/2007/12/17/Practical+F+Parsing+Syntactical+Productions+2.aspx" target="_blank">syntactic productions</a> in my PEG parser, save one, have the exact same signature. They take in a char list and return a char list option. Which is to say, they take a parse buffer in and return either the remaining parse buffer on a successful match or nothing on a failed match. The only exception is EndOfFile which doesn't return the remaining parse buffer because there isn't any buffer left to parse.</p><p>Now we're moving on to look at the productions with semantic implications. In Parsing Expression Grammars, there are eleven: Char, Range, Class, Literal, Identifier, Primary, Sequence Item, Sequence, Expression, Definition and Grammar. Like their syntactic brethren, these semantic productions will all have a single char list input parameter. However, they will all return some semantic value along with the remaining parse buffer. </p><p>We'll start with Char, since it's the only semantic production that doesn't return a custom type:</p><pre class="brush: fsharp">
///Char &lt;- '\' [nrt'"[]\]
/// / '\' [0-2][0-7][0-7]
/// / '\' [0-7][0-7]
/// / '\' [0-7]
/// / !'\' .    
let (|Char|_|) input =  
        
    let (|InRange|_|) upper input = 
        let i2c value = Char.chr(Char.code '0' + value)
        let c2i value = Char.code value - Char.code '0'
         
        match input with
        | NC (c, input) when (i2c 0) &lt;= c &amp;&amp; c &lt;= (i2c upper) -&gt;
            Some((c2i c), input)
        | _ -&gt; None 
         
    match input with
    | TOKEN @"" (NC(c, input))  
    when List.exists (fun x -&gt; x=c) ['n';'r';'t';''';'"';'[';']';'\'] -&gt;  
        match c with
        | 'n' -&gt; Some('n', input)
        | 'r' -&gt; Some('r', input)
        | 't' -&gt; Some('t', input)
        | _ -&gt; Some(c, input)
    | TOKEN @"" (InRange 2 (i1, InRange 7 (i2, InRange 7 (i3, input)))) -&gt;
        Some(Char.chr (i1 * 64 + i2 * 8 + i3), input)
    | TOKEN @"" (InRange 7 (i1, InRange 7 (i2, input))) -&gt;
        Some(Char.chr (i1 * 8 + i2), input)
    | TOKEN @"" (InRange 7 (i1, input)) -&gt;
        Some(Char.chr (i1), input)

    | NC(c, input) when c &lt;&gt; '\' -&gt; Some(c, input)
    | _ -&gt; None
</pre><p>Note, this production is slightly different from the one in the PEG whitepaper. This way was easier to pattern match. Also, I typically don't wrap my when guards onto the next line, but this way it doesn't wrap funny on my blog.</p><p>While long, Char is fairly straight-forward. There are five ordered choices that can match this production. The first is for escaped characters, the next three are for character codes, and the last one is matching any character except the backslash escape character. Note, tracking F#'s escape characters and PEG's escape characters can get tricky. I've used verbatim strings for all my TOKEN parameters in order to help try and keep it straight.</p><p>The escape character match clause uses a when guard to narrow down the selection criteria. I use the built-in List.exists method to see if the character is in a hard-coded list of special characters. List.exists takes in a function parameter, and returns true if that function returns true for any of the value is the list. Since I'm just matching a value, my function parameter is a trivial equality test. If List.exists returns true, I return that special character as part of the return tuple. Of all the escape characters in PEG, only three are also escape characters in F#, so I use a second match clause to return the correct char value. There's probably a way to do that more elegantly, but since there were just three clauses, I figured it was easier to type them out manually.</p><p>For the character code clauses, I wrote a special local AP function called InRange to determine if the specified character was within a specified range and to convert it from a char to an int. Note, the way the production is written, the largest character code you can specify is 277, which means you can encode slightly more than the standard UTF-8 character set. Honestly, this should be updated to support full UTF-16, but I'm not here to critique the grammar, so I didn't try to fix this issue. </p><p>Note, all the results (save None) return a tuple of the matched character value and the remaining input buffer. Again, all the remaining productions will work like that. For example, here's the Range production:</p><pre class="brush: fsharp">
///Range &lt;- Char '-' Char / Char
let (|Range|_|) input = 
    match input with
    | Char (c1, TOKEN "-" (Char (c2, input))) -&gt;  
        Some(Range.Dual (c1, c2), input)
    | Char (c1, input) -&gt;  
        Some(Range.Single (c1), input)
    | _ -&gt; None
</pre><p>Compared to Char, Range is fairly simple. It's either two chars, separated by a hyphen (for example: a-z) or it's a single char. Again, being able to use Active Patterns to build on lower level productions is a huge helper. </p><p>But what does this function return? What does Range.Single and Range.Dual mean? Those are refer to a special F# construct called a discriminated union. Before we can continue writing semantic productions, we need to define these types to hold the results of these productions.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1079</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2007-12-18 12:53:10</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2007-12-18 20:53:10</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">practical-f-parsing-semantic-productions-1</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="f-sharp"><![CDATA[F#]]></category>
  <category domain="post_tag" nicename="parsing-expression-grammar"><![CDATA[Parsing Expression Grammar]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[fcd1d45b-ef40-4907-b4cf-5b9c000c2411]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Practical+F+Parsing+Semantic+Productions+1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2007/12/18/Practical+F+Parsing+Semantic+Productions+1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>