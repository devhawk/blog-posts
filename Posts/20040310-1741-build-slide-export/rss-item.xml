<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Build Slide Export </title>
  <link>http://devhawk.net/2004/03/10/build-slide-export/</link>
  <pubDate>Wed, 10 Mar 2004 17:41:16 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://5c560426-b750-4eac-b618-e254c7b14298</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<div>I <a href="http://devhawk.net/PermaLink.aspx?guid=903afb72-e67e-4592-b631-0a9edb383bfe">blogged</a> yesterday about the issues I’m having with manually repurposing content. One of the specific issues has to do with the <a href="http://msdn.microsoft.com/architecture/overview/series/">Architecture Strategy Series</a>. We provide that content via three channels – DVD, online seminars and (soon) download. We use <a href="http://www.microsoft.com/office/powerpoint/producer/prodinfo/default.mspx">Producer</a> to create the DVD and download files. However, online seminar system doesn’t support Producer. The primary issue is that Producer uses the Save as HTML version of the PPT, but the online seminar system only supports static images. This means having to manually strip out the animations, which is a pain in the ass. Since I don’t ever want to have to do that again, I wrote a PowerPoint add-in to do it for me.</div>
<div>When you invoke the <a href="http://cid-0d9bc809858885a4.office.live.com/self.aspx/DevHawk%20Content/BlogFiles/BuildSlideExport.msi">Build Slide Export add-in</a> , it will step thru your presentation and screen capture each slide build to disk. It’s very similar to the built in Save as JPEG/GIF/PNG feature, except that it creates an image per build, not per slide. So those complex build slides turn out multiple image files. It’s sort that you can’t use the machine for anything else while it’s processing, but it was really easy to write the code. I tested it on a long complex PPT file with lots of builds (i.e. the one that took me hours to repurpose on Monday) and it took about 10 minutes.</div>
<div>I’m also providing the <a href="http://cid-0d9bc809858885a4.office.live.com/self.aspx/DevHawk%20Content/BlogFiles/BuildSlideExport Source.zip">source</a> to the add-in. It’s not much code: maybe 150 lines of relevant code at most. I grabbed the screen capture code from <a href="http://www.c-sharpcorner.com/Code/2003/Dec/ScreenCapture.asp">Perry Lee on C# Corner</a>.</div>
<div>There were a couple of gotchas involved with this add-in. For example, the add-in project type uses version 7.0 of the office.dll that comes with VS.NET. However, Office 2003 comes with version 11.0 of that DLL and not 7.0, so the first time I went to deploy on my production machine, it didn’t work. I had to grab the right version of office.dll out of the GAC in order to reference it, so it’s included in the lib directory of the source archive (it looks like <a href="http://www.simonguest.com/">Simon</a> did something similar with <a href="http://workspaces.gotdotnet.com/niobe">Niobe</a>). Also, PowerPoint’s object model is a little funky. Specifically, SlideShowView.Next() has to be called differently depending on the types of builds in the slides. I handle four different scenarios in the code: no builds, only auto trigger builds, and manual trigger builds, optionally with a set of auto trigger builds before the first manual trigger build.</div>
<div>I’m sure there’s other enhancements that could be made – for example, the directory the images are saved isn’t selectable nor is the image format. If there’s any interest, I’ll spin up a GDN workspace.</div>
<div><strong>Update</strong>: I just noticed a bug, albiet a cut-and-paste bug on my part. Turns out the <a href="http://www.c-sharpcorner.com/Code/2003/Dec/ScreenCapture.asp">screen capture code</a> that I used is creating four image objects for each screen capture. To make matters worse, three of them are never assigned to a variable, so you can't call Dispose() on them. So for any real-sized presenation, memory usage goes thru the roof. It's relatively easy to fix. Take the code that looks like this:</div>
<div>
<pre class="brush:csharp">Bitmap image = new Bitmap(
    Image.FromHbitmap(new IntPtr(hBitmap)),
    Image.FromHbitmap(new IntPtr(hBitmap)).Width,
    Image.FromHbitmap(new IntPtr(hBitmap)).Height);
image.Save(fileName,imageFormat);</pre>
</div>
<div dir="ltr">And replace it with this:</div>
<div dir="ltr">
<pre class="brush:csharp">Bitmap image = Image.FromHbitmap(new IntPtr(hBitmap));
image.Save(fileName,imageFormat);image.Dispose();</pre>
</div>
<div dir="ltr">With the improved code, only one bitmap per screen capture is made, and it's explicitly disposed. That keeps memory usage under control.</div>
<div dir="ltr"><strong>Another Update</strong>: I've updated the binary and the code links above with the new v1.0.1 version that fixes the memory hogging problem.</div>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">329</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2004-03-10 17:41:16</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2004-03-10 17:41:16</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">build-slide-export</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[5c560426-b750-4eac-b618-e254c7b14298]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Build+Slide+Export]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2004/03/11/Build+Slide+Export]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3025</wp:comment_id>
    <wp:comment_author><![CDATA[Chris]]></wp:comment_author>
    <wp:comment_author_email>cgillespie@extron.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP></wp:comment_author_IP>
    <wp:comment_date>2004-03-15 16:00:49</wp:comment_date>
    <wp:comment_date_gmt>2004-03-15 23:00:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I am trying to do this thing you are talking about.  i have a need to export as individual builds.  It used to be an option, but is no longer there.  HOWEVER, i am not a developer and have no idea what you are talking about?  Is there any hope for me?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3026</wp:comment_id>
    <wp:comment_author><![CDATA[Bruce Bieber]]></wp:comment_author>
    <wp:comment_author_email>Bruce@Bieber.to</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP></wp:comment_author_IP>
    <wp:comment_date>2004-06-07 12:08:44</wp:comment_date>
    <wp:comment_date_gmt>2004-06-07 19:08:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["When you invoke the Build Slide Export add-in..."  How do you invoke this add-in?
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3027</wp:comment_id>
    <wp:comment_author><![CDATA[Matthew O'Brien]]></wp:comment_author>
    <wp:comment_author_email>matt@aphonic.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>12.173.206.93</wp:comment_author_IP>
    <wp:comment_date>2006-04-04 12:40:35</wp:comment_date>
    <wp:comment_date_gmt>2006-04-04 19:40:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I am extremely excited to get this working so I don't have to keep taking build screenshots manually :)  But actually I'm not sure how to invoke the add in.  As far as I can see, there isn't actually an add in.  I've tried referencing the type library, (.tlb file,) in VBA, but I'm not sure where to go from there.  What am I missing?  Thanks alot]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>