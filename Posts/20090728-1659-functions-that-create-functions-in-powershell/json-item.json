{"status":"ok","post":{"id":1275,"type":"post","slug":"functions-that-create-functions-in-powershell","url":"http:\/\/devhawk.net\/2009\/07\/28\/functions-that-create-functions-in-powershell\/","status":"publish","title":"Functions that Create Functions in Powershell","title_plain":"Functions that Create Functions in Powershell","content":"<p>Since I started using Powershell, I\u2019m very picky about what I let on my path. I feel it\u2019s much cleaner to create aliases or functions rather than letting all kinds of crud creep into my path.<\/p>\n<p>Recently, I installed the latest <a href=\"http:\/\/www.ironruby.com\/Download\">IronRuby release<\/a> and discovered there\u2019s a whole bunch of little batch file wrappers around common Ruby commands like gem and rake. While being able to simply type \u201cigem\u201d or \u201cirake\u201d is much easier than typing \u201cir &#8220;C:Program Filesironruby-0.6.0binigem&#8221;\u201d, I didn\u2019t want to pollute my path &#8211; even with a product from my team. Instead, I wanted to create a Powershell function for each of those IronRuby-fied commands. Furthermore, I wanted to avoid manually creating a function for each Ruby command \u2013 these batchfiles are literally identical except for their name, so I figured it would be possible automate the function creation in Powershell. Here\u2019s what I came up with:<\/p>\n<pre class=\"brush: powershell\">$iralias = get-alias ir -EA SilentlyContinue\r\nif ($iralias -eq $null) {return}\r\n\r\n$irbindir = split-path $iralias.Definition\r\n\r\nfunction make-rubyfunction($cmd)\r\n{\r\n  $cmdpath = join-path $irbindir $cmd\r\n  set-item function:global:$cmd -Value {ir $cmdpath $args}.GetNewClosure()\r\n  write-host \"Added IronRuby $_ command\"\r\n}\r\n\r\n(\"igem\",\"iirb\",\"irackup\",\"irails\",\"irake\",\"irdoc\",\"iri\") |\r\n  %{make-rubyfunction $_}<\/pre>\n<p>I start by getting the ir alias, which I\u2019m <a href=\"http:\/\/devhawk.net\/2008\/12\/17\/PowerShell+Findtosetalias.aspx\">setting in my traditional fashion<\/a>. The Ruby command files are in the same directory as ir.exe, which is what ir is aliased to. If the ir alias isn\u2019t set, I quit out of the script without setting anything.<\/p>\n<p>The make-rubyfunction function is the primary workhorse of this script. You pass in a command name as a string, and it uses <a href=\"http:\/\/technet.microsoft.com\/en-us\/library\/dd347590.aspx\">set-item<\/a> on the <a href=\"http:\/\/technet.microsoft.com\/en-us\/library\/dd347741.aspx\">function provider<\/a> to create a new function. Note, I had to explicitly create this function in the global scope since I\u2019m running the set-item cmdlet inside a script.<\/p>\n<p>Getting the value for the function took a bit of head banging to figure out. I\u2019m used to Python, which automatically closes over variables, so my first attempt was to set the function value to something like { ir $cmdpath $args }. But Powershell doesn\u2019t close automatically, so that fails since $cmd isn\u2019t defined inside the function. I asked around on the internal Powershell alias, and someone pointed me to the new <a href=\"http:\/\/blogs.msdn.com\/powershell\/archive\/2009\/03\/27\/get-closure-with-getnewclosure.aspx\">GetNewClosure<\/a> function in Powershell v2. In other words, Powershell only supports manual closures, which is kind of wonky, but works OK for this scenario. I create a new script block that references in-scope variable $cmdpath and GetNewClosure automatically creates a new script block where that value is captured and embedded. More info on GetNewClosure <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.management.automation.scriptblock.getnewclosure(VS.85).aspx\">in the docs<\/a>.<\/p>\n<p>Now, I\u2019m using Win7 exclusively at this point, so depending on a v2 feature didn\u2019t bother me. However, if you\u2019re using Powershell v1, you could still accomplish something similar using text substitution. Here\u2019s my original (i.e. pre-GetNewClosure) version of make-rubyfunction<\/p>\n<pre class=\"brush: powershell\">function make-rubyfunction($cmd)\r\n{\r\n  $cmdpath = join-path $irbindir $cmd\r\n  $p = \"ir `\"$cmdpath`\" `$args\"\r\n  set-item function:global:$cmd -Value $p\r\n  write-host \"Added IronRuby $_ command\"\r\n}<\/pre>\n<p>I\u2019m using Powershell\u2019s standard text substitution mechanism to create the function value as a string. Note that I\u2019m escaping the dollar sign in $args, so that does not get substituted the way $cmdpath does. GetNewClosure feels cleaner, so that\u2019s how I ended up doing it, but both ways seem to work fine.<\/p>\n<p>Finally, I pass an array of IronRuby commands down the pipe to make-rubyfunction. I love the pipe command, though it feels strange to use parentheses instead of square brackets for list comprehensions like Python and F#!<\/p>\n<p>Anyway, the script \u2013 as usual \u2013 is <a href=\"http:\/\/cid-0d9bc809858885a4.skydrive.live.com\/self.aspx\/DevHawk%20Content\/Powershell\/ironruby%7C_aliases.ps1\">up on my SkyDrive<\/a>. At some point, I want to do something similar for common IronPython scripts like <a href=\"http:\/\/ironpython.codeplex.com\/SourceControl\/changeset\/view\/57298#758946\">pyc<\/a> and <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/tree\/master\">ipydbg<\/a>. Until then, hopefully someone out there will find it useful (like maybe the IronRuby team?).<\/p>\n","excerpt":"<p>Since I started using Powershell, I\u2019m very picky about what I let on my path. I feel it\u2019s much cleaner to create aliases or functions rather than letting all kinds of crud creep into my path. Recently, I installed the latest IronRuby release and discovered there\u2019s a whole bunch of little batch file wrappers around [&hellip;]<\/p>\n","date":"2009-07-28 16:59:13","modified":"2011-04-17 20:45:28","categories":[{"id":204,"slug":"development","title":"Development","description":"","parent":0,"post_count":165}],"tags":[{"id":253,"slug":"ironruby","title":"IronRuby","description":"","post_count":16},{"id":230,"slug":"powershell","title":"PowerShell","description":"","post_count":41}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["fc763e0f-f263-4dfb-b656-df6642994b92"],"dasblog_compressedtitle":["Functions+That+Create+Functions+In+Powershell"],"dasblog_compressedtitleunique":["2009\/07\/28\/Functions+That+Create+Functions+In+Powershell"]}},"previous_url":"http:\/\/devhawk.net\/2009\/07\/17\/the-texas-dependency-injection-massacre\/","next_url":"http:\/\/devhawk.net\/2009\/08\/06\/i-hate-global-asax\/"}