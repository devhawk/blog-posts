<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>The Fifth Assembly</title>
  <link>http://devhawk.net/2008/10/21/the-fifth-assembly/</link>
  <pubDate>Tue, 21 Oct 2008 12:42:41 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://c229d24e-6da3-40cc-8d5f-b09193b85d65</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>As I’ve <a href="http://devhawk.net/2008/09/17/DLR+Namespace+Change+Fire+Drill.aspx">written previously</a>, we’ve had a few challenges recently with name collisions in the DLR. In that post, I described how we had solved – or thought we solved, as it turned out – the problem with ExtensionAttribute name collisions between Microsoft.Scripting.Core.dll and System.dll. </p><p>However, as it turns out, having lots of copies of the same type <a href="http://lists.ironpython.com/pipermail/users-ironpython.com/2008-September/008485.html">didn’t solve the problem</a>. Since ExtensionAttribute is a known type to the C# 3.0 compiler, it has to choose one of the multiple copies that are in the project. We <em>thought</em> that given a choice, it would favor the System.Core version. However, what folks discovered after we released Beta 5 is that C# 3.0 will choose the <em>first</em> copy of ExtensionAttribute that it finds. So if you have System.Core.dll and IronPython referenced in your project, and you define your own extension methods, the compile fails if the C# 3.0 compiler finds one of the IronPython or DLR private copies of ExtensionAttribute before the public copy in System.Core.</p><p>Furthermore, there doesn’t seem to be any way to set the reference order in MSBuild files. I’ve never dug deep into the MSBuild file format, but changing the order of the references in the csproj file didn’t seem to effect the order the references were passed to the C# compiler. I’m guessing we might be able to change this by fiddling with the <a href="http://msdn.microsoft.com/en-us/library/9ad3f294.aspx">ResolveAssemblyReference task</a>, but we didn’t want to force low level MSBuild file hacking on our user base.</p><p>We looked at a variety of other solutions, including rewriting the IL after compilation to change the namespace of the ExtensionAttribute. However, we had trouble making that solution work and besides, changing the ExtensionAttribute namespace would have broken anyone using the existing DLR or IPy extension methods. So instead, we went with a different solution that we like to refer to as “The Fifth Assembly” around the office.</p><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheFifthAssembly_B085/image_2.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="IPy References" border="0" alt="IPy References" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheFifthAssembly_B085/image_thumb.png" width="312" height="216" /></a>In IronPython 2.0 Beta 5, there were four DLLs that implement IronPython: IronPython.dll, IronPython.Modules.dll, Microsoft.Scripting.dll and Microsoft.Scripting.Core.dll. In our RC1 release, we’ve added “The Fifth Assembly”: Microsoft.Scripting.ExtensionAttribute.dll. As you might guess from its name, it has only a single public type: ExtensionAttribute. By having ExtensionAttribute in its own dedicated assembly, we can avoid the type collision at compile time by not referencing both System.Core.dll and Microsoft.Scripting.ExtensionAttribute.dll in the same project. </p><p>In IronPython, we reference the ExtensionAttribute assembly because we use the C# 3.0 complier but IPy has to be able to run on .NET Framework 2.0 SP1. <a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheFifthAssembly_B085/image_4.png"><img style="border-right-width: 0px; margin: 0px 5px 0px 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" align="left" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/TheFifthAssembly_B085/image_thumb_1.png" width="247" height="205" /></a>However, projects that embed IronPython in a .NET 3.5 project (aka C# 3.0 or VB 9.0) will reference System.Core instead. The only reason why you would explicitly use the ExtensionAttribute assembly was that if you, like us, wanted to build your app with .NET 3.5, use extension methods but still be compatible with .NET 2.0 SP1. We’re guessing there aren’t many of our customers doing that, but if you are, explicitly referencing ExtensionAttribute will work just as it does for compiling IronPython itself.</p><p>It’s important to remember two things about the Fifth Assembly:</p><ol><li>Never reference System.Core and Microsoft.Scripting.ExtensionAttribute in the same project. </li><li>Always deploy Microsoft.Scripting.ExtensionAttribute.dll as part of any solution that embeds IronPython (or IronRuby or vanilla DLR for that matter), even if you don’t reference it explicitly within your project. </li></ol><p>This change is public in the source code as of <a href="http://www.codeplex.com/IronPython/SourceControl/DirectoryView.aspx?SourcePath=&amp;changeSetId=42076">change set 42076</a> and will also be in the nearly-ready RC1 release of IronPython 2.0. If you’ve got any questions or &lt;shudder&gt; find any more issues with this solution, please let us know right away.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1178</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2008-10-21 12:42:41</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2008-10-21 12:42:41</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">the-fifth-assembly</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[c229d24e-6da3-40cc-8d5f-b09193b85d65]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[The+Fifth+Assembly]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2008/10/21/The+Fifth+Assembly]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2124</wp:comment_id>
    <wp:comment_author><![CDATA[Dave]]></wp:comment_author>
    <wp:comment_author_email>almostdave@gmail.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>128.250.77.144</wp:comment_author_IP>
    <wp:comment_date>2008-10-23 00:16:22</wp:comment_date>
    <wp:comment_date_gmt>2008-10-23 07:16:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi,

This is perhaps not the best place to report this, but I couldn't find the associated ticket in the CodePlex issue tracker.  I've just updated to RC1.  My project is a fairly basic WPF project and references System.Core; it previously got the warning about the duplicate definition.  Now when I build I get the following error:

Target MarkupCompilePass1:
    C:WindowsMicrosoft.NETFrameworkv3.5Microsoft.WinFX.targets(294,9): error MC1000: Unknown build error, 'Cannot resolve dependency to assembly 'Microsoft.Scripting.ExtensionAttribute, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' because it has not been preloaded. When using the ReflectionOnly APIs, dependent assemblies must be pre-loaded or loaded on demand through the ReflectionOnlyAssemblyResolve event.' 


Initially I just used RC1 from the zip file, but I also tried installing from the .msi on the chance the it would install the assemblies into the GAC but it didn't do that.  Have I missed something in my project configuration?

Thanks,
Dave]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2125</wp:comment_id>
    <wp:comment_author><![CDATA[Chris Cavanagh]]></wp:comment_author>
    <wp:comment_author_email>cjcavanagh@benefittech.com</wp:comment_author_email>
    <wp:comment_author_url>http://chriscavanagh.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>65.166.200.179</wp:comment_author_IP>
    <wp:comment_date>2008-11-12 12:44:33</wp:comment_date>
    <wp:comment_date_gmt>2008-11-12 20:44:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Harry - Will Microsoft.Scripting.Core and System.Core eventually be merged? I'm hitting some problems using Microsoft.Scripting.Core in a Silverlight 2 project (it wants a System.Core reference too).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2126</wp:comment_id>
    <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
    <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>131.107.0.108</wp:comment_author_IP>
    <wp:comment_date>2008-11-18 16:17:42</wp:comment_date>
    <wp:comment_date_gmt>2008-11-19 00:17:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@Dave, Did you create a new issue on CodePlex?

@Chris, Microsoft.Scripting.Core is essentially the .NET 4.0 version of System.Core. The merge has already been done]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>