<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Spelunking WSS &amp; WebMatrix</title>
  <link>http://devhawk.net/2003/08/22/spelunking-wss-webmatrix/</link>
  <pubDate>Fri, 22 Aug 2003 09:18:54 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://7475ec52-9d64-4c70-988e-bb6b535ef5cf</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>I've been doing a little spelunking the last few days. Unfortunately, much of it has been to no end, but I thought I'd share anyway.</p><ul><li>The deeper I dig into <a href="http://www.microsoft.com/windowsserver2003/technologies/sharepoint/default.mspx"> Windows SharePoint Services</a>, the more impressed I am. While it's well known you can customize at the data level (custom lists) and the web part level, it turns out you can do a lot of customization at the page layout level. Don't like the default page layout of WSS? Go ahead and change it. You can customize the pages within a specific site using Front Page 2003, or at the server level by hacking files in the web server extensions60template1033 directory. I was able to add my own custom site templates, use my own custom default.aspx page, define my own custom list types, etc.</li><li>One WSS downer - as far as I can tell, you can only have one instance running on a given machine. Which means if you go hack on the templates at the file level, everyone running on that server gets the changes. Which means I'm guessing most WSS hosting providers won't let you hack on the templates.</li><li>I've also been playing around with custom designers and <a href="http://www.asp.net/webmatrix/default.aspx?tabIndex=4&amp;tabId=46"> WebMatrix</a>. One of the cool things about WebMatrix is it's ability to render UserControls in the pages where they are used - something VS.NET can't do. I wanted to know how WebMatrix did it since I want similar functionality in my custom designer. However, it appears that this capability is specifically tied to WebMatrix as a designer host. If you look in Microsoft.Matrix.Packages.Web.dll, there's a Microsoft.Matrix.Packages.Web.Designers.MxUserControlDesigner class. I'm guessing WebMatrix silently substitutes this designer for the default UserControlDesigner provided by the framework. In the <a href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWebUIDesignControlDesignerClassGetDesignTimeHtmlTopic.asp"> GetDesignTimeHtml</a> method (part of the designer infrastructure), the designer is able to walk the project hierarchy in order to find the file the control instance refers to. This project hierarchy is all written in managed code and is provided to the designer via the standard designer services infrastructure (<a href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfsystemcomponentmodeldesigncomponentdesignerclassgetservicetopic.asp">ControlDesigner.GetService</a>). VS.NET project hierarchy is accessed as part of the old COM-based DTE (design time environment) object model. Furthermore, there doesn't appear to be a consistent way to retrieve that DTE base object unless it is explicitly passed to you (as in the case of an add-in). According to the docs, you should be able to <a href="http://msdn.microsoft.com/library/en-us/vsintro7/html/vxconreferencingdteobject.asp"> get a DTE reference</a> to the currently running instance of VS.NET by calling System.Runtime.InteropServices.Marshal.GetActiveObject("VisualStudio.DTE.7.1"). However, if there are multiple instances of VS.NET running, that call to GetActiveObject actually retireves the DTE reference to the <i>first</i> instance of VS.NET, not the current instance. Woops.</li><li>The upshot of the above spelunking is that in WebMatrix, a designer can easily find, open and read the contents of another file in the project (or should I say directory since WebMatrix doesn't use projects per se). In VS.NET, it can't. Seems odd that the free product has features the non-free product doesn't. Of course, some of that probably comes from the fact WebMatrix is simpler and built with managed code. Here's to future versions of VS.NET being built using more (or better yet exclusively) managed code. </li></ul>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">175</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2003-08-22 09:18:54</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2003-08-22 09:18:54</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">spelunking-wss-webmatrix</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2003/08/22/Spelunking+WSS+WebMatrix]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Spelunking+WSS+WebMatrix]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[7475ec52-9d64-4c70-988e-bb6b535ef5cf]]></wp:meta_value>
  </wp:postmeta>
</item>