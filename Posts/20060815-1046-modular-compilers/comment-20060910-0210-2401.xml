<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>2401</wp:comment_id>
  <wp:comment_author><![CDATA[Max]]></wp:comment_author>
  <wp:comment_author_email></wp:comment_author_email>
  <wp:comment_author_url></wp:comment_author_url>
  <wp:comment_author_IP>81.178.245.106</wp:comment_author_IP>
  <wp:comment_date>2006-09-10 02:10:47</wp:comment_date>
  <wp:comment_date_gmt>2006-09-10 09:10:47</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[The .NET language Boo actually implements its "using" keyword as a short piece of Boo code that does a transformation on the abstract syntax tree at compile time like so (pseudocode):

using object:
  code block

Becomes:

Lock(object)
try:
  code block
finally:
  Unlock(object)

You can define these AST transformations in your own program to implement most any construct you like, and they are really easy to write! Neat, eh? 

http://boo.codehaus.org/]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>