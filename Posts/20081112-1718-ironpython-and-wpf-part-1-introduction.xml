<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>IronPython and WPF Part 1: Introduction</title>
  <link>http://devhawk.net/2008/11/12/ironpython-and-wpf-part-1-introduction/</link>
  <pubDate>Wed, 12 Nov 2008 17:18:33 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://15692716-a6ef-48f3-8fa4-afc9ddc4cc3d</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>I decided to start my IronPython and “<a href="http://devhawk.net/2008/11/13/IronPython+And+LtInsert+MSFT+Technology+Heregt.aspx">veritable universe of cool technologies</a>” examples with WPF. I figured that since we already have Silverlight support, there might be some overlap (there was). Futhermore, after seeing <a href="http://www.hanselman.com/blog/PDC2008BabySmashPreparations.aspx">BabySmash on Surface</a> I’m jonesing to build a <a href="http://www.microsoft.com/surface/index.html">Surface</a> app of my own. Getting vanilla WPF working with IPy seems like a smart step before trying to build a Surface WPF app with IPy.</p><p>WPF is all about cool graphics, so I decided to build a photo viewing app. Kinda boring, I know. But it turns out my wife has posted <a href="http://techiewife.spaces.live.com/photos/">hundreds of photos</a> to her <a href="http://techiewife.spaces.live.com/">WL Space</a>, and WL Spaces provides convenient RSS feeds of both <a href="http://techiewife.spaces.live.com/photos/feed.rss">photo albums</a> as well as <a href="http://techiewife.spaces.live.com/photos/cns!3DAECC033B88329C!2885/feed.rss">photos in specific albums</a>. So I built out a simple WPF based photo viewer for my wife’s WL Space photos in IronPython.</p><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/IronPythonandWPF_EFC4/image_4.png"><img style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" title="TechieWife Photo Viewer screenshot" border="0" alt="TechieWife Photo Viewer screenshot" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/IronPythonandWPF_EFC4/image_thumb_1.png" width="684" height="380" /></a></p><p>As you can see, I'm not quitting my job to go pursue a career in design anytime soon. But hey, the point is demonstrate building a WPF app in IPy, not to be a great designer. Plus, don’t those cute kids make up for the ugliness of the app?</p><p>Turns out building this app in IPy was fairly straightforward, with a few pitfalls. I wasted half a day digging thru data binding before realized that data binding against IPy objects works out of the box - but only if you type the case of the property correctly (Title != title). Also, I couldn’t make TypeConverters work the way I wanted, but python list comprehensions made it enough to transform the feed data before binding it to the UI. That approach worked great for this scenario but maybe not so much for others. (I’ve got feelers out to the WPF data binding wonks, so maybe there’s still hope for type converters) </p><p>Over the next several posts, I’m going to show you all the code for this app. It’s pretty small, only about 50 lines of app-specific python code + 50 lines of XAML to describe the window. There’s also some reusable code – 50 lines of WPF module code (mostly stolen from avalon.py in the IPy tutorial), 200 lines of xml2py code <a href="http://devhawk.net/2008/05/07/Deserializing+XML+With+IronPython.aspx">which I’ve discussed before</a> and a very small C# based assembly to make accessing WPF elements by name very pythonic. </p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1188</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2008-11-12 17:18:33</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2008-11-12 17:18:33</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">ironpython-and-wpf-part-1-introduction</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <category domain="post_tag" nicename="wpf"><![CDATA[WPF]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[15692716-a6ef-48f3-8fa4-afc9ddc4cc3d]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[IronPython+And+WPF+Part+1+Introduction]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2008/11/13/IronPython+And+WPF+Part+1+Introduction]]></wp:meta_value>
  </wp:postmeta>
</item>