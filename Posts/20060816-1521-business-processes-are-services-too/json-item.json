{"status":"ok","post":{"id":782,"type":"post","slug":"business-processes-are-services-too","url":"http:\/\/devhawk.net\/2006\/08\/16\/business-processes-are-services-too\/","status":"publish","title":"Business Processes Are Services Too","title_plain":"Business Processes Are Services Too","content":"<p>I&#8217;ve been having a <a href=\"http:\/\/unhandledx.blogspot.com\/2006\/08\/state-in-services-architecture.html\">conversation<\/a> with <a href=\"http:\/\/unhandledx.blogspot.com\/\">Piyush Pant<\/a>\u00a0over on his blog that started as a <a href=\"http:\/\/devhawk.net\/CommentView,guid,4d427e9f-7775-4aae-a487-8cf8c1d8a991.aspx#commentstart\">comment he left<\/a> on my <a href=\"http:\/\/devhawk.net\/2006\/07\/27\/Services+Arent+Stateless.aspx\">Services Aren&#8217;t Stateless<\/a> post. He thinks that I&#8217;m &#8220;missing the crucial point here by implicitly conflating business process and service state&#8221;. While Piyush hasn&#8217;t really defined what he means by these terms, I think I understand what he&#8217;s getting at. Yes, process and service state are different in many ways, but they are also similar in that they are both service private data.<\/p>\n<p>Pat Helland (side note &#8211; I wish Pat would start blogging again) wrote an article some time ago titled <a href=\"http:\/\/msdn.microsoft.com\/library\/en-us\/dnbda\/html\/dataoutsideinside.asp\">Data on the Outside vs. Data on the Inside<\/a>\u00a0where he talked about the differences between service private data and data in the space between the services. For example, data on the outside is immutable, requires an open schema for interop, doesn&#8217;t need encapsulation and is representable in XML. Service private data is not immutable, doesn&#8217;t need an open schema for interop, requires encapsulation and is typically stored in a SQL RDBMS. So on this front, process and service state are both service private data so conflating them makes some sense. <\/p>\n<p>However, what&#8217;s not in the article is the idea of Resource and Activity data. Not sure why Pat didn&#8217;t include this in the article, but he was talking about it as <a href=\"http:\/\/www.stucharlton.com\/blog\/archives\/000041.html\">far back as PDC 2003<\/a>. <a href=\"http:\/\/www.stucharlton.com\/blog\/\">Stu Charlton<\/a>\u00a0described the difference between resource and activity data in his <a href=\"http:\/\/www.theserverside.net\/tt\/articles\/showarticle.tss?id=AutonomousServices\">Autonomous Services<\/a> article:<\/p>\n<blockquote><p><b>Activity Data<\/b> &#8211; This is &#8220;work in progress&#8221; data for any long-running business operation, and is usually encapsulated by business logic. A classic example is a shopping cart in any e-commerce system. This data is mutable, but typically has low concurrency conflicts, as it is not widely shared. Typically activity data retires after a long running operation completes, and may be archived in a decision support system for later analysis. <\/p>\n<p><b>Resource Data<\/b> &#8211; This is &#8220;state of the business&#8221; data, which represents the resources of an organization, and is usually encapsulated by business logic. Examples are: room availability in a hotel, inventory levels in a warehouse, account statuses, employee and customer information. Some resources have a small life span, others may last a very long time (years). Resource data is usually volatile with potential for high concurrency conflicts. <\/p>\n<\/blockquote>\n<p>So I&#8217;m fairly sure that when Piyush says &#8220;process state&#8221; I should hear &#8220;activity data&#8221;. Similarly &#8220;service state&#8221; is &#8220;resource data&#8221;. The differences between activity and resource data lead to some interesting implementation artifacts, which I assume he getting at when he says I&#8217;m conflating the two. For example, since activity data like shopping cart has low or no concurrency issues, using an optimistic concurrency scheme is entirely appropriate, which you would never use for highly volatile resource data like warehouse inventory levels. In fact, since activity data doesn&#8217;t have concurrency issues, you could even store it inside an instance of <a href=\"http:\/\/wf.netfx3.com\/\">workflow<\/a> or <a href=\"http:\/\/msdn.microsoft.com\/biztalk\/learning\/dev\/orch\/default.aspx\">orchestration<\/a>, which gets serialized to a persistent store when it&#8217;s in an idle state.  <\/p>\n<p>However, the fact that activity and resource data is handled differently doesn&#8217;t mean that most services won&#8217;t have activity data. When <a href=\"http:\/\/webservices.sys-con.com\/read\/136190.htm\">Thomas Erl says<\/a> that\u00a0that stateless services is a &#8220;common principle of service orientation&#8221;, essentially what I think he&#8217;s saying that services should only have resource data. And as I said before, this seems wrong to me. Sure, <em>some<\/em> services will be stateless. But <em>all<\/em> services? Services implement business capabilities. Most business capabilities are long running processes. Doesn&#8217;t that imply that most services in the enterprise will need to be long running workflows or orchestrations? <\/p>\n<p>So for the most part, Piyush and I just seem to have different names for the same concepts. The one issue I have with Piyush&#8217;s descricription of process and service state is that he seems to implicitly assume that processes aren&#8217;t services. Why not? Again, not <em>all<\/em> services will be processes, but if you&#8217;re not exposing processes as services, how exactly are you exposing them?<\/p>\n","excerpt":"<p>I&#8217;ve been having a conversation with Piyush Pant\u00a0over on his blog that started as a comment he left on my Services Aren&#8217;t Stateless post. He thinks that I&#8217;m &#8220;missing the crucial point here by implicitly conflating business process and service state&#8221;. While Piyush hasn&#8217;t really defined what he means by these terms, I think I [&hellip;]<\/p>\n","date":"2006-08-16 15:21:30","modified":"2006-08-16 15:21:30","categories":[{"id":177,"slug":"architecture","title":"Architecture","description":"","parent":0,"post_count":296}],"tags":[{"id":214,"slug":"database","title":"Database","description":"","post_count":13},{"id":183,"slug":"soa","title":"SOA","description":"","post_count":94}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["e149413f-1826-4245-ad7f-97aed9816231"],"dasblog_compressedtitle":["Business+Processes+Are+Services+Too"],"dasblog_compressedtitleunique":["2006\/08\/16\/Business+Processes+Are+Services+Too"]}},"previous_url":"http:\/\/devhawk.net\/2006\/08\/15\/modular-compilers\/","next_url":"http:\/\/devhawk.net\/2006\/08\/21\/language-features-i-wish-c-had-tuples\/"}