{"status":"ok","post":{"id":22,"type":"post","slug":"rotors-xsd-exe","url":"http:\/\/devhawk.net\/2003\/02\/12\/rotors-xsd-exe\/","status":"publish","title":"Rotor&#8217;s XSD.exe","title_plain":"Rotor&#8217;s XSD.exe","content":"<p>Among the other coolness of <a href=\"http:\/\/msdn.microsoft.com\/net\/sscli\"> Rotor<\/a>, it includes an implementation of the <a href=\"http:\/\/msdn.microsoft.com\/library\/default.asp?url=\/library\/en-us\/cptools\/html\/cpconxmlschemadefinitiontoolxsdexe.asp\"> XML Schema Definition tool<\/a> (XSD.exe) from the .NET SDK. It&#8217;s somewhat limited compared to the production version (no support for generating DataSets, schema inference, XDR or Visual Basic) but it does provide the primary goal of generating classes from XSD and generating XSD from classes. Spelunking around just the build process of Rotor&#8217;s XSD.exe yielded interesting discoveries. <\/p>\n<ul>\n<li>The Rotor build process uses the C++ compiler to generate AssemblyAttributes.cs and AssemblyRefs.cs. AssemblyAttributes has all the assembly level attributes (similar to the AssemblyInfo file that is generated by all the VS.NET project wizards). AsseblyRefs has a class named ThisAssembly with much of the same info available programmatically plus a variety of other assembly reference strings and public key information. The C++ compiler is being used as a preprocessor to insert concrete values into a generic files (AssemblyAttributes.cspp and AssemblyRefs.cspp in the ssclirotorenvbin directory).<\/li>\n<li>There&#8217;s a really useful perl script named gensr in the ssclirotorenvbin directory. It reads a text resource file and creates string constants for every resource name. It also provides useful utility methods including type-safe and culture aware GetBoolean, GetChar, GetByte, GetShort, GetInt, GetLong, GetFloat and GetDouble. It also overloads GetString to support format strings (like string.Format).<\/li>\n<\/ul>\n<p> I haven&#8217;t done much with localization, but I should, so the discovery of the gensr script is particularly useful for me. Of course, I want a compiled utility version of it. <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" \/>  The question is rewrite in C# or use the <a href=\"http:\/\/www.activestate.com\/Products\/Perl_Dev_Kit\/\">ActiveState Perl Dev Kit<\/a> which includes their <a href=\"http:\/\/aspn.activestate.com\/ASPN\/Perl\/Reference\/Products\/ASPNTOC-PERLDEVKIT-000-009\"> PerlNET compiler<\/a>. I&#8217;ll probably go C# due to my severe lack of perl skills. In the meantime, I used <a href=\"http:\/\/www.indigostar.com\/perl2exe.htm\"> Perl2exe<\/a>. Works OK, except that the resulting exe is almost 700kb while the original script is 9kb. That&#8217;s a lot of bloat, but I guess that&#8217;s the price of convenience. <\/p>\n","excerpt":"<p>Among the other coolness of Rotor, it includes an implementation of the XML Schema Definition tool (XSD.exe) from the .NET SDK. It&#8217;s somewhat limited compared to the production version (no support for generating DataSets, schema inference, XDR or Visual Basic) but it does provide the primary goal of generating classes from XSD and generating XSD [&hellip;]<\/p>\n","date":"2003-02-12 11:21:45","modified":"2003-02-12 11:21:45","categories":[],"tags":[],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["e7b81715-f885-47b8-946e-e627feb08520"],"dasblog_compressedtitle":["Rotors+XSDexe"],"dasblog_compressedtitleunique":["2003\/02\/12\/Rotors+XSDexe"]}},"previous_url":"http:\/\/devhawk.net\/2003\/02\/11\/smart-client-sample\/","next_url":"http:\/\/devhawk.net\/2003\/02\/16\/net-links\/"}