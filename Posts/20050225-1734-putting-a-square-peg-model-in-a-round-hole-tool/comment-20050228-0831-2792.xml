<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>2792</wp:comment_id>
  <wp:comment_author><![CDATA[Charles Rivet]]></wp:comment_author>
  <wp:comment_author_email>tevirselrahc@gmail.com</wp:comment_author_email>
  <wp:comment_author_url></wp:comment_author_url>
  <wp:comment_author_IP></wp:comment_author_IP>
  <wp:comment_date>2005-02-28 08:31:48</wp:comment_date>
  <wp:comment_date_gmt>2005-02-28 16:31:48</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[Javier already stated an obvious problem with your diatribe, so I will not go over that again. Although, if you look at elaborationist model driven development, you will see that there are "analysis" classes that are developed from use cases that then fan-out to "design" classes. And these _can_ also fan-out to "implementation" classes, depending on the implementation language...

You also state:

"Since you're not using the tools as they were designed, you have to manually enforce rules that the tool doesn't know about. Sure, you can add some semantics via stereotypes, but you can't take anything away."

Actually, you can...  To continue your example, I can define a profile that restricts the inheritance from "service" classes. This can be done today by attaching an OCL constraint to, for example, a class (and making it the default behaviour).

Now if I were to create new icons for the service and have this type of constraint defined in the profile, I would have a DSL!

Now there are cases where it is very difficult to extend UML to provide correct DSL support, but the example you provide in this post are not likely to convince people who understand how this works. And in cases where UML can not be used, then a DSL building tool would certainly help!]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>