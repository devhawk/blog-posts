{"status":"ok","post":{"id":557,"type":"post","slug":"putting-a-square-peg-model-in-a-round-hole-tool","url":"http:\/\/devhawk.net\/2005\/02\/25\/putting-a-square-peg-model-in-a-round-hole-tool\/","status":"publish","title":"Putting a Square Peg Model in a Round Hole Tool","title_plain":"Putting a Square Peg Model in a Round Hole Tool","content":"<p>Robert Bauman left the following <a href=\"http:\/\/blogs.msdn.com\/devhawk\/archive\/2005\/02\/24\/379473.aspx#379697\">comment<\/a> on my <a href=\"http:\/\/devhawk.net\/MDA+And+Software+Factories++Separated+At+Birth.aspx\">Separated at Birth<\/a> post?<\/p>\n<blockquote><p>The nice thing about using a general purpose modeler is that you can house all of your requirements, use cases, etc. in the same model. Rational provides the 4+1 view, Sparx Systems Enterprise Architect provides several views out of the box that you can easily navigate around&#8230; It means that everyone is working off of the same set of rules.<\/p>\n<p>As soon as you start putting those rules into Visual Studio, they change and deviate from the model. It&#8217;s true that the AndroMDA does require you to remember to use certain stereotypes, but that&#8217;s all part of the game anyhow. <\/p>\n<p>That&#8217;s like saying, &#8220;well, the GoF patterns are nice, but then you have to remember what it means to have an Observer pattern&#8221;. Furthermore, UML tools let you customize the list of stereotypes that show in the dropdown, and even the picture that should be associated with those stereotypes. Why mess with some other modeling standard when you can do it all with a proper UML tool<\/p>\n<\/blockquote>\n<p>The point I was making is that when you start using the class model to design something other than classes, you&#8217;re using a domain specific language &#8211; even if you&#8217;re using a general purpose modeling tool.\u00a0 Take a look at this <a href=\"http:\/\/www.andromda.org\/modeling.html\">example<\/a> from the AndroMDA website. Their example reads:<\/p>\n<blockquote><p>You tag a CustomerService class with a &lt;&lt;Service&gt;&gt; stereotype. AndroMDA sees this stereotype, looks into its internal dictionary of available code generation components (called &#8220;cartridges&#8221;) and finds the EJB cartridge. In the EJB cartridge, two templates correspond to the &lt;&lt;Service&gt;&gt; stereotype: SessionBean.vsl and SessionBeanImpl.vsl. AndroMDA uses the internal representation of CustomerService loaded from the model, calls the processing engine twice, and two output files are generated: CustomerServiceBean.java and CustomerServiceBeanImpl.java. <\/p>\n<\/blockquote>\n<p>In this example, classes with the &lt;&lt;Service&gt;&gt; stereotype actually generate two code classes &#8211; the Bean and the BeanImpl. But if we were using the class diagram <i>as it was intended<\/i>, wouldn&#8217;t there be a one-to-one mapping between a class in the model and a class in the code? As soon as you break that one-to-one mapping, you&#8217;re no longer modeling classes. A &lt;&lt;Service&gt;&gt; is something at a higher level of abstraction than a class &#8211; otherwise it wouldn&#8217;t take two classes to implement it.<\/p>\n<p>BTW, I&#8217;m not saying that there is anything wrong with this approach at all! I&#8217;m just pointing out the similarities between an approach that many people are using to achieve practical results with UML today and what you can do with the modeling tools that Microsoft is building. <\/p>\n<p>The key difference comes down to tools. Yes, you can use the class diagram and stereotypes to model stuff at a higher level of abstraction like Services and Entities. But putting a square peg in a round hole like that has problems. Since you&#8217;re not using the tools as they were designed, you have to manually enforce rules that the tool doesn&#8217;t know about. Sure, you can add some semantics via stereotypes, but you can&#8217;t take anything away. How easy is it to build a valid class model that isn&#8217;t a valid service model? Pretty easy. For example, do services support inheritance? Classes do. My EJB is a little rusty, but I don&#8217;t think beans do. It certainly doesn&#8217;t make sense for a service to inherit from an entity or vis-versa. Yet, the class modeler will happily let you do this, even though it makes no sense in the domain you&#8217;re actually trying to model.<\/p>\n<p>The value of domain specific languages is that have a tool that is specifically designed to model the domain you&#8217;re working in. If you&#8217;re designing classes, of course you&#8217;d want to use a class model. We have a <a href=\"http:\/\/msdn.com\/library\/en-us\/dv_vstechart\/html\/clssdsgnr.asp\">great one<\/a> coming in VS2005. But if you&#8217;re designing services or entities or page flows or whatever else, why wouldn&#8217;t you want a tool that&#8217;s specific to the problem at hand?<\/p>\n","excerpt":"<p>Robert Bauman left the following comment on my Separated at Birth post? The nice thing about using a general purpose modeler is that you can house all of your requirements, use cases, etc. in the same model. Rational provides the 4+1 view, Sparx Systems Enterprise Architect provides several views out of the box that you [&hellip;]<\/p>\n","date":"2005-02-25 17:34:22","modified":"2005-02-25 17:34:22","categories":[{"id":177,"slug":"architecture","title":"Architecture","description":"","parent":0,"post_count":296}],"tags":[{"id":225,"slug":"modelling","title":"Modelling","description":"","post_count":61}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2791,"name":"Javier Mu\u00f1oz","url":"http:\/\/www.dsic.upv.es\/~jmunoz","date":"2005-02-28 04:14:30","content":"<p>In general, I agree with the content of the post but&#8230;<\/p>\n<p>> But if we were using the class diagram as it was intended, wouldn&#8217;t there be a one-to-one mapping between a class in the model and a class in the code?<\/p>\n<p>I suppose you are assuming that the Class Diagram is intended to be used for design purposes. Then, a class diagram could be considered simply as a code visualizer. In this case, what about nxn relationships? Why are they used in class diagramas if they don&#8217;t have a one-to-one mapping?<\/p>\n<p>I think that the class diagram is usually (or sometimes) used for conceptual modelling purposes, where you are capturing the structure of your domain and not the structure of your software. Then, we need one-to-many mappings for converting the class diagram into software classes.<\/p>\n<p>Anyhow, I completely agree we should use DSLs. In fact we are all using DSLs when we are &#8220;intepreting&#8221; the semantics of UML (even when we use it without stereotypes) in the transformation from UML to code.<\/p>\n","parent":0},{"id":2792,"name":"Charles Rivet","url":"","date":"2005-02-28 08:31:48","content":"<p>Javier already stated an obvious problem with your diatribe, so I will not go over that again. Although, if you look at elaborationist model driven development, you will see that there are &#8220;analysis&#8221; classes that are developed from use cases that then fan-out to &#8220;design&#8221; classes. And these _can_ also fan-out to &#8220;implementation&#8221; classes, depending on the implementation language&#8230;<\/p>\n<p>You also state:<\/p>\n<p>&#8220;Since you&#8217;re not using the tools as they were designed, you have to manually enforce rules that the tool doesn&#8217;t know about. Sure, you can add some semantics via stereotypes, but you can&#8217;t take anything away.&#8221;<\/p>\n<p>Actually, you can&#8230;  To continue your example, I can define a profile that restricts the inheritance from &#8220;service&#8221; classes. This can be done today by attaching an OCL constraint to, for example, a class (and making it the default behaviour).<\/p>\n<p>Now if I were to create new icons for the service and have this type of constraint defined in the profile, I would have a DSL!<\/p>\n<p>Now there are cases where it is very difficult to extend UML to provide correct DSL support, but the example you provide in this post are not likely to convince people who understand how this works. And in cases where UML can not be used, then a DSL building tool would certainly help!<\/p>\n","parent":0},{"id":2793,"name":"DevHawk","url":"","date":"2005-02-28 18:52:06","content":"<p>Charles, I&#8217;m not sure I&#8217;d call this a diatribe, but your point is well taken. I did not realize you can use OCL to constrain the model &#8211; in the discussion that we had at the IASA user group meeting last week, that idea was rejected by those that use UML tools in this way as &#8220;not working very well&#8221;. So maybe they&#8217;re just using the wrong tool. <\/p>\n<p>Either way, as you point out, you end up with a DSL! My primary point is that how more similar these approachs are than they are different.<\/p>\n","parent":0},{"id":2794,"name":"Charles Rivet","url":"","date":"2005-03-01 07:13:07","content":"<p>I completely agree!!!<\/p>\n<p>Too many people are making up a lot of noise about how these approaches are very different when they are talking about basically the same thing: the need to present people with constructs that they understand at _their_ level of abstractions.<\/p>\n<p>If you can do that on a common base, then you gain the benefit of existing tools. But if the DSL is too complex for that common base, let&#8217;s not shy away from creating a new tool. The important thing, in the end, is the user&#8217;s productivity.<\/p>\n","parent":0}],"attachments":[],"comment_count":4,"comment_status":"closed","custom_fields":{"dasblog_entryid":["0b5ae99e-f851-4a35-bc55-ad9912559622"],"dasblog_compressedtitle":["Putting+A+Square+Peg+Model+In+A+Round+Hole+Tool"],"dasblog_compressedtitleunique":["2005\/02\/26\/Putting+A+Square+Peg+Model+In+A+Round+Hole+Tool"]}},"previous_url":"http:\/\/devhawk.net\/2005\/02\/24\/slight-issue\/","next_url":"http:\/\/devhawk.net\/2005\/02\/25\/speaking-of-the-class-designer\/"}