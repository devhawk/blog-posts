<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>2791</wp:comment_id>
  <wp:comment_author><![CDATA[Javier Muñoz]]></wp:comment_author>
  <wp:comment_author_email>jmunoz@dsic.upv.es</wp:comment_author_email>
  <wp:comment_author_url>http://www.dsic.upv.es/~jmunoz</wp:comment_author_url>
  <wp:comment_author_IP></wp:comment_author_IP>
  <wp:comment_date>2005-02-28 04:14:30</wp:comment_date>
  <wp:comment_date_gmt>2005-02-28 12:14:30</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[In general, I agree with the content of the post but...

> But if we were using the class diagram as it was intended, wouldn't there be a one-to-one mapping between a class in the model and a class in the code?

I suppose you are assuming that the Class Diagram is intended to be used for design purposes. Then, a class diagram could be considered simply as a code visualizer. In this case, what about nxn relationships? Why are they used in class diagramas if they don't have a one-to-one mapping?

I think that the class diagram is usually (or sometimes) used for conceptual modelling purposes, where you are capturing the structure of your domain and not the structure of your software. Then, we need one-to-many mappings for converting the class diagram into software classes.

Anyhow, I completely agree we should use DSLs. In fact we are all using DSLs when we are "intepreting" the semantics of UML (even when we use it without stereotypes) in the transformation from UML to code.

]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>