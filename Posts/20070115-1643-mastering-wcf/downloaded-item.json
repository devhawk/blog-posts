{"status":"ok","post":{"id":852,"type":"post","slug":"mastering-wcf","url":"http:\/\/devhawk.net\/2007\/01\/15\/mastering-wcf\/","status":"publish","title":"Mastering WCF","title_plain":"Mastering WCF","content":"<p><a href=\"http:\/\/codebetter.com\/blogs\/sam.gentile\/archive\/2007\/01\/10\/New-and-Notable-134.aspx\">Sam Gentile writes<\/a>:<\/p>\n<blockquote><p><a href=\"http:\/\/devhawk.net\/2007\/01\/05\/Morning+Coffee+4.aspx\">Harry finds Indigo daunting<\/a>. Me, I find mastering 8 different stacks (COM+\/ES, ASMX, WSE, Remoting, MSMQ, etc) to do the same thing and all the strange nuances a hell of a lot more daunting but that&#8217;s just me, although the number of timeout settings and config settings is astronomical.<\/p>\n<\/blockquote>\n<p>While mastering many different stacks <em>is<\/em> daunting, the reality is you don&#8217;t have to master all of them to use one of them. Knowing Sam, he probably has mastered all the different stacks, but MVP&#8217;s like Sam are an edge case. Most developer don&#8217;t master <em>any <\/em>of the stacks, they get comfortable with the one or two stacks they use all the time. <\/p>\n<p>From that perspective, WCF replaces the &#8220;legacy&#8221; stack a given developer understands with something much more complex, since WCF replaces legacy stacks <em>other<\/em> than the one said developer is familiar with. Options like message exchange patterns and network protocol were typically implicit to a given technology stack. For example, if you used ASMX, you could use any network protocol you want, as long as it&#8217;s HTTP. Using WCF, you get to \/ have to choose which network protocol you want to use. Multiply that decision making process by the &#8220;astronomical&#8221; number of choices WCF provides, and you&#8217;ve got to spend a long time making decisions that the &#8220;legacy&#8221; stacks handled for you automatically.<\/p>\n<p>To me, it looks like WCF&#8217;s primary design goals were to support web service standards (aka WS-*) as well as to unify the disparate communications stacks. And I think WCF was fairly successful at these two goals. Previously, the capabilities you needed would drive your communication stack choice. Need web service interop? Use ASMX. Need low-level control over the message pipeline? Use .NET Remoting. Need to flow transactions? Use COM+. Need to flow transactions over web services with low-level control over the message pipeline? Until WCF came along, you were SOL. <\/p>\n<p>However, if &#8220;ease of development&#8221; was a goal for WCF, it doesn&#8217;t look like it was high on the list. And frankly, that&#8217;s fine. As I&#8217;ve <a href=\"http:\/\/devhawk.net\/wcf+karma.aspx\">written before<\/a>, I&#8217;d rather have a flexible if complicated low-level foundation to build higher-abstracted application infrastrucutre on top of. <\/p>\n<p>Just don&#8217;t try and sell me that WCF is making my life easier, because it&#8217;s not. Not yet, anyway.<\/p>\n","excerpt":"<p>Sam Gentile writes: Harry finds Indigo daunting. Me, I find mastering 8 different stacks (COM+\/ES, ASMX, WSE, Remoting, MSMQ, etc) to do the same thing and all the strange nuances a hell of a lot more daunting but that&#8217;s just me, although the number of timeout settings and config settings is astronomical. While mastering many [&hellip;]<\/p>\n","date":"2007-01-15 16:43:54","modified":"2007-01-15 16:43:54","categories":[],"tags":[{"id":313,"slug":"wcf","title":"WCF","description":"","post_count":31}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["e2475cd1-5bf4-4558-b09c-ce588c1e18a8"],"dasblog_compressedtitle":["Mastering+WCF"],"dasblog_compressedtitleunique":["2007\/01\/16\/Mastering+WCF"]}},"previous_url":"http:\/\/devhawk.net\/2007\/01\/15\/morning-coffee-9\/","next_url":"http:\/\/devhawk.net\/2007\/01\/16\/morning-coffee-10\/"}