<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Building a Hybrid C# / IronPython App Without Dynamic Type</title>
  <link>http://devhawk.net/2009/08/10/building-a-hybrid-c-ironpython-app-without-dynamic-type/</link>
  <pubDate>Mon, 10 Aug 2009 08:04:21 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://13f1d88e-c057-427c-bb8f-d85062ba910a</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Arguably, the biggest feature of C# 4.0 is the new <a href="http://msdn.microsoft.com/en-us/library/dd264736(VS.100).aspx">dynamic type</a>. And it’ll be great…when it ships. In the meantime, some of us what to build hybrid C# and IronPython applications today, such as my <a href="http://devhawk.net/2009/08/07/Pygments+For+Windows+Live+Writer+V102.aspx">Pygments for Windows Live Writer plugin</a>. </p><p><a href="http://pygments.org/"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="pygments_logo" border="0" alt="pygments_logo" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/CallingIronPythonfromCWithouttheDynamicT_E49B/pygments_logo_55f6722f-70ee-4d75-8781-b5d547dd3f72.png" width="318" height="133" /> Pygments</a> is a syntax highlighter, written in Python, with support for <a href="http://pygments.org/languages/">over one hundred languages</a>. With the exception of a couple of bugs in our importer (<a href="http://devhawk.net/2009/08/07/Pygments+For+Windows+Live+Writer+V102.aspx">discussed here</a>) it works great with IronPython. It’s also extensible, so I was able to easily build a custom formatter to output exactly the HTML I want inserted in my blog posts. So it made perfect sense to use Pygments as the basis of a Windows Live Writer plugin. </p><p><a href="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/CallingIronPythonfromCWithouttheDynamicT_E49B/image_6.png"><img style="border-right-width: 0px; margin: 0px 5px 0px 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" align="left" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/CallingIronPythonfromCWithouttheDynamicT_E49B/image_thumb_2.png" width="122" height="220" /></a> As great a tool as Windows Live Writer is, it’s developers haven’t exactly seen the light when it comes to dynamic languages. If you want to <a href="http://msdn.microsoft.com/en-us/library/aa702851.aspx">create a custom Content Source</a> for Windows Live Writer, you have to generate a compiled on-disk assembly with a static type and custom attributes. Not exactly IronPython’s forte, if you know what I mean. I did try and build a pure IronPython solution, but eventually gave up. So I ended up building a hybrid solution. The front end of the plugin as well as the UI elements are written in C# while the syntax highlighter engine is written in IronPython. And since this is running on the current .NET framework, I didn’t have the new fangled C# 4.0 dynamic type to help me. </p><p>Over the next couple of blog posts, I want to highlight a few aspects how I built this plugin, including compiling Python packages into assemblies and invoking Python code from C# 3.0 and earlier. If you want to look for your self, <a href="http://github.com/devhawk/pygments.wlwriter/tree/master">the source</a> is up on GitHub.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1278</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2009-08-10 08:04:21</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2009-08-10 08:04:21</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">building-a-hybrid-c-ironpython-app-without-dynamic-type</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <category domain="post_tag" nicename="pygments"><![CDATA[Pygments]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[13f1d88e-c057-427c-bb8f-d85062ba910a]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Building+A+Hybrid+C+IronPython+App+Without+Dynamic+Type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2009/08/10/Building+A+Hybrid+C+IronPython+App+Without+Dynamic+Type]]></wp:meta_value>
  </wp:postmeta>
</item>