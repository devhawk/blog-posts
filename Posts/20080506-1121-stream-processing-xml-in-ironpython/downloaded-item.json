{"status":"ok","post":{"id":1144,"type":"post","slug":"stream-processing-xml-in-ironpython","url":"http:\/\/devhawk.net\/2008\/05\/06\/stream-processing-xml-in-ironpython\/","status":"publish","title":"Stream Processing XML in IronPython","title_plain":"Stream Processing XML in IronPython","content":"<p align=\"left\">When it comes to processing XML, there are two basic approaches &#8211; load it all into memory at once or process it a node at a time. In the .NET world where I have spent most of the past ten years, those two models are represented by <a href=\"http:\/\/msdn.microsoft.com\/library\/system.xml.xmldocument\">XmlDocument<\/a> and <a href=\"http:\/\/msdn.microsoft.com\/library\/system.xml.xmlreader\">XmlReader<\/a>. There are alternatives to XmlDocument, such as <a href=\"http:\/\/msdn.microsoft.com\/library\/system.xml.linq.xdocument\">XDocument<\/a> and <a href=\"http:\/\/msdn.microsoft.com\/library\/system.xml.xpath.xpathdocument\">XPathDocument<\/a>, but you get the idea.<\/p>\n<p>Out in non-MSFT land, the same two basic models exist, however the de facto standard for stream based processing is SAX, the <a href=\"http:\/\/www.saxproject.org\/\">Simple API for XML<\/a>. SAX is supported by <a href=\"http:\/\/www.saxproject.org\/langs.html\">many languages<\/a>, <a href=\"http:\/\/www.python.org\/doc\/current\/lib\/module-xml.sax.html\">including Python<\/a>.<\/p>\n<p>Personally, I&#8217;ve never been a fan of SAX&#8217;s event-driven approach. Pushing events makes total sense for a human driven UI, but I never understood why anyone thought that was a good idea for stream processing XML. I like XmlReader&#8217;s pull model much better. When you&#8217;re ready for the next node, just call <a href=\"http:\/\/msdn.microsoft.com\/library\/system.xml.xmlreader.Read\">Read<\/a>() &#8211; no mucking about setting <a href=\"http:\/\/www.saxproject.org\/apidoc\/org\/xml\/sax\/ContentHandler.html\">content handlers<\/a> or handling node processing events. <\/p>\n<p>Luckily, the <a href=\"http:\/\/docs.python.org\/lib\/lib.html\">Python standard library<\/a> supports both approaches. It provides both a <a href=\"http:\/\/docs.python.org\/lib\/module-xml.sax.html\">SAX based parser<\/a> as well as a <a href=\"http:\/\/docs.python.org\/lib\/module-xml.dom.pulldom.html\">pull based parser called pulldom<\/a>. Pulldom doc&#8217;s are fairly sparse, but <a href=\"http:\/\/www.prescod.net\/\">Paul Prescod<\/a> wrote a <a href=\"http:\/\/www.prescod.net\/python\/pulldom.html\">nice introduction<\/a>. Here&#8217;s an example from Paul&#8217;s site (slightly modified):<\/p>\n<pre class=\"brush: python\">\nfrom xml.dom import pulldom \nnodes = pulldom.parse( \"file.xml\" )  \nfor (event,node) in nodes:  \n    if event==\"START_ELEMENT\" and node.tagName==\"table\":  \n        nodes.expandNode( node )\n<\/pre>\n<p>Actually, I like this <em>better<\/em> than XmlReader, since it provides the nodes in a list-like construct that appeals to the functional programmer in me. I&#8217;d like it even more if Python had a native pattern matching syntax &#8211; you know, like F# &#8211; but you can get similar results by chaining together conditionals with <a href=\"http:\/\/docs.python.org\/ref\/if.html\">elif<\/a>.<\/p>\n<p>However, IronPython doesn&#8217;t support any of the XML parsing modules from Python&#8217;s standard library. They&#8217;re all based on a C-based python module called <a href=\"http:\/\/docs.python.org\/lib\/module-xml.parsers.expat.html\">pyexpat<\/a> which IronPython can&#8217;t load. [1] I wanted a pulldom type model, so I decided to wrap XmlReader to provide a similar API and lets me write code like this:<\/p>\n<pre class=\"brush: python\">\nimport ipypulldom  \nnodes = ipypulldom.parse( \"sample.xml\" )   \nfor node in nodes:   \n  if node.nodeType==XmlNodeType.Element:   \n    print node.xname\n<\/pre>\n<p>There are a few differences from pulldom, but it&#8217;s basically the same model. I&#8217;m using the native .NET type XmlNodeType rather than a string to indicate the node type. Furthermore, I made the node type a property of the node, rather than a separate variable. I also didn&#8217;t implement expandNode, though doing so would be a fairly straightforward combination of XmlReader.ReadSubtree and XmlDocument.Load.<\/p>\n<p>I stuck the <a href=\"http:\/\/cid-0d9bc809858885a4.skydrive.live.com\/self.aspx\/DevHawk%20Content\/IronPython%20Stuff\/ipypulldom.py\">code for ipypulldom<\/a> up in a new folder on my Skydrive: <a href=\"http:\/\/cid-0d9bc809858885a4.skydrive.live.com\/browse.aspx\/DevHawk%20Content\/IronPython%20Stuff\">IronPython Stuff<\/a>. It&#8217;s fairly short &#8211; only about 45 lines of code. Feel free to use it if you need it.<\/p>\n<hr \/>\n<p>[1] The <a href=\"http:\/\/fepy.sourceforge.net\/\">FePy project<\/a> has a <a href=\"https:\/\/fepy.svn.sourceforge.net\/svnroot\/fepy\/trunk\/lib\/pyexpat.py\">.NET port of pyexpat<\/a> as part of their distribution, so I assume that lets you use the standard pulldom implementation in IPy. FePy looks really cool but I haven&#8217;t had time to dig into it yet. <\/p>\n","excerpt":"<p>When it comes to processing XML, there are two basic approaches &#8211; load it all into memory at once or process it a node at a time. In the .NET world where I have spent most of the past ten years, those two models are represented by XmlDocument and XmlReader. There are alternatives to XmlDocument, [&hellip;]<\/p>\n","date":"2008-05-06 11:21:54","modified":"2008-05-06 11:21:54","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":259,"slug":"python","title":"Python","description":"","post_count":7},{"id":238,"slug":"xml","title":"XML","description":"","post_count":11}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["381bc642-1227-46ac-8b2c-447db5ea9e7b"],"dasblog_compressedtitle":["Stream+Processing+XML+In+IronPython"],"dasblog_compressedtitleunique":["2008\/05\/06\/Stream+Processing+XML+In+IronPython"]}},"previous_url":"http:\/\/devhawk.net\/2008\/05\/05\/rare-insight-into-the-ipy-team\/","next_url":"http:\/\/devhawk.net\/2008\/05\/06\/deserializing-xml-with-ironpython\/"}