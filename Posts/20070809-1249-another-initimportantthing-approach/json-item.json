{"status":"ok","post":{"id":1025,"type":"post","slug":"another-initimportantthing-approach","url":"http:\/\/devhawk.net\/2007\/08\/09\/another-initimportantthing-approach\/","status":"publish","title":"Another InitImportantThing Approach","title_plain":"Another InitImportantThing Approach","content":"<p>I thought of another approach to the InitImportantThing problem that I <a href=\"http:\/\/devhawk.net\/2007\/08\/08\/Calling+InitImportantThing.aspx\" target=\"_blank\">blogged about yesterday<\/a>. I think it&#8217;s a bit harder to code, but it&#8217;s certainly explicit and avoids the magic method that Jon <a href=\"http:\/\/www.masteringbiztalk.com\/blogs\/jon\/PermaLink,guid,fa3c471d-a0f5-4790-a1b7-1fc374df651b.aspx\" target=\"_blank\">dislikes so much<\/a>.<\/p>\n<p>The crux of the problem is that ServiceHostBase needs a valid ServiceDescription in order to operate. The WCF team chose to provide said description to ServiceHostBase via the abstract CreateDescription method. But as we saw, ServiceHostBase can&#8217;t call CreateDescription from it&#8217;s own constructor. So instead, derived classes are forced to call InitializeDescription in their own constructor. Since that call isn&#8217;t enforced by the compiler, it&#8217;s easy to forget to include it. Since the exception that gets thrown doesn&#8217;t really tell you what went wrong, it&#8217;s easy to spend hours trying to figure it out.<\/p>\n<p>So here&#8217;s a better approach: since the ServiceHostBase needs a valid ServiceDescription in order to operate, why not pass it in as a constructor parameter? <\/p>\n<p>ServiceHostBase has a protected constructor with no parameters. But since it needs you to call InitializeDescription in your derived class constructor, it really needs the ServiceDescription, a collection of ContractDescriptions (also returned from CreateDescription) and a collection of base addresses (passed into InitalizeDescription). If these were parameters on ServiceHostBase&#8217;s constructor, it could validate that information directly, without needing abstract or magic methods.<\/p>\n<p>The one problem with this approach is that the creation of a ServiceDescription is non-trivial. ServiceHost&#8217;s <a href=\"code:\/\/System.ServiceModel:3.0.0.0:b77a5c561934e089\/System.ServiceModel.ServiceHost\/CreateDescription(System.Collections.Generic.IDictionary&lt;String,System.ServiceModel.Description.ContractDescription&gt;&amp;):System.ServiceModel.Description.ServiceDescription\" target=\"_blank\">implementation of CreateDescription<\/a> generates the ServiceDescription by reflecting over the service type. You still need that code, but now you would call it from the base constructor initializer instead. That means it has to be a static method, but otherwise it would work just fine. Here&#8217;s yesterday&#8217;s code, updated for this approach:<\/p>\n<pre class=\"brush: csharp\">\npublic abstract class Base \n{ \n    public Base(string importantThing) \n    { \n        if (string.IsNullOrEmpty(importantThing)) \n            throw new Exception(); \n\n        _importantThing = importantThing; \n\n    } \n\n    private string _importantThing; \n\n    public string ImportantThing  \n    {  \n        get { return _importantThing; }  \n    } \n} \n\npublic class Derived : Base \n{ \n    private object _data; \n\n    public Derived(DateTime dt) : base(CreateImportantThing(dt)) \n    { \n        _data = dt; \n    } \n\n    private static string CreateImportantThing(DateTime dt) \n    { \n        \/\/this is obviously trivial, but could be much\n        \/\/more complicated if need be\n        return dt.ToLongDateString(); \n    } \n}\n<\/pre>\n<p>This seems like the best approach to me. You remove the un-obvious magic method call requirement when deriving your own service host while still enforcing the data consistency check in the base class during construction. Best of both worlds, right?<\/p>\n<p>So I wonder why the WCF team didn&#8217;t do it this way?\u00a0 <\/p>\n","excerpt":"<p>I thought of another approach to the InitImportantThing problem that I blogged about yesterday. I think it&#8217;s a bit harder to code, but it&#8217;s certainly explicit and avoids the magic method that Jon dislikes so much. The crux of the problem is that ServiceHostBase needs a valid ServiceDescription in order to operate. The WCF team [&hellip;]<\/p>\n","date":"2007-08-09 12:49:23","modified":"2007-08-09 12:49:23","categories":[],"tags":[{"id":235,"slug":"c-sharp","title":"C#","description":"","post_count":17},{"id":316,"slug":"object-oriented","title":"Object Oriented","description":"","post_count":4},{"id":313,"slug":"wcf","title":"WCF","description":"","post_count":31}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2565,"name":"John P","url":"","date":"2007-08-09 14:12:26","content":"<p>&#8220;Since the ServiceHostBase needs a valid ServiceDescription in order to operate, why not pass it in as a constructor parameter? &#8221;<\/p>\n<p>< Sarchasm ><br \/>\nYou aren&#8217;t suggesting that programmers should fully initialize their ImportantThings are you ? That&#8217;s almost as silly as initializing variables in an old C or C++ compiler so when they&#8217;re first read, Random data isn&#8217;t already residing in the called memory location!<br \/>\n< \/Sarchasm ><\/p>\n<p>You approach can work as long as your have programmer that are willing to craft and modify code VS most of the current script monkeys I&#8217;ve dealt with who expect the compilers to do everything but collect their checks for them.<br \/>\nWhat I mean by this is : Bad code exists for good things. Copying bad code and modifying it slightly to fit your needs tends to carry the problems instead of offering desired solutions.<\/p>\n<p>Lasyness is a good approach for System Administrators who&#8217;s job is to keep Networks and PCs operating in an operational state ( Because by being lazy , they want to perform as little work as possible. Thusly, for that to happen, They need to measure and set the requirements and impliment the solutions so it only needs to be performed once. ). This is not applicable to programmers who&#8217;s job is to properly bind and create code. Now, I&#8217;m not implying that programmers should re-invent the wheel every time, But at least look and see if all items brought into a program are required and secured to avoid Miss Takes. <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_wink.gif\" alt=\";-)\" class=\"wp-smiley\" \/> <\/p>\n<p>Then again, my programming is a little rusty.<\/p>\n","parent":0},{"id":2566,"name":"DevHawk","url":"","date":"2007-08-09 17:03:28","content":"<p>&#8220;Copying bad code and modifying it slightly to fit your needs tends to carry the problems instead of offering desired solutions.&#8221; <\/p>\n<p>I don&#8217;t know for sure, but I&#8217;d bet that&#8217;s probably how the ServiceHostBase design got broken in the first place! <\/p>\n","parent":0},{"id":2567,"name":"John P","url":"","date":"2007-08-09 17:07:45","content":"<p>So, does this mean that we have put the final nail in the coffin for &#8220;Portable , Reusable Code&#8221; ? I think not but then again &#8230;<\/p>\n<p>These ARE NOT the droids we&#8217;re looking for &#8230;<\/p>\n","parent":0}],"attachments":[],"comment_count":3,"comment_status":"closed","custom_fields":{"dasblog_entryid":["f2250067-7970-401a-8ff2-93de2fba58f6"],"dasblog_compressedtitle":["Another+InitImportantThing+Approach"],"dasblog_compressedtitleunique":["2007\/08\/09\/Another+InitImportantThing+Approach"]}},"previous_url":"http:\/\/devhawk.net\/2007\/08\/08\/calling-initimportantthing\/","next_url":"http:\/\/devhawk.net\/2007\/08\/09\/fantasy-free-code-and-the-sharepoint-model\/"}