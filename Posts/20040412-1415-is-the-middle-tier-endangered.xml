<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Is the Middle-Tier Endangered?</title>
  <link>http://devhawk.net/2004/04/12/is-the-middle-tier-endangered/</link>
  <pubDate>Mon, 12 Apr 2004 14:15:11 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://950774a9-b33b-4a46-bb2b-a481cf946251</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p></p><p>Via <a href="http://udidahan.weblogs.us/archives/018938.html">Udi</a> and <a href="http://weblogs.asp.net/tspascoal/archive/2004/04/05/107949.aspx">Tiago</a>, I found an article on DevX called "<a href="http://www.devx.com/dbzone/Article/20471/1954?pf=true">Kiss the Middle-tier Goodbye with SQL Server Yukon</a>". While that article should have been titled "XML Technologies in SQL Server Yukon", both Udi and Tiago have interesting posts about SQL Server as a platform and the role of the database going forward. Personally, I see two primary forces at work that I believe will drive the middle tier into extinction: Moore's Law and Service-Orientation.</p><p>Why do we distribute applications across multiple systems today? Is it because we like managing multiple systems? No! It's for scalability. We exploit the fact that tiers of a multi-tier app have different processing loads and scalability methods. Typically, we scale the web/app tier by throwing more servers at the farm while we scale the data tier with bigger servers. However, as Moore's law increases the performance of these machines, the need to scale becomes reduced, From my experience, many smaller apps could easily run a single machine today (esp. when you consider the increased efficiency of eliminating the network and process hops). Moore's law will continue increase the headroom these machines provide and expand the definition of "smaller apps". If you can run the app on a single hardware node, there'd be little reason not to run as much of it as you can inside the database, other than "we might want to scale this out someday". </p><p>Of course, it will be a long long time before Moore's law can provide a single machine to run a BIG enterprise app (think something like SAP). This is where service-orientation comes in. While some people see services as a way to interoperate BIG apps, I think the future of services is to free us from building BIG apps, or at least from build BIG apps as monoliths. If you figure a BIG app like SAP has hundreds or thousands of business process or resource management operations, you could build that system where each operation is implemented as an independent service. The benefit of this approach is that it is orders of magnitude more flexible in the face of process change than the BIG app approach. If you haven't seen it, check out the Technology Roadmap session from the <a href="http://msdn.microsoft.com/architecture/overview/series/">Architecture Strategy Series</a>. One of the points that the presenter Norm Judah makes is that "it is the business processes in an organization that are unstable, but the individual things that people do...are the things that are stable." (He says that during Slide 9 - "Why Do Architecture Projects Re-Occur?") If you accept that, then having your business processes hard coded in a BIG inflexible app starts to look like a bad idea. These "individual things that people do" (such as sending out invoices) get mapped to services and are aggregated into business processes by some tool we haven't seen yet (though I think <a href="http://www.microsoft.com/biztalk/">BTS 2004</a> is a good start). </p><p>If service-orientation shreds your BIG app into many pieces, it is highly likely that those pieces will be small enough to run on a single hardware node. In addition, as services communicate with asynchronous messages, they tend to have lower scalability needs than synchronous systems. And since these services all need a database (<a href="http://blogs.msdn.com/pathelland">Pat</a> refers to the database as the soul of the service) it makes sense to run the service inside the database itself. It even makes sense to build a both an application and a messaging infrastructure directly into the database engine. SQL Yukon provides the application infrastructure by hosting the .NET framework and provides the messaging infrastructure with the <a href="http://www.winnetmag.com/SQLServer/Article/ArticleID/41887/41887.html">SQL Service Broker</a>.</p><p>However, we need more than faster computers and service-oriented systems to eliminate the middle tier. We also need better management. And not incrementally better, orders of magnitudes better. If you're going to replace a single BIG app with hundreds of independent services, incremental manageability improvements are not going to cut it. Because we realize this too, Microsoft is investing heavily in the <a href="http://www.microsoft.com/dsi">Dynamic System Initiative</a>. If you're a developer, you've probably seen the <a href="http://msdn.microsoft.com/vstudio/productinfo/roadmap.aspx#enterprise">Whitehorse</a> designers coming with Whidbey. That's just part of DSI. We've got a great architectural overview of DSI as part of our <a href="http://msdn.microsoft.com/architecture/overview/series/">Architecture Strategy Series</a> or you can read more on the <a href="http://www.microsoft.com/dsi">DSI homepage</a>.</p><p>Do you think the middle-tier will become extinct? If it does, is that a good thing? Obviously, it's an unknown and a big change, which makes it hard to gauge. But what does your gut tell you?</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">349</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2004-04-12 14:15:11</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2004-04-12 14:15:11</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">is-the-middle-tier-endangered</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
  <category domain="post_tag" nicename="soa"><![CDATA[SOA]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[950774a9-b33b-4a46-bb2b-a481cf946251]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Is+The+MiddleTier+Endangered]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2004/04/12/Is+The+MiddleTier+Endangered]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3047</wp:comment_id>
    <wp:comment_author><![CDATA[Kent Tegels]]></wp:comment_author>
    <wp:comment_author_email>kent@tegels.org</wp:comment_author_email>
    <wp:comment_author_url>http://www.tegels.org/</wp:comment_author_url>
    <wp:comment_author_IP></wp:comment_author_IP>
    <wp:comment_date>2004-04-12 18:24:40</wp:comment_date>
    <wp:comment_date_gmt>2004-04-13 01:24:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[While I agree a lot of what you say, there's just a couple of points to consider: First, I would opt for a cluster of two or three of really big servers if you're going to do this. Its too easy for a single failure to take one machine out for too long. Even something as seemingly simple as a network adapter for the backup SAN going out can cause an intolerable downtime in a single server environment. 

Second, you really don't need Yukon to make this work, you could do it with COM+ and MTS. But you'd have to drag me kicking and screaming to such a place. :)

I am anixous to see how such systems really work out.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3048</wp:comment_id>
    <wp:comment_author><![CDATA[John Lam]]></wp:comment_author>
    <wp:comment_author_email>jlam@iunknown.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.iunknown.com</wp:comment_author_url>
    <wp:comment_author_IP></wp:comment_author_IP>
    <wp:comment_date>2004-04-12 21:16:13</wp:comment_date>
    <wp:comment_date_gmt>2004-04-13 04:16:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think the technology that will make the middle tier go away is dynamic repartitioning of logical data across physical DB nodes. I believe that Jim Gray at MSR wrote a presentation a while back where he speculated about database servers running inside of HDD controllers.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>3049</wp:comment_id>
    <wp:comment_author><![CDATA[Stephen Johnston]]></wp:comment_author>
    <wp:comment_author_email></wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP></wp:comment_author_IP>
    <wp:comment_date>2004-04-26 08:33:32</wp:comment_date>
    <wp:comment_date_gmt>2004-04-26 15:33:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No. It's not endangered. Service Architectures are another tool in the kit, it is far from replacing the utility of the middle tier. The service architecture is an interface to the app, not the app itself. The app may still require a 3 tier architecture to run at its best, while the interface may not. Your taking a single aspect of an application, refining it in a void, then saying your conclusion on the refinement of that aspect applies to whe whole which is a quite dangerous way of designing systems.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>