{"status":"ok","post":{"id":1196,"type":"post","slug":"ironpython-and-wpf-part-5-interactive-console","url":"http:\/\/devhawk.net\/2008\/11\/24\/ironpython-and-wpf-part-5-interactive-console\/","status":"publish","title":"IronPython and WPF Part 5: Interactive Console","title_plain":"IronPython and WPF Part 5: Interactive Console","content":"<p>One of the hallmarks of dynamic language programming is the use of the interactive prompt, otherwise known as the <a href=\"http:\/\/en.wikipedia.org\/wiki\/REPL\">Read-Eval-Print-Loop<\/a> or REPL. Even though I\u2019m building a WPF client application, I\u2019d still like to have the ability to poke around and even modify the app as it\u2019s running from the command prompt, REPL style. <\/p>\n<p>If you work thru the IronPython <a href=\"http:\/\/www.codeplex.com\/IronPython\/SourceControl\/changeset\/file\/view\/43829\/649827\">Tutorial<\/a>, there are exercises for interactively building both a WinForms and a WPF application. In both scenarios, you create a dedicated thread to service the UI so it can run while the interactive prompt thread is blocked waiting for user input. However, as we saw in the <a href=\"http:\/\/devhawk.net\/2008\/11\/19\/IronPython+And+WPF+Part+4+Background+Processing.aspx\">last part of this series<\/a>, UI elements in both WinForms and WPF can only be accessed from the thread they are created on. We already know how to marshal calls to the correct UI thread \u2013 <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.windows.threading.dispatcher.invoke.aspx\">Dispatcher.Invoke<\/a>. However, what we need is a way to intercept commands entered on the interactive prompt so we can marshal them to the correct thread before they execute. <\/p>\n<p>Luckily, IronPython provides just such a mechanism: <a href=\"http:\/\/www.codeplex.com\/IronPython\/SourceControl\/changeset\/file\/view\/43829\/649872\">clr module\u2019s<\/a> SetCommandDispatcher. A command dispatcher is a function hook that gets called for every command the user enters. It receives a single parameter, a delegate representing the command the user entered. In the WPF and WinForms tutorials, you use this function hook to marshal the commands to the right thread to be executed. Here\u2019s the command dispatcher from the WPF tutorial:<\/p>\n<pre class=\"brush: python\">\ndef DispatchConsoleCommand(consoleCommand):     \n    if consoleCommand:     \n        dispatcher.Invoke(DispatcherPriority.Normal, consoleCommand)\n<\/pre>\n<p>The dispatcher.Invoke call looks kinda like the UIThread decorator from the <a href=\"http:\/\/devhawk.net\/2008\/11\/19\/IronPython+And+WPF+Part+4+Background+Processing.aspx\">Background Processing<\/a> part of this series, doesn\u2019t it?<\/p>\n<p>Quick aside: I looked at using SyncContext here instead of Dispatcher, since I don\u2019t care about propagating a return value back to the interactive console thread. However, SyncContext expects a <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.threading.sendorpostcallback.aspx\">SendOrPostDelegate<\/a>, which expects a single object parameter. The delegate passed to the console hook function is an <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.action.aspx\">Action<\/a> with no parameters. I could have built a wrapper function that took a single parameter which it would ignore, but I decided it wasn\u2019t worth it. The more I look at it, the more I believe SyncContext is a good idea with a bad design. <\/p>\n<p>I wrapped all the thread creation and command dispatching into a reusable helper class called InteractiveApp.<\/p>\n<pre class=\"brush: python\">\nclass InteractiveApp(object):     \n  def __init__(self):     \n    self.evt = AutoResetEvent(False)     \n     \n    thrd = Thread(ThreadStart(self.thread_start))     \n    thrd.ApartmentState = ApartmentState.STA     \n    thrd.IsBackground = True\n    thrd.Start()     \n     \n    self.evt.WaitOne()     \n    clr.SetCommandDispatcher(self.DispatchConsoleCommand)     \n     \n  def thread_start(self):     \n    try:     \n      self.app = Application()     \n      self.app.Startup += self.on_startup     \n      self.app.Run()     \n    finally:     \n      clr.SetCommandDispatcher(None)     \n\n  def on_startup(self, *args):     \n    self.dispatcher = Threading.Dispatcher.FromThread(Thread.CurrentThread)     \n    self.evt.Set()     \n     \n  def DispatchConsoleCommand(self, consoleCommand):     \n    if consoleCommand:     \n        self.dispatcher.Invoke(consoleCommand)     \n     \n  def __getattr__(self, name):     \n    return getattr(self.app, name)\n<\/pre>\n<p>The code is pretty self explanatory. The constructor (__init__) creates the UI thread, starts it, waits for it to signal that it\u2019s ready via an AutoResetEvent and then finally sets the command dispatcher. The UI thread creates and runs the WPF application, saves the dispatcher object as a field on the object, then signals that it\u2019s ready. DispatchConsoleCommand is nearly identical to the earlier version, I\u2019ve just made it an instance method instead of a stand-alone function. Finally, I define __getattr__ so that any operations invoked on InteractiveApp are passed thru to the contained WPF Application instance. <\/p>\n<p>In my app.py file, I look to see if the module has been started directly or if it\u2019s been imported into another module. If the module is run directly (aka \u2018ipy app.py\u2019) then the global __name__ variable will be \u2018__main__\u2019. In that case, we start the application up normally (i.e. without the interactive prompt) by just creating an Application then running it with a Window instance. Otherwise, we are importing this app into another module (typically, the interactive console), so we create an InteractiveApp instance and we create an easy to use run method that can create the instance of the main window.<\/p>\n<pre class=\"brush: python\">\nif __name__ == '__main__':     \n  app = wpf.Application()     \n  window1 = MainWin.MainWindow()     \n  app.Run(window1.root)     \n   \nelse:  \n  app = wpf.InteractiveApp()     \n\n  def run():     \n    global mainwin     \n    mainwin = MainWin.MainWindow()     \n    mainwin.root.Show()\n<\/pre>\n<p>If you want to run the app interactively, you simply import the app module and call run. Here\u2019s a sample session where I iterate thru the items bound to the first list box. Of course, I can do a variety of other operations I can do such as manipulate the data or create new UI elements. <\/p>\n<pre class=\"brush: text\">\nIronPython 2.0 (2.0.0.0) on .NET 2.0.50727.3053   \n&gt;&gt;&gt; import app   \n&gt;&gt;&gt; app.run()   \n#at this point the app window launches \n&gt;&gt;&gt; for i in app.mainwin.allAlbumsListBox.Items:   \n...     print i.title   \n...   \nHarvest Festivals   \nMrs. Gardner's Art   \nRiley's Playdate   \nAugust 13   \nCamp Days   \nJuly 14   \nMay Photo Shoot   \nSummer Play 2006   \nLake Washington With The Gellers   \nCamp Pierson '06   \nJanuary 28\n<\/pre>\n<p>One small thing to keep in mind: if you exit the command prompt, the UI thread will also exit since it\u2019s marked as a background thread. Also, it looks like you could shut the client down then call run again to restart it, but you can\u2019t. If you shut the client down, the Run method in InteractiveApp.thread_start exits, resets the Command Dispatcher to nothing and the thread terminates. I could fix it so that you could run the app multiple times, but I find I typically only run the app once for a given session anyway. <\/p>\n","excerpt":"<p>One of the hallmarks of dynamic language programming is the use of the interactive prompt, otherwise known as the Read-Eval-Print-Loop or REPL. Even though I\u2019m building a WPF client application, I\u2019d still like to have the ability to poke around and even modify the app as it\u2019s running from the command prompt, REPL style. If [&hellip;]<\/p>\n","date":"2008-11-24 10:45:35","modified":"2008-11-24 10:45:35","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":271,"slug":"wpf","title":"WPF","description":"","post_count":8}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2145,"name":"Lukas Cenovsky","url":"http:\/\/gui-at.blogspot.com\/","date":"2008-11-25 05:58:36","content":"<p>Hi,<br \/>\nwhat about using ThreadPool? See my post: <a href=\"http:\/\/gui-at.blogspot.com\/2008\/06\/exploring-test-application-ironpython-2.html\" rel=\"nofollow\">http:\/\/gui-at.blogspot.com\/2008\/06\/exploring-test-application-ironpython-2.html<\/a><br \/>\nI don&#8217;t see any functional difference and you don&#8217;t need to care about Invoke.<\/p>\n","parent":0},{"id":2146,"name":"DevHawk","url":"","date":"2008-11-26 21:50:48","content":"<p>@lukas, I tried using the ThreadPool instead of manually spinning up a thread and it crashed. At least for WPF, the UI objects must be created on an STA thread and the ThreadPool threads are all MTA. <\/p>\n<p>As for not caring about Invoke, this code does not work without the command dispatcher calling Invoke. Just for kicks, I tried commenting it out and I get a &#8220;The calling thread cannot access this object because a different thread owns it.&#8221; if I try to interact with the WPF objects in any way. <\/p>\n<p>I see from your blog entry that you&#8217;re using WinForms not WPF, but I&#8217;m 99% sure the rules are the same. From <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/system.windows.forms.control.invokerequired.aspx\" rel=\"nofollow\">http:\/\/msdn.microsoft.com\/en-us\/library\/system.windows.forms.control.invokerequired.aspx<\/a>: &#8220;Controls in Windows Forms are bound to a specific thread and are not thread safe. Therefore, if you are calling a control&#8217;s method from a different thread, you must use one of the control&#8217;s invoke methods to marshal the call to the proper thread.&#8221;<\/p>\n","parent":0},{"id":2147,"name":"Lukas Cenovsky","url":"http:\/\/gui-at.blogspot.com\/","date":"2008-11-27 09:37:30","content":"<p>The threading is still kind of mystery for me. Especially when something works for me which shouldn&#8217;t according to others.<\/p>\n<p>Your first point is correct &#8211; I use WinForms instead of WPF. I also use IronPython 1.1.1 on .NET 2.0.50727.3053.<\/p>\n<p>I do not call methods on WinForms. I only read properties because I simulate all methods via Win32 API calls. For example, when I want to click button, I send mouse click event to the position of the button. <\/p>\n<p>Interestingly, when I directly call OnClick method of a button, the method runs OK and the button is clicked. For example, using <a href=\"http:\/\/gui-at.cendaweb.cz\/GUIAT_PoC.exe\" rel=\"nofollow\">http:\/\/gui-at.cendaweb.cz\/GUIAT_PoC.exe<\/a> run:<\/p>\n<p>IronPython 1.1.1 (1.1.1) on .NET 2.0.50727.3053<br \/>\nCopyright (c) Microsoft Corporation. All rights reserved.<br \/>\n>>> import clr<br \/>\n>>> clr.AddReference(&#8216;System&#8217;)<br \/>\n>>> clr.AddReference(&#8220;System.Windows.Forms&#8221;)<br \/>\n>>> from System import *<br \/>\n>>> from System.Reflection import *<br \/>\n>>> from System.Threading import *<br \/>\n>>> from System.Windows.Forms import Application<br \/>\n>>> from time import sleep<br \/>\n>>><br \/>\n>>> def RunMeCallBack(var):<br \/>\n&#8230;     global App<br \/>\n&#8230;     asm = Assembly.LoadFrom(&#8216;GUIAT_PoC.exe&#8217;)<br \/>\n&#8230;     asm_type = asm.GetType(&#8216;GUIAT_PoC.frmGUIAT&#8217;)<br \/>\n&#8230;     App = Activator.CreateInstance(asm_type)<br \/>\n&#8230;     Application.Run(App)<br \/>\n&#8230;<br \/>\n>>> App = None<br \/>\n>>> ThreadPool.QueueUserWorkItem(WaitCallback(RunMeCallBack))<\/p>\n<p>Wait a moment until the app is loaded and run:<br \/>\n>>> App.Controls[2].Text = &#8216;text&#8217;<br \/>\n>>> App.Controls[0].OnClick(None)<\/p>\n<p>The &#8216;text&#8217; is added to the listbox. Is this just a lucky chance I have or is it correct behavior? I do not know&#8230;<\/p>\n<p>PS: I tried it on IronPython 20 RC2 (IronPython 2.0 (2.0.0.0) on .NET 2.0.50727.3053) now and it behaves the same.<\/p>\n","parent":0}],"attachments":[],"comment_count":3,"comment_status":"closed","custom_fields":{"dasblog_entryid":["92f9770d-1f99-4aa4-914a-b28e1445c22f"],"dasblog_compressedtitle":["IronPython+And+WPF+Part+5+Interactive+Console"],"dasblog_compressedtitleunique":["2008\/11\/24\/IronPython+And+WPF+Part+5+Interactive+Console"]}},"previous_url":"http:\/\/devhawk.net\/2008\/11\/21\/resolver-one-1-3-released\/","next_url":"http:\/\/devhawk.net\/2008\/11\/26\/ironpython-and-linq-to-xml-part-1-introduction\/"}