<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>2146</wp:comment_id>
  <wp:comment_author><![CDATA[DevHawk]]></wp:comment_author>
  <wp:comment_author_email>harry@devhawk.net</wp:comment_author_email>
  <wp:comment_author_url></wp:comment_author_url>
  <wp:comment_author_IP>71.231.42.80</wp:comment_author_IP>
  <wp:comment_date>2008-11-26 21:50:48</wp:comment_date>
  <wp:comment_date_gmt>2008-11-27 05:50:48</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[@lukas, I tried using the ThreadPool instead of manually spinning up a thread and it crashed. At least for WPF, the UI objects must be created on an STA thread and the ThreadPool threads are all MTA. 

As for not caring about Invoke, this code does not work without the command dispatcher calling Invoke. Just for kicks, I tried commenting it out and I get a "The calling thread cannot access this object because a different thread owns it." if I try to interact with the WPF objects in any way. 

I see from your blog entry that you're using WinForms not WPF, but I'm 99% sure the rules are the same. From http://msdn.microsoft.com/en-us/library/system.windows.forms.control.invokerequired.aspx: "Controls in Windows Forms are bound to a specific thread and are not thread safe. Therefore, if you are calling a control's method from a different thread, you must use one of the control's invoke methods to marshal the call to the proper thread."]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>