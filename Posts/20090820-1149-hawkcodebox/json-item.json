{"status":"ok","post":{"id":1284,"type":"post","slug":"hawkcodebox","url":"http:\/\/devhawk.net\/2009\/08\/20\/hawkcodebox\/","status":"publish","title":"HawkCodeBox","title_plain":"HawkCodeBox","content":"<p>Last month, I <a href=\"http:\/\/devhawk.net\/2009\/07\/09\/Syntax+Highlighting+TextBoxes+In+WPF+Ndash+A+Sad+Story.aspx\">lamented<\/a> the lack of extensibility of the WPF text box. While there are <a href=\"http:\/\/www.actiprosoftware.com\/Products\/DotNet\/WindowsForms\/SyntaxEditor\/Default.aspx\">several<\/a><a href=\"http:\/\/www.aqistar.com\/\">vendors<\/a> and at least one <a href=\"http:\/\/wiki.sharpdevelop.net\/AvalonEdit.ashx\">open source<\/a> custom syntax highlighting text box, it still really bothers me how inextensible the basic WPF text box is. I just want to do a simple colorizing REPL \u2013 why is that so hard?<\/p>\n<p>So instead of using any of those syntax highlighting text boxes, I decided to build my own using the approach Ken Johnson <a href=\"http:\/\/www.codeproject.com\/KB\/WPF\/CodeBox.aspx\">wrote about<\/a> on Code Project. As I wrote before, it\u2019s a hack \u2013 you set the text box\u2019s foreground and background brushes to transparent so that you can override OnRender \u2013 but it works. <\/p>\n<p>The big change I made from Ken\u2019s code was to use DLR TokenCategorizer instead of regular expressions to tokenize the code. <a href=\"http:\/\/dlr.codeplex.com\/SourceControl\/changeset\/view\/26964#581527\">TokenCategorizer<\/a> is a service provided by the DLR hosting API, which will tokenize a given script source for you. Here\u2019s the code that colorizes the text in the text box.<\/p>\n<\/p>\n<pre class=\"brush: csharp\">\nvar source = Engine.CreateScriptSourceFromString(this.Text);\nvar tokenizer = Engine.GetService&lt;TokenCategorizer&gt;();\ntokenizer.Initialize(null, source, SourceLocation.MinValue);\n\nvar t = tokenizer.ReadToken();\nwhile (t.Category != TokenCategory.EndOfStream)\n{\n    if (SyntaxMap.ContainsKey(t.Category))\n    {\n        ft.SetForegroundBrush(_syntaxMap[t.Category], \n             t.SourceSpan.Start.Index, t.SourceSpan.Length);\n    }\n\n    t = tokenizer.ReadToken();\n}\n<\/pre>\n<p>As you can see, I ask the engine for a TokenCategorizer, initialize it with the text box\u2019s current contents, then iterate thru the tokens, looking for ones in my SyntaxMap. If the token category is in the syntax map, we change the foreground brush for that span of formatted text (ft is a WPF FormattedText instance I created earlier in the method. <\/p>\n<p>Of course, this approach isn\u2019t very efficient \u2013 it re-colorizes the entire file on every change. It turns out that some DLR TokenCategorizer are restartable so you can cache the tokenizer state at any point and then return later with a new TokenCategorizer instance and pick up tokenizing where you left off. With this approach, you could say tokenize a line at a time, allowing you to only need to retokenize the line where the change occurred rather than the entire file. But only IronPython supports tokenizer restarting today, so I decided to take the easy way and simple re-colorize on every change.<\/p>\n<p>I named the project HawkCodeBox and I\u2019ve <a href=\"http:\/\/github.com\/devhawk\/HawkCodeBox\/tree\/master\">published the source<\/a> up on GitHub. It\u2019s fairly simple, but of course the goal wasn\u2019t to build the be-all-end-all text editor \u2013 other <a href=\"http:\/\/blogs.msdn.com\/vseditor\/\">people in the VS team<\/a> already have that job. <\/p>\n","excerpt":"<p>Last month, I lamented the lack of extensibility of the WPF text box. While there are severalvendors and at least one open source custom syntax highlighting text box, it still really bothers me how inextensible the basic WPF text box is. I just want to do a simple colorizing REPL \u2013 why is that so [&hellip;]<\/p>\n","date":"2009-08-20 11:49:16","modified":"2009-08-20 11:49:16","categories":[{"id":204,"slug":"development","title":"Development","description":"","parent":0,"post_count":165}],"tags":[{"id":231,"slug":"dlr","title":"DLR","description":"","post_count":25},{"id":288,"slug":"hawkcodebox","title":"HawkCodeBox","description":"","post_count":1}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2253,"name":"Fahad","url":"","date":"2009-08-28 14:24:22","content":"<p>You could actually use the FormattedText class, which is a low-level font based text renderer, and use a custom control for rendering. I would actually go with TextBlock and have my own render calls, then use a canvas that will allow me to edit a charactor to simply host on top of my editing row.<\/p>\n<p>-Fahad<\/p>\n","parent":0}],"attachments":[],"comment_count":1,"comment_status":"closed","custom_fields":{"dasblog_entryid":["6643b4fa-0c17-4840-9456-77b83d45fae7"],"dasblog_compressedtitle":["HawkCodeBox"],"dasblog_compressedtitleunique":["2009\/08\/20\/HawkCodeBox"]}},"previous_url":"http:\/\/devhawk.net\/2009\/08\/16\/codeplex-editor-role\/","next_url":"http:\/\/devhawk.net\/2009\/08\/21\/devhawk-world-tour-fy2010\/"}