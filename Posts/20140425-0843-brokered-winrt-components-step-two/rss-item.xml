<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Brokered WinRT Components Step Two</title>
  <link>http://devhawk.net/2014/04/25/brokered-winrt-components-step-two/</link>
  <pubDate>Fri, 25 Apr 2014 15:43:35 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/"><![CDATA[devhawk]]></dc:creator>
  <guid isPermaLink="false">http://devhawk.net/?p=2093</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[Now that we have built the brokered component , we have to build a proxy/stub for it. Proxies and stubs are how WinRT method calls are marshalled across process boundaries. If you want to know more – or you have insomnia – feel free to read <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms692621(v=vs.85).aspx">all the gory details up on MSDN</a>.

Proxies and stubs look like they might be scary, but they’re actually trivial (at least in the brokered component scenario) because 100% of the code is generated for you. It couldn’t be much easier.

Right click the solution node and select Add -&gt; New Project. Alternatively, you can select File -&gt; New -&gt; Project in the Visual Studio main menu, but if you do that make sure you change the default solution from “Create new Solution” to “Add to Solution”. Regardless of how you launch the new project wizard, search for “broker” again, but this time select the “Brokered Windows Runtime ProxyStub” template. Give the project a name - I chose “HelloWorldBRT.PS”.

<a href="http://devhawk.net/wp-content/uploads/2014/04/ProxyStubAddReference.png"><img class="alignleft  wp-image-2099" alt="ProxyStubAddReference" src="http://devhawk.net/wp-content/uploads/2014/04/ProxyStubAddReference-300x174.png" width="180" height="104" /></a>Once you’ve created the proxy/stub project, you need to set a reference to the brokered component you created in step 1. Since proxies and stubs are native, this is a VC++ project. Adding a reference in a VC++ is not as straightforward as it is in C# projects. Right click the proxy/stub project, select “Properties” and then select Common Properties -&gt; References from the tree on the left. Press the “Add New Reference…” button to bring up the same Add Reference dialog you’ve seen in managed code projects. Select the brokered component project and press OK.

Remember when I said that 100% of the code for the proxy/stub is generated? I wasn’t kidding – creating the template and setting referencing the brokered component project is literally all you need to do. Want proof? Go ahead and build now. If you watch the output windows, you’ll see a bunch of output go by referencing IDL files and MIDLRT among other stuff. This proxy/stub template has some custom MSBuild tasks that generates the proxy/stub code using winmdidl and midlrt. The process is similar to what is <a href="http://msdn.microsoft.com/en-us/library/dn481253.aspx">described here</a>. BTW, if you get a chance, check out the proxy/stub project file – it is a work of art. Major props to <a href="http://www.linkedin.com/pub/kieran-mockford/4/77/110">Kieran Mockford</a> for his msbuild wizardry.

<a href="http://devhawk.net/wp-content/uploads/2014/04/ProxyStubRegisterOutput.png"><img class="alignright  wp-image-2100" alt="ProxyStubRegisterOutput" src="http://devhawk.net/wp-content/uploads/2014/04/ProxyStubRegisterOutput-300x174.png" width="180" height="104" /></a>Unfortunately, it’s not enough just to build the proxy/stub – you also have to register it. The brokered component proxy/stub needs to be registered globally on the machine, which means you have to be running as an admin to do it. VS can register the proxy/stub for you automatically, but that means you have to run VS as an administrator. That always makes me nervous, but if you’re OK with running as admin you can enable proxy/stub registration by right clicking the proxy/stub project file, selecting Properties, navigating to Configuration properties -&gt; Linker -&gt; General in the tree of the project properties page, and then changing Register Output to “Yes”.

If you don’t like running VS as admin, you can manually register the proxy/stub by running “regsvr32 &lt;proxystub dll&gt;” from an elevated command prompt. Note, you do have to re-register every time the public surface area of your brokered component changes so letting VS handle registration admin is definitely the easier route to go.

In the <a href="http://devhawk.net/2014/04/25/brokered-winrt-components-step-three">third and final step</a>, we'll build a client app that accesses our brokered component.]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">2093</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2014-04-25 08:43:35</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2014-04-25 15:43:35</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">brokered-winrt-components-step-two</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="brokered-components"><![CDATA[brokered components]]></category>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="sideload"><![CDATA[sideload]]></category>
  <category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <category domain="category" nicename="windows-runtime"><![CDATA[Windows Runtime]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>layout_key</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>post_slider_check_key</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_wpas_done_all</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>