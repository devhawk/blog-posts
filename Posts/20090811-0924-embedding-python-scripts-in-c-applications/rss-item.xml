<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Embedding Python Scripts in C# Applications</title>
  <link>http://devhawk.net/2009/08/11/embedding-python-scripts-in-c-applications/</link>
  <pubDate>Tue, 11 Aug 2009 09:24:42 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://ac6fe2e5-6c82-4898-8ee3-1bde31026655</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="image" border="0" alt="image" align="left" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/8d7a6d959c67_6D72/image_thumb_1.png" width="133" height="240" /></p><p>Now that I’ve got Pygments and its dependencies <a href="http://devhawk.net/2009/08/10/Compiling+Python+Packages+Into+Assemblies.aspx">packaged up in an easy-to-distribute assembly</a>, I need to be able to call it from C#. However, if you pop open pygments.dll in Reflector, you’ll notice it’s not exactly intuitive to access. Lots of compiler generated names like pygments$12 and StringIO$64 in a type named DLRCachedCode. Clearly, this code isn’t intended to be used by anything except the IronPython runtime. </p><p>So we better create one of those IronPython runtime thingies.</p><p>As you can see in the layer diagram to the left, PygmentsCodeSource is split into two parts – a C# part and a Python part. The Python part is very simple – just importing a couple of Pygments functions into the global namespace and a simple helper function to generate syntax highlighted HTML from a given block of code in a given language and style. The code itself is pretty simple. Note the reference to the pygments assembly I described last post. Here’s the entire file:</p><pre class="brush: python">
import clr
clr.AddReference("pygments")       

from pygments.lexers import get_all_lexers       
from pygments.styles import get_all_styles       

def generate_html(code, lexer_name, style_name):       
  from pygments import highlight       
  from pygments.lexers import get_lexer_by_name       
  from pygments.styles import get_style_by_name       
  from devhawk_formatter import DevHawkHtmlFormatter       

  if not lexer_name: lexer_name = "text"
  if not style_name: style_name = "default"
  lexer = get_lexer_by_name(lexer_name)       
  return highlight(code, lexer, DevHawkHtmlFormatter(style=style_name))
</pre><p>Instead of including this in the Pygments assembly, I embedded this file as a resource in my C# assembly. This way, I could use the standard DLR hosting APIs to create a script source and execute this code. I did have to build a concrete StreamContentProvider class to wrap the resource stream in, but otherwise, it’s pretty straight forward. </p><pre class="brush: csharp">
static ScriptEngine _engine;      
static ScriptSource _source;      

private void InitializeHosting()      
{
    _engine = IronPython.Hosting.Python.CreateEngine();      

    var asm = System.Reflection.Assembly.GetExecutingAssembly();      
    var stream = asm.GetManifestResourceStream(      
                   "DevHawk.PygmentsCodeSource.py");      
    _source = _engine.CreateScriptSource(      
                new BasicStreamContentProvider(stream),  
                "PygmentsCodeSource.py");      
}
</pre><p>Once I got the engine and script source set up, all that remains is setup a script scope to execute the script source in. For this specific application, it’s probably overkill to have a scope per instance – I think the syntax highlighting process is stateless so a single scope should be easily shared across multiple PygmentsCodeSource instances. But I didn’t take any chances, I created a script scope per instance to execute the source in.</p><pre class="brush: csharp">
ScriptScope _scope;     
Thread _init_thread;      

public PygmentsCodeSource()      
{
    if (_engine == null)      
        InitializeHosting();      

     _scope = _engine.CreateScope();      

    _init_thread = new Thread(() =&gt; { _source.Execute(_scope); });      
    _init_thread.Start();      
}
</pre><p>You’ll notice that I’m executing the source in the scope on a background thread. That’s because it takes a while to execute, especially the first time. However, I don’t actually use the Python code until after the user types or copies a block of code into the UI and presses OK. In my experience, executing the Python code is typically finished by the time I get code into the box and press OK. I just need to make sure I add an _init_thread.Join guard anywhere I’m going to access the _scope to be sure the initialization is complete before I try to use it.</p><p>In the next, and last, post in this small series we’ll see how to invoke Python functions in the _scope I initialized above from C#.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1280</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2009-08-11 09:24:42</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2009-08-11 09:24:42</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">embedding-python-scripts-in-c-applications</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="dlr"><![CDATA[DLR]]></category>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <category domain="post_tag" nicename="pygments"><![CDATA[Pygments]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[ac6fe2e5-6c82-4898-8ee3-1bde31026655]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Embedding+Python+Scripts+In+C+Applications]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2009/08/11/Embedding+Python+Scripts+In+C+Applications]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2251</wp:comment_id>
    <wp:comment_author><![CDATA[Randall Sutton]]></wp:comment_author>
    <wp:comment_author_email>randallsutton@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://blog.randallsutton.net</wp:comment_author_url>
    <wp:comment_author_IP>64.78.193.116</wp:comment_author_IP>
    <wp:comment_date>2009-08-11 09:50:12</wp:comment_date>
    <wp:comment_date_gmt>2009-08-11 16:50:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good Post.  Seems like managing the engine/scope startup time is the biggest issue when executing python scripts from C#.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>