{"status":"ok","post":{"id":1291,"type":"post","slug":"lightweight-debugging-for-hybrid-cironpython-apps","url":"http:\/\/devhawk.net\/2009\/10\/06\/lightweight-debugging-for-hybrid-cironpython-apps\/","status":"publish","title":"Lightweight Debugging for Hybrid C#\/IronPython Apps","title_plain":"Lightweight Debugging for Hybrid C#\/IronPython Apps","content":"<p><a href=\"http:\/\/www.zazzle.com\/you_had_me_at_dynamic_shirt-235421109922997983\"><img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px\" title=\"designallCAZM93SM\" border=\"0\" alt=\"designallCAZM93SM\" align=\"right\" src=\"http:\/\/s3.amazonaws.com\/devhawk_images\/WindowsLiveWriter\/EmbeddedDebuggingIntroduction_AD18\/designallCAZM93SM_3.jpg\" class=\"grouped_elements\" rel=\"tc-fancybox-group1291\" width=\"240\" height=\"221\" \/><\/a><\/p>\n<p>One of the IronPython scenarios that I\u2019m hearing more and more about recently is for <a href=\"http:\/\/en.wikipedia.org\/wiki\/Polyglot_%28computing%29\">polyglot<\/a> programs. In these scenarios, part of the application is built in IronPython other parts are build in compiled, statically typed languages like C# or Visual Basic. Sometimes, programs are written this way to allow the C# app to access a Python library, like my <a href=\"http:\/\/devhawk.net\/2009\/04\/05\/Pygments+For+Windows+Live+Writer.aspx\">Pygments for WL Writer<\/a> plugin. Other programs want to be customizable by the end user, like <a href=\"http:\/\/blogs.msdn.com\/intellipad\/archive\/2008\/11\/11\/newbie-experience-writing-a-custom-command.aspx\">Intellipad<\/a>. Whatever the reason, I think that the number of these hybrid polyglot programs is going up, which partially explains why the C# team added the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/dd264741(VS.100).aspx\">new dynamic type<\/a> to C# 4.0.<\/p>\n<p>(FYI: the <a href=\"http:\/\/www.zazzle.com\/you_had_me_at_dynamic_shirt-235421109922997983\">You had me at \u201cdynamic\u201d<\/a> shirt above is available for sale in my Zazzle store along with my <a href=\"http:\/\/www.zazzle.com\/architecture_help_dark_t_shirt-235848130425737882\">Architecture Help 5\u00a2<\/a> shirt)<\/p>\n<p>The thing is that if you\u2019re going to build polyglot apps, you\u2019re probably going to want the ability to debug polyglot apps as well. I\u2019ve <a href=\"http:\/\/devhawk.net\/2009\/02\/27\/Writing+An+IronPython+Debugger+Introduction.aspx\">written extensively<\/a> about building a debugger for IronPython. However, <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/\">ipydbg<\/a> uses the CLR debugger under the hood which means you have to have the debugger and the code it\u2019s debugging in separate processes. That\u2019s a huge design burden for building a debuggable polyglot application. Luckily, as of IronPython 2.6, we support Python\u2019s built-in trace debugging capability (aka <a href=\"http:\/\/docs.python.org\/library\/sys.html#sys.settrace\">sys.settrace<\/a>). While you can use this in pure Python apps (like <a href=\"http:\/\/docs.python.org\/library\/pdb.html\">PDB<\/a>), you can also use it polyglot C# (or VB)\/IronPython apps as well. If only someone were to take the time to build a sample and document what he did along the way\u2026<\/p>\n<p>Hey, that sounds like PM work!<\/p>\n<p>Seriously, let me introduce you to the worlds simplest Twitter application: GetThings. The app downloads a list of my tweets via the Twitter API and displays them in a list box. The UI is written in C# while the tweet download code is written in Python. Clearly, this is a pretty brain dead app \u2013 but the point isn\u2019t to build a great Twitter app but rather to show how to use the settrace API from C#.<\/p>\n<p>I\u2019ve stuck the <a href=\"http:\/\/github.com\/devhawk\/LightweightDebuggerDemo\">code up on GitHub<\/a>. If you want to see the basic app in action sans debugging, start with the <a href=\"http:\/\/github.com\/devhawk\/LightweightDebuggerDemo\/commit\/92bd5fc330e2a48ae84fc185f3e397aefb4be1eb\">initial checkin<\/a>. As you can see here, basic C# \/ IronPython integration is pretty trivial. I\u2019m simply creating an engine and a scope, adding the list boxes\u2019 Items property to the scope, and executing the getthings.py file from the disk.<\/p>\n<pre class=\"brush: csharp\">\nprivate void Window_Loaded(object sender, RoutedEventArgs e)\n{\n    ScriptEngine engine = Python.CreateEngine();\n    ScriptScope  scope = engine.CreateScope();\n    scope.SetVariable(\"items\", lbThings.Items);\n    engine.ExecuteFile(\"getthings.py\", scope);\n}\n<\/pre>\n<p>Since GetThings.py is just a text file, the user can modify it to get a list of anything they want \u2013 some other user\u2019s timeline, the public timeline, or even \u2013 gasp! \u2013 something not from Twitter! In fact, as you see below, I\u2019ve actually modified it to pull the tweets from a file on disk so I can avoid hitting the network on every run.<\/p>\n<pre class=\"brush: python\">\nimport clr\nclr.AddReference(\"System.Xml\")\nfrom System.Xml import XmlDocument\n\ndef get_nodes(xml):\n    return xml.SelectNodes(\"statuses\/status\/text\")\n\ndef download_stuff():\n    x = XmlDocument()\n\n    #load from disk to save time in development\n    #x.Load(\"http:\/\/twitter.com\/statuses\/user_timeline\/devhawk.xml\")\n    x.Load(\"devhawk.xml\")\n\n    for n in get_nodes(x):\n        txt = n.InnerText\n        items.Add(txt)\n\ndownload_stuff()\n<\/pre>\n<p>OK, so that\u2019s the basics of the world\u2019s simplest hybrid C#\/IronPython Twitter application. Next up, I\u2019ll add the settrace basics.<\/p>\n","excerpt":"<p>One of the IronPython scenarios that I\u2019m hearing more and more about recently is for polyglot programs. In these scenarios, part of the application is built in IronPython other parts are build in compiled, statically typed languages like C# or Visual Basic. Sometimes, programs are written this way to allow the C# app to access [&hellip;]<\/p>\n","date":"2009-10-06 14:11:38","modified":"2009-10-06 14:11:38","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":279,"slug":"debugger","title":"Debugger","description":"","post_count":23},{"id":291,"slug":"lightweight-debugger","title":"Lightweight Debugger","description":"","post_count":5}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2277,"name":"Rahmi Guldahl","url":"","date":"2009-11-03 12:44:31","content":"<p>Do you have a clue to me regarding why Im not able to use pythons built-in modules like datetime re and so on. Im doing this embedding stuff, and everything works up to the part where I am do &#8220;import re, datetime&#8221; in the python script.<\/p>\n","parent":0},{"id":2278,"name":"Rahmi Guldahl","url":"","date":"2009-12-02 22:48:33","content":"<p>I solved this one, there was a problem with my dependencies, since I had two projects running, the embedding was a class library while the project executing was a windows service project, so obviously I had to import the dependencies in that project as well.<\/p>\n","parent":0}],"attachments":[],"comment_count":2,"comment_status":"closed","custom_fields":{"dasblog_entryid":["3cf0678c-d21a-4569-8d9c-2a3ae2996605"],"dasblog_compressedtitle":["Lightweight+Debugging+For+Hybrid+CIronPython+Apps"],"dasblog_compressedtitleunique":["2009\/10\/06\/Lightweight+Debugging+For+Hybrid+CIronPython+Apps"]}},"previous_url":"http:\/\/devhawk.net\/2009\/09\/28\/ironpython-post-2-6-roadmap\/","next_url":"http:\/\/devhawk.net\/2009\/10\/07\/hybrid-app-debugging-tracebackdelegate-and-settrace\/"}