<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Lightweight Debugging for Hybrid C#/IronPython Apps</title>
  <link>http://devhawk.net/2009/10/06/lightweight-debugging-for-hybrid-cironpython-apps/</link>
  <pubDate>Tue, 06 Oct 2009 14:11:38 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://3cf0678c-d21a-4569-8d9c-2a3ae2996605</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p><a href="http://www.zazzle.com/you_had_me_at_dynamic_shirt-235421109922997983"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="designallCAZM93SM" border="0" alt="designallCAZM93SM" align="right" src="http://s3.amazonaws.com/devhawk_images/WindowsLiveWriter/EmbeddedDebuggingIntroduction_AD18/designallCAZM93SM_3.jpg" width="240" height="221" /></a></p><p>One of the IronPython scenarios that I’m hearing more and more about recently is for <a href="http://en.wikipedia.org/wiki/Polyglot_%28computing%29">polyglot</a> programs. In these scenarios, part of the application is built in IronPython other parts are build in compiled, statically typed languages like C# or Visual Basic. Sometimes, programs are written this way to allow the C# app to access a Python library, like my <a href="http://devhawk.net/2009/04/05/Pygments+For+Windows+Live+Writer.aspx">Pygments for WL Writer</a> plugin. Other programs want to be customizable by the end user, like <a href="http://blogs.msdn.com/intellipad/archive/2008/11/11/newbie-experience-writing-a-custom-command.aspx">Intellipad</a>. Whatever the reason, I think that the number of these hybrid polyglot programs is going up, which partially explains why the C# team added the <a href="http://msdn.microsoft.com/en-us/library/dd264741(VS.100).aspx">new dynamic type</a> to C# 4.0.</p><p>(FYI: the <a href="http://www.zazzle.com/you_had_me_at_dynamic_shirt-235421109922997983">You had me at “dynamic”</a> shirt above is available for sale in my Zazzle store along with my <a href="http://www.zazzle.com/architecture_help_dark_t_shirt-235848130425737882">Architecture Help 5¢</a> shirt)</p><p>The thing is that if you’re going to build polyglot apps, you’re probably going to want the ability to debug polyglot apps as well. I’ve <a href="http://devhawk.net/2009/02/27/Writing+An+IronPython+Debugger+Introduction.aspx">written extensively</a> about building a debugger for IronPython. However, <a href="http://github.com/devhawk/ipydbg/">ipydbg</a> uses the CLR debugger under the hood which means you have to have the debugger and the code it’s debugging in separate processes. That’s a huge design burden for building a debuggable polyglot application. Luckily, as of IronPython 2.6, we support Python’s built-in trace debugging capability (aka <a href="http://docs.python.org/library/sys.html#sys.settrace">sys.settrace</a>). While you can use this in pure Python apps (like <a href="http://docs.python.org/library/pdb.html">PDB</a>), you can also use it polyglot C# (or VB)/IronPython apps as well. If only someone were to take the time to build a sample and document what he did along the way…</p><p>Hey, that sounds like PM work!</p><p>Seriously, let me introduce you to the worlds simplest Twitter application: GetThings. The app downloads a list of my tweets via the Twitter API and displays them in a list box. The UI is written in C# while the tweet download code is written in Python. Clearly, this is a pretty brain dead app – but the point isn’t to build a great Twitter app but rather to show how to use the settrace API from C#.</p><p>I’ve stuck the <a href="http://github.com/devhawk/LightweightDebuggerDemo">code up on GitHub</a>. If you want to see the basic app in action sans debugging, start with the <a href="http://github.com/devhawk/LightweightDebuggerDemo/commit/92bd5fc330e2a48ae84fc185f3e397aefb4be1eb">initial checkin</a>. As you can see here, basic C# / IronPython integration is pretty trivial. I’m simply creating an engine and a scope, adding the list boxes’ Items property to the scope, and executing the getthings.py file from the disk.</p><pre class="brush: csharp">
private void Window_Loaded(object sender, RoutedEventArgs e)
{
    ScriptEngine engine = Python.CreateEngine();
    ScriptScope  scope = engine.CreateScope();
    scope.SetVariable("items", lbThings.Items);
    engine.ExecuteFile("getthings.py", scope);
}
</pre><p>Since GetThings.py is just a text file, the user can modify it to get a list of anything they want – some other user’s timeline, the public timeline, or even – gasp! – something not from Twitter! In fact, as you see below, I’ve actually modified it to pull the tweets from a file on disk so I can avoid hitting the network on every run.</p><pre class="brush: python">
import clr
clr.AddReference("System.Xml")
from System.Xml import XmlDocument

def get_nodes(xml):
    return xml.SelectNodes("statuses/status/text")

def download_stuff():
    x = XmlDocument()

    #load from disk to save time in development
    #x.Load("http://twitter.com/statuses/user_timeline/devhawk.xml")
    x.Load("devhawk.xml")

    for n in get_nodes(x):
        txt = n.InnerText
        items.Add(txt)

download_stuff()
</pre><p>OK, so that’s the basics of the world’s simplest hybrid C#/IronPython Twitter application. Next up, I’ll add the settrace basics.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1291</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2009-10-06 14:11:38</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2009-10-06 14:11:38</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">lightweight-debugging-for-hybrid-cironpython-apps</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <category domain="post_tag" nicename="lightweight-debugger"><![CDATA[Lightweight Debugger]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[3cf0678c-d21a-4569-8d9c-2a3ae2996605]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Lightweight+Debugging+For+Hybrid+CIronPython+Apps]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2009/10/06/Lightweight+Debugging+For+Hybrid+CIronPython+Apps]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2277</wp:comment_id>
    <wp:comment_author><![CDATA[Rahmi Guldahl]]></wp:comment_author>
    <wp:comment_author_email>rahmi.guldahl@gmail.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>84.209.32.145</wp:comment_author_IP>
    <wp:comment_date>2009-11-03 12:44:31</wp:comment_date>
    <wp:comment_date_gmt>2009-11-03 20:44:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Do you have a clue to me regarding why Im not able to use pythons built-in modules like datetime re and so on. Im doing this embedding stuff, and everything works up to the part where I am do "import re, datetime" in the python script.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2278</wp:comment_id>
    <wp:comment_author><![CDATA[Rahmi Guldahl]]></wp:comment_author>
    <wp:comment_author_email>rahmi.guldahl@gmail.com</wp:comment_author_email>
    <wp:comment_author_url></wp:comment_author_url>
    <wp:comment_author_IP>93.124.247.132</wp:comment_author_IP>
    <wp:comment_date>2009-12-02 22:48:33</wp:comment_date>
    <wp:comment_date_gmt>2009-12-03 06:48:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I solved this one, there was a problem with my dependencies, since I had two projects running, the embedding was a class library while the project executing was a windows service project, so obviously I had to import the dependencies in that project as well.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>