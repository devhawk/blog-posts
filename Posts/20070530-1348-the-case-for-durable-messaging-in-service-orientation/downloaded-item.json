{"status":"ok","post":{"id":971,"type":"post","slug":"the-case-for-durable-messaging-in-service-orientation","url":"http:\/\/devhawk.net\/2007\/05\/30\/the-case-for-durable-messaging-in-service-orientation\/","status":"publish","title":"The Case for Durable Messaging in Service Orientation","title_plain":"The Case for Durable Messaging in Service Orientation","content":"<p>Nick <a href=\"http:\/\/blogs.msdn.com\/nickmalik\/archive\/2007\/05\/27\/reliability-in-soa-is-huge.aspx\">jumps on<\/a> the durable messaging bandwagon, pointing out that it\u2019s HUGE. Not just huge, or Huge but HUGE. But for my taste, he could emphasis it even more \u2013 <b><i><u>HUGE<\/u><\/i><\/b> \u2013 and still not capture just how important I think durable messaging is. But while he could use more bolding and italics, he certainly explains the problem well: <\/p>\n<blockquote><p>The reason that [reliability] becomes a problem in SOA is because the basic strength of SOA is the message, and the weakest link is the mechanism used to move the message. If we create a message but we cannot be certain that it gets delivered, then we have created a point of failure that is difficult to surpass.<\/p>\n<\/blockquote>\n<p>Durable messaging solves two fundamental reliability issues: <\/p>\n<ol>\n<li>Transactional Message Send. I want to send a message to some external service as part of a transaction. That is, I only want to send the message if the transaction commits. If the transaction aborts, I don\u2019t want to send the message. The <i><u>only<\/u><\/i> way to do this is to durably record the <i>intent<\/i> to send the message within the transaction and then deliver the message after the transaction successfully commits.<\/li>\n<li>External System Unavailable. I\u2019m sending a message to an external service that is unavailable at the moment. Maybe it\u2019s a temporary network condition, maybe it\u2019s scheduled downtime, maybe the data center burned down, I don\u2019t know. But because the message is durably stored, I can retry long after the sending transaction has committed. Furthermore, I can continue to retry (until success of course) even if my sending system reboots, fails over to a hot standby or has to be restored from backup (assuming you backed up after message was sent).<\/li>\n<\/ol>\n<p>However, Nick points out that reliability has to be considered as part of our design, so do Agility, Flexibility, Scalability, Maintainability, etc. etc. etc. Agility and flexibility require standard transport protocols while scalability and maintainability require intermediation. Unfortunately, at this time there is no standard transport that provides intermediation and durability. Nick says that Microsoft\u2019s \u201cplatform is lacking here\u201d, but I\u2019d say it\u2019s an industry wide problem.  <\/p>\n<p>Nick mentions least three Microsoft technologies that provide some sort of durable messaging \u2013 MSMQ, SSB and BizTalk \u2013 but they\u2019re all proprietary. The market leader in this space is MQ Series, which is also proprietary. WS-RM was <i>supposed<\/i> to be support durable messaging, but <a href=\"http:\/\/devhawk.net\/2007\/02\/20\/Reliably+Beating+A+Dead+Horse.aspx\">doesn\u2019t<\/a>. There is the <a href=\"http:\/\/www.amqp.org\/\">Advanced Message Queuing Protocol group<\/a>, which is defining an open protocol for MQ style systems, but without involvement from any major platform vendors I\u2019m hard pressed to see this go anywhere. Personally, I\u2019d love to see the SSB protocol published, and apparently the SSB wire protocol <a href=\"http:\/\/blogs.msdn.com\/nickmalik\/archive\/2007\/05\/14\/is-it-service-oriented-if-the-message-cannot-be-intermediated.aspx#comments\">was designed<\/a> \u201cto be completely SQL Server agnostic.\u201d Here\u2019s hoping that happens.  <\/p>\n<p>Nick <a href=\"http:\/\/blogs.msdn.com\/nickmalik\/archive\/2007\/05\/30\/system-reliability-requires-message-durability-immature-wcf.aspx\">goes on<\/a> to call WCF \u201cimmature\u201d because of the lack support for message durability. I think that\u2019s somewhat unfair: I think it\u2019s WS-* that\u2019s immature here, not WCF. It\u2019s easy to confuse the two since they\u2019re so joined at the hip in WCF v1. But WCF\u2019s support for MSMQ shows that it <em>can <\/em>handle durable messaging, even though there is no usable standard for durable messaging in the WS-* stable. Over time, I think WCF will evolve to support a larger variety of messaging scenarios \u2013 WS-*, REST, durable messaging, etc. \u2013 out of the box. But for those of us who care deeply about durable messaging, WCF\u2019s current lack of support is pretty frustrating. <\/p>\n","excerpt":"<p>Nick jumps on the durable messaging bandwagon, pointing out that it\u2019s HUGE. Not just huge, or Huge but HUGE. But for my taste, he could emphasis it even more \u2013 HUGE \u2013 and still not capture just how important I think durable messaging is. But while he could use more bolding and italics, he certainly [&hellip;]<\/p>\n","date":"2007-05-30 13:48:10","modified":"2007-05-30 13:48:10","categories":[{"id":177,"slug":"architecture","title":"Architecture","description":"","parent":0,"post_count":296}],"tags":[{"id":320,"slug":"service-broker","title":"Service Broker","description":"","post_count":14},{"id":183,"slug":"soa","title":"SOA","description":"","post_count":94}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["5b32fed0-0b27-45e9-84c7-e504c49d0d96"],"dasblog_compressedtitle":["The+Case+For+Durable+Messaging+In+Service+Orientation"],"dasblog_compressedtitleunique":["2007\/05\/30\/The+Case+For+Durable+Messaging+In+Service+Orientation"]}},"previous_url":"http:\/\/devhawk.net\/2007\/05\/30\/morning-coffee-85\/","next_url":"http:\/\/devhawk.net\/2007\/05\/31\/morning-coffee-86\/"}