<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Concurrency: Next New Major Language Feature?</title>
  <link>http://devhawk.net/2004/12/27/concurrency-next-new-major-language-feature/</link>
  <pubDate>Mon, 27 Dec 2004 13:50:56 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://4ebd6706-a784-4805-8011-ef098248ea63</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Several people have pointed out Herb Sutter's great article on concurrency entitled <a href="http://www.gotw.ca/publications/concurrency-ddj.htm">The Free Lunch Is Over</a>. When I blogged last week about new possible features of <a href="http://devhawk.net/PermaLink.aspx?guid=283ef85e-e61c-46f0-b0a2-87ec14c8bc06">"full-grown" OO languages</a> I mentioned dynamic typing but I didn't think about concurrency. I think Herb is right: "programming languages...will increasingly be forced to deal well with concurrency" as applications get more CPU bound. Maybe I need to take another look at <a href="http://www.research.microsoft.com/Comega/">Comega</a> (or Cw). Cw extends C# in two areas - data typing/querying and concurrency. The concurrency extension used to be called Polyphonic C#, but the name got changed when it merged with Xen/X#. (BTW, there's a new Cw release (v1.0.2) but no specifics as to changes other than no longer needed VS.NET 2003 to be installed in order to use it.)</p><p>Cw adds the idea of asynchronous methods and something called chords - sets of methods with the same method body. The chord method body in only executed when all the associated methods have been called. In the <a href="http://www.research.microsoft.com/Comega/doc/comega_tutorial_buffer.htm">simple buffer tutorial</a>, the buffer class has a synchronous Get method and asynchronous Put method. If you call Get before Put, it blocks until Put is called, then the method body is executed. If you call Put before Get, then the Put call returns immediately (it is async after all) but the call is queued so that when Get is called, the method body is executed immediately. FYI, the Cw docs have a variety of other <a href="http://www.research.microsoft.com/Comega/doc/comega_tutorials_concurrency_extensions.htm">tutorials</a> of async methods and chords. </p><p>BTW, speaking of my post on full grown OO languages...My father <a href="http://devhawk.net/CommentView.aspx?guid=283ef85e-e61c-46f0-b0a2-87ec14c8bc06">suggested</a> that I not jump to conclusions regarding the <a href="http://www.x-develop.com/xdevelop_extend.htm">X-develop</a>'s support for what they <a href="http://www.x-develop.com/xdevelop_extend.htm">term</a> "toy languages or little domain specific languages". In fact, Hans Kratz of <a href="http://www.omnicore.com/">Omnicore</a> (which makes X-develop) had <a href="http://blogs.msdn.com/devhawk/archive/2004/12/21/329215.aspx#329604">this to say</a>:</p><blockquote><p>This comment on our website was not intended to bash DSLs at all. Instead we wanted to make clear that the plugin API in X-develop is powerful enough to allow integrating support for "full-grown" languages without placing arbitrary restrictions on language complexity. </p><p>For a language developer/integrator this is a plus regardless if he wants to integrate support for a DSL or "full-grown" programming language.</p></blockquote><p>Makes sense. Maybe I was just too sensitive to the use of the word "toy" so close in proximity to "DSL". Sorry about that Hans. </p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">511</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2004-12-27 13:50:56</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2004-12-27 13:50:56</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">concurrency-next-new-major-language-feature</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
  <category domain="post_tag" nicename="modelling"><![CDATA[Modelling]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[4ebd6706-a784-4805-8011-ef098248ea63]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Concurrency+Next+New+Major+Language+Feature]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2004/12/27/Concurrency+Next+New+Major+Language+Feature]]></wp:meta_value>
  </wp:postmeta>
</item>