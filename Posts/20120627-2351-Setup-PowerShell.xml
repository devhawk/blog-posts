<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Setup-PowerShell</title>
  <link>http://devhawk.net/?p=2036</link>
  <pubDate>Thu, 28 Jun 2012 06:51:37 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://devhawk.net/?p=2036</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[Working for the Windows team, I setup <em>lots</em> of Windows machines. Kinda the nature of the beast. In order to make this less of a hassle, I've got a variety of scripts to get a freshly paved machine into a state where I can actually <em>use</em> it.

One thing I use quite often is PowerShell. Getting PowerShell in a usable state on a machine means a few of different things. First off, I need to get my script library onto my newly paved machine. For me, this is drop dead easy because Microsoft uses <a href="http://technet.microsoft.com/en-us/library/bb742423.aspx">IntelliMirror</a> – my script library is just there when I log into a new machine with my domain credentials. If you're not using a domain or IntelliMirror, Peter Provost's recent <a href="•%09http:/www.peterprovost.org/blog/2012/04/20/mastering-my-machine-repaves-with-git-and-powershell/">Mastering My Machine Repaves With Git and PowerShell</a> looks like a great approach.

I don't have to do anything to get my scripts onto a new box, but I do still need to configure PowerShell to run those scripts. Out of the box, PowerShell has a <a href="http://msdn.microsoft.com/en-us/library/dd347641.aspx">restricted execution policy</a>. In order to have permission to run scripts, you have to use the <a href="http://technet.microsoft.com/en-us/library/hh849812.aspx">Set-ExecutionPolicy cmdlet</a> while running as admin. I got tired real quick of launching an elevated PowerShell console window and typing "Set-ExecutionPolicy RemoteSigned" over and over, so I put together the original version of my setup-powershell.bat script (which is <a href="https://skydrive.live.com/redir?resid=D9BC809858885A4!1154">up on my SkyDrive</a> along with some of my other PowerShell scripts)
<pre>
%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe -noprofile Set-ExecutionPolicy RemoteSigned -Force 

IF NOT EXIST %SystemRoot%\syswow64\WindowsPowerShell\v1.0\powershell.exe GOTO SkipWow64 

%SystemRoot%\syswow64\WindowsPowerShell\v1.0\powershell.exe -noprofile Set-ExecutionPolicy RemoteSigned -Force 
:SkipWow64 

PAUSE </pre>
<span style="font-family: Times New Roman; font-size: 12pt;">All I'm doing here is running PowerShell from the command line and passing in the simple PowerShell command "Set-ExecutionPolicy RemoteSigned –Force". I'm almost always running x64, so I set the execution policy for the default PowerShell as well as for the <a href="http://en.wikipedia.org/wiki/WoW64">Wow64</a> version of PowerShell if it's available (though I almost never use the x86 version). In order for this to work, I need to run the bat file as an admin, but that's easy to do from Explorer by right-clicking the .bat file and selecting "Run as administrator".
</span>

<span style="font-family: Times New Roman; font-size: 12pt;">So far so good, but it turns out I'm also kinda picky about my <a href="http://en.wikipedia.org/wiki/Win32_console">console window</a> settings. I know, I know - there are other, better console replacements like <a href="http://sourceforge.net/projects/console/">Console2</a> and <a href="http://code.google.com/p/conemu-maximus5/">ConEmu</a>. But frankly I'm used to the Windows console and haven't ever taken the time to really put one of these other console replacements thru its paces. ConEmu has had <a href="http://www.hanselman.com/blog/ConEmuTheWindowsTerminalConsolePromptWeveBeenWaitingFor.aspx">its praises sung</a> by Scott "Ultimate Tool List" Hanselman, so maybe I'll give it a try. In the meantime, there's the issue of Windows console settings.
</span>

<span style="font-family: Times New Roman; font-size: 12pt;">Configuring the Windows console settings is kinda messy. First off, there are the <a href="http://technet.microsoft.com/en-us/library/cc978570">default console settings</a> in the registry. Those are easy enough to set via PowerShell.
</span>
<pre><code>Set-ItemProperty -path HKCU:\Console -name QuickEdit -value 1 </code></pre>
<pre><code>Set-ItemProperty -path HKCU:\Console -name FaceName -value Consolas </code></pre>
<pre><code>Set-ItemProperty -path HKCU:\Console -name FontFamily -value 54 </code></pre>
<pre><code>Set-ItemProperty -path HKCU:\Console -name FontSize -value 0x100000 </code></pre>
<pre><code> #ScreenBufferSize 120 w x 3000 h </code></pre>
<pre><code>Set-ItemProperty -path HKCU:\Console -name ScreenBufferSize 0xbb80078 </code></pre>
<pre><code> #WindowSize 120 w x 40 h </code></pre>
<pre><code>Set-ItemProperty -path HKCU:\Console -name WindowSize 0x280078 </code></pre>
<span style="font-family: Times New Roman; font-size: 12pt;">However, it turn out there are two way to override the default console settings. First, you can add subkeys to the HKCU:\Console registry key to specify additional overriding console settings. Additionally, you can specify console settings directly in the shortcut files (aka the .lnk files from the traditional Start Menu). Frankly, I don't want all this customization of console windows – I want them all to be the same other than the window title and background color, which I set in my $profile script.
</span>

&nbsp;

&nbsp;

<span style="font-family: Times New Roman; font-size: 12pt;">Also, I'm very picky about my console settings – the font, the window size, the buffer size, yada yada yada.
</span>

&nbsp;

&nbsp;

&nbsp;

<span style="font-family: Times New Roman; font-size: 12pt;">There are two aspects to this script:
</span>
<ul>
	<li><span style="font-family: Times New Roman; font-size: 12pt;">Configuring PowerShell's execution policy
</span></li>
	<li><span style="font-family: Times New Roman; font-size: 12pt;">Configuring Windows' built-in Console app settings (font, window size, etc)
</span></li>
</ul>
<span style="font-family: Times New Roman; font-size: 12pt;">For execution policy, I configure both the main PowerShell version as well as the WOW64 version to use <a href="http://technet.microsoft.com/en-us/library/ee176961.aspx"><span style="color: blue; text-decoration: underline;">RemoteSigned execution policy</span></a>
</span>

<span style="font-family: Times New Roman; font-size: 12pt;">For console settings, I set the defaults in HKCU:\Console, remove any app-specific console settings under HKCU:\Console and iterate over the all the .lnk files in the start menu and remove their console data block via <a href="http://msdn.microsoft.com/en-us/library/bb774918.aspx"><span style="color: blue; text-decoration: underline;">IShellLinkDataList::RemoveDataBlock</span></a>. Yes, I realize that there are other, better console replacements out there. But it's easier for me to setup the built-in console app the way I like it when I set the PowerShell execution policy rather than always install a new console app on every fresh install.
</span>

<span style="font-family: Times New Roman; font-size: 12pt;">In order to make this script runnable on a fresh Windows install, I'm using a batch file rather than a PowerShell script. It's easy to right-click on the setup-powershell.bat file and select "Run as administrator" from the context menu. However, the code to configure the console settings is all PowerShell (including embedded C# to interact with the IShellLinkDataList COM object). I want a single file solution but I also want to be able to edit and test my PowerShell separately. So I wrote a little build script that takes my console management scripts, encodes them as base64 and concatenates the scripts into a single bat file.
</span>

<span style="font-family: Times New Roman; font-size: 18pt;"><strong><a name="to-use"></a>To Use
</strong></span>

<span style="font-family: Times New Roman; font-size: 12pt;">Run build.ps1 from a PowerShell console window. The result is setup-powershell.bat without external dependencies that you can run on both x86 and x64 Windows machines.
</span>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">2036</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2012-06-27 23:51:37</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2012-06-28 06:51:37</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">draft</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>