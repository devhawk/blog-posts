{"status":"ok","post":{"id":310,"type":"post","slug":"services-are-neither-applications-nor-components","url":"http:\/\/devhawk.net\/2004\/02\/11\/services-are-neither-applications-nor-components\/","status":"publish","title":"Services Are Neither Applications Nor Components","title_plain":"Services Are Neither Applications Nor Components","content":"<blockquote><p>When you create a system with web services, are your web services components or are they standalone applications? While this might seem like a semantic question, it is actually a very big deal, with a lot of implications in terms of your overall application design, as well as the design of the web services themselves. [<a href=\"http:\/\/www.lhotka.net\/WeBlog\/PermaLink.aspx?guid=251785fe-4ee9-4028-8925-4afee73de668\">Rockford Lhotka<\/a>]<\/p>\n<\/blockquote>\n<p>What&#8217;s funny is that it IS a semantic question, and that&#8217;s what makes it such a big deal. <img src=\"http:\/\/devhawk.net\/wp-includes\/images\/smilies\/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" \/> <\/p>\n<p>Seriously, Rocky argues that web services should be thought of as applications, not components. I completely agree that a web service is &#8220;not a tier in an application&#8221; and that both services and applications have clearly defined boundaries. I also think he&#8217;s on the right track when he writes that many application design principles apply to services. For example, both applications and services have data and business logic layers. But I would call the top layer of a web service the messaging layer, which has only superficial similarities to the presentation layer of an application (i.e. that&#8217;s where input and output with the outside world is handled). <\/p>\n<p>However, services also share similarities with components. Services, like components, don&#8217;t stand alone. They may not trust each other, but they need to work together to some extent in order to accomplish work. This leads to design questions for services that are similar to component design questions. How do I determine which pieces of required functionality go in which services? How much process code is included in the data management services? What&#8217;s the best way to design a service to optimize reuse? <\/p>\n<p>In the end, services are fundamentally different animals than applications or components and I don&#8217;t think we as an industry have enough experience building systems with them yet.<\/p><\/p>\n","excerpt":"<p>When you create a system with web services, are your web services components or are they standalone applications? While this might seem like a semantic question, it is actually a very big deal, with a lot of implications in terms of your overall application design, as well as the design of the web services themselves. [&hellip;]<\/p>\n","date":"2004-02-11 23:37:00","modified":"2004-02-11 23:37:00","categories":[{"id":177,"slug":"architecture","title":"Architecture","description":"","parent":0,"post_count":296}],"tags":[{"id":183,"slug":"soa","title":"SOA","description":"","post_count":94}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["aa3b0461-e6c8-47ac-996e-84185054b746"],"dasblog_compressedtitle":["Services+Are+Neither+Applications+Nor+Components"],"dasblog_compressedtitleunique":["2004\/02\/12\/Services+Are+Neither+Applications+Nor+Components"]}},"previous_url":"http:\/\/devhawk.net\/2004\/02\/11\/allegiance-source\/","next_url":"http:\/\/devhawk.net\/2004\/02\/11\/teched-architecture-track\/"}