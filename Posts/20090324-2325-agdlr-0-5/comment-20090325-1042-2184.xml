<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>2184</wp:comment_id>
  <wp:comment_author><![CDATA[Chris Cavanagh]]></wp:comment_author>
  <wp:comment_author_email>blog@chriscavanagh.com</wp:comment_author_email>
  <wp:comment_author_url>http://chriscavanagh.wordpress.com</wp:comment_author_url>
  <wp:comment_author_IP>65.166.200.179</wp:comment_author_IP>
  <wp:comment_date>2009-03-25 10:42:06</wp:comment_date>
  <wp:comment_date_gmt>2009-03-25 17:42:06</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[Hi Harry - A few questions :) ...

1) Is Chiron restricted to IronRuby/Python or is it extensible somehow? (saw it in DLR sources but ignored so far)
2) When the XapHttpHandler references it, is it forced to go out of process?  Is that the only way to build Silverlight assemblies from within a .NET process, or are there alternatives? (separate appdomain maybe).
3) Related to (2), what kind of performance overhead is there?  Caching or not, I'm curious about any out-of-process hit...

For some projects I'm working on, I've been kicking around the idea of dynamic server-compiled DLR assemblies (but using custom stuff instead of IronRuby/Python).  It'd be interesting to know what options I have :o)

Any suggestions / ideas appreciated!]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>