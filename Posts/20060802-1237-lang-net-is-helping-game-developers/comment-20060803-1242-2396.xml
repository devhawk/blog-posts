<?xml version="1.0" encoding="utf-8"?>
<wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
  <wp:comment_id>2396</wp:comment_id>
  <wp:comment_author><![CDATA[orcmid]]></wp:comment_author>
  <wp:comment_author_email>dennis.hamilton@acm.org</wp:comment_author_email>
  <wp:comment_author_url>http://miser-theory.info/astraendo/pn</wp:comment_author_url>
  <wp:comment_author_IP>216.160.65.145</wp:comment_author_IP>
  <wp:comment_date>2006-08-03 12:42:26</wp:comment_date>
  <wp:comment_date_gmt>2006-08-03 19:42:26</wp:comment_date_gmt>
  <wp:comment_content><![CDATA[You were there?  Dang, I should have worn my "The Architect is In" T-Shirt.  

The more I talked to others, including some people from the BCL Team on Tuesday night, the more that class boxing the way Markus did it seems useful.  I rarely want simple inheritance off of an existing class.  I usually need to come up with a "parallel" class hierarchy that injects extensions/contractions on the interfaces of the original hierarchy.

By the way, that was an awesome symposium.  On Monday there was no moment that I was wishing that I could check my e-mail instead.

PS: Spec# can be done entirely in the IDE, as far as I can tell. That makes it a very rich idea.  I think it will be far more acceptable than formal verification, especially in use on production development projects.  (Think if FX cop but with way fewer need for test cases -- the reduction of test-coverage burden should pay for Spec# use hundreds of times over.)]]></wp:comment_content>
  <wp:comment_approved>1</wp:comment_approved>
  <wp:comment_type></wp:comment_type>
  <wp:comment_parent>0</wp:comment_parent>
  <wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>