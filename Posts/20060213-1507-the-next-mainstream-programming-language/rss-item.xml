<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>The Next Mainstream Programming Language</title>
  <link>http://devhawk.net/2006/02/13/the-next-mainstream-programming-language/</link>
  <pubDate>Mon, 13 Feb 2006 15:07:02 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://ec844f4d-fed3-488c-a16d-96c108bf6a0b</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p><a href="http://terranova.blogs.com/">Terra Nova</a> is not the usual place I go to get news around programming language improvements. But <a href="http://terranova.blogs.com/terra_nova/2006/02/troubles_with_t.html">they linked</a> to a great presentation from <a href="http://www.cs.princeton.edu/~dpw/popl/06/">POPL 2006</a> by Tim Sweeney of <a href="http://epicgames.com/">Epic Games</a>. Tim's talk is called <a href="http://www.cs.princeton.edu/~dpw/popl/06/Tim-POPL.ppt">The Next Mainstream Programming Language: A Game Developer's Perspective</a> and it talks at great length the major issues facing game developers today. As Nate Combs at Terra Nova remarked, most of these issues are not specific to the game industry, but will likely be seen there first.</p><p>Most interesting (to me) was the issue of concurrency. Tim uses <a href="http://www.xbox.com/en-US/games/g/gearsofwar/">Gears of War</a> for all his examples. Of course, Gears of War is an Xbox 360 exclusive. Xbox 360, as many of you probably know, has three hyper-threaded CPUs for a total capactiy of six hardware threads. Herb Sutter talked about this in his DDJ article <a href="http://www.gotw.ca/publications/concurrency-ddj.htm">The Free Lunch Is Over</a>. Tim points out - rightly so - that "C++ is ill-equipped for concurrency". C#, Java and VB aren't much better. Tim conculdes that we'll need a combination of effects-free non-imperative code (which can safely be executed in parallel) and software transactional memory (to manage parallel modifications to system state). 
</p><p>Tim also touches on topics of performance, modularity and reliability. And he has an eye on the practical at all times. For example, he points out that even a four times performance overhead of software transactional memory is acceptable, if it allows the code to scale to many threads. 
</p><p>Anyway, it's a great read so check it out. Also, MS Research has a <a href="http://www.cs.brown.edu/~mph/sxm.htm">software transactional memory project</a> you can download if you're so inclined. </p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">688</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2006-02-13 15:07:02</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2006-02-13 15:07:02</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">the-next-mainstream-programming-language</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="lanugages"><![CDATA[Lanugages]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[ec844f4d-fed3-488c-a16d-96c108bf6a0b]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[The+Next+Mainstream+Programming+Language]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2006/02/13/The+Next+Mainstream+Programming+Language]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:comment_id>2896</wp:comment_id>
    <wp:comment_author><![CDATA[Matt Dotson]]></wp:comment_author>
    <wp:comment_author_email></wp:comment_author_email>
    <wp:comment_author_url>http://blogs.msdn.com/mattdotson/</wp:comment_author_url>
    <wp:comment_author_IP>68.235.202.147</wp:comment_author_IP>
    <wp:comment_date>2006-02-21 21:42:52</wp:comment_date>
    <wp:comment_date_gmt>2006-02-22 05:42:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting stuff.  I wonder if it would catch on with the "write to the metal" approach of most game devs.  I could see this sort of thing catching on much better with windows devs where abstraction is everywhere.  I'd like to see this built into existing languages with language extensions to C# (or others) enabled by the phoenix compiler project?

Even if the languages were better equipped to deal with concurrency, we are stuck with so many libraries that don't do concurrency well.  How long will we be bound by windows' single UI thread concept, which is unfortunately not resolved with WPF?

Finally, I'm excited to see a bunch of C++ people saying that the future is garbage collected!!  It makes sense that once you get a bunch of hardware threads (they talked of 20+ hardware threads), giving up 5% processing power would mean the gc could run all of the time and not add any latency to the apps.  With our single threaded apps now, the whole app has to freeze while GC takes place.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type></wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>