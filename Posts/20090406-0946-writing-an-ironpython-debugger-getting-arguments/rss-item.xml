<?xml version="1.0" encoding="utf-8"?>
<item>
  <title>Writing an IronPython Debugger: Getting Arguments</title>
  <link>http://devhawk.net/2009/04/06/writing-an-ironpython-debugger-getting-arguments/</link>
  <pubDate>Mon, 06 Apr 2009 09:46:01 +0000</pubDate>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">devhawk</dc:creator>
  <guid isPermaLink="false">http://635ad93b-7f23-4c66-9226-f7449f8229d6</guid>
  <description></description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>It’s a small update, but I added support for displaying method arguments along side <a href="http://devhawk.net/2009/03/31/Writing+An+IronPython+Debugger+Displaying+Values.aspx">the local variables</a>. As I mentioned in that post, breaking out the CorValue extraction and display code into a shared function was a good idea – adding support for getting arguments was trivial since I could reuse that code.</p><p>Because there’s no hierarchy of scopes to deal with and the names are in the metadata instead of debug symbols, getting arguments is much easier than getting local variables. </p><pre class="brush: python">
def get_arguments(frame): 
    mi = frame.GetMethodInfo() 
    for pi in mi.GetParameters(): 
      if pi.Position == 0: continue 
      arg = frame.GetArgument(pi.Position - 1) 
      yield pi.Name, arg
</pre><p>You’ll notice that I’m yielding the arguments as a tuple of the name and value, the same as get_locals yields. I did refactor <a href="http://github.com/devhawk/ipydbg/blob/4495bbcd48e9593dd3a148d0dafb82646cf091c0/ipydbg.py#L146">get_locals</a> a bit – there’s no longer an argument to skip hidden variables anymore (though get_locals still <a href="http://devhawk.net/2009/03/25/Writing+An+IronPython+Debugger+Getting+Local+Variables.aspx">skips dynamic call sites caches</a> as it did before). Now, it’s up to the the caller of get_arguments and get_locals to filter hidden variables as they see fit. </p><p>Because get_locals and get_arguments yield the same types, I was able to factor the code to print a value and loop through the collection of values into separate local functions.</p><pre class="brush: python">
@inputcmd(_inputcmds, ConsoleKey.L)  
def _input_locals_cmd(self, keyinfo):  
  def print_value(name, value):  
    display, type_name = display_value(extract_value(value))  
    with CC.Magenta: print "  ", name,   
    print display,  
    with CC.Green: print type_name  
      
  def print_all_values(f, show_hidden):  
      count = 0  
      for name,value in f(self.active_thread.ActiveFrame):  
        if name.startswith("$") and not show_hidden:  
          continue  
        print_value(name, value)  
        count+=1          
      return count  
        
  print "nLocals"  
  show_hidden =  
    (keyinfo.Modifiers &amp; ConsoleModifiers.Alt) == ConsoleModifiers.Alt  
  count = print_all_values(get_locals, show_hidden)  
  count += print_all_values(get_arguments, show_hidden)  

  if count == 0:  
      with CC.Magenta: print "  No Locals Found"
</pre><p>I really like the local functions feature of Python. In C#, you can define an anonymous delegate using the lambda syntax. But for a scenario like this, I like local functions better. However, I do like C#’s support for statement lambdas – Python only supports expression lambdas. So while I like local functions better in this scenario (because I’m using the method more than once) in something like an event handler, I like the statement lambda syntax better. </p><p>As usual, the <a href="http://github.com/devhawk/ipydbg/commit/4495bbcd48e9593dd3a148d0dafb82646cf091c0">latest version of ipydbg</a> is up on GitHub.</p>]]></content:encoded>
  <excerpt:encoded xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"><![CDATA[]]></excerpt:encoded>
  <wp:post_id xmlns:wp="http://wordpress.org/export/1.2/">1244</wp:post_id>
  <wp:post_date xmlns:wp="http://wordpress.org/export/1.2/">2009-04-06 09:46:01</wp:post_date>
  <wp:post_date_gmt xmlns:wp="http://wordpress.org/export/1.2/">2009-04-06 09:46:01</wp:post_date_gmt>
  <wp:comment_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:comment_status>
  <wp:ping_status xmlns:wp="http://wordpress.org/export/1.2/">open</wp:ping_status>
  <wp:post_name xmlns:wp="http://wordpress.org/export/1.2/">writing-an-ironpython-debugger-getting-arguments</wp:post_name>
  <wp:status xmlns:wp="http://wordpress.org/export/1.2/">publish</wp:status>
  <wp:post_parent xmlns:wp="http://wordpress.org/export/1.2/">0</wp:post_parent>
  <wp:menu_order xmlns:wp="http://wordpress.org/export/1.2/">0</wp:menu_order>
  <wp:post_type xmlns:wp="http://wordpress.org/export/1.2/">post</wp:post_type>
  <wp:post_password xmlns:wp="http://wordpress.org/export/1.2/"></wp:post_password>
  <wp:is_sticky xmlns:wp="http://wordpress.org/export/1.2/">0</wp:is_sticky>
  <category domain="post_tag" nicename="debugger"><![CDATA[Debugger]]></category>
  <category domain="category" nicename="ironpython"><![CDATA[IronPython]]></category>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_entryid</wp:meta_key>
    <wp:meta_value><![CDATA[635ad93b-7f23-4c66-9226-f7449f8229d6]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitle</wp:meta_key>
    <wp:meta_value><![CDATA[Writing+An+IronPython+Debugger+Getting+Arguments]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta xmlns:wp="http://wordpress.org/export/1.2/">
    <wp:meta_key>dasblog_compressedtitleunique</wp:meta_key>
    <wp:meta_value><![CDATA[2009/04/06/Writing+An+IronPython+Debugger+Getting+Arguments]]></wp:meta_value>
  </wp:postmeta>
</item>