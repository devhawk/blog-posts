{"status":"ok","post":{"id":1244,"type":"post","slug":"writing-an-ironpython-debugger-getting-arguments","url":"http:\/\/devhawk.net\/2009\/04\/06\/writing-an-ironpython-debugger-getting-arguments\/","status":"publish","title":"Writing an IronPython Debugger: Getting Arguments","title_plain":"Writing an IronPython Debugger: Getting Arguments","content":"<p>It\u2019s a small update, but I added support for displaying method arguments along side <a href=\"http:\/\/devhawk.net\/2009\/03\/31\/Writing+An+IronPython+Debugger+Displaying+Values.aspx\">the local variables<\/a>. As I mentioned in that post, breaking out the CorValue extraction and display code into a shared function was a good idea \u2013 adding support for getting arguments was trivial since I could reuse that code.<\/p>\n<p>Because there\u2019s no hierarchy of scopes to deal with and the names are in the metadata instead of debug symbols, getting arguments is much easier than getting local variables. <\/p>\n<pre class=\"brush: python\">\ndef get_arguments(frame): \n    mi = frame.GetMethodInfo() \n    for pi in mi.GetParameters(): \n      if pi.Position == 0: continue \n      arg = frame.GetArgument(pi.Position - 1) \n      yield pi.Name, arg\n<\/pre>\n<p>You\u2019ll notice that I\u2019m yielding the arguments as a tuple of the name and value, the same as get_locals yields. I did refactor <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/4495bbcd48e9593dd3a148d0dafb82646cf091c0\/ipydbg.py#L146\">get_locals<\/a> a bit \u2013 there\u2019s no longer an argument to skip hidden variables anymore (though get_locals still <a href=\"http:\/\/devhawk.net\/2009\/03\/25\/Writing+An+IronPython+Debugger+Getting+Local+Variables.aspx\">skips dynamic call sites caches<\/a> as it did before). Now, it\u2019s up to the the caller of get_arguments and get_locals to filter hidden variables as they see fit. <\/p>\n<p>Because get_locals and get_arguments yield the same types, I was able to factor the code to print a value and loop through the collection of values into separate local functions.<\/p>\n<pre class=\"brush: python\">\n@inputcmd(_inputcmds, ConsoleKey.L)  \ndef _input_locals_cmd(self, keyinfo):  \n  def print_value(name, value):  \n    display, type_name = display_value(extract_value(value))  \n    with CC.Magenta: print \"  \", name,   \n    print display,  \n    with CC.Green: print type_name  \n      \n  def print_all_values(f, show_hidden):  \n      count = 0  \n      for name,value in f(self.active_thread.ActiveFrame):  \n        if name.startswith(\"$\") and not show_hidden:  \n          continue  \n        print_value(name, value)  \n        count+=1          \n      return count  \n        \n  print \"nLocals\"  \n  show_hidden =  \n    (keyinfo.Modifiers &amp; ConsoleModifiers.Alt) == ConsoleModifiers.Alt  \n  count = print_all_values(get_locals, show_hidden)  \n  count += print_all_values(get_arguments, show_hidden)  \n\n  if count == 0:  \n      with CC.Magenta: print \"  No Locals Found\"\n<\/pre>\n<p>I really like the local functions feature of Python. In C#, you can define an anonymous delegate using the lambda syntax. But for a scenario like this, I like local functions better. However, I do like C#\u2019s support for statement lambdas \u2013 Python only supports expression lambdas. So while I like local functions better in this scenario (because I\u2019m using the method more than once) in something like an event handler, I like the statement lambda syntax better. <\/p>\n<p>As usual, the <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/commit\/4495bbcd48e9593dd3a148d0dafb82646cf091c0\">latest version of ipydbg<\/a> is up on GitHub.<\/p>\n","excerpt":"<p>It\u2019s a small update, but I added support for displaying method arguments along side the local variables. As I mentioned in that post, breaking out the CorValue extraction and display code into a shared function was a good idea \u2013 adding support for getting arguments was trivial since I could reuse that code. Because there\u2019s [&hellip;]<\/p>\n","date":"2009-04-06 09:46:01","modified":"2009-04-06 09:46:01","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":279,"slug":"debugger","title":"Debugger","description":"","post_count":23}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[],"attachments":[],"comment_count":0,"comment_status":"closed","custom_fields":{"dasblog_entryid":["635ad93b-7f23-4c66-9226-f7449f8229d6"],"dasblog_compressedtitle":["Writing+An+IronPython+Debugger+Getting+Arguments"],"dasblog_compressedtitleunique":["2009\/04\/06\/Writing+An+IronPython+Debugger+Getting+Arguments"]}},"previous_url":"http:\/\/devhawk.net\/2009\/04\/05\/pygments-for-windows-live-writer\/","next_url":"http:\/\/devhawk.net\/2009\/04\/06\/writing-an-ironpython-debugger-repl-console\/"}