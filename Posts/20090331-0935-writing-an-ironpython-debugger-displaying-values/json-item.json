{"status":"ok","post":{"id":1240,"type":"post","slug":"writing-an-ironpython-debugger-displaying-values","url":"http:\/\/devhawk.net\/2009\/03\/31\/writing-an-ironpython-debugger-displaying-values\/","status":"publish","title":"Writing an IronPython Debugger: Displaying Values","title_plain":"Writing an IronPython Debugger: Displaying Values","content":"<p>Now that I can <a href=\"http:\/\/devhawk.net\/2009\/03\/25\/Writing+An+IronPython+Debugger+Getting+Local+Variables.aspx\">get the local variables<\/a> for a given frame, I need to display them in the console. Eventually, I\u2019d like to provide the ability to update the local variables as well, but you gotta crawl before you can run. Luckily, the debugger API is consistent about using same COM interfaces \u2013 wrapped by the managed <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/b53ac99f95e0018db782abd52efea8e1fa56abd8\/CorDebug\/CorDebug\/Value.cs#L17\">CorValue<\/a> class \u2013 to represent all data values, including local variables, function arguments and object fields. So the work I do now to display CorValues in the console will be reusable in other contexts down the road.<\/p>\n<p>While the debugger API is consistent about how it represents values in the target process, the API it uses is very complicated. The primary COM interface for accessing values is <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms232466.aspx\">ICorDebugValue<\/a>, but it has <em>eight<\/em> siblings: <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms230256.aspx\">ICorDebugReferenceValue<\/a>, <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms231264.aspx\">ICorDebugHandleValue<\/a>, <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms232482.aspx\">ICorDebugStringValue<\/a>, <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms231878.aspx\">ICorDebugObjectValue<\/a>, <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms232458.aspx\">ICorDebugGenericValue<\/a>, <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms230800.aspx\">ICorDebugBoxValue<\/a>, <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms232916.aspx\">ICorDebugArrayValue<\/a>, <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms230290.aspx\">ICorDebugHeapValue<\/a>. All those COM interfaces are represented in managed code by CorValue and it\u2019s subclasses. <\/p>\n<p>Furthermore, confusingly ICorDebugValues have both a <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/9dd12dadb79469ceac57b84b8adb1b0b531337c4\/CorDebug\/CorDebug\/Value.cs#L26\">Type<\/a> and an <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/9dd12dadb79469ceac57b84b8adb1b0b531337c4\/CorDebug\/CorDebug\/Value.cs#L37\">ExactType<\/a>. ExactType is what .NET developers typically think of as the type, aka the CLR type. Well, the <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/ms231926.aspx\">debugger API\u2019s representation<\/a> of the CLR type at any rate. You can retrieve the value\u2019s metadata as a <a href=\"http:\/\/msdn.microsoft.com\/library\/system.type.aspx\">System.Type<\/a> compatible object via value.ExactType.Class.GetTypeInfo().CorValue\u2019s Type property, on the other hand, represents the object\u2019s primitive or <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/9dd12dadb79469ceac57b84b8adb1b0b531337c4\/CorDebug\/CorDebug\/NativeApi\/ICorDebugWrappers.cs#L161\">element type<\/a>. For example, instances of .NET classes have an element Type of ELEMENT_TYPE_CLASS. There are a collection of primitive types (boolean, char, ints of various signage and size, floats of various size) as well as types you wouldn\u2019t call primitive but that the runtime has specific knowledge of (string, array and value types &#8211; aka structs in C# terminology).<\/p>\n<p>If you\u2019re confused by all that, don\u2019t worry so am I. Honestly, I\u2019ve re-written this code several times, each time understanding the API just a bit better. Whatever the *right* way to use the interfaces, I\u2019m sure I don\u2019t know it. For my first cut at this, I essentially ported MDbg\u2019s high level CorValue API \u2013 aka MDbgValue::InternalGetValue if you\u2019re looking at the MDbg source code \u2013 over to Python. Along the way, I\u2019ve improved on that code as I\u2019ll describe below. <\/p>\n<p>A given CorValue may be a primitive value like an int or it may be a reference to or a boxed version of some other CorValue object. So in order to print the CorValue, you have to go thru a series of attempts to dereference and unbox until you get to the \u201creal\u201d underlying CorValue object. From there, converting the value to a string I can print depends on the value\u2019s element type. For primitive types like ints and floats, you can call <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/b53ac99f95e0018db782abd52efea8e1fa56abd8\/CorDebug\/CorDebug\/Value.cs#L105\">CastToGenericValue<\/a> to get a <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/b53ac99f95e0018db782abd52efea8e1fa56abd8\/CorDebug\/CorDebug\/Value.cs#L320\">CorGenericValue<\/a> \u201cview\u201d of the same CorValue object [1]. A CorGenericValue can read and write the raw bytes from memory in the target process of the value. The <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/b53ac99f95e0018db782abd52efea8e1fa56abd8\/CorDebug\/CorDebug\/Value.cs#L473\">GetValue<\/a> method reads the data from target process then does an unsafe cast to appropriate managed type. For example, an ELEMENT_TYPE_R4 CorValue gets cast into a <a href=\"http:\/\/msdn.microsoft.com\/library\/system.single.aspx\">System.Single<\/a>. For CorValue strings, I call <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/b53ac99f95e0018db782abd52efea8e1fa56abd8\/CorDebug\/CorDebug\/Value.cs#L95\">CastToStringValue<\/a> and then access the <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/b53ac99f95e0018db782abd52efea8e1fa56abd8\/CorDebug\/CorDebug\/Value.cs#L244\">String property<\/a>. For classes, value types and objects, there\u2019s no simple or standard approach to retrieving the data, so for now I return the result of calling <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/b53ac99f95e0018db782abd52efea8e1fa56abd8\/CorDebug\/CorDebug\/Value.cs#L100\">CastToObjectValue<\/a>. Eventually, I\u2019ll want to provide a mechanism to read the specific fields of a class or value type.<\/p>\n<p>Unfortunately, the mechanism above to read primitive types doesn\u2019t work with IronPython. GetValue needs to know the correct element type in order to do the unsafe cast. For value types (aka any struct other than the basic primitives), GetValue will return a data as a byte array. The problem is that when you box a primitive, the original element types gets overwritten by ELEMENT_TYPE_VALUETYPE. You can\u2019t get the original element type back, even after unboxing. So for boxed primitives, you can only retrieve the data as a raw byte array or as a CorObjectValue, neither of which is very useful.<\/p>\n<p>Luckily, I was able to work around this. Under the hood, GetValue calls <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/b53ac99f95e0018db782abd52efea8e1fa56abd8\/CorDebug\/CorDebug\/Value.cs#L497\">UnsafeGetValueAsType<\/a> to do the actual work of reading the data from the target process and casting it to the right managed type. UnsafeGetValueAsType It accepts the an element type value as a method parameter. If your know the right element type value, you could call UnsafeGetValueAsType directly if instead of going thru GetValue. While boxing overwrites the original element type value, an unboxed CorValue still has the CLR type metadata available. So I was able to map CLR Types to element types (e.g. System.Single \u2013&gt; ELEMENT_TYPE_R4) in order to retrieve the underlying value of boxed primitive types.<\/p>\n<pre class=\"brush: python\">\n_type_map = { 'System.Boolean': ELEMENT_TYPE_BOOLEAN,    \n  'System.SByte'  : ELEMENT_TYPE_I1, 'System.Byte'   : ELEMENT_TYPE_U1,    \n  'System.Int16'  : ELEMENT_TYPE_I2, 'System.UInt16' : ELEMENT_TYPE_U2,    \n  'System.Int32'  : ELEMENT_TYPE_I4, 'System.UInt32' : ELEMENT_TYPE_U4,    \n  'System.IntPtr' : ELEMENT_TYPE_I,  'System.UIntPtr': ELEMENT_TYPE_U,   \n  'System.Int64'  : ELEMENT_TYPE_I8, 'System.UInt64' : ELEMENT_TYPE_U8,    \n  'System.Single' : ELEMENT_TYPE_R4, 'System.Double' : ELEMENT_TYPE_R8,    \n  'System.Char'   : ELEMENT_TYPE_CHAR, }    \n      \n_generic_element_types = _type_map.values()    \n\nclass NullCorValue(object):   \n  def __init__(self, typename):   \n    self.typename = typename   \n\ndef extract_value(value):   \n    rv = value.CastToReferenceValue()   \n    if rv != None:   \n      if rv.IsNull:    \n        typename = rv.ExactType.Class.GetTypeInfo().Name   \n        return NullCorValue(typename)   \n      return extract_value(rv.Dereference())   \n    bv = value.CastToBoxValue()   \n    if bv != None:   \n      return extract_value(bv.GetObject())    \n\n    if value.Type in _generic_element_types:   \n      return value.CastToGenericValue().GetValue()   \n    elif value.Type == ELEMENT_TYPE_STRING:   \n      return value.CastToStringValue().String   \n    elif value.Type == ELEMENT_TYPE_VALUETYPE:   \n      typename = value.ExactType.Class.GetTypeInfo().Name    \n      if typename in _type_map:   \n        gv = value.CastToGenericValue()   \n        return gv.UnsafeGetValueAsType(_type_map[typename])   \n      else:   \n        return value.CastToObjectValue()   \n    elif value.Type in [ELEMENT_TYPE_CLASS, ELEMENT_TYPE_OBJECT]:   \n      return value.CastToObjectValue()   \n    else:   \n      msg = \"CorValue type %s not supported\" % str(value.Type)     \n      raise (Exception, msg)\n<\/pre>\n<p>It\u2019s kinda ugly code and I\u2019m thinking that at least some of really belongs in the CorValue C# classes rather than in ipydbg. However, I\u2019m not that interested in doing the significant refactoring it would take to make the CorValue API developer-friendly, so I did it here.<\/p>\n<p>One thing to note that I didn\u2019t cover earlier is the NullCorValue object. For reference values, there\u2019s a IsNull property that may be set. If it is set, I need a mechanism to indicate the null value, but also includes the type information. So I created a custom type that can store the type name to represent null. Again, something that should be a part of the CorValue API.<\/p>\n<p>Once I have my extracted value, I need to display it in the console. This is much simpler than the extracting the value. As I wrote above, I\u2019m not making any attempt to print a real representation for CorObjectValues. I could look at making a call ToString call to get something useful, but that requires invoking a function in the target process and I haven\u2019t gotten that far with ipydbg yet. So I just print \u201c&lt;\u2026&gt;\u201d if it isn\u2019t a string, primitive or null value.<\/p>\n<pre class=\"brush: python\">\ndef display_value(value):     \n  if type(value) == str:     \n    return (('\"%s\"' % value), 'System.String')     \n  elif type(value) == CorObjectValue:     \n    return (\"&lt;...&gt;\", value.ExactType.Class.GetTypeInfo().FullName)     \n  elif type(value) == NullCorValue:     \n    return (\"&lt;None&gt;\", value.typename)     \n  else:     \n    return (str(value), value.GetType().FullName)\n<\/pre>\n<p>Now all I need is to iterate thru the list of local variables and call extract_value and display_value on each in turn and print the results. I won\u2019t reproduce that code here, but you <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/9dd12dadb79469ceac57b84b8adb1b0b531337c4\/ipydbg.py#L325\">can see it<\/a> in the <a href=\"http:\/\/github.com\/devhawk\/ipydbg\/tree\/9dd12dadb79469ceac57b84b8adb1b0b531337c4\">ipydbg project source on GitHub<\/a>.<\/p>\n<p>I\u2019m happy with what I\u2019ve gotten working (it took several days of banging my head against the proverbial wall to get it this far) but there\u2019s still room for improvement. First, I\u2019d like to be able to call ToString to get a class-specific generic representation as I described above. Second, I need a way to display the fields of a CorObejctValue object. It\u2019s just a combination of metadata reading and CorObjectValue::<a href=\"http:\/\/github.com\/devhawk\/ipydbg\/blob\/9dd12dadb79469ceac57b84b8adb1b0b531337c4\/CorDebug\/CorDebug\/Value.cs#L292\">GetFieldValue<\/a>, but that code won\u2019t write itself. Finally, there are other Python primitives &#8211; like list, dictionary and tuple \u2013 that ipydbg should have specific knowledge of and be able to display without requiring the user to drill into the member variables and the like.<\/p>\n<hr \/>\n<p>[1] While the CorValue API does certain things very well, I wish it did a better job abstracting away the existence of the various ICorDebugValue interfaces. Hence the need for all the calls to CastToWhatever().<\/p>\n","excerpt":"<p>Now that I can get the local variables for a given frame, I need to display them in the console. Eventually, I\u2019d like to provide the ability to update the local variables as well, but you gotta crawl before you can run. Luckily, the debugger API is consistent about using same COM interfaces \u2013 wrapped [&hellip;]<\/p>\n","date":"2009-03-31 09:35:16","modified":"2009-03-31 09:35:16","categories":[{"id":252,"slug":"ironpython","title":"IronPython","description":"","parent":0,"post_count":99}],"tags":[{"id":279,"slug":"debugger","title":"Debugger","description":"","post_count":23}],"author":{"id":1,"slug":"admin","name":"DevHawk","first_name":"Harry","last_name":"Pierson","nickname":"DevHawk","url":"","description":""},"comments":[{"id":2187,"name":"Steve Shaw","url":"http:\/\/toolmakersteve.com","date":"2009-04-11 23:50:43","content":"<p>Hmm, starting to look like you&#8217;re having to deal with a lot of complexity by working directly with CorAPI. (I know you decided in your first post to go that route&#8230;)<\/p>\n<p>I&#8217;m thinking that MdbgEng \/ MdbgValue might be a lot simpler to use.<br \/>\nNot that I know anything about it yet&#8230;<\/p>\n<p>Based on what you&#8217;ve learned by all your poking around, any thoughts on what it might be like to duplicate ipydbg, but building on MdbgEng classes instead of CorAPI?<\/p>\n<p>~Steve<\/p>\n","parent":0}],"attachments":[],"comment_count":1,"comment_status":"closed","custom_fields":{"dasblog_entryid":["d0ef8942-3312-4d91-bd1e-63c80de51433"],"dasblog_compressedtitle":["Writing+An+IronPython+Debugger+Displaying+Values"],"dasblog_compressedtitleunique":["2009\/03\/31\/Writing+An+IronPython+Debugger+Displaying+Values"]}},"previous_url":"http:\/\/devhawk.net\/2009\/03\/27\/ironpython-2-6-alpha-1\/","next_url":"http:\/\/devhawk.net\/2009\/03\/31\/devhawk-on-codecast\/"}